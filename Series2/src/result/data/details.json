{
  "time_start": "21:39:56",
  "time_end": "22:17:20",
  "total_duration": "0h 37m 24s",
  "loc_total": 0,
  "loc_duplicate": 25970,
  "total_clones": 6109,
  "clones": [
    {
      "path": "hsqldb/src/org/hsqldb/persist/TextFileReader.java",
      "loc_duplicate": 28,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 117,
          "line_end": 119,
          "content": "wasNormal = true;<br/>                        complete  = wasCR;<br/>                        wasCR     = false;"
        },
        {
          "total_lines": 3,
          "line_start": 106,
          "line_end": 108,
          "content": "dataFile.write(TextFileSettings.BYTES_LINE_SEP, 0,<br/>                                       TextFileSettings.BYTES_LINE_SEP.length);<br/>                        buffer.write(TextFileSettings.BYTES_LINE_SEP);"
        },
        {
          "total_lines": 3,
          "line_start": 273,
          "line_end": 275,
          "content": "break;<br/><br/>                    case TextFileSettings.LF_CHAR :"
        },
        {
          "total_lines": 3,
          "line_start": 135,
          "line_end": 137,
          "content": "wasNormal = true;<br/>                        complete  = wasCR;<br/>                        wasCR     = false;"
        },
        {
          "total_lines": 3,
          "line_start": 199,
          "line_end": 201,
          "content": "dataFile.write(TextFileSettings.BYTES_LINE_SEP, 0,<br/>                                       TextFileSettings.BYTES_LINE_SEP.length);<br/>                        buffer.write(TextFileSettings.BYTES_LINE_SEP);"
        },
        {
          "total_lines": 3,
          "line_start": 128,
          "line_end": 130,
          "content": "break;<br/><br/>                    case TextFileSettings.LF_CHAR :"
        },
        {
          "total_lines": 3,
          "line_start": 285,
          "line_end": 287,
          "content": "wasCR = false;<br/><br/>                            ((RowInputText) rowIn).skippedLine();"
        },
        {
          "total_lines": 3,
          "line_start": 296,
          "line_end": 298,
          "content": "wasCR = false;<br/><br/>                            ((RowInputText) rowIn).skippedLine();"
        },
        {
          "total_lines": 2,
          "line_start": 117,
          "line_end": 118,
          "content": "wasNormal = true;<br/>                        complete  = wasCR;"
        },
        {
          "total_lines": 2,
          "line_start": 135,
          "line_end": 136,
          "content": "wasNormal = true;<br/>                        complete  = wasCR;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/CodeSwitcher.java",
      "loc_duplicate": 10,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 368,
          "line_end": 372,
          "content": "working = true;<br/><br/>                            v.insertElementAt(\"/*\", ++i);<br/><br/>                            switchoff = true;"
        },
        {
          "total_lines": 5,
          "line_start": 394,
          "line_end": 398,
          "content": "working = true;<br/><br/>                            v.insertElementAt(\"/*\", ++i);<br/><br/>                            switchoff = true;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationMain.java",
      "loc_duplicate": 610,
      "clones": [
          {
          "total_lines": 34,
          "line_start": 3170,
          "line_end": 3203,
          "content": "sequence = (NumberSequence) it.next();<br/><br/>            if (!session.getGrantee().isAccessible(sequence)) {<br/>                continue;<br/>            }<br/><br/>            row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());<br/>            row[next_value]                 = String.valueOf(sequence.peek());<br/><br/>            t.insertSys(session, store, row);"
        },
        {
          "total_lines": 34,
          "line_start": 3275,
          "line_end": 3308,
          "content": "sequence = (NumberSequence) it.next();<br/><br/>            if (!session.getGrantee().isAccessible(sequence)) {<br/>                continue;<br/>            }<br/><br/>            row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());<br/>            row[next_value]                 = String.valueOf(sequence.peek());<br/><br/>            t.insertSys(session, store, row);"
        },
        {
          "total_lines": 32,
          "line_start": 3170,
          "line_end": 3201,
          "content": "sequence = (NumberSequence) it.next();<br/><br/>            if (!session.getGrantee().isAccessible(sequence)) {<br/>                continue;<br/>            }<br/><br/>            row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());<br/>            row[next_value]                 = String.valueOf(sequence.peek());"
        },
        {
          "total_lines": 32,
          "line_start": 3275,
          "line_end": 3306,
          "content": "sequence = (NumberSequence) it.next();<br/><br/>            if (!session.getGrantee().isAccessible(sequence)) {<br/>                continue;<br/>            }<br/><br/>            row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());<br/>            row[next_value]                 = String.valueOf(sequence.peek());"
        },
        {
          "total_lines": 28,
          "line_start": 3170,
          "line_end": 3197,
          "content": "sequence = (NumberSequence) it.next();<br/><br/>            if (!session.getGrantee().isAccessible(sequence)) {<br/>                continue;<br/>            }<br/><br/>            row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];"
        },
        {
          "total_lines": 28,
          "line_start": 3275,
          "line_end": 3302,
          "content": "sequence = (NumberSequence) it.next();<br/><br/>            if (!session.getGrantee().isAccessible(sequence)) {<br/>                continue;<br/>            }<br/><br/>            row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];"
        },
        {
          "total_lines": 28,
          "line_start": 3172,
          "line_end": 3199,
          "content": "if (!session.getGrantee().isAccessible(sequence)) {<br/>                continue;<br/>            }<br/><br/>            row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];"
        },
        {
          "total_lines": 28,
          "line_start": 3277,
          "line_end": 3304,
          "content": "if (!session.getGrantee().isAccessible(sequence)) {<br/>                continue;<br/>            }<br/><br/>            row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];"
        },
        {
          "total_lines": 25,
          "line_start": 3281,
          "line_end": 3305,
          "content": "row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());"
        },
        {
          "total_lines": 25,
          "line_start": 3176,
          "line_end": 3200,
          "content": "row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());"
        },
        {
          "total_lines": 24,
          "line_start": 3170,
          "line_end": 3193,
          "content": "sequence = (NumberSequence) it.next();<br/><br/>            if (!session.getGrantee().isAccessible(sequence)) {<br/>                continue;<br/>            }<br/><br/>            row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());"
        },
        {
          "total_lines": 24,
          "line_start": 3275,
          "line_end": 3298,
          "content": "sequence = (NumberSequence) it.next();<br/><br/>            if (!session.getGrantee().isAccessible(sequence)) {<br/>                continue;<br/>            }<br/><br/>            row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());"
        },
        {
          "total_lines": 23,
          "line_start": 3176,
          "line_end": 3198,
          "content": "row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];"
        },
        {
          "total_lines": 23,
          "line_start": 3281,
          "line_end": 3303,
          "content": "row = t.getEmptyRowData();<br/><br/>            NumberType type = (NumberType) sequence.getDataType();<br/>            int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];"
        },
        {
          "total_lines": 12,
          "line_start": 3179,
          "line_end": 3190,
          "content": "int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);"
        },
        {
          "total_lines": 12,
          "line_start": 3284,
          "line_end": 3295,
          "content": "int radix =<br/>                (type.typeCode == Types.SQL_NUMERIC || type.typeCode == Types<br/>                    .SQL_DECIMAL) ? 10<br/>                                  : 2;<br/><br/>            row[sequence_catalog] = database.getCatalogName().name;<br/>            row[sequence_schema]  = sequence.getSchemaName().name;<br/>            row[sequence_name]    = sequence.getName().name;<br/>            row[data_type]        = sequence.getDataType().getFullNameString();<br/>            row[numeric_precision] =<br/>                ValuePool.getInt((int) type.getPrecision());<br/>            row[numeric_precision_radix]    = ValuePool.getInt(radix);"
        },
        {
          "total_lines": 10,
          "line_start": 3190,
          "line_end": 3199,
          "content": "row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];"
        },
        {
          "total_lines": 10,
          "line_start": 3194,
          "line_end": 3203,
          "content": "row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());<br/>            row[next_value]                 = String.valueOf(sequence.peek());<br/><br/>            t.insertSys(session, store, row);"
        },
        {
          "total_lines": 10,
          "line_start": 3295,
          "line_end": 3304,
          "content": "row[numeric_precision_radix]    = ValuePool.getInt(radix);<br/>            row[numeric_scale]              = ValuePool.INTEGER_0;<br/>            row[maximum_value] = String.valueOf(sequence.getMaxValue());<br/>            row[minimum_value] = String.valueOf(sequence.getMinValue());<br/>            row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];"
        },
        {
          "total_lines": 10,
          "line_start": 3299,
          "line_end": 3308,
          "content": "row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());<br/>            row[next_value]                 = String.valueOf(sequence.peek());<br/><br/>            t.insertSys(session, store, row);"
        },
        {
          "total_lines": 8,
          "line_start": 3299,
          "line_end": 3306,
          "content": "row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());<br/>            row[next_value]                 = String.valueOf(sequence.peek());"
        },
        {
          "total_lines": 8,
          "line_start": 3194,
          "line_end": 3201,
          "content": "row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];<br/>            row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());<br/>            row[next_value]                 = String.valueOf(sequence.peek());"
        },
        {
          "total_lines": 6,
          "line_start": 3198,
          "line_end": 3203,
          "content": "row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());<br/>            row[next_value]                 = String.valueOf(sequence.peek());<br/><br/>            t.insertSys(session, store, row);"
        },
        {
          "total_lines": 6,
          "line_start": 1732,
          "line_end": 1737,
          "content": "row[numeric_precision] =<br/>                            ValuePool.getInt(type.getJDBCPrecision());<br/><br/>                        // this is length not octet_length, for character columns<br/>                        row[character_octet_length] =<br/>                            ValuePool.getInt(type.getJDBCPrecision());"
        },
        {
          "total_lines": 6,
          "line_start": 3303,
          "line_end": 3308,
          "content": "row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());<br/>            row[next_value]                 = String.valueOf(sequence.peek());<br/><br/>            t.insertSys(session, store, row);"
        },
        {
          "total_lines": 6,
          "line_start": 975,
          "line_end": 980,
          "content": "row[icolumn_size] =<br/>                        ValuePool.getInt(type.getJDBCPrecision());<br/><br/>                    // this is length not octet_length, for character columns<br/>                    row[ichar_octet_length] =<br/>                        ValuePool.getInt(type.getJDBCPrecision());"
        },
        {
          "total_lines": 4,
          "line_start": 3299,
          "line_end": 3302,
          "content": "row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];"
        },
        {
          "total_lines": 4,
          "line_start": 1741,
          "line_end": 1744,
          "content": "row[numeric_precision] =<br/>                            ValuePool.getInt(type.getJDBCPrecision());<br/>                        row[character_octet_length] =<br/>                            ValuePool.getInt(type.getJDBCPrecision());"
        },
        {
          "total_lines": 4,
          "line_start": 3198,
          "line_end": 3201,
          "content": "row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());<br/>            row[next_value]                 = String.valueOf(sequence.peek());"
        },
        {
          "total_lines": 4,
          "line_start": 3533,
          "line_end": 3536,
          "content": "row[is_insertable_into] = table.isInsertable()<br/>                                              ? Tokens.T_YES<br/>                                              : Tokens.T_NO;<br/>                    break;"
        },
        {
          "total_lines": 4,
          "line_start": 3303,
          "line_end": 3306,
          "content": "row[declared_numeric_precision] = row[numeric_precision];<br/>            row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());<br/>            row[next_value]                 = String.valueOf(sequence.peek());"
        },
        {
          "total_lines": 4,
          "line_start": 3520,
          "line_end": 3523,
          "content": "row[is_insertable_into] = table.isInsertable()<br/>                                              ? Tokens.T_YES<br/>                                              : Tokens.T_NO;<br/>                    break;"
        },
        {
          "total_lines": 4,
          "line_start": 3194,
          "line_end": 3197,
          "content": "row[increment] = String.valueOf(sequence.getIncrement());<br/>            row[cycle_option]               = sequence.isCycle() ? \"YES\"<br/>                                                                 : \"NO\";<br/>            row[declared_data_type]         = row[data_type];"
        },
        {
          "total_lines": 4,
          "line_start": 984,
          "line_end": 987,
          "content": "row[icolumn_size] =<br/>                        ValuePool.getInt(type.getJDBCPrecision());<br/>                    row[ichar_octet_length] =<br/>                        ValuePool.getInt(type.getJDBCPrecision());"
        },
        {
          "total_lines": 3,
          "line_start": 3411,
          "line_end": 3413,
          "content": "grants.addAll(rights);<br/><br/>                    rights = grants;"
        },
        {
          "total_lines": 3,
          "line_start": 3377,
          "line_end": 3379,
          "content": "// intermediate holders<br/>        Iterator tables;<br/>        Table    table;"
        },
        {
          "total_lines": 3,
          "line_start": 2987,
          "line_end": 2989,
          "content": "grants.addAll(rights);<br/><br/>                    rights = grants;"
        },
        {
          "total_lines": 2,
          "line_start": 2205,
          "line_end": 2206,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1095,
          "line_end": 1096,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1911,
          "line_end": 1912,
          "content": "sysTableHsqlNames[SYSTEM_PRIMARYKEYS].name, false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1457,
          "line_end": 1458,
          "content": "sysTableHsqlNames[SYSTEM_PRIMARYKEYS].name, false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1840,
          "line_end": 1841,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 2305,
          "line_end": 2306,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 2522,
          "line_end": 2523,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 2847,
          "line_end": 2848,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 280,
          "line_end": 281,
          "content": "Session session, PersistentStore store,<br/>                                  int tableIndex"
        },
        {
          "total_lines": 2,
          "line_start": 871,
          "line_end": 872,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1643,
          "line_end": 1644,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 634,
          "line_end": 635,
          "content": "Session session,<br/>                                         PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 491,
          "line_end": 492,
          "content": "Session session, Table table,<br/>                               PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 2814,
          "line_end": 2815,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 2421,
          "line_end": 2422,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 3304,
          "line_end": 3305,
          "content": "row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());"
        },
        {
          "total_lines": 2,
          "line_start": 2933,
          "line_end": 2934,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1297,
          "line_end": 1298,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 3572,
          "line_end": 3573,
          "content": "Session session,<br/>            PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 3238,
          "line_end": 3239,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 3199,
          "line_end": 3200,
          "content": "row[declared_numeric_scale]     = row[declared_numeric_scale];<br/>            row[start_with] = String.valueOf(sequence.getStartValue());"
        },
        {
          "total_lines": 2,
          "line_start": 660,
          "line_end": 661,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1896,
          "line_end": 1897,
          "content": "Session session,<br/>            PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1439,
          "line_end": 1439,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 827,
          "line_end": 827,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1605,
          "line_end": 1605,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3228,
          "line_end": 3228,
          "content": "t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 3105,
          "line_end": 3105,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3221,
          "line_end": 3221,
          "content": "t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 3124,
          "line_end": 3124,
          "content": "t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 3464,
          "line_end": 3464,
          "content": "t, \"USER_DEFINED_TYPE_CATALOG\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 3117,
          "line_end": 3117,
          "content": "t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 1068,
          "line_end": 1068,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3361,
          "line_end": 3361,
          "content": "sysTableHsqlNames[SEQUENCES].name, false"
        },
        {
          "total_lines": 1,
          "line_start": 3451,
          "line_end": 3451,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1810,
          "line_end": 1810,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2409,
          "line_end": 2409,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1911,
          "line_end": 1911,
          "content": "sysTableHsqlNames[SYSTEM_PRIMARYKEYS].name, false"
        },
        {
          "total_lines": 1,
          "line_start": 3229,
          "line_end": 3229,
          "content": "t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 3134,
          "line_end": 3134,
          "content": "sysTableHsqlNames[SEQUENCES].name, false"
        },
        {
          "total_lines": 1,
          "line_start": 3466,
          "line_end": 3466,
          "content": "t, \"USER_DEFINED_TYPE_NAME\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 3465,
          "line_end": 3465,
          "content": "t, \"USER_DEFINED_TYPE_SCHEMA\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 1457,
          "line_end": 1457,
          "content": "sysTableHsqlNames[SYSTEM_PRIMARYKEYS].name, false"
        },
        {
          "total_lines": 1,
          "line_start": 3343,
          "line_end": 3343,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2680,
          "line_end": 2680,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3125,
          "line_end": 3125,
          "content": "t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 3209,
          "line_end": 3209,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2831,
          "line_end": 2831,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2268,
          "line_end": 2268,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2916,
          "line_end": 2916,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2191,
          "line_end": 2191,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1268,
          "line_end": 1268,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2786,
          "line_end": 2786,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2485,
          "line_end": 2485,
          "content": "Session session, PersistentStore store"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementSession.java",
      "loc_duplicate": 106,
      "clones": [
          {
          "total_lines": 23,
          "line_start": 236,
          "line_end": 258,
          "content": "Result result;<br/><br/>        try {<br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/><br/>            return result;<br/>        }<br/><br/>        try {<br/>            if (isLogged) {<br/>                session.database.logger.writeOtherStatement(session, sql);<br/>            }<br/>        } catch (Throwable e) {<br/>            return Result.newErrorResult(e, sql);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 21,
          "line_start": 236,
          "line_end": 256,
          "content": "Result result;<br/><br/>        try {<br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/><br/>            return result;<br/>        }<br/><br/>        try {<br/>            if (isLogged) {<br/>                session.database.logger.writeOtherStatement(session, sql);<br/>            }<br/>        } catch (Throwable e) {<br/>            return Result.newErrorResult(e, sql);<br/>        }"
        },
        {
          "total_lines": 21,
          "line_start": 238,
          "line_end": 258,
          "content": "try {<br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/><br/>            return result;<br/>        }<br/><br/>        try {<br/>            if (isLogged) {<br/>                session.database.logger.writeOtherStatement(session, sql);<br/>            }<br/>        } catch (Throwable e) {<br/>            return Result.newErrorResult(e, sql);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 15,
          "line_start": 244,
          "line_end": 258,
          "content": "if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/><br/>            return result;<br/>        }<br/><br/>        try {<br/>            if (isLogged) {<br/>                session.database.logger.writeOtherStatement(session, sql);<br/>            }<br/>        } catch (Throwable e) {<br/>            return Result.newErrorResult(e, sql);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 3,
          "line_start": 226,
          "line_end": 228,
          "content": "break;<br/><br/>            default :"
        },
        {
          "total_lines": 3,
          "line_start": 684,
          "line_end": 686,
          "content": "Result result = statement.execute(session);<br/><br/>                        table.insertIntoTable(session, result);"
        },
        {
          "total_lines": 2,
          "line_start": 127,
          "line_end": 128,
          "content": "isLogged = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 183,
          "line_end": 184,
          "content": "group = StatementTypes.X_HSQLDB_SESSION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 138,
          "line_end": 139,
          "content": "group = StatementTypes.X_SQL_DYNAMIC;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 188,
          "line_end": 189,
          "content": "group    = StatementTypes.X_HSQLDB_SESSION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 122,
          "line_end": 123,
          "content": "isLogged = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 149,
          "line_end": 150,
          "content": "group = StatementTypes.X_SQL_DATA;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 165,
          "line_end": 166,
          "content": "group = StatementTypes.X_SQL_DYNAMIC;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 132,
          "line_end": 133,
          "content": "group = StatementTypes.X_SQL_DATA;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 158,
          "line_end": 159,
          "content": "group = StatementTypes.X_SQL_DATA;<br/>                break;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ColumnBase.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 104,
          "line_end": 105,
          "content": "nullability = other.nullability;<br/>        dataType    = other.dataType;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestSubQueriesInPreparedStatements.java",
      "loc_duplicate": 30,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 135,
          "line_end": 139,
          "content": "rs = pstmnt.executeQuery();<br/><br/>        while (rs.next()) {<br/>            System.out.println(\"(\" + rs.getInt(1) + \",\" + rs.getInt(2) + \")\");<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 113,
          "line_end": 117,
          "content": "rs = pstmnt.executeQuery();<br/><br/>        while (rs.next()) {<br/>            System.out.println(rs.getInt(1));<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 122,
          "line_end": 126,
          "content": "rs = pstmnt.executeQuery();<br/><br/>        while (rs.next()) {<br/>            System.out.println(rs.getInt(1));<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 100,
          "line_end": 104,
          "content": "rs = pstmnt.executeQuery();<br/><br/>        while (rs.next()) {<br/>            System.out.println(rs.getInt(1));<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 145,
          "line_end": 149,
          "content": "rs = pstmnt.executeQuery();<br/><br/>        while (rs.next()) {<br/>            System.out.println(\"(\" + rs.getInt(1) + \",\" + rs.getInt(2) + \")\");<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 155,
          "line_end": 159,
          "content": "rs = pstmnt.executeQuery();<br/><br/>        while (rs.next()) {<br/>            System.out.println(\"(\" + rs.getInt(1) + \",\" + rs.getInt(2) + \")\");<br/>        }"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/TextFileSettings.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 99,
          "line_end": 101,
          "content": "break;<br/><br/>            default :"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import org.hsqldb.Database;<br/>import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.Database;<br/>import org.hsqldb.error.Error;"
        },
        {
          "total_lines": 1,
          "line_start": 166,
          "line_end": 166,
          "content": "HsqlDatabaseProperties.textdb_cache_rows, maxCacheRows"
        },
        {
          "total_lines": 1,
          "line_start": 168,
          "line_end": 168,
          "content": "HsqlDatabaseProperties.textdb_cache_rows, maxCacheRows"
        },
        {
          "total_lines": 1,
          "line_start": 176,
          "line_end": 176,
          "content": "HsqlDatabaseProperties.textdb_cache_size, (int) maxCacheBytes"
        },
        {
          "total_lines": 1,
          "line_start": 178,
          "line_end": 178,
          "content": "HsqlDatabaseProperties.textdb_cache_size, (int) maxCacheBytes"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/server/ServerConfiguration.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 156,
          "line_end": 157,
          "content": "set.add(addrs[i].getHostAddress());<br/>                set.add(addrs[i].getHostName());"
        },
        {
          "total_lines": 2,
          "line_start": 173,
          "line_end": 174,
          "content": "set.add(addrs[i].getHostAddress());<br/>                set.add(addrs[i].getHostName());"
        },
        {
          "total_lines": 2,
          "line_start": 149,
          "line_end": 150,
          "content": "set.add(addrs[i].getHostAddress());<br/>                set.add(addrs[i].getHostName());"
        },
        {
          "total_lines": 2,
          "line_start": 166,
          "line_end": 167,
          "content": "set.add(addrs[i].getHostAddress());<br/>                set.add(addrs[i].getHostName());"
        },
        {
          "total_lines": 2,
          "line_start": 98,
          "line_end": 99,
          "content": "int protocol,<br/>            String path, String extension"
        },
        {
          "total_lines": 1,
          "line_start": 272,
          "line_end": 272,
          "content": "ServerProperties.sc_key_dbname + \".0\", \"\""
        },
        {
          "total_lines": 1,
          "line_start": 237,
          "line_end": 237,
          "content": "ServerProperties.sc_key_address, SC_DEFAULT_ADDRESS"
        },
        {
          "total_lines": 1,
          "line_start": 202,
          "line_end": 202,
          "content": "ServerProperties.sc_key_address, SC_DEFAULT_ADDRESS"
        },
        {
          "total_lines": 1,
          "line_start": 267,
          "line_end": 267,
          "content": "ServerProperties.sc_key_dbname + \".0\", \"\""
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/LobStoreRAFile.java",
      "loc_duplicate": 12,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import org.hsqldb.Database;<br/>import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 123,
          "line_end": 124,
          "content": "byte[] dataBytes, long position, int offset,<br/>                              int length"
        },
        {
          "total_lines": 2,
          "line_start": 105,
          "line_end": 106,
          "content": "byte[] dataBytes, int blockAddress,<br/>                              int blockCount"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.Database;<br/>import org.hsqldb.error.Error;"
        },
        {
          "total_lines": 1,
          "line_start": 123,
          "line_end": 123,
          "content": "long position, int offset"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestDatetimeSimple.java",
      "loc_duplicate": 61,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 94,
          "line_end": 100,
          "content": "pstmt.setTimestamp(1, new Timestamp(System.currentTimeMillis()));<br/><br/>        set = pstmt.executeQuery();<br/><br/>        if (set.next()) {<br/>            System.out.println(\"pstmt res=\" + set.getInt(1));<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 83,
          "line_end": 89,
          "content": "pstmt.setTimestamp(1, new Timestamp(System.currentTimeMillis()));<br/><br/>        set = pstmt.executeQuery();<br/><br/>        if (set.next()) {<br/>            System.out.println(\"pstmt res=\" + set.getInt(1));<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 166,
          "line_end": 170,
          "content": "/* FRED:  When the DATE value is inserted with a TIMESTAMP,<br/>         * all matches using a date fail.  The query here fails regardless<br/>         * of what date I use. */<br/>        rs.next();<br/>        System.out.println(\"Match? \" + (rs.getInt(\"c\") > 0));"
        },
        {
          "total_lines": 5,
          "line_start": 96,
          "line_end": 100,
          "content": "set = pstmt.executeQuery();<br/><br/>        if (set.next()) {<br/>            System.out.println(\"pstmt res=\" + set.getInt(1));<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 85,
          "line_end": 89,
          "content": "set = pstmt.executeQuery();<br/><br/>        if (set.next()) {<br/>            System.out.println(\"pstmt res=\" + set.getInt(1));<br/>        }"
        },
        {
          "total_lines": 3,
          "line_start": 150,
          "line_end": 152,
          "content": "ps.setTimestamp(1, java.sql.Timestamp.valueOf(\"2008-10-27 0:00:00\"));<br/>        ps.execute();<br/>        ps.close();"
        },
        {
          "total_lines": 3,
          "line_start": 119,
          "line_end": 121,
          "content": "rs = st.executeQuery(\"SELECT d FROM t\");<br/><br/>        rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 257,
          "line_end": 259,
          "content": "rs.next();<br/><br/>        o  = rs.getObject(1);"
        },
        {
          "total_lines": 3,
          "line_start": 187,
          "line_end": 189,
          "content": "ps.setTimestamp(1, java.sql.Timestamp.valueOf(\"2008-10-27 0:00:00\"));<br/>        ps.execute();<br/>        ps.close();"
        },
        {
          "total_lines": 3,
          "line_start": 242,
          "line_end": 244,
          "content": "rs.next();<br/><br/>        o  = rs.getObject(1);"
        },
        {
          "total_lines": 3,
          "line_start": 154,
          "line_end": 156,
          "content": "rs = st.executeQuery(\"SELECT d FROM t\");<br/><br/>        rs.next();"
        },
        {
          "total_lines": 2,
          "line_start": 187,
          "line_end": 188,
          "content": "ps.setTimestamp(1, java.sql.Timestamp.valueOf(\"2008-10-27 0:00:00\"));<br/>        ps.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 131,
          "line_end": 132,
          "content": "rs.next();<br/>        System.out.println(\"Match? \" + (rs.getInt(\"c\") > 0));"
        },
        {
          "total_lines": 2,
          "line_start": 150,
          "line_end": 151,
          "content": "ps.setTimestamp(1, java.sql.Timestamp.valueOf(\"2008-10-27 0:00:00\"));<br/>        ps.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 151,
          "line_end": 152,
          "content": "ps.execute();<br/>        ps.close();"
        },
        {
          "total_lines": 2,
          "line_start": 188,
          "line_end": 189,
          "content": "ps.execute();<br/>        ps.close();"
        },
        {
          "total_lines": 2,
          "line_start": 260,
          "line_end": 261,
          "content": "s  = rs.getString(1);<br/>        ts = rs.getTimestamp(1);"
        },
        {
          "total_lines": 2,
          "line_start": 246,
          "line_end": 247,
          "content": "s  = rs.getString(1);<br/>        ts = rs.getTimestamp(1);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/HsqlTaskQueue.java",
      "loc_duplicate": 9,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 66,
          "line_end": 70,
          "content": "try {<br/>            taskRunnerThread.setContextClassLoader(null);<br/>        } catch (Throwable t) {}<br/><br/>        taskRunnerThread = null;"
        },
        {
          "total_lines": 2,
          "line_start": 151,
          "line_end": 152,
          "content": "queue.clear();<br/>            queue.addLast(SHUTDOWNTASK);"
        },
        {
          "total_lines": 2,
          "line_start": 165,
          "line_end": 166,
          "content": "queue.clear();<br/>            queue.addLast(SHUTDOWNTASK);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/HsqlNameManager.java",
      "loc_duplicate": 7,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 443,
          "line_end": 444,
          "content": "sb.append(schema.getStatementName());<br/>                sb.append('.');"
        },
        {
          "total_lines": 2,
          "line_start": 424,
          "line_end": 425,
          "content": "sb.append(schema.getStatementName());<br/>                        sb.append('.');"
        },
        {
          "total_lines": 1,
          "line_start": 378,
          "line_end": 378,
          "content": "HsqlNameManager man, String name"
        },
        {
          "total_lines": 1,
          "line_start": 387,
          "line_end": 387,
          "content": "HsqlNameManager man, String name"
        },
        {
          "total_lines": 1,
          "line_start": 162,
          "line_end": 162,
          "content": "HsqlName schema, String name"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/pool/JDBCXADataSource.java",
      "loc_duplicate": 29,
      "clones": [
          {
          "total_lines": 10,
          "line_start": 141,
          "line_end": 150,
          "content": "String    cname = \"org.hsqldb.jdbc.JDBCDataSourceFactory\";<br/>        Reference ref   = new Reference(getClass().getName(), cname, null);<br/><br/>        ref.add(new StringRefAddr(\"database\", getDatabase()));<br/>        ref.add(new StringRefAddr(\"user\", getUser()));<br/>        ref.add(new StringRefAddr(\"password\", password));<br/>        ref.add(new StringRefAddr(\"loginTimeout\",<br/>                                  Integer.toString(loginTimeout)));<br/><br/>        return ref;"
        },
        {
          "total_lines": 9,
          "line_start": 142,
          "line_end": 150,
          "content": "Reference ref   = new Reference(getClass().getName(), cname, null);<br/><br/>        ref.add(new StringRefAddr(\"database\", getDatabase()));<br/>        ref.add(new StringRefAddr(\"user\", getUser()));<br/>        ref.add(new StringRefAddr(\"password\", password));<br/>        ref.add(new StringRefAddr(\"loginTimeout\",<br/>                                  Integer.toString(loginTimeout)));<br/><br/>        return ref;"
        },
        {
          "total_lines": 8,
          "line_start": 141,
          "line_end": 148,
          "content": "String    cname = \"org.hsqldb.jdbc.JDBCDataSourceFactory\";<br/>        Reference ref   = new Reference(getClass().getName(), cname, null);<br/><br/>        ref.add(new StringRefAddr(\"database\", getDatabase()));<br/>        ref.add(new StringRefAddr(\"user\", getUser()));<br/>        ref.add(new StringRefAddr(\"password\", password));<br/>        ref.add(new StringRefAddr(\"loginTimeout\",<br/>                                  Integer.toString(loginTimeout)));"
        },
        {
          "total_lines": 2,
          "line_start": 144,
          "line_end": 145,
          "content": "ref.add(new StringRefAddr(\"database\", getDatabase()));<br/>        ref.add(new StringRefAddr(\"user\", getUser()));"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestStressInsert.java",
      "loc_duplicate": 36,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 160,
          "line_end": 164,
          "content": "long t3 = System.currentTimeMillis();<br/><br/>                System.out.println(\"inserted \" + i + \", 100 in \" + (t3 - t2));<br/><br/>                t2 = t3;"
        },
        {
          "total_lines": 5,
          "line_start": 183,
          "line_end": 187,
          "content": "long t3 = System.currentTimeMillis();<br/><br/>                System.out.println(\"inserted \" + i + \", 100 in \" + (t3 - t2));<br/><br/>                t2 = t3;"
        },
        {
          "total_lines": 4,
          "line_start": 174,
          "line_end": 177,
          "content": "long t1 = System.currentTimeMillis();<br/>        long t2 = System.currentTimeMillis();<br/><br/>        System.out.println(\"done \" + (t2 - t1));"
        },
        {
          "total_lines": 4,
          "line_start": 151,
          "line_end": 154,
          "content": "long t1 = System.currentTimeMillis();<br/>        long t2 = System.currentTimeMillis();<br/><br/>        System.out.println(\"done \" + (t2 - t1));"
        },
        {
          "total_lines": 3,
          "line_start": 162,
          "line_end": 164,
          "content": "System.out.println(\"inserted \" + i + \", 100 in \" + (t3 - t2));<br/><br/>                t2 = t3;"
        },
        {
          "total_lines": 3,
          "line_start": 185,
          "line_end": 187,
          "content": "System.out.println(\"inserted \" + i + \", 100 in \" + (t3 - t2));<br/><br/>                t2 = t3;"
        },
        {
          "total_lines": 2,
          "line_start": 151,
          "line_end": 152,
          "content": "long t1 = System.currentTimeMillis();<br/>        long t2 = System.currentTimeMillis();"
        },
        {
          "total_lines": 2,
          "line_start": 174,
          "line_end": 175,
          "content": "long t1 = System.currentTimeMillis();<br/>        long t2 = System.currentTimeMillis();"
        },
        {
          "total_lines": 2,
          "line_start": 191,
          "line_end": 192,
          "content": "System.out.println(\"total inserted \" + MAX_SIZE + \" in \" + (t2 - t1));<br/>        shutdown();"
        },
        {
          "total_lines": 2,
          "line_start": 136,
          "line_end": 137,
          "content": "int    length = getRandomLength(LOB_SIZE);<br/>            byte[] array  = Arrays.copyOf(data, length);"
        },
        {
          "total_lines": 2,
          "line_start": 120,
          "line_end": 121,
          "content": "int    length = getRandomLength(LOB_SIZE);<br/>            byte[] array  = Arrays.copyOf(data, length);"
        },
        {
          "total_lines": 2,
          "line_start": 168,
          "line_end": 169,
          "content": "System.out.println(\"total inserted \" + MAX_SIZE + \" in \" + (t2 - t1));<br/>        shutdown();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/RowStoreAVLDiskData.java",
      "loc_duplicate": 56,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 66,
          "line_end": 72,
          "content": "this.database     = table.database;<br/>        this.manager      = manager;<br/>        this.table        = table;<br/>        this.indexList    = table.getIndexList();<br/>        this.accessorList = new CachedObject[indexList.length];<br/><br/>        manager.setStore(table, this);"
        },
        {
          "total_lines": 7,
          "line_start": 183,
          "line_end": 189,
          "content": "int position = key.getPosition();<br/><br/>        if (position >= accessorList.length) {<br/>            throw Error.runtimeError(ErrorCode.U_S0500, \"RowStoreAVL\");<br/>        }<br/><br/>        return accessorList[position];"
        },
        {
          "total_lines": 6,
          "line_start": 67,
          "line_end": 72,
          "content": "this.manager      = manager;<br/>        this.table        = table;<br/>        this.indexList    = table.getIndexList();<br/>        this.accessorList = new CachedObject[indexList.length];<br/><br/>        manager.setStore(table, this);"
        },
        {
          "total_lines": 5,
          "line_start": 68,
          "line_end": 72,
          "content": "this.table        = table;<br/>        this.indexList    = table.getIndexList();<br/>        this.accessorList = new CachedObject[indexList.length];<br/><br/>        manager.setStore(table, this);"
        },
        {
          "total_lines": 5,
          "line_start": 185,
          "line_end": 189,
          "content": "if (position >= accessorList.length) {<br/>            throw Error.runtimeError(ErrorCode.U_S0500, \"RowStoreAVL\");<br/>        }<br/><br/>        return accessorList[position];"
        },
        {
          "total_lines": 3,
          "line_start": 172,
          "line_end": 174,
          "content": "destroy();<br/>        elementCount.set(0);<br/>        ArrayUtil.fillArray(accessorList, null);"
        },
        {
          "total_lines": 3,
          "line_start": 84,
          "line_end": 86,
          "content": "object = cache.get(object, this, keep);<br/><br/>        return object;"
        },
        {
          "total_lines": 3,
          "line_start": 77,
          "line_end": 79,
          "content": "CachedObject object = cache.get(key, this, keep);<br/><br/>        return object;"
        },
        {
          "total_lines": 3,
          "line_start": 165,
          "line_end": 167,
          "content": "CachedObject object = cache.get(key, this, false);<br/><br/>        return object;"
        },
        {
          "total_lines": 2,
          "line_start": 232,
          "line_end": 233,
          "content": "Session session, Row row, int changeAction,<br/>                            int txModel"
        },
        {
          "total_lines": 2,
          "line_start": 66,
          "line_end": 67,
          "content": "this.database     = table.database;<br/>        this.manager      = manager;"
        },
        {
          "total_lines": 2,
          "line_start": 199,
          "line_end": 200,
          "content": "Session session, Row row, int changeAction,<br/>                          int txModel"
        },
        {
          "total_lines": 2,
          "line_start": 63,
          "line_end": 64,
          "content": "PersistentStoreCollection manager,<br/>                               Table table"
        },
        {
          "total_lines": 2,
          "line_start": 239,
          "line_end": 240,
          "content": "((RowAVL) row).setNewNodes(this);<br/>                    indexRow(session, row);"
        },
        {
          "total_lines": 1,
          "line_start": 199,
          "line_end": 199,
          "content": "Session session, Row row, int changeAction"
        },
        {
          "total_lines": 1,
          "line_start": 128,
          "line_end": 128,
          "content": "CachedObject object, RowInputInterface in"
        },
        {
          "total_lines": 1,
          "line_start": 232,
          "line_end": 232,
          "content": "Session session, Row row, int changeAction"
        },
        {
          "total_lines": 1,
          "line_start": 89,
          "line_end": 89,
          "content": "CachedObject object, boolean tx"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/FileUtil.java",
      "loc_duplicate": 16,
      "clones": [
          {
          "total_lines": 10,
          "line_start": 356,
          "line_end": 365,
          "content": "fis = getClass().getResourceAsStream(fileName);<br/><br/>                if (fis == null) {<br/>                    ClassLoader cl =<br/>                        Thread.currentThread().getContextClassLoader();<br/><br/>                    if (cl != null) {<br/>                        fis = cl.getResourceAsStream(fileName);<br/>                    }<br/>                }"
        },
        {
          "total_lines": 2,
          "line_start": 40,
          "line_end": 41,
          "content": "import java.io.IOException;<br/>import java.io.InputStream;"
        },
        {
          "total_lines": 2,
          "line_start": 382,
          "line_end": 383,
          "content": "java.lang.String oldName,<br/>                                  java.lang.String newName"
        },
        {
          "total_lines": 2,
          "line_start": 100,
          "line_end": 101,
          "content": "java.lang.String oldName,<br/>                              java.lang.String newName"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCCallableStatement.java",
      "loc_duplicate": 141,
      "clones": [
          {
          "total_lines": 15,
          "line_start": 985,
          "line_end": 999,
          "content": "case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                break;<br/>            case Types.TINYINT :<br/>            case Types.SQL_SMALLINT :<br/>            case Types.SQL_INTEGER :<br/>            case Types.SQL_BIGINT :<br/>                targetType = Type.SQL_DECIMAL;<br/><br/>                break;<br/>            case Types.SQL_DOUBLE :<br/>            default :<br/>                targetType = Type.SQL_DECIMAL_DEFAULT;<br/><br/>                break;"
        },
        {
          "total_lines": 8,
          "line_start": 1131,
          "line_end": 1138,
          "content": "checkGetParameterIndex(parameterIndex);<br/><br/>        Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];<br/>        Object o          = getColumnInType(parameterIndex, sourceType);<br/><br/>        if (o == null) {<br/>            return null;<br/>        }"
        },
        {
          "total_lines": 8,
          "line_start": 1179,
          "line_end": 1186,
          "content": "checkGetParameterIndex(parameterIndex);<br/><br/>        Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];<br/>        Object o          = getColumnInType(parameterIndex, sourceType);<br/><br/>        if (o == null) {<br/>            return null;<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 1409,
          "line_end": 1415,
          "content": "Calendar calendar = cal == null ? session.getCalendar()<br/>                    : cal;<br/><br/>            if (cal != null) {<br/>                millis = HsqlDateTime.convertMillisToCalendar(calendar,<br/>                        millis);<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 1133,
          "line_end": 1138,
          "content": "Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];<br/>        Object o          = getColumnInType(parameterIndex, sourceType);<br/><br/>        if (o == null) {<br/>            return null;<br/>        }"
        },
        {
          "total_lines": 6,
          "line_start": 1181,
          "line_end": 1186,
          "content": "Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];<br/>        Object o          = getColumnInType(parameterIndex, sourceType);<br/><br/>        if (o == null) {<br/>            return null;<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 1349,
          "line_end": 1353,
          "content": "Calendar calendar = cal == null ? session.getCalendar()<br/>                    : cal;<br/><br/>            millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);<br/>            millis = HsqlDateTime.getNormalisedTime(millis);"
        },
        {
          "total_lines": 4,
          "line_start": 1179,
          "line_end": 1182,
          "content": "checkGetParameterIndex(parameterIndex);<br/><br/>        Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];<br/>        Object o          = getColumnInType(parameterIndex, sourceType);"
        },
        {
          "total_lines": 4,
          "line_start": 1131,
          "line_end": 1134,
          "content": "checkGetParameterIndex(parameterIndex);<br/><br/>        Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];<br/>        Object o          = getColumnInType(parameterIndex, sourceType);"
        },
        {
          "total_lines": 3,
          "line_start": 1700,
          "line_end": 1702,
          "content": "checkGetParameterIndex(parameterIndex);<br/><br/>        throw JDBCUtil.notSupported();"
        },
        {
          "total_lines": 3,
          "line_start": 1095,
          "line_end": 1097,
          "content": "checkGetParameterIndex(parameterIndex);<br/><br/>        throw JDBCUtil.notSupported();"
        },
        {
          "total_lines": 3,
          "line_start": 3635,
          "line_end": 3637,
          "content": "checkGetParameterIndex(parameterIndex);<br/><br/>        throw JDBCUtil.notSupported();"
        },
        {
          "total_lines": 3,
          "line_start": 4185,
          "line_end": 4187,
          "content": "checkGetParameterIndex(parameterIndex);<br/><br/>        throw JDBCUtil.notSupported();"
        },
        {
          "total_lines": 3,
          "line_start": 4015,
          "line_end": 4017,
          "content": "checkGetParameterIndex(parameterIndex);<br/><br/>        throw JDBCUtil.notSupported();"
        },
        {
          "total_lines": 3,
          "line_start": 3915,
          "line_end": 3917,
          "content": "checkGetParameterIndex(parameterIndex);<br/><br/>        throw JDBCUtil.notSupported();"
        },
        {
          "total_lines": 3,
          "line_start": 1047,
          "line_end": 1049,
          "content": "checkGetParameterIndex(parameterIndex);<br/><br/>        throw JDBCUtil.notSupported();"
        },
        {
          "total_lines": 3,
          "line_start": 4097,
          "line_end": 4099,
          "content": "checkGetParameterIndex(parameterIndex);<br/><br/>        throw JDBCUtil.notSupported();"
        },
        {
          "total_lines": 2,
          "line_start": 2326,
          "line_end": 2327,
          "content": "String parameterName,<br/>            java.io.InputStream x, int length"
        },
        {
          "total_lines": 2,
          "line_start": 1133,
          "line_end": 1134,
          "content": "Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];<br/>        Object o          = getColumnInType(parameterIndex, sourceType);"
        },
        {
          "total_lines": 2,
          "line_start": 1181,
          "line_end": 1182,
          "content": "Type   sourceType = parameterMetaData.columnTypes[parameterIndex - 1];<br/>        Object o          = getColumnInType(parameterIndex, sourceType);"
        },
        {
          "total_lines": 2,
          "line_start": 1483,
          "line_end": 1484,
          "content": "int parameterIndex,<br/>            int sqlType, String typeName"
        },
        {
          "total_lines": 2,
          "line_start": 3807,
          "line_end": 3808,
          "content": "Reader reader,<br/>                                     long length"
        },
        {
          "total_lines": 2,
          "line_start": 1658,
          "line_end": 1659,
          "content": "String parameterName,<br/>            int sqlType, String typeName"
        },
        {
          "total_lines": 2,
          "line_start": 4387,
          "line_end": 4388,
          "content": "String parameterName,<br/>            java.io.InputStream x, long length"
        },
        {
          "total_lines": 2,
          "line_start": 2284,
          "line_end": 2285,
          "content": "String parameterName,<br/>            java.io.InputStream x, int length"
        },
        {
          "total_lines": 2,
          "line_start": 4424,
          "line_end": 4425,
          "content": "String parameterName,<br/>            java.io.InputStream x, long length"
        },
        {
          "total_lines": 2,
          "line_start": 3873,
          "line_end": 3874,
          "content": "Reader reader,<br/>                                      long length"
        },
        {
          "total_lines": 2,
          "line_start": 1241,
          "line_end": 1242,
          "content": "data, type.collectionBaseType(), type,<br/>                             connection"
        },
        {
          "total_lines": 2,
          "line_start": 2532,
          "line_end": 2533,
          "content": "String parameterName,<br/>            java.io.Reader reader"
        },
        {
          "total_lines": 2,
          "line_start": 4463,
          "line_end": 4464,
          "content": "String parameterName,<br/>            java.io.Reader reader"
        },
        {
          "total_lines": 2,
          "line_start": 2711,
          "line_end": 2712,
          "content": "String parameterName, int sqlType,<br/>                                     String typeName"
        },
        {
          "total_lines": 2,
          "line_start": 4530,
          "line_end": 4531,
          "content": "String parameterName,<br/>            java.io.InputStream x"
        },
        {
          "total_lines": 2,
          "line_start": 4500,
          "line_end": 4501,
          "content": "String parameterName,<br/>            java.io.InputStream x"
        },
        {
          "total_lines": 1,
          "line_start": 4596,
          "line_end": 4596,
          "content": "findParameterIndex(parameterName), value"
        },
        {
          "total_lines": 1,
          "line_start": 2328,
          "line_end": 2328,
          "content": "findParameterIndex(parameterName), x"
        },
        {
          "total_lines": 1,
          "line_start": 3875,
          "line_end": 3875,
          "content": "findParameterIndex(parameterName), reader"
        },
        {
          "total_lines": 1,
          "line_start": 1594,
          "line_end": 1594,
          "content": "findParameterIndex(parameterName), sqlType"
        },
        {
          "total_lines": 1,
          "line_start": 4625,
          "line_end": 4625,
          "content": "findParameterIndex(parameterName), reader"
        },
        {
          "total_lines": 1,
          "line_start": 2576,
          "line_end": 2576,
          "content": "findParameterIndex(parameterName), x"
        },
        {
          "total_lines": 1,
          "line_start": 1541,
          "line_end": 1541,
          "content": "findParameterIndex(parameterName), sqlType"
        },
        {
          "total_lines": 1,
          "line_start": 3731,
          "line_end": 3731,
          "content": "findParameterIndex(parameterName), value"
        },
        {
          "total_lines": 1,
          "line_start": 4686,
          "line_end": 4686,
          "content": "findParameterIndex(parameterName), reader"
        },
        {
          "total_lines": 1,
          "line_start": 2534,
          "line_end": 2534,
          "content": "findParameterIndex(parameterName), reader"
        },
        {
          "total_lines": 1,
          "line_start": 1660,
          "line_end": 1660,
          "content": "findParameterIndex(parameterName), sqlType"
        },
        {
          "total_lines": 1,
          "line_start": 2618,
          "line_end": 2618,
          "content": "findParameterIndex(parameterName), x"
        },
        {
          "total_lines": 1,
          "line_start": 3809,
          "line_end": 3809,
          "content": "findParameterIndex(parameterName), reader"
        },
        {
          "total_lines": 1,
          "line_start": 2285,
          "line_end": 2285,
          "content": "java.io.InputStream x, int length"
        },
        {
          "total_lines": 1,
          "line_start": 2286,
          "line_end": 2286,
          "content": "findParameterIndex(parameterName), x"
        },
        {
          "total_lines": 1,
          "line_start": 1774,
          "line_end": 1774,
          "content": "findParameterIndex(parameterName), sqlType"
        },
        {
          "total_lines": 1,
          "line_start": 4565,
          "line_end": 4565,
          "content": "findParameterIndex(parameterName), reader"
        },
        {
          "total_lines": 1,
          "line_start": 4388,
          "line_end": 4388,
          "content": "java.io.InputStream x, long length"
        },
        {
          "total_lines": 1,
          "line_start": 3780,
          "line_end": 3780,
          "content": "findParameterIndex(parameterName), value"
        },
        {
          "total_lines": 1,
          "line_start": 4425,
          "line_end": 4425,
          "content": "java.io.InputStream x, long length"
        },
        {
          "total_lines": 1,
          "line_start": 2327,
          "line_end": 2327,
          "content": "java.io.InputStream x, int length"
        },
        {
          "total_lines": 1,
          "line_start": 2660,
          "line_end": 2660,
          "content": "findParameterIndex(parameterName), x"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rowio/RowOutputBase.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 165,
          "line_end": 166,
          "content": "int l, Type[] types, Object[] data,<br/>                          HashMappedList cols"
        },
        {
          "total_lines": 1,
          "line_start": 165,
          "line_end": 165,
          "content": "int l, Type[] types, Object[] data"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/DTIType.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 86,
          "line_end": 87,
          "content": "0, 0,<br/>            0"
        },
        {
          "total_lines": 2,
          "line_start": 168,
          "line_end": 169,
          "content": "endIntervalType   = Types.SQL_INTERVAL_SECOND;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 162,
          "line_end": 163,
          "content": "endIntervalType   = Types.SQL_INTERVAL_SECOND;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 38,
          "line_end": 39,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 1,
          "line_start": 478,
          "line_end": 478,
          "content": "Object dateTime, int part"
        },
        {
          "total_lines": 1,
          "line_start": 98,
          "line_end": 98,
          "content": "0, 0, 0"
        },
        {
          "total_lines": 1,
          "line_start": 98,
          "line_end": 98,
          "content": "0, 0, 0"
        },
        {
          "total_lines": 1,
          "line_start": 94,
          "line_end": 94,
          "content": "0, 0"
        },
        {
          "total_lines": 1,
          "line_start": 86,
          "line_end": 86,
          "content": "0, 0, 0"
        },
        {
          "total_lines": 1,
          "line_start": 94,
          "line_end": 94,
          "content": "0, 0"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/LobManager.java",
      "loc_duplicate": 173,
      "clones": [
          {
          "total_lines": 10,
          "line_start": 673,
          "line_end": 682,
          "content": "Object[] data = getLobHeader(lobID);<br/><br/>            if (data == null) {<br/>                throw Error.error(ErrorCode.X_0F502);<br/>            }<br/><br/>            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();<br/>            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();<br/><br/>            return ResultLob.newLobSetResponse(lobID, length);"
        },
        {
          "total_lines": 10,
          "line_start": 1155,
          "line_end": 1164,
          "content": "Object[] data = getLobHeader(lobID);<br/><br/>            if (data == null) {<br/>                throw Error.error(ErrorCode.X_0F502);<br/>            }<br/><br/>            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();<br/>            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();<br/><br/>            return ResultLob.newLobSetResponse(lobID, length);"
        },
        {
          "total_lines": 8,
          "line_start": 1155,
          "line_end": 1162,
          "content": "Object[] data = getLobHeader(lobID);<br/><br/>            if (data == null) {<br/>                throw Error.error(ErrorCode.X_0F502);<br/>            }<br/><br/>            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();<br/>            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();"
        },
        {
          "total_lines": 8,
          "line_start": 673,
          "line_end": 680,
          "content": "Object[] data = getLobHeader(lobID);<br/><br/>            if (data == null) {<br/>                throw Error.error(ErrorCode.X_0F502);<br/>            }<br/><br/>            long length = ((Long) data[LOB_IDS.LOB_LENGTH]).longValue();<br/>            int  type   = ((Integer) data[LOB_IDS.LOB_TYPE]).intValue();"
        },
        {
          "total_lines": 7,
          "line_start": 507,
          "line_end": 513,
          "content": "Long           lobID    = getNewLobID();<br/>            ResultMetaData meta     = createLob.getParametersMetaData();<br/>            Object         params[] = new Object[meta.getColumnCount()];<br/><br/>            params[LOB_IDS.LOB_ID]          = lobID;<br/>            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);<br/>            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;"
        },
        {
          "total_lines": 7,
          "line_start": 532,
          "line_end": 538,
          "content": "Long           lobID    = getNewLobID();<br/>            ResultMetaData meta     = createLob.getParametersMetaData();<br/>            Object         params[] = new Object[meta.getColumnCount()];<br/><br/>            params[LOB_IDS.LOB_ID]          = lobID;<br/>            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);<br/>            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;"
        },
        {
          "total_lines": 6,
          "line_start": 533,
          "line_end": 538,
          "content": "ResultMetaData meta     = createLob.getParametersMetaData();<br/>            Object         params[] = new Object[meta.getColumnCount()];<br/><br/>            params[LOB_IDS.LOB_ID]          = lobID;<br/>            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);<br/>            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;"
        },
        {
          "total_lines": 6,
          "line_start": 2121,
          "line_end": 2126,
          "content": "if (read == -1) {<br/>                        return Result.newErrorResult(new EOFException());<br/>                    }<br/><br/>                    localLength -= read;<br/>                    count       += read;"
        },
        {
          "total_lines": 6,
          "line_start": 541,
          "line_end": 546,
          "content": "Result result = sysLobSession.executeCompiledStatement(createLob,<br/>                params, 0);<br/><br/>            usageChanged = true;<br/><br/>            return lobID.longValue();"
        },
        {
          "total_lines": 6,
          "line_start": 1504,
          "line_end": 1509,
          "content": "if (read == -1) {<br/>                            return Result.newErrorResult(new EOFException());<br/>                        }<br/><br/>                        localLength -= read;<br/>                        count       += read;"
        },
        {
          "total_lines": 6,
          "line_start": 1638,
          "line_end": 1643,
          "content": "length = offset + dataLength;<br/>                result = setLength(lobID, length);<br/><br/>                if (result.isError()) {<br/>                    return result;<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 516,
          "line_end": 521,
          "content": "Result result = sysLobSession.executeCompiledStatement(createLob,<br/>                params, 0);<br/><br/>            usageChanged = true;<br/><br/>            return lobID.longValue();"
        },
        {
          "total_lines": 6,
          "line_start": 508,
          "line_end": 513,
          "content": "ResultMetaData meta     = createLob.getParametersMetaData();<br/>            Object         params[] = new Object[meta.getColumnCount()];<br/><br/>            params[LOB_IDS.LOB_ID]          = lobID;<br/>            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);<br/>            params[LOB_IDS.LOB_USAGE_COUNT] = ValuePool.INTEGER_0;"
        },
        {
          "total_lines": 6,
          "line_start": 1568,
          "line_end": 1573,
          "content": "length = offset + dataLength;<br/>                result = setLength(lobID, length);<br/><br/>                if (result.isError()) {<br/>                    return result;<br/>                }"
        },
        {
          "total_lines": 5,
          "line_start": 532,
          "line_end": 536,
          "content": "Long           lobID    = getNewLobID();<br/>            ResultMetaData meta     = createLob.getParametersMetaData();<br/>            Object         params[] = new Object[meta.getColumnCount()];<br/><br/>            params[LOB_IDS.LOB_ID]          = lobID;"
        },
        {
          "total_lines": 5,
          "line_start": 507,
          "line_end": 511,
          "content": "Long           lobID    = getNewLobID();<br/>            ResultMetaData meta     = createLob.getParametersMetaData();<br/>            Object         params[] = new Object[meta.getColumnCount()];<br/><br/>            params[LOB_IDS.LOB_ID]          = lobID;"
        },
        {
          "total_lines": 5,
          "line_start": 488,
          "line_end": 492,
          "content": "Object[] data = getLobHeader(lobID);<br/><br/>            if (data == null) {<br/>                return null;<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 469,
          "line_end": 473,
          "content": "Object[] data = getLobHeader(lobID);<br/><br/>            if (data == null) {<br/>                return null;<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 1569,
          "line_end": 1573,
          "content": "result = setLength(lobID, length);<br/><br/>                if (result.isError()) {<br/>                    return result;<br/>                }"
        },
        {
          "total_lines": 5,
          "line_start": 1639,
          "line_end": 1643,
          "content": "result = setLength(lobID, length);<br/><br/>                if (result.isError()) {<br/>                    return result;<br/>                }"
        },
        {
          "total_lines": 4,
          "line_start": 509,
          "line_end": 512,
          "content": "Object         params[] = new Object[meta.getColumnCount()];<br/><br/>            params[LOB_IDS.LOB_ID]          = lobID;<br/>            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);"
        },
        {
          "total_lines": 4,
          "line_start": 534,
          "line_end": 537,
          "content": "Object         params[] = new Object[meta.getColumnCount()];<br/><br/>            params[LOB_IDS.LOB_ID]          = lobID;<br/>            params[LOB_IDS.LOB_LENGTH]      = ValuePool.getLong(length);"
        },
        {
          "total_lines": 3,
          "line_start": 2155,
          "line_end": 2157,
          "content": "long offset,<br/>                                        byte[] dataBytes, int dataLength,<br/>                                        boolean isClob"
        },
        {
          "total_lines": 2,
          "line_start": 1370,
          "line_end": 1371,
          "content": "long offset, byte[] dataBytes,<br/>                                    int dataLength"
        },
        {
          "total_lines": 2,
          "line_start": 1652,
          "line_end": 1653,
          "content": "long lobID, InputStream inputStream,<br/>                                     long length"
        },
        {
          "total_lines": 2,
          "line_start": 820,
          "line_end": 821,
          "content": "ArrayUtil.byteArrayToChars(aBytes),<br/>                                            0"
        },
        {
          "total_lines": 2,
          "line_start": 1360,
          "line_end": 1361,
          "content": "dataBytes,<br/>                                            dataLength"
        },
        {
          "total_lines": 2,
          "line_start": 2155,
          "line_end": 2156,
          "content": "long offset,<br/>                                        byte[] dataBytes, int dataLength"
        },
        {
          "total_lines": 2,
          "line_start": 1538,
          "line_end": 1539,
          "content": "long offset, byte[] dataBytes,<br/>                           int dataLength"
        },
        {
          "total_lines": 2,
          "line_start": 2164,
          "line_end": 2165,
          "content": "dataBytes,<br/>                                            dataLength"
        },
        {
          "total_lines": 2,
          "line_start": 2174,
          "line_end": 2175,
          "content": "long offset,<br/>            byte[] dataBytes, int dataLength"
        },
        {
          "total_lines": 2,
          "line_start": 1455,
          "line_end": 1456,
          "content": "long lobID, InputStream inputStream,<br/>                              long length"
        },
        {
          "total_lines": 2,
          "line_start": 2095,
          "line_end": 2096,
          "content": "long lobID, InputStream inputStream,<br/>                                        long length"
        },
        {
          "total_lines": 2,
          "line_start": 1349,
          "line_end": 1350,
          "content": "long offset, byte[] dataBytes,<br/>                              int dataLength"
        },
        {
          "total_lines": 2,
          "line_start": 999,
          "line_end": 1000,
          "content": "ArrayUtil.byteArrayToChars(aBytes), 0,<br/>                                        (int) aLimit"
        },
        {
          "total_lines": 2,
          "line_start": 1568,
          "line_end": 1569,
          "content": "length = offset + dataLength;<br/>                result = setLength(lobID, length);"
        },
        {
          "total_lines": 2,
          "line_start": 1582,
          "line_end": 1583,
          "content": "long lobID, InputStream inputStream,<br/>                                     long length"
        },
        {
          "total_lines": 2,
          "line_start": 1638,
          "line_end": 1639,
          "content": "length = offset + dataLength;<br/>                result = setLength(lobID, length);"
        },
        {
          "total_lines": 2,
          "line_start": 1469,
          "line_end": 1470,
          "content": "long lobID, InputStream inputStream,<br/>                                    long length"
        },
        {
          "total_lines": 1,
          "line_start": 999,
          "line_end": 999,
          "content": "ArrayUtil.byteArrayToChars(aBytes), 0"
        },
        {
          "total_lines": 1,
          "line_start": 1268,
          "line_end": 1268,
          "content": "lobID, offset"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/ArrayType.java",
      "loc_duplicate": 21,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 134,
          "line_end": 140,
          "content": "sb.append(Tokens.T_ARRAY);<br/><br/>        if (maxCardinality != defaultArrayCardinality) {<br/>            sb.append('[').append(maxCardinality).append(']');<br/>        }<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 7,
          "line_start": 106,
          "line_end": 112,
          "content": "sb.append(Tokens.T_ARRAY);<br/><br/>        if (maxCardinality != defaultArrayCardinality) {<br/>            sb.append('[').append(maxCardinality).append(']');<br/>        }<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 2,
          "line_start": 293,
          "line_end": 294,
          "content": "SessionInterface sessionInterface,<br/>                                       Object o"
        },
        {
          "total_lines": 2,
          "line_start": 203,
          "line_end": 204,
          "content": "SessionInterface session, Object a,<br/>                                Type otherType"
        },
        {
          "total_lines": 1,
          "line_start": 518,
          "line_end": 518,
          "content": "Object a, SortAndSlice sort"
        },
        {
          "total_lines": 1,
          "line_start": 425,
          "line_end": 425,
          "content": "Session session, Type other, int operation"
        },
        {
          "total_lines": 1,
          "line_start": 509,
          "line_end": 509,
          "content": "Object a, SortAndSlice sort"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestINPredicateParameterizationAndCorrelation.java",
      "loc_duplicate": 164,
      "clones": [
          {
          "total_lines": 12,
          "line_start": 137,
          "line_end": 148,
          "content": "pstmt         = conn.prepareStatement(sql);<br/><br/>        pstmt.setInt(1, 0);<br/>        pstmt.setInt(2, 9);<br/><br/>        rs = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 12,
          "line_start": 121,
          "line_end": 132,
          "content": "pstmt         = conn.prepareStatement(sql);<br/><br/>        pstmt.setInt(1, 0);<br/>        pstmt.setInt(2, 9);<br/><br/>        rs = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 11,
          "line_start": 106,
          "line_end": 116,
          "content": "pstmt         = conn.prepareStatement(sql);<br/><br/>        pstmt.setInt(1, 0);<br/><br/>        rs = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 11,
          "line_start": 153,
          "line_end": 163,
          "content": "pstmt = conn.prepareStatement(sql);<br/><br/>        pstmt.setInt(1, 0);<br/><br/>        rs = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 10,
          "line_start": 137,
          "line_end": 146,
          "content": "pstmt         = conn.prepareStatement(sql);<br/><br/>        pstmt.setInt(1, 0);<br/>        pstmt.setInt(2, 9);<br/><br/>        rs = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 10,
          "line_start": 121,
          "line_end": 130,
          "content": "pstmt         = conn.prepareStatement(sql);<br/><br/>        pstmt.setInt(1, 0);<br/>        pstmt.setInt(2, 9);<br/><br/>        rs = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 9,
          "line_start": 153,
          "line_end": 161,
          "content": "pstmt = conn.prepareStatement(sql);<br/><br/>        pstmt.setInt(1, 0);<br/><br/>        rs = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 9,
          "line_start": 106,
          "line_end": 114,
          "content": "pstmt         = conn.prepareStatement(sql);<br/><br/>        pstmt.setInt(1, 0);<br/><br/>        rs = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 8,
          "line_start": 84,
          "line_end": 91,
          "content": "pstmt = conn.prepareStatement(sql);<br/><br/>        pstmt.setInt(1, 0);<br/>        pstmt.setInt(2, 9);<br/><br/>        rs = pstmt.executeQuery();<br/><br/>        rs.next();"
        },
        {
          "total_lines": 7,
          "line_start": 126,
          "line_end": 132,
          "content": "rs = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 7,
          "line_start": 34,
          "line_end": 40,
          "content": "import java.sql.Connection;<br/>import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.Statement;<br/><br/>import junit.framework.TestCase;<br/>import junit.framework.TestResult;"
        },
        {
          "total_lines": 7,
          "line_start": 142,
          "line_end": 148,
          "content": "rs = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 6,
          "line_start": 84,
          "line_end": 89,
          "content": "pstmt = conn.prepareStatement(sql);<br/><br/>        pstmt.setInt(1, 0);<br/>        pstmt.setInt(2, 9);<br/><br/>        rs = pstmt.executeQuery();"
        },
        {
          "total_lines": 6,
          "line_start": 35,
          "line_end": 40,
          "content": "import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.Statement;<br/><br/>import junit.framework.TestCase;<br/>import junit.framework.TestResult;"
        },
        {
          "total_lines": 5,
          "line_start": 170,
          "line_end": 174,
          "content": "rs = stmt.executeQuery(sql);<br/><br/>        rs.next();<br/><br/>        expectedCount = rs.getInt(1);"
        },
        {
          "total_lines": 5,
          "line_start": 100,
          "line_end": 104,
          "content": "rs  = stmt.executeQuery(sql);<br/><br/>        rs.next();<br/><br/>        expectedCount = rs.getInt(1);"
        },
        {
          "total_lines": 5,
          "line_start": 188,
          "line_end": 192,
          "content": "rs = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 3,
          "line_start": 89,
          "line_end": 91,
          "content": "rs = pstmt.executeQuery();<br/><br/>        rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 100,
          "line_end": 102,
          "content": "rs  = stmt.executeQuery(sql);<br/><br/>        rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 102,
          "line_end": 104,
          "content": "rs.next();<br/><br/>        expectedCount = rs.getInt(1);"
        },
        {
          "total_lines": 3,
          "line_start": 94,
          "line_end": 96,
          "content": "actualCount   = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 3,
          "line_start": 170,
          "line_end": 172,
          "content": "rs = stmt.executeQuery(sql);<br/><br/>        rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 172,
          "line_end": 174,
          "content": "rs.next();<br/><br/>        expectedCount = rs.getInt(1);"
        },
        {
          "total_lines": 2,
          "line_start": 86,
          "line_end": 87,
          "content": "pstmt.setInt(1, 0);<br/>        pstmt.setInt(2, 9);"
        },
        {
          "total_lines": 2,
          "line_start": 139,
          "line_end": 140,
          "content": "pstmt.setInt(1, 0);<br/>        pstmt.setInt(2, 9);"
        },
        {
          "total_lines": 2,
          "line_start": 123,
          "line_end": 124,
          "content": "pstmt.setInt(1, 0);<br/>        pstmt.setInt(2, 9);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/PersistentStoreCollectionSession.java",
      "loc_duplicate": 40,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 169,
          "line_end": 174,
          "content": "if (store == null) {<br/>                    store = session.database.logger.newStore(session, this,<br/>                            table);<br/>                }<br/><br/>                return store;"
        },
        {
          "total_lines": 6,
          "line_start": 129,
          "line_end": 134,
          "content": "if (store == null) {<br/>                    store = session.database.logger.newStore(session, this,<br/>                            table);<br/>                }<br/><br/>                return store;"
        },
        {
          "total_lines": 6,
          "line_start": 140,
          "line_end": 145,
          "content": "if (store == null) {<br/>                    store = session.database.logger.newStore(session, this,<br/>                            table);<br/>                }<br/><br/>                return store;"
        },
        {
          "total_lines": 3,
          "line_start": 235,
          "line_end": 237,
          "content": "PersistentStore store = (PersistentStore) it.next();<br/><br/>            store.release();"
        },
        {
          "total_lines": 3,
          "line_start": 269,
          "line_end": 271,
          "content": "PersistentStore store = (PersistentStore) it.next();<br/><br/>            store.release();"
        },
        {
          "total_lines": 3,
          "line_start": 218,
          "line_end": 220,
          "content": "PersistentStore store = (PersistentStore) it.next();<br/><br/>            store.release();"
        },
        {
          "total_lines": 3,
          "line_start": 252,
          "line_end": 254,
          "content": "PersistentStore store = (PersistentStore) it.next();<br/><br/>            store.release();"
        },
        {
          "total_lines": 2,
          "line_start": 320,
          "line_end": 321,
          "content": "int colIndex,<br/>                         int adjust"
        },
        {
          "total_lines": 2,
          "line_start": 177,
          "line_end": 178,
          "content": "ErrorCode.U_S0500,<br/>                                         \"PersistentStoreCollectionSession\""
        },
        {
          "total_lines": 2,
          "line_start": 374,
          "line_end": 375,
          "content": "store.getTable().getPersistenceId(),<br/>                                       store"
        },
        {
          "total_lines": 2,
          "line_start": 109,
          "line_end": 110,
          "content": "ErrorCode.U_S0500,<br/>                                         \"PersistentStoreCollectionSession\""
        },
        {
          "total_lines": 2,
          "line_start": 386,
          "line_end": 387,
          "content": "store.getTable().getPersistenceId(),<br/>                                     store"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/ReaderInputStream.java",
      "loc_duplicate": 7,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import java.io.IOException;<br/>import java.io.InputStream;<br/>import java.io.Reader;"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import java.io.IOException;<br/>import java.io.InputStream;"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.io.InputStream;<br/>import java.io.Reader;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/HashMappedList.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 194,
          "line_end": 196,
          "content": "checkRange(index);<br/><br/>        return objectKeyTable[index];"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCParameterMetaData.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 366,
          "line_end": 374,
          "content": "if (this.translateTTIType) {<br/>            if (type.isIntervalType()) {<br/>                type = ((IntervalType) type).getCharacterType();<br/>            } else if (type.isDateTimeTypeWithZone()) {<br/>                type = ((DateTimeType) type).getDateTimeTypeWithoutZone();<br/>            }<br/>        }<br/><br/>        return type;"
        },
        {
          "total_lines": 5,
          "line_start": 287,
          "line_end": 291,
          "content": "if (isWrapperFor(iface)) {<br/>            return (T) this;<br/>        }<br/><br/>        throw JDBCUtil.invalidArgument(\"iface: \" + iface);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestMerge.java",
      "loc_duplicate": 175,
      "clones": [
          {
          "total_lines": 20,
          "line_start": 76,
          "line_end": 95,
          "content": "int               rows = 0;<br/>        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \" + expected<br/>                        + \" rows total:\\n\";<br/><br/>        while (rs.next()) {<br/>            for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                result += rsmd.getColumnLabel(i + 1) + \":\"<br/>                          + rs.getString(i + 1) + \":\";<br/>            }<br/><br/>            result += \"\\n\";<br/><br/>            rows++;<br/>        }<br/><br/>        rs.close();<br/>        System.out.println(result);<br/>        assertEquals(expected, rows);"
        },
        {
          "total_lines": 19,
          "line_start": 76,
          "line_end": 94,
          "content": "int               rows = 0;<br/>        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \" + expected<br/>                        + \" rows total:\\n\";<br/><br/>        while (rs.next()) {<br/>            for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                result += rsmd.getColumnLabel(i + 1) + \":\"<br/>                          + rs.getString(i + 1) + \":\";<br/>            }<br/><br/>            result += \"\\n\";<br/><br/>            rows++;<br/>        }<br/><br/>        rs.close();<br/>        System.out.println(result);"
        },
        {
          "total_lines": 19,
          "line_start": 77,
          "line_end": 95,
          "content": "ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \" + expected<br/>                        + \" rows total:\\n\";<br/><br/>        while (rs.next()) {<br/>            for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                result += rsmd.getColumnLabel(i + 1) + \":\"<br/>                          + rs.getString(i + 1) + \":\";<br/>            }<br/><br/>            result += \"\\n\";<br/><br/>            rows++;<br/>        }<br/><br/>        rs.close();<br/>        System.out.println(result);<br/>        assertEquals(expected, rows);"
        },
        {
          "total_lines": 18,
          "line_start": 77,
          "line_end": 94,
          "content": "ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \" + expected<br/>                        + \" rows total:\\n\";<br/><br/>        while (rs.next()) {<br/>            for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                result += rsmd.getColumnLabel(i + 1) + \":\"<br/>                          + rs.getString(i + 1) + \":\";<br/>            }<br/><br/>            result += \"\\n\";<br/><br/>            rows++;<br/>        }<br/><br/>        rs.close();<br/>        System.out.println(result);"
        },
        {
          "total_lines": 18,
          "line_start": 76,
          "line_end": 93,
          "content": "int               rows = 0;<br/>        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \" + expected<br/>                        + \" rows total:\\n\";<br/><br/>        while (rs.next()) {<br/>            for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                result += rsmd.getColumnLabel(i + 1) + \":\"<br/>                          + rs.getString(i + 1) + \":\";<br/>            }<br/><br/>            result += \"\\n\";<br/><br/>            rows++;<br/>        }<br/><br/>        rs.close();"
        },
        {
          "total_lines": 17,
          "line_start": 77,
          "line_end": 93,
          "content": "ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \" + expected<br/>                        + \" rows total:\\n\";<br/><br/>        while (rs.next()) {<br/>            for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                result += rsmd.getColumnLabel(i + 1) + \":\"<br/>                          + rs.getString(i + 1) + \":\";<br/>            }<br/><br/>            result += \"\\n\";<br/><br/>            rows++;<br/>        }<br/><br/>        rs.close();"
        },
        {
          "total_lines": 10,
          "line_start": 34,
          "line_end": 43,
          "content": "import java.sql.Connection;<br/>import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;<br/>import java.sql.Statement;<br/>import java.util.Enumeration;<br/><br/>import junit.framework.TestCase;<br/>import junit.framework.TestResult;"
        },
        {
          "total_lines": 9,
          "line_start": 35,
          "line_end": 43,
          "content": "import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;<br/>import java.sql.Statement;<br/>import java.util.Enumeration;<br/><br/>import junit.framework.TestCase;<br/>import junit.framework.TestResult;"
        },
        {
          "total_lines": 9,
          "line_start": 34,
          "line_end": 42,
          "content": "import java.sql.Connection;<br/>import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;<br/>import java.sql.Statement;<br/>import java.util.Enumeration;<br/><br/>import junit.framework.TestCase;"
        },
        {
          "total_lines": 8,
          "line_start": 36,
          "line_end": 43,
          "content": "import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;<br/>import java.sql.Statement;<br/>import java.util.Enumeration;<br/><br/>import junit.framework.TestCase;<br/>import junit.framework.TestResult;"
        },
        {
          "total_lines": 8,
          "line_start": 35,
          "line_end": 42,
          "content": "import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;<br/>import java.sql.Statement;<br/>import java.util.Enumeration;<br/><br/>import junit.framework.TestCase;"
        },
        {
          "total_lines": 6,
          "line_start": 61,
          "line_end": 66,
          "content": "super.setUp();<br/><br/>        try {<br/>            connection = super.newConnection();<br/>            stmnt      = connection.createStatement();<br/>        } catch (Exception e) {}"
        },
        {
          "total_lines": 5,
          "line_start": 76,
          "line_end": 80,
          "content": "int               rows = 0;<br/>        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \" + expected<br/>                        + \" rows total:\\n\";"
        },
        {
          "total_lines": 3,
          "line_start": 93,
          "line_end": 95,
          "content": "rs.close();<br/>        System.out.println(result);<br/>        assertEquals(expected, rows);"
        },
        {
          "total_lines": 2,
          "line_start": 76,
          "line_end": 77,
          "content": "int               rows = 0;<br/>        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);"
        },
        {
          "total_lines": 2,
          "line_start": 77,
          "line_end": 78,
          "content": "ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/>        ResultSetMetaData rsmd = rs.getMetaData();"
        },
        {
          "total_lines": 2,
          "line_start": 399,
          "line_end": 400,
          "content": "e.printStackTrace();<br/>            System.out.println(\"TestSql.tearDown() error: \" + e.getMessage());"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/FunctionCustom.java",
      "loc_duplicate": 334,
      "clones": [
          {
          "total_lines": 15,
          "line_start": 3330,
          "line_end": 3344,
          "content": "if (nodes[0].dataType == null) {<br/>                    nodes[0].dataType = Type.SQL_DOUBLE;<br/>                }<br/><br/>                if (nodes[1].dataType == null) {<br/>                    nodes[1].dataType = Type.SQL_VARCHAR;<br/>                }<br/><br/>                if (!nodes[0].dataType.isNumberType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }<br/><br/>                if (!nodes[1].dataType.isCharacterType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }"
        },
        {
          "total_lines": 15,
          "line_start": 3310,
          "line_end": 3324,
          "content": "if (nodes[0].dataType == null) {<br/>                    nodes[0].dataType = Type.SQL_DOUBLE;<br/>                }<br/><br/>                if (nodes[1].dataType == null) {<br/>                    nodes[1].dataType = Type.SQL_VARCHAR;<br/>                }<br/><br/>                if (!nodes[0].dataType.isNumberType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }<br/><br/>                if (!nodes[1].dataType.isCharacterType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }"
        },
        {
          "total_lines": 11,
          "line_start": 3330,
          "line_end": 3340,
          "content": "if (nodes[0].dataType == null) {<br/>                    nodes[0].dataType = Type.SQL_DOUBLE;<br/>                }<br/><br/>                if (nodes[1].dataType == null) {<br/>                    nodes[1].dataType = Type.SQL_VARCHAR;<br/>                }<br/><br/>                if (!nodes[0].dataType.isNumberType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }"
        },
        {
          "total_lines": 11,
          "line_start": 3334,
          "line_end": 3344,
          "content": "if (nodes[1].dataType == null) {<br/>                    nodes[1].dataType = Type.SQL_VARCHAR;<br/>                }<br/><br/>                if (!nodes[0].dataType.isNumberType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }<br/><br/>                if (!nodes[1].dataType.isCharacterType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }"
        },
        {
          "total_lines": 11,
          "line_start": 3310,
          "line_end": 3320,
          "content": "if (nodes[0].dataType == null) {<br/>                    nodes[0].dataType = Type.SQL_DOUBLE;<br/>                }<br/><br/>                if (nodes[1].dataType == null) {<br/>                    nodes[1].dataType = Type.SQL_VARCHAR;<br/>                }<br/><br/>                if (!nodes[0].dataType.isNumberType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }"
        },
        {
          "total_lines": 11,
          "line_start": 3314,
          "line_end": 3324,
          "content": "if (nodes[1].dataType == null) {<br/>                    nodes[1].dataType = Type.SQL_VARCHAR;<br/>                }<br/><br/>                if (!nodes[0].dataType.isNumberType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }<br/><br/>                if (!nodes[1].dataType.isCharacterType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }"
        },
        {
          "total_lines": 11,
          "line_start": 704,
          "line_end": 714,
          "content": "parseList = new short[] {<br/>                    Tokens.OPENBRACKET, Tokens.X_KEYSET, 10,<br/>                    Tokens.SQL_TSI_FRAC_SECOND, Tokens.SQL_TSI_MILLI_SECOND,<br/>                    Tokens.SQL_TSI_SECOND, Tokens.SQL_TSI_MINUTE,<br/>                    Tokens.SQL_TSI_HOUR, Tokens.SQL_TSI_DAY,<br/>                    Tokens.SQL_TSI_WEEK, Tokens.SQL_TSI_MONTH,<br/>                    Tokens.SQL_TSI_QUARTER, Tokens.SQL_TSI_YEAR, Tokens.COMMA,<br/>                    Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION,<br/>                    Tokens.CLOSEBRACKET<br/>                };<br/>                break;"
        },
        {
          "total_lines": 11,
          "line_start": 690,
          "line_end": 700,
          "content": "parseList = new short[] {<br/>                    Tokens.OPENBRACKET, Tokens.X_KEYSET, 10,<br/>                    Tokens.SQL_TSI_FRAC_SECOND, Tokens.SQL_TSI_MILLI_SECOND,<br/>                    Tokens.SQL_TSI_SECOND, Tokens.SQL_TSI_MINUTE,<br/>                    Tokens.SQL_TSI_HOUR, Tokens.SQL_TSI_DAY,<br/>                    Tokens.SQL_TSI_WEEK, Tokens.SQL_TSI_MONTH,<br/>                    Tokens.SQL_TSI_QUARTER, Tokens.SQL_TSI_YEAR, Tokens.COMMA,<br/>                    Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION,<br/>                    Tokens.CLOSEBRACKET<br/>                };<br/>                break;"
        },
        {
          "total_lines": 10,
          "line_start": 3250,
          "line_end": 3259,
          "content": "if (nodes[0].dataType == null) {<br/>                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;<br/>                }<br/><br/>                if (!nodes[0].dataType.isDateOrTimestampType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }<br/><br/>                dataType = Type.SQL_TIMESTAMP_NO_FRACTION;<br/>                break;"
        },
        {
          "total_lines": 10,
          "line_start": 3221,
          "line_end": 3230,
          "content": "if (nodes[0].dataType == null) {<br/>                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;<br/>                }<br/><br/>                if (!nodes[0].dataType.isDateOrTimestampType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }<br/><br/>                dataType = Type.SQL_TIMESTAMP_NO_FRACTION;<br/>                break;"
        },
        {
          "total_lines": 7,
          "line_start": 3314,
          "line_end": 3320,
          "content": "if (nodes[1].dataType == null) {<br/>                    nodes[1].dataType = Type.SQL_VARCHAR;<br/>                }<br/><br/>                if (!nodes[0].dataType.isNumberType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 3298,
          "line_end": 3304,
          "content": "if (nodes[0].dataType == null) {<br/>                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;<br/>                }<br/><br/>                if (nodes[1].dataType == null) {<br/>                    nodes[1].dataType = Type.SQL_VARCHAR;<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 3282,
          "line_end": 3288,
          "content": "if (nodes[0].dataType == null) {<br/>                    nodes[0].dataType = Type.SQL_TIMESTAMP_NO_FRACTION;<br/>                }<br/><br/>                if (nodes[1].dataType == null) {<br/>                    nodes[1].dataType = Type.SQL_VARCHAR;<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 3310,
          "line_end": 3316,
          "content": "if (nodes[0].dataType == null) {<br/>                    nodes[0].dataType = Type.SQL_DOUBLE;<br/>                }<br/><br/>                if (nodes[1].dataType == null) {<br/>                    nodes[1].dataType = Type.SQL_VARCHAR;<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 3330,
          "line_end": 3336,
          "content": "if (nodes[0].dataType == null) {<br/>                    nodes[0].dataType = Type.SQL_DOUBLE;<br/>                }<br/><br/>                if (nodes[1].dataType == null) {<br/>                    nodes[1].dataType = Type.SQL_VARCHAR;<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 3318,
          "line_end": 3324,
          "content": "if (!nodes[0].dataType.isNumberType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }<br/><br/>                if (!nodes[1].dataType.isCharacterType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 3334,
          "line_end": 3340,
          "content": "if (nodes[1].dataType == null) {<br/>                    nodes[1].dataType = Type.SQL_VARCHAR;<br/>                }<br/><br/>                if (!nodes[0].dataType.isNumberType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 3338,
          "line_end": 3344,
          "content": "if (!nodes[0].dataType.isNumberType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }<br/><br/>                if (!nodes[1].dataType.isCharacterType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 609,
          "line_end": 614,
          "content": "parseList = new short[] {<br/>                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA,<br/>                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA,<br/>                    Tokens.QUESTION, Tokens.CLOSEBRACKET<br/>                };<br/>                break;"
        },
        {
          "total_lines": 6,
          "line_start": 1706,
          "line_end": 1711,
          "content": "if (data[0] == null) {<br/>                    return null;<br/>                }<br/><br/>                return dataType.convertToType(session, data[0],<br/>                                              nodes[0].dataType);"
        },
        {
          "total_lines": 6,
          "line_start": 632,
          "line_end": 637,
          "content": "parseList = new short[] {<br/>                    Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA,<br/>                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA,<br/>                    Tokens.QUESTION, Tokens.CLOSEBRACKET<br/>                };<br/>                break;"
        },
        {
          "total_lines": 6,
          "line_start": 1235,
          "line_end": 1240,
          "content": "if (data[0] == null) {<br/>                    return null;<br/>                }<br/><br/>                return dataType.convertToType(session, data[0],<br/>                                              nodes[0].dataType);"
        },
        {
          "total_lines": 5,
          "line_start": 1478,
          "line_end": 1482,
          "content": "if (data[0] == null) {<br/>                    return null;<br/>                }<br/><br/>                double d = NumberType.toDouble(data[0]);"
        },
        {
          "total_lines": 5,
          "line_start": 1386,
          "line_end": 1390,
          "content": "if (data[0] == null) {<br/>                        return null;<br/>                    }<br/><br/>                    ts = (TimestampData) data[0];"
        },
        {
          "total_lines": 5,
          "line_start": 1396,
          "line_end": 1400,
          "content": "if (data[0] == null) {<br/>                    return null;<br/>                }<br/><br/>                double d = NumberType.toDouble(data[0]);"
        },
        {
          "total_lines": 5,
          "line_start": 1451,
          "line_end": 1455,
          "content": "if (data[0] == null) {<br/>                    return null;<br/>                }<br/><br/>                double d = NumberType.toDouble(data[0]);"
        },
        {
          "total_lines": 5,
          "line_start": 1423,
          "line_end": 1427,
          "content": "if (data[0] == null) {<br/>                    return null;<br/>                }<br/><br/>                double d = NumberType.toDouble(data[0]);"
        },
        {
          "total_lines": 5,
          "line_start": 3680,
          "line_end": 3684,
          "content": "if (i > 0) {<br/>                sb.append(',');<br/>            }<br/><br/>            sb.append(nodes[i].getSQL());"
        },
        {
          "total_lines": 5,
          "line_start": 1369,
          "line_end": 1373,
          "content": "if (data[0] == null) {<br/>                        return null;<br/>                    }<br/><br/>                    ts = (TimestampData) data[0];"
        },
        {
          "total_lines": 5,
          "line_start": 1442,
          "line_end": 1446,
          "content": "if (data[0] == null) {<br/>                    return null;<br/>                }<br/><br/>                double d = NumberType.toDouble(data[0]);"
        },
        {
          "total_lines": 5,
          "line_start": 1460,
          "line_end": 1464,
          "content": "if (data[0] == null) {<br/>                    return null;<br/>                }<br/><br/>                double d = NumberType.toDouble(data[0]);"
        },
        {
          "total_lines": 5,
          "line_start": 1405,
          "line_end": 1409,
          "content": "if (data[0] == null) {<br/>                    return null;<br/>                }<br/><br/>                double d = NumberType.toDouble(data[0]);"
        },
        {
          "total_lines": 5,
          "line_start": 1414,
          "line_end": 1418,
          "content": "if (data[0] == null) {<br/>                    return null;<br/>                }<br/><br/>                double d = NumberType.toDouble(data[0]);"
        },
        {
          "total_lines": 3,
          "line_start": 2202,
          "line_end": 2204,
          "content": "dataType = Type.SQL_VARCHAR_DEFAULT;<br/><br/>                return;"
        },
        {
          "total_lines": 3,
          "line_start": 3350,
          "line_end": 3352,
          "content": "dataType = CharacterType.getCharacterType(Types.SQL_VARCHAR,<br/>                        6);<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 482,
          "line_end": 484,
          "content": "break;<br/><br/>                default :"
        },
        {
          "total_lines": 3,
          "line_start": 2437,
          "line_end": 2439,
          "content": "break;<br/><br/>                    default :"
        },
        {
          "total_lines": 3,
          "line_start": 2197,
          "line_end": 2199,
          "content": "dataType = Type.SQL_VARCHAR_DEFAULT;<br/><br/>                return;"
        },
        {
          "total_lines": 3,
          "line_start": 2915,
          "line_end": 2917,
          "content": "dataType = Type.SQL_INTEGER;<br/><br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 2075,
          "line_end": 2077,
          "content": "break;<br/><br/>                    default :"
        },
        {
          "total_lines": 3,
          "line_start": 3233,
          "line_end": 3235,
          "content": "dataType = CharacterType.getCharacterType(Types.SQL_VARCHAR,<br/>                        6);<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 2219,
          "line_end": 2221,
          "content": "dataType = Type.SQL_VARCHAR_DEFAULT;<br/><br/>                return;"
        },
        {
          "total_lines": 2,
          "line_start": 618,
          "line_end": 619,
          "content": "parseList = doubleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 3294,
          "line_end": 3295,
          "content": "dataType = Type.SQL_TIMESTAMP_NO_FRACTION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 737,
          "line_end": 738,
          "content": "newNodes[3] = nodes[2];<br/>                    nodes = newNodes;"
        },
        {
          "total_lines": 2,
          "line_start": 3367,
          "line_end": 3368,
          "content": "dataType = Type.SQL_TIMESTAMP_WITH_TIME_ZONE;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 742,
          "line_end": 743,
          "content": "newNodes[3] = nodes[2];<br/>                    nodes = newNodes;"
        },
        {
          "total_lines": 2,
          "line_start": 3246,
          "line_end": 3247,
          "content": "dataType = Type.SQL_TIMESTAMP_WITH_TIME_ZONE;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 3346,
          "line_end": 3347,
          "content": "dataType = Type.SQL_INTERVAL_YEAR_TO_MONTH_MAX_PRECISION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 652,
          "line_end": 653,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 3363,
          "line_end": 3364,
          "content": "dataType = Type.SQL_TIMESTAMP_NO_FRACTION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 3375,
          "line_end": 3376,
          "content": "dataType = Type.SQL_INTERVAL_DAY_TO_SECOND_MAX_PRECISION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1652,
          "line_end": 1653,
          "content": "v = BitMap.and(a, b);<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 1647,
          "line_end": 1648,
          "content": "v = BitMap.and(a, b);<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 1145,
          "line_end": 1146,
          "content": "session, data[0], data[1],<br/>                                    nodes[RIGHT].dataType"
        },
        {
          "total_lines": 2,
          "line_start": 1153,
          "line_end": 1154,
          "content": "session, data[0], data[1],<br/>                                         nodes[RIGHT].dataType"
        },
        {
          "total_lines": 2,
          "line_start": 3406,
          "line_end": 3407,
          "content": "dataType = Type.SQL_TIMESTAMP_WITH_TIME_ZONE;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 761,
          "line_end": 762,
          "content": "ValuePool.getInt(extractSpec),<br/>                                        Type.SQL_INTEGER"
        },
        {
          "total_lines": 2,
          "line_start": 3326,
          "line_end": 3327,
          "content": "dataType = Type.SQL_INTERVAL_DAY_TO_SECOND_MAX_PRECISION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 642,
          "line_end": 643,
          "content": "parseList = optionalSingleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 570,
          "line_end": 571,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 594,
          "line_end": 595,
          "content": "parseList = doubleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 662,
          "line_end": 663,
          "content": "parseList = emptyParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 647,
          "line_end": 648,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 3383,
          "line_end": 3384,
          "content": "dataType = Type.SQL_INTERVAL_YEAR_TO_MONTH_MAX_PRECISION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 3306,
          "line_end": 3307,
          "content": "dataType = Type.SQL_TIMESTAMP_NO_FRACTION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 772,
          "line_end": 773,
          "content": "ValuePool.getInt(extractSpec),<br/>                                        Type.SQL_INTEGER"
        },
        {
          "total_lines": 2,
          "line_start": 539,
          "line_end": 540,
          "content": "parseList = emptyParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 717,
          "line_end": 718,
          "content": "parseList = optionalSingleParamList;<br/>                break;"
        },
        {
          "total_lines": 1,
          "line_start": 683,
          "line_end": 683,
          "content": "Tokens.X_KEYSET, 2"
        },
        {
          "total_lines": 1,
          "line_start": 682,
          "line_end": 682,
          "content": "Tokens.X_KEYSET, 2"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TriggerClass.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 43,
          "line_end": 44,
          "content": "String trigName, String tabName,<br/>                     Object[] oldRow, Object[] newRow"
        },
        {
          "total_lines": 1,
          "line_start": 54,
          "line_end": 54,
          "content": "String database, String user, String password"
        },
        {
          "total_lines": 1,
          "line_start": 43,
          "line_end": 43,
          "content": "int type, String trigName"
        },
        {
          "total_lines": 1,
          "line_start": 49,
          "line_end": 49,
          "content": "String database, String user, String password"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/server/PgType.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 486,
          "line_end": 487,
          "content": "e.getMessage(), e.getSQLState(),<br/>            e.getErrorCode()"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ClientConnection.java",
      "loc_duplicate": 22,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 572,
          "line_end": 576,
          "content": "if (calendarGMT == null) {<br/>            calendarGMT = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));<br/>        }<br/><br/>        return calendarGMT;"
        },
        {
          "total_lines": 4,
          "line_start": 130,
          "line_end": 133,
          "content": "String path,<br/>                            String database, boolean isTLS,<br/>                            boolean isTLSWrapper, String user,<br/>                            String password"
        },
        {
          "total_lines": 3,
          "line_start": 130,
          "line_end": 132,
          "content": "int port, String path,<br/>                            String database, boolean isTLS,<br/>                            boolean isTLSWrapper, String user"
        },
        {
          "total_lines": 3,
          "line_start": 562,
          "line_end": 564,
          "content": "TimeZone zone = TimeZone.getTimeZone(zoneString);<br/><br/>            calendar = new GregorianCalendar(zone);"
        },
        {
          "total_lines": 3,
          "line_start": 131,
          "line_end": 133,
          "content": "String database, boolean isTLS,<br/>                            boolean isTLSWrapper, String user,<br/>                            String password"
        },
        {
          "total_lines": 2,
          "line_start": 131,
          "line_end": 132,
          "content": "boolean isTLS,<br/>                            boolean isTLSWrapper, String user"
        },
        {
          "total_lines": 2,
          "line_start": 130,
          "line_end": 131,
          "content": "String host, int port, String path,<br/>                            String database"
        }
        
      ]
    },
    {
      "path": "hsqldb/integration/extAuthWithSpring/src/org/hsqldb/sample/SpringExtAuth.java",
      "loc_duplicate": 32,
      "clones": [
          {
          "total_lines": 16,
          "line_start": 158,
          "line_end": 173,
          "content": "if (st != null) try {<br/>                st.close();<br/>            } catch (SQLException se) {<br/>                log.error(\"Failed to close emulation database setup Connection\",<br/>                        se);<br/>            } finally {<br/>                st = null;  // Encourage GC<br/>            }<br/>            if (c != null) try {<br/>                c.close();<br/>            } catch (SQLException se) {<br/>                log.error(\"Failed to close emulation database setup Connection\",<br/>                        se);<br/>            } finally {<br/>                c = null;  // Encourage GC<br/>            }"
        },
        {
          "total_lines": 16,
          "line_start": 123,
          "line_end": 138,
          "content": "if (st != null) try {<br/>                st.close();<br/>            } catch (SQLException se) {<br/>                log.error(\"Failed to close emulation database setup Connection\",<br/>                        se);<br/>            } finally {<br/>                st = null;  // Encourage GC<br/>            }<br/>            if (c != null) try {<br/>                c.close();<br/>            } catch (SQLException se) {<br/>                log.error(\"Failed to close emulation database setup Connection\",<br/>                        se);<br/>            } finally {<br/>                c = null;  // Encourage GC<br/>            }"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestHashStructures.java",
      "loc_duplicate": 167,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 542,
          "line_end": 550,
          "content": "int b = r.nextInt();<br/><br/>        if (b == Integer.MIN_VALUE) {<br/>            b = Integer.MAX_VALUE;<br/>        }<br/><br/>        b = Math.abs(b);<br/><br/>        return b % range;"
        },
        {
          "total_lines": 7,
          "line_start": 542,
          "line_end": 548,
          "content": "int b = r.nextInt();<br/><br/>        if (b == Integer.MIN_VALUE) {<br/>            b = Integer.MAX_VALUE;<br/>        }<br/><br/>        b = Math.abs(b);"
        },
        {
          "total_lines": 7,
          "line_start": 119,
          "line_end": 125,
          "content": "compareByUIteratorInt(uMap, hIntMap);<br/>            compareByHIteratorInt(uMap, hIntMap);<br/><br/>            //<br/>            clearByIntIterator(uMap, hIntMap);<br/>            compareByUIteratorInt(uMap, hIntMap);<br/>            compareByHIteratorInt(uMap, hIntMap);"
        },
        {
          "total_lines": 7,
          "line_start": 109,
          "line_end": 115,
          "content": "compareByUIteratorInt(uMap, hIntMap);<br/>            compareByHIteratorInt(uMap, hIntMap);<br/><br/>            //<br/>            clearByIntIterator(uMap, hIntMap);<br/>            compareByUIteratorInt(uMap, hIntMap);<br/>            compareByHIteratorInt(uMap, hIntMap);"
        },
        {
          "total_lines": 6,
          "line_start": 143,
          "line_end": 148,
          "content": "compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);<br/>            populateByRandomIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);<br/>            depopulateRandomly(uMap, hMap, 20);"
        },
        {
          "total_lines": 6,
          "line_start": 149,
          "line_end": 154,
          "content": "compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);<br/>            populateByRandomIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);<br/>            depopulateRandomly(uMap, hMap, 20);"
        },
        {
          "total_lines": 5,
          "line_start": 144,
          "line_end": 148,
          "content": "compareByHIterator(uMap, hMap);<br/>            populateByRandomIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);<br/>            depopulateRandomly(uMap, hMap, 20);"
        },
        {
          "total_lines": 5,
          "line_start": 143,
          "line_end": 147,
          "content": "compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);<br/>            populateByRandomIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 5,
          "line_start": 150,
          "line_end": 154,
          "content": "compareByHIterator(uMap, hMap);<br/>            populateByRandomIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);<br/>            depopulateRandomly(uMap, hMap, 20);"
        },
        {
          "total_lines": 5,
          "line_start": 149,
          "line_end": 153,
          "content": "compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);<br/>            populateByRandomIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 4,
          "line_start": 144,
          "line_end": 147,
          "content": "compareByHIterator(uMap, hMap);<br/>            populateByRandomIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 4,
          "line_start": 149,
          "line_end": 152,
          "content": "compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);<br/>            populateByRandomIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);"
        },
        {
          "total_lines": 4,
          "line_start": 143,
          "line_end": 146,
          "content": "compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);<br/>            populateByRandomIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);"
        },
        {
          "total_lines": 4,
          "line_start": 76,
          "line_end": 79,
          "content": "// -<br/>            populateBySerialIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 4,
          "line_start": 150,
          "line_end": 153,
          "content": "compareByHIterator(uMap, hMap);<br/>            populateByRandomIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 4,
          "line_start": 145,
          "line_end": 148,
          "content": "populateByRandomIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);<br/>            depopulateRandomly(uMap, hMap, 20);"
        },
        {
          "total_lines": 4,
          "line_start": 151,
          "line_end": 154,
          "content": "populateByRandomIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);<br/>            depopulateRandomly(uMap, hMap, 20);"
        },
        {
          "total_lines": 3,
          "line_start": 320,
          "line_end": 322,
          "content": "java.util.HashMap uMap,<br/>                                 org.hsqldb.lib.HashMap hMap,<br/>                                 int testSize"
        },
        {
          "total_lines": 3,
          "line_start": 303,
          "line_end": 305,
          "content": "DoubleIntIndex intLookup,<br/>                                    org.hsqldb.lib.IntKeyHashMap hMap,<br/>                                    int testSize"
        },
        {
          "total_lines": 3,
          "line_start": 155,
          "line_end": 157,
          "content": "populateBySerialIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 3,
          "line_start": 352,
          "line_end": 354,
          "content": "java.util.HashMap uMap,<br/>                            org.hsqldb.lib.HashMap hMap,<br/>                            int testCount"
        },
        {
          "total_lines": 3,
          "line_start": 117,
          "line_end": 119,
          "content": "// -<br/>            populateBySerialIntKeysInt(uMap, hIntMap, testSize);<br/>            compareByUIteratorInt(uMap, hIntMap);"
        },
        {
          "total_lines": 3,
          "line_start": 255,
          "line_end": 257,
          "content": "java.util.HashMap uMap,<br/>                                 org.hsqldb.lib.HashMap hMap,<br/>                                 int testSize"
        },
        {
          "total_lines": 3,
          "line_start": 76,
          "line_end": 78,
          "content": "// -<br/>            populateBySerialIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);"
        },
        {
          "total_lines": 3,
          "line_start": 336,
          "line_end": 338,
          "content": "java.util.HashMap uMap,<br/>                                    org.hsqldb.lib.IntKeyHashMap hMap,<br/>                                    int testSize"
        },
        {
          "total_lines": 3,
          "line_start": 271,
          "line_end": 273,
          "content": "java.util.HashMap uMap,<br/>                                    org.hsqldb.lib.IntKeyHashMap hMap,<br/>                                    int testSize"
        },
        {
          "total_lines": 3,
          "line_start": 384,
          "line_end": 386,
          "content": "java.util.HashMap uMap,<br/>                              org.hsqldb.lib.HashMap hMap,<br/>                              int testCount"
        },
        {
          "total_lines": 3,
          "line_start": 62,
          "line_end": 64,
          "content": "populateBySerialIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 3,
          "line_start": 142,
          "line_end": 144,
          "content": "populateBySerialIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 3,
          "line_start": 287,
          "line_end": 289,
          "content": "DoubleIntIndex intLookup,<br/>                                    org.hsqldb.lib.IntKeyHashMap hMap,<br/>                                    int testSize"
        },
        {
          "total_lines": 2,
          "line_start": 63,
          "line_end": 64,
          "content": "compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 2,
          "line_start": 142,
          "line_end": 143,
          "content": "populateBySerialIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);"
        },
        {
          "total_lines": 2,
          "line_start": 78,
          "line_end": 79,
          "content": "compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 2,
          "line_start": 104,
          "line_end": 105,
          "content": "compareByUIteratorInt(uMap, hIntMap);<br/>            compareByHIteratorInt(uMap, hIntMap);"
        },
        {
          "total_lines": 2,
          "line_start": 505,
          "line_end": 506,
          "content": "java.util.HashMap uMap,<br/>                               org.hsqldb.lib.IntKeyHashMap hMap"
        },
        {
          "total_lines": 2,
          "line_start": 68,
          "line_end": 69,
          "content": "compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 2,
          "line_start": 336,
          "line_end": 337,
          "content": "java.util.HashMap uMap,<br/>                                    org.hsqldb.lib.IntKeyHashMap hMap"
        },
        {
          "total_lines": 2,
          "line_start": 83,
          "line_end": 84,
          "content": "compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 2,
          "line_start": 101,
          "line_end": 102,
          "content": "populateBySerialIntKeysInt(uMap, hIntMap, testSize);<br/>            compareByUIteratorInt(uMap, hIntMap);"
        },
        {
          "total_lines": 2,
          "line_start": 488,
          "line_end": 489,
          "content": "java.util.HashMap uMap,<br/>                               org.hsqldb.lib.IntKeyHashMap hMap"
        },
        {
          "total_lines": 2,
          "line_start": 271,
          "line_end": 272,
          "content": "java.util.HashMap uMap,<br/>                                    org.hsqldb.lib.IntKeyHashMap hMap"
        },
        {
          "total_lines": 2,
          "line_start": 73,
          "line_end": 74,
          "content": "compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 2,
          "line_start": 62,
          "line_end": 63,
          "content": "populateBySerialIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);"
        },
        {
          "total_lines": 2,
          "line_start": 456,
          "line_end": 457,
          "content": "java.util.HashMap uMap,<br/>                            org.hsqldb.lib.HashMap hMap"
        },
        {
          "total_lines": 2,
          "line_start": 303,
          "line_end": 304,
          "content": "DoubleIntIndex intLookup,<br/>                                    org.hsqldb.lib.IntKeyHashMap hMap"
        },
        {
          "total_lines": 2,
          "line_start": 472,
          "line_end": 473,
          "content": "java.util.HashMap uMap,<br/>                            org.hsqldb.lib.HashMap hMap"
        },
        {
          "total_lines": 2,
          "line_start": 156,
          "line_end": 157,
          "content": "compareByUIterator(uMap, hMap);<br/>            compareByHIterator(uMap, hMap);"
        },
        {
          "total_lines": 2,
          "line_start": 155,
          "line_end": 156,
          "content": "populateBySerialIntKeys(uMap, hMap, testSize);<br/>            compareByUIterator(uMap, hMap);"
        },
        {
          "total_lines": 2,
          "line_start": 287,
          "line_end": 288,
          "content": "DoubleIntIndex intLookup,<br/>                                    org.hsqldb.lib.IntKeyHashMap hMap"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/RowType.java",
      "loc_duplicate": 7,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 204,
          "line_end": 205,
          "content": "SessionInterface sessionInterface,<br/>                                       Object o"
        },
        {
          "total_lines": 2,
          "line_start": 172,
          "line_end": 173,
          "content": "SessionInterface session, Object a,<br/>                                Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 359,
          "line_end": 360,
          "content": "Object a, Object b,<br/>                       SortAndSlice sort"
        },
        {
          "total_lines": 1,
          "line_start": 327,
          "line_end": 327,
          "content": "Session session, Type other, int operation"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/ConnectionDialogCommon.java",
      "loc_duplicate": 36,
      "clones": [
          {
          "total_lines": 10,
          "line_start": 316,
          "line_end": 325,
          "content": "Class c =<br/>                    Class.forName(\"sun.security.action.GetPropertyAction\");<br/>                Constructor constructor = c.getConstructor(new Class[]{<br/>                    String.class });<br/>                java.security.PrivilegedAction a =<br/>                    (java.security.PrivilegedAction) constructor.newInstance(<br/>                        new Object[]{ \"user.home\" });<br/><br/>                homedir =<br/>                    (String) java.security.AccessController.doPrivileged(a);"
        },
        {
          "total_lines": 8,
          "line_start": 318,
          "line_end": 325,
          "content": "Constructor constructor = c.getConstructor(new Class[]{<br/>                    String.class });<br/>                java.security.PrivilegedAction a =<br/>                    (java.security.PrivilegedAction) constructor.newInstance(<br/>                        new Object[]{ \"user.home\" });<br/><br/>                homedir =<br/>                    (String) java.security.AccessController.doPrivileged(a);"
        },
        {
          "total_lines": 7,
          "line_start": 316,
          "line_end": 322,
          "content": "Class c =<br/>                    Class.forName(\"sun.security.action.GetPropertyAction\");<br/>                Constructor constructor = c.getConstructor(new Class[]{<br/>                    String.class });<br/>                java.security.PrivilegedAction a =<br/>                    (java.security.PrivilegedAction) constructor.newInstance(<br/>                        new Object[]{ \"user.home\" });"
        },
        {
          "total_lines": 6,
          "line_start": 320,
          "line_end": 325,
          "content": "java.security.PrivilegedAction a =<br/>                    (java.security.PrivilegedAction) constructor.newInstance(<br/>                        new Object[]{ \"user.home\" });<br/><br/>                homedir =<br/>                    (String) java.security.AccessController.doPrivileged(a);"
        },
        {
          "total_lines": 5,
          "line_start": 318,
          "line_end": 322,
          "content": "Constructor constructor = c.getConstructor(new Class[]{<br/>                    String.class });<br/>                java.security.PrivilegedAction a =<br/>                    (java.security.PrivilegedAction) constructor.newInstance(<br/>                        new Object[]{ \"user.home\" });"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCArray.java",
      "loc_duplicate": 17,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 588,
          "line_end": 593,
          "content": "Object[] rowData = new Object[2];<br/><br/>            rowData[0] = Integer.valueOf(i + 1);<br/>            rowData[1] = data[i];<br/><br/>            navigator.add(rowData);"
        },
        {
          "total_lines": 5,
          "line_start": 478,
          "line_end": 482,
          "content": "if (arrayType == null) {<br/>            arrayType = Type.getDefaultArrayType(elementType.typeCode);<br/>        }<br/><br/>        return arrayType.convertToString(data);"
        },
        {
          "total_lines": 3,
          "line_start": 110,
          "line_end": 112,
          "content": "checkClosed();<br/><br/>        return elementType.getNameString();"
        },
        {
          "total_lines": 3,
          "line_start": 130,
          "line_end": 132,
          "content": "checkClosed();<br/><br/>        return elementType.getJDBCTypeCode();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/NumberSequence.java",
      "loc_duplicate": 489,
      "clones": [
          {
          "total_lines": 28,
          "line_start": 470,
          "line_end": 497,
          "content": "case Types.TINYINT :<br/>                max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
        },
        {
          "total_lines": 28,
          "line_start": 511,
          "line_end": 538,
          "content": "case Types.TINYINT :<br/>                max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
        },
        {
          "total_lines": 28,
          "line_start": 340,
          "line_end": 367,
          "content": "case Types.TINYINT :<br/>                max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
        },
        {
          "total_lines": 27,
          "line_start": 471,
          "line_end": 497,
          "content": "max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
        },
        {
          "total_lines": 27,
          "line_start": 511,
          "line_end": 537,
          "content": "case Types.TINYINT :<br/>                max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :"
        },
        {
          "total_lines": 27,
          "line_start": 341,
          "line_end": 367,
          "content": "max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
        },
        {
          "total_lines": 27,
          "line_start": 470,
          "line_end": 496,
          "content": "case Types.TINYINT :<br/>                max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :"
        },
        {
          "total_lines": 27,
          "line_start": 512,
          "line_end": 538,
          "content": "max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
        },
        {
          "total_lines": 27,
          "line_start": 340,
          "line_end": 366,
          "content": "case Types.TINYINT :<br/>                max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :"
        },
        {
          "total_lines": 21,
          "line_start": 340,
          "line_end": 360,
          "content": "case Types.TINYINT :<br/>                max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :"
        },
        {
          "total_lines": 21,
          "line_start": 470,
          "line_end": 490,
          "content": "case Types.TINYINT :<br/>                max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :"
        },
        {
          "total_lines": 21,
          "line_start": 511,
          "line_end": 531,
          "content": "case Types.TINYINT :<br/>                max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :"
        },
        {
          "total_lines": 18,
          "line_start": 350,
          "line_end": 367,
          "content": "case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
        },
        {
          "total_lines": 18,
          "line_start": 521,
          "line_end": 538,
          "content": "case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
        },
        {
          "total_lines": 18,
          "line_start": 480,
          "line_end": 497,
          "content": "case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
        },
        {
          "total_lines": 17,
          "line_start": 481,
          "line_end": 497,
          "content": "max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
        },
        {
          "total_lines": 17,
          "line_start": 351,
          "line_end": 367,
          "content": "max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
        },
        {
          "total_lines": 17,
          "line_start": 522,
          "line_end": 538,
          "content": "max = Integer.MAX_VALUE;<br/>                min = Integer.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_BIGINT :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;<br/>                min = Long.MIN_VALUE;<br/>                break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberSequence\");"
        },
        {
          "total_lines": 9,
          "line_start": 473,
          "line_end": 481,
          "content": "break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;"
        },
        {
          "total_lines": 9,
          "line_start": 514,
          "line_end": 522,
          "content": "break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;"
        },
        {
          "total_lines": 9,
          "line_start": 343,
          "line_end": 351,
          "content": "break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_INTEGER :<br/>                max = Integer.MAX_VALUE;"
        },
        {
          "total_lines": 8,
          "line_start": 341,
          "line_end": 348,
          "content": "max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;"
        },
        {
          "total_lines": 8,
          "line_start": 512,
          "line_end": 519,
          "content": "max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;"
        },
        {
          "total_lines": 8,
          "line_start": 471,
          "line_end": 478,
          "content": "max = Byte.MAX_VALUE;<br/>                min = Byte.MIN_VALUE;<br/>                break;<br/><br/>            case Types.SQL_SMALLINT :<br/>                max = Short.MAX_VALUE;<br/>                min = Short.MIN_VALUE;<br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 203,
          "line_end": 206,
          "content": "sb.append(' ').append(Tokens.T_MINVALUE).append(' ');<br/>            sb.append(getMinValue());<br/>            sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');<br/>            sb.append(getMaxValue());"
        },
        {
          "total_lines": 4,
          "line_start": 248,
          "line_end": 251,
          "content": "sb.append(' ').append(Tokens.T_MINVALUE).append(' ');<br/>                sb.append(getMinValue());<br/>                sb.append(' ').append(Tokens.T_MAXVALUE).append(' ');<br/>                sb.append(getMaxValue());"
        },
        {
          "total_lines": 3,
          "line_start": 242,
          "line_end": 244,
          "content": "sb.append(' ').append(Tokens.T_INCREMENT).append(' ');<br/>                sb.append(Tokens.T_BY).append(' ');<br/>                sb.append(getIncrement());"
        },
        {
          "total_lines": 3,
          "line_start": 197,
          "line_end": 199,
          "content": "sb.append(' ').append(Tokens.T_INCREMENT).append(' ');<br/>            sb.append(Tokens.T_BY).append(' ');<br/>            sb.append(getIncrement());"
        },
        {
          "total_lines": 3,
          "line_start": 36,
          "line_end": 38,
          "content": "import org.hsqldb.HsqlNameManager.HsqlName;<br/>import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 532,
          "line_end": 533,
          "content": "case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;"
        },
        {
          "total_lines": 2,
          "line_start": 491,
          "line_end": 492,
          "content": "case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;"
        },
        {
          "total_lines": 2,
          "line_start": 361,
          "line_end": 362,
          "content": "case Types.SQL_DECIMAL :<br/>                max = Long.MAX_VALUE;"
        },
        {
          "total_lines": 1,
          "line_start": 179,
          "line_end": 179,
          "content": "Session session, SchemaObject parentObject"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/InformixTransferHelper.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 51,
          "line_end": 52,
          "content": "Traceable t,<br/>                                  String q"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/Scanner.java",
      "loc_duplicate": 420,
      "clones": [
          {
          "total_lines": 16,
          "line_start": 1619,
          "line_end": 1634,
          "content": "int pos = sqlString.indexOf('\\r', currentPosition + 2);<br/><br/>                    if (pos == -1) {<br/>                        pos = sqlString.indexOf('\\n', currentPosition + 2);<br/>                    }<br/><br/>                    if (pos == -1) {<br/>                        pos = limit;<br/>                    }<br/><br/>                    token.tokenString = sqlString.substring(currentPosition<br/>                            + 2, pos);<br/>                    token.tokenType   = Tokens.X_REMARK;<br/>                    token.isDelimiter = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 16,
          "line_start": 1571,
          "line_end": 1586,
          "content": "int pos = sqlString.indexOf('\\r', currentPosition + 2);<br/><br/>                    if (pos == -1) {<br/>                        pos = sqlString.indexOf('\\n', currentPosition + 2);<br/>                    }<br/><br/>                    if (pos == -1) {<br/>                        pos = limit;<br/>                    }<br/><br/>                    token.tokenString = sqlString.substring(currentPosition<br/>                            + 2, pos);<br/>                    token.tokenType   = Tokens.X_REMARK;<br/>                    token.isDelimiter = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 14,
          "line_start": 1571,
          "line_end": 1584,
          "content": "int pos = sqlString.indexOf('\\r', currentPosition + 2);<br/><br/>                    if (pos == -1) {<br/>                        pos = sqlString.indexOf('\\n', currentPosition + 2);<br/>                    }<br/><br/>                    if (pos == -1) {<br/>                        pos = limit;<br/>                    }<br/><br/>                    token.tokenString = sqlString.substring(currentPosition<br/>                            + 2, pos);<br/>                    token.tokenType   = Tokens.X_REMARK;<br/>                    token.isDelimiter = true;"
        },
        {
          "total_lines": 14,
          "line_start": 1619,
          "line_end": 1632,
          "content": "int pos = sqlString.indexOf('\\r', currentPosition + 2);<br/><br/>                    if (pos == -1) {<br/>                        pos = sqlString.indexOf('\\n', currentPosition + 2);<br/>                    }<br/><br/>                    if (pos == -1) {<br/>                        pos = limit;<br/>                    }<br/><br/>                    token.tokenString = sqlString.substring(currentPosition<br/>                            + 2, pos);<br/>                    token.tokenType   = Tokens.X_REMARK;<br/>                    token.isDelimiter = true;"
        },
        {
          "total_lines": 12,
          "line_start": 1573,
          "line_end": 1584,
          "content": "if (pos == -1) {<br/>                        pos = sqlString.indexOf('\\n', currentPosition + 2);<br/>                    }<br/><br/>                    if (pos == -1) {<br/>                        pos = limit;<br/>                    }<br/><br/>                    token.tokenString = sqlString.substring(currentPosition<br/>                            + 2, pos);<br/>                    token.tokenType   = Tokens.X_REMARK;<br/>                    token.isDelimiter = true;"
        },
        {
          "total_lines": 12,
          "line_start": 1621,
          "line_end": 1632,
          "content": "if (pos == -1) {<br/>                        pos = sqlString.indexOf('\\n', currentPosition + 2);<br/>                    }<br/><br/>                    if (pos == -1) {<br/>                        pos = limit;<br/>                    }<br/><br/>                    token.tokenString = sqlString.substring(currentPosition<br/>                            + 2, pos);<br/>                    token.tokenType   = Tokens.X_REMARK;<br/>                    token.isDelimiter = true;"
        },
        {
          "total_lines": 8,
          "line_start": 1625,
          "line_end": 1632,
          "content": "if (pos == -1) {<br/>                        pos = limit;<br/>                    }<br/><br/>                    token.tokenString = sqlString.substring(currentPosition<br/>                            + 2, pos);<br/>                    token.tokenType   = Tokens.X_REMARK;<br/>                    token.isDelimiter = true;"
        },
        {
          "total_lines": 8,
          "line_start": 1577,
          "line_end": 1584,
          "content": "if (pos == -1) {<br/>                        pos = limit;<br/>                    }<br/><br/>                    token.tokenString = sqlString.substring(currentPosition<br/>                            + 2, pos);<br/>                    token.tokenType   = Tokens.X_REMARK;<br/>                    token.isDelimiter = true;"
        },
        {
          "total_lines": 6,
          "line_start": 1019,
          "line_end": 1024,
          "content": "token.tokenString = sqlString.substring(tokenStart,<br/>                                currentPosition + 1);<br/>                        token.tokenType   = Tokens.X_MALFORMED_NUMERIC;<br/>                        token.isMalformed = true;<br/><br/>                        return;"
        },
        {
          "total_lines": 6,
          "line_start": 1490,
          "line_end": 1495,
          "content": "token.tokenString = Tokens.T_NOT_EQUALS;<br/>                    token.tokenType   = Tokens.NOT_EQUALS;<br/>                    currentPosition   += 2;<br/>                    token.isDelimiter = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 6,
          "line_start": 1498,
          "line_end": 1503,
          "content": "token.tokenString = sqlString.substring(currentPosition,<br/>                        currentPosition + 2);<br/>                token.tokenType   = Tokens.X_UNKNOWN_TOKEN;<br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 6,
          "line_start": 1581,
          "line_end": 1586,
          "content": "token.tokenString = sqlString.substring(currentPosition<br/>                            + 2, pos);<br/>                    token.tokenType   = Tokens.X_REMARK;<br/>                    token.isDelimiter = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 6,
          "line_start": 1562,
          "line_end": 1567,
          "content": "token.tokenString = sqlString.substring(currentPosition,<br/>                        currentPosition + 2);<br/>                token.tokenType   = Tokens.X_UNKNOWN_TOKEN;<br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 6,
          "line_start": 1629,
          "line_end": 1634,
          "content": "token.tokenString = sqlString.substring(currentPosition<br/>                            + 2, pos);<br/>                    token.tokenType   = Tokens.X_REMARK;<br/>                    token.isDelimiter = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 6,
          "line_start": 1003,
          "line_end": 1008,
          "content": "token.tokenString = sqlString.substring(tokenStart,<br/>                                currentPosition + 1);<br/>                        token.tokenType   = Tokens.X_MALFORMED_NUMERIC;<br/>                        token.isMalformed = true;<br/><br/>                        return;"
        },
        {
          "total_lines": 6,
          "line_start": 1507,
          "line_end": 1512,
          "content": "token.tokenString = Tokens.T_NOT_EQUALS;<br/>                    token.tokenType   = Tokens.NOT_EQUALS;<br/>                    currentPosition   += 2;<br/>                    token.isDelimiter = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 5,
          "line_start": 1376,
          "line_end": 1380,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1366,
          "line_end": 1370,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1436,
          "line_end": 1440,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1396,
          "line_end": 1400,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 427,
          "line_end": 431,
          "content": "// bad character<br/>                token.tokenType   = Tokens.X_MALFORMED_BINARY_STRING;<br/>                token.isMalformed = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1356,
          "line_end": 1360,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 247,
          "line_end": 251,
          "content": "resetState();<br/><br/>            token.tokenType = Tokens.X_ENDPARSE;<br/><br/>            return;"
        },
        {
          "total_lines": 5,
          "line_start": 1611,
          "line_end": 1615,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 448,
          "line_end": 452,
          "content": "// odd nibbles<br/>            token.tokenType   = Tokens.X_MALFORMED_BINARY_STRING;<br/>            token.isMalformed = true;<br/><br/>            return;"
        },
        {
          "total_lines": 5,
          "line_start": 2239,
          "line_end": 2243,
          "content": "endOfPart = true;<br/><br/>                    if (currentPart != lastPart) {<br/>                        i++;<br/>                    }"
        },
        {
          "total_lines": 5,
          "line_start": 1619,
          "line_end": 1623,
          "content": "int pos = sqlString.indexOf('\\r', currentPosition + 2);<br/><br/>                    if (pos == -1) {<br/>                        pos = sqlString.indexOf('\\n', currentPosition + 2);<br/>                    }"
        },
        {
          "total_lines": 5,
          "line_start": 1546,
          "line_end": 1550,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1482,
          "line_end": 1486,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1426,
          "line_end": 1430,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1527,
          "line_end": 1531,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1416,
          "line_end": 1420,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1406,
          "line_end": 1410,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1640,
          "line_end": 1644,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1386,
          "line_end": 1390,
          "content": "currentPosition++;<br/><br/>                token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 260,
          "line_end": 264,
          "content": "resetState();<br/><br/>            token.tokenType = Tokens.X_ENDPARSE;<br/><br/>            return;"
        },
        {
          "total_lines": 5,
          "line_start": 1771,
          "line_end": 1775,
          "content": "/** @todo 1.9.0 - review message malformed character set identifier */<br/>                    token.tokenType   = Tokens.X_MALFORMED_STRING;<br/>                    token.isMalformed = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 5,
          "line_start": 1783,
          "line_end": 1787,
          "content": "/** @todo 1.9.0 - review message malformed character set identifier */<br/>                        token.tokenType   = Tokens.X_MALFORMED_STRING;<br/>                        token.isMalformed = true;<br/><br/>                        return;"
        },
        {
          "total_lines": 5,
          "line_start": 2084,
          "line_end": 2088,
          "content": "endOfPart = true;<br/><br/>                    if (currentPart != lastPart) {<br/>                        i++;<br/>                    }"
        },
        {
          "total_lines": 5,
          "line_start": 457,
          "line_end": 461,
          "content": "// no end quote<br/>            token.tokenType   = Tokens.X_MALFORMED_BINARY_STRING;<br/>            token.isMalformed = true;<br/><br/>            return;"
        },
        {
          "total_lines": 5,
          "line_start": 1571,
          "line_end": 1575,
          "content": "int pos = sqlString.indexOf('\\r', currentPosition + 2);<br/><br/>                    if (pos == -1) {<br/>                        pos = sqlString.indexOf('\\n', currentPosition + 2);<br/>                    }"
        },
        {
          "total_lines": 4,
          "line_start": 587,
          "line_end": 590,
          "content": "token.tokenType   = Tokens.X_MALFORMED_UNICODE_STRING;<br/>                token.isMalformed = true;<br/><br/>                return;"
        },
        {
          "total_lines": 4,
          "line_start": 492,
          "line_end": 495,
          "content": "token.tokenType   = Tokens.X_MALFORMED_BIT_STRING;<br/>            token.isMalformed = true;<br/><br/>            return;"
        },
        {
          "total_lines": 4,
          "line_start": 391,
          "line_end": 394,
          "content": "token.tokenType   = Tokens.X_MALFORMED_BINARY_STRING;<br/>            token.isMalformed = true;<br/><br/>            return;"
        },
        {
          "total_lines": 4,
          "line_start": 538,
          "line_end": 541,
          "content": "token.tokenType   = Tokens.X_MALFORMED_BIT_STRING;<br/>            token.isMalformed = true;<br/><br/>            return;"
        },
        {
          "total_lines": 4,
          "line_start": 1509,
          "line_end": 1512,
          "content": "currentPosition   += 2;<br/>                    token.isDelimiter = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 4,
          "line_start": 1049,
          "line_end": 1052,
          "content": "token.tokenType   = Tokens.X_MALFORMED_NUMERIC;<br/>                        token.isMalformed = true;<br/><br/>                        return;"
        },
        {
          "total_lines": 4,
          "line_start": 1135,
          "line_end": 1138,
          "content": "token.tokenType   = Tokens.X_MALFORMED_NUMERIC;<br/>                    token.isMalformed = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 4,
          "line_start": 601,
          "line_end": 604,
          "content": "token.tokenType   = Tokens.X_MALFORMED_UNICODE_STRING;<br/>                    token.isMalformed = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 4,
          "line_start": 1492,
          "line_end": 1495,
          "content": "currentPosition   += 2;<br/>                    token.isDelimiter = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 4,
          "line_start": 570,
          "line_end": 573,
          "content": "token.tokenType   = Tokens.X_MALFORMED_UNICODE_STRING;<br/>                token.isMalformed = true;<br/><br/>                return;"
        },
        {
          "total_lines": 4,
          "line_start": 1583,
          "line_end": 1586,
          "content": "token.tokenType   = Tokens.X_REMARK;<br/>                    token.isDelimiter = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 4,
          "line_start": 1150,
          "line_end": 1153,
          "content": "token.tokenType   = Tokens.X_MALFORMED_NUMERIC;<br/>                    token.isMalformed = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 4,
          "line_start": 530,
          "line_end": 533,
          "content": "token.tokenType   = Tokens.X_MALFORMED_BIT_STRING;<br/>                token.isMalformed = true;<br/><br/>                return;"
        },
        {
          "total_lines": 4,
          "line_start": 1631,
          "line_end": 1634,
          "content": "token.tokenType   = Tokens.X_REMARK;<br/>                    token.isDelimiter = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 4,
          "line_start": 619,
          "line_end": 622,
          "content": "token.tokenType   = Tokens.X_MALFORMED_UNICODE_STRING;<br/>                    token.isMalformed = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 4,
          "line_start": 1498,
          "line_end": 1501,
          "content": "token.tokenString = sqlString.substring(currentPosition,<br/>                        currentPosition + 2);<br/>                token.tokenType   = Tokens.X_UNKNOWN_TOKEN;<br/>                token.isDelimiter = true;"
        },
        {
          "total_lines": 4,
          "line_start": 1063,
          "line_end": 1066,
          "content": "token.tokenType   = Tokens.X_MALFORMED_NUMERIC;<br/>                        token.isMalformed = true;<br/><br/>                        return;"
        },
        {
          "total_lines": 4,
          "line_start": 1562,
          "line_end": 1565,
          "content": "token.tokenString = sqlString.substring(currentPosition,<br/>                        currentPosition + 2);<br/>                token.tokenType   = Tokens.X_UNKNOWN_TOKEN;<br/>                token.isDelimiter = true;"
        },
        {
          "total_lines": 3,
          "line_start": 2430,
          "line_end": 2432,
          "content": "// bad character<br/>                token.tokenType   = Tokens.X_MALFORMED_BINARY_STRING;<br/>                token.isMalformed = true;"
        },
        {
          "total_lines": 3,
          "line_start": 262,
          "line_end": 264,
          "content": "token.tokenType = Tokens.X_ENDPARSE;<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 1519,
          "line_end": 1521,
          "content": "token.isDelimiter = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 3,
          "line_start": 1785,
          "line_end": 1787,
          "content": "token.isMalformed = true;<br/><br/>                        return;"
        },
        {
          "total_lines": 3,
          "line_start": 1006,
          "line_end": 1008,
          "content": "token.isMalformed = true;<br/><br/>                        return;"
        },
        {
          "total_lines": 3,
          "line_start": 1773,
          "line_end": 1775,
          "content": "token.isMalformed = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 3,
          "line_start": 1050,
          "line_end": 1052,
          "content": "token.isMalformed = true;<br/><br/>                        return;"
        },
        {
          "total_lines": 3,
          "line_start": 249,
          "line_end": 251,
          "content": "token.tokenType = Tokens.X_ENDPARSE;<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 1136,
          "line_end": 1138,
          "content": "token.isMalformed = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 3,
          "line_start": 1064,
          "line_end": 1066,
          "content": "token.isMalformed = true;<br/><br/>                        return;"
        },
        {
          "total_lines": 3,
          "line_start": 1022,
          "line_end": 1024,
          "content": "token.isMalformed = true;<br/><br/>                        return;"
        },
        {
          "total_lines": 3,
          "line_start": 1666,
          "line_end": 1668,
          "content": "token.isDelimiter = true;<br/><br/>                return;"
        },
        {
          "total_lines": 3,
          "line_start": 1584,
          "line_end": 1586,
          "content": "token.isDelimiter = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 3,
          "line_start": 247,
          "line_end": 249,
          "content": "resetState();<br/><br/>            token.tokenType = Tokens.X_ENDPARSE;"
        },
        {
          "total_lines": 3,
          "line_start": 1466,
          "line_end": 1468,
          "content": "token.isDelimiter = true;<br/><br/>                        return;"
        },
        {
          "total_lines": 3,
          "line_start": 1151,
          "line_end": 1153,
          "content": "token.isMalformed = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 3,
          "line_start": 260,
          "line_end": 262,
          "content": "resetState();<br/><br/>            token.tokenType = Tokens.X_ENDPARSE;"
        },
        {
          "total_lines": 3,
          "line_start": 718,
          "line_end": 720,
          "content": "token.isMalformed = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 3,
          "line_start": 1632,
          "line_end": 1634,
          "content": "token.isDelimiter = true;<br/><br/>                    return;"
        },
        {
          "total_lines": 2,
          "line_start": 1663,
          "line_end": 1664,
          "content": "Types.SQL_CHAR,<br/>                        token.tokenString.length()"
        },
        {
          "total_lines": 2,
          "line_start": 538,
          "line_end": 539,
          "content": "token.tokenType   = Tokens.X_MALFORMED_BIT_STRING;<br/>            token.isMalformed = true;"
        },
        {
          "total_lines": 2,
          "line_start": 1959,
          "line_end": 1960,
          "content": "Tokens.SQL_INTERVAL_FIELD_CODES,<br/>                                        startToken"
        },
        {
          "total_lines": 2,
          "line_start": 1320,
          "line_end": 1321,
          "content": "currentPosition,<br/>                                 nextIndex - currentPosition"
        },
        {
          "total_lines": 2,
          "line_start": 492,
          "line_end": 493,
          "content": "token.tokenType   = Tokens.X_MALFORMED_BIT_STRING;<br/>            token.isMalformed = true;"
        },
        {
          "total_lines": 2,
          "line_start": 1313,
          "line_end": 1314,
          "content": "currentPosition,<br/>                                 nextIndex - currentPosition"
        },
        {
          "total_lines": 2,
          "line_start": 1961,
          "line_end": 1962,
          "content": "Tokens.SQL_INTERVAL_FIELD_CODES,<br/>                                      endToken"
        },
        {
          "total_lines": 2,
          "line_start": 530,
          "line_end": 531,
          "content": "token.tokenType   = Tokens.X_MALFORMED_BIT_STRING;<br/>                token.isMalformed = true;"
        },
        {
          "total_lines": 1,
          "line_start": 1722,
          "line_end": 1722,
          "content": "Types.SQL_CHAR, token.tokenString.length()"
        },
        {
          "total_lines": 1,
          "line_start": 1797,
          "line_end": 1797,
          "content": "Types.SQL_CHAR, token.tokenString.length()"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/FileAccess.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 64,
          "line_end": 64,
          "content": "java.lang.String oldName, java.lang.String newName"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rights/UserManager.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 449,
          "line_end": 453,
          "content": "String[] array = new String[list.size()];<br/><br/>        list.toArray(array);<br/><br/>        return array;"
        },
        {
          "total_lines": 3,
          "line_start": 449,
          "line_end": 451,
          "content": "String[] array = new String[list.size()];<br/><br/>        list.toArray(array);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/TransactionManager2PL.java",
      "loc_duplicate": 56,
      "clones": [
          {
          "total_lines": 11,
          "line_start": 141,
          "line_end": 151,
          "content": "long timestamp = session.sessionContext.savepointTimestamps.get(index);<br/>        Integer oi = (Integer) session.sessionContext.savepoints.get(index);<br/>        int     start  = oi.intValue();<br/><br/>        while (session.sessionContext.savepoints.size() > index + 1) {<br/>            session.sessionContext.savepoints.remove(<br/>                session.sessionContext.savepoints.size() - 1);<br/>            session.sessionContext.savepointTimestamps.removeLast();<br/>        }<br/><br/>        rollbackPartial(session, start, timestamp);"
        },
        {
          "total_lines": 9,
          "line_start": 141,
          "line_end": 149,
          "content": "long timestamp = session.sessionContext.savepointTimestamps.get(index);<br/>        Integer oi = (Integer) session.sessionContext.savepoints.get(index);<br/>        int     start  = oi.intValue();<br/><br/>        while (session.sessionContext.savepoints.size() > index + 1) {<br/>            session.sessionContext.savepoints.remove(<br/>                session.sessionContext.savepoints.size() - 1);<br/>            session.sessionContext.savepointTimestamps.removeLast();<br/>        }"
        },
        {
          "total_lines": 6,
          "line_start": 288,
          "line_end": 293,
          "content": "cs = session.statementManager.getStatement(session, cs);<br/>                session.sessionContext.currentStatement = cs;<br/><br/>                if (cs == null) {<br/>                    return;<br/>                }"
        },
        {
          "total_lines": 3,
          "line_start": 141,
          "line_end": 143,
          "content": "long timestamp = session.sessionContext.savepointTimestamps.get(index);<br/>        Integer oi = (Integer) session.sessionContext.savepoints.get(index);<br/>        int     start  = oi.intValue();"
        },
        {
          "total_lines": 3,
          "line_start": 156,
          "line_end": 158,
          "content": "rollbackPartial(session, session.actionIndex,<br/>                        session.actionStartTimestamp);<br/>        endActionTPL(session);"
        },
        {
          "total_lines": 3,
          "line_start": 201,
          "line_end": 203,
          "content": "Session session, Table table,<br/>                                     PersistentStore store, Row row,<br/>                                     int[] colMap"
        },
        {
          "total_lines": 3,
          "line_start": 219,
          "line_end": 221,
          "content": "Session session, Table table,<br/>                                PersistentStore store, Row row,<br/>                                int[] changedColumns"
        },
        {
          "total_lines": 3,
          "line_start": 105,
          "line_end": 107,
          "content": "RowAction action = (RowAction) session.rowActionList.get(i);<br/><br/>                action.commit(session);"
        },
        {
          "total_lines": 2,
          "line_start": 201,
          "line_end": 202,
          "content": "Session session, Table table,<br/>                                     PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 202,
          "line_end": 203,
          "content": "Row row,<br/>                                     int[] colMap"
        },
        {
          "total_lines": 2,
          "line_start": 230,
          "line_end": 231,
          "content": "ErrorCode.GENERAL_ERROR,<br/>                                     \"null insert action \""
        },
        {
          "total_lines": 2,
          "line_start": 288,
          "line_end": 289,
          "content": "cs = session.statementManager.getStatement(session, cs);<br/>                session.sessionContext.currentStatement = cs;"
        },
        {
          "total_lines": 2,
          "line_start": 257,
          "line_end": 258,
          "content": "PersistentStore store,<br/>                                   CachedObject object"
        },
        {
          "total_lines": 2,
          "line_start": 241,
          "line_end": 242,
          "content": "Row row,<br/>                           int mode"
        },
        {
          "total_lines": 2,
          "line_start": 246,
          "line_end": 247,
          "content": "Session session, PersistentStore store, long id,<br/>                           int mode"
        },
        {
          "total_lines": 1,
          "line_start": 246,
          "line_end": 246,
          "content": "PersistentStore store, long id"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/DateTimeType.java",
      "loc_duplicate": 163,
      "clones": [
          {
          "total_lines": 8,
          "line_start": 693,
          "line_end": 700,
          "content": "TimeData ti = (TimeData) a;<br/>                        long seconds = session.getCurrentDate().getSeconds()<br/>                                       + ti.getSeconds()<br/>                                       - session.getZoneSeconds();<br/><br/>                        return new TimestampData(seconds,<br/>                                                 scaleNanos(ti.getNanos()),<br/>                                                 session.getZoneSeconds());"
        },
        {
          "total_lines": 8,
          "line_start": 659,
          "line_end": 666,
          "content": "TimeData ti = (TimeData) a;<br/>                        long seconds = session.getCurrentDate().getSeconds()<br/>                                       + ti.getSeconds()<br/>                                       - session.getZoneSeconds();<br/><br/>                        return new TimestampData(seconds,<br/>                                                 scaleNanos(ti.getNanos()),<br/>                                                 session.getZoneSeconds());"
        },
        {
          "total_lines": 7,
          "line_start": 1186,
          "line_end": 1192,
          "content": "case Types.SQL_DATE :<br/>            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :<br/>            case Types.SQL_TIMESTAMP : {<br/>                return new TimestampData(millis / 1000, 0,<br/>                                         ((TimestampData) a).getZone());<br/>            }<br/>            default :"
        },
        {
          "total_lines": 7,
          "line_start": 1748,
          "line_end": 1754,
          "content": "cal.add(Calendar.MONTH, 1);<br/><br/>        millis = cal.getTimeInMillis();<br/><br/>        cal.add(Calendar.DAY_OF_MONTH, -1);<br/><br/>        millis   = cal.getTimeInMillis();"
        },
        {
          "total_lines": 7,
          "line_start": 1729,
          "line_end": 1735,
          "content": "cal.add(Calendar.MONTH, 1);<br/><br/>        millis = cal.getTimeInMillis();<br/><br/>        cal.add(Calendar.DAY_OF_MONTH, -1);<br/><br/>        millis   = cal.getTimeInMillis();"
        },
        {
          "total_lines": 7,
          "line_start": 1218,
          "line_end": 1224,
          "content": "case Types.SQL_DATE :<br/>            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :<br/>            case Types.SQL_TIMESTAMP : {<br/>                return new TimestampData(millis / 1000, 0,<br/>                                         ((TimestampData) a).getZone());<br/>            }<br/>            default :"
        },
        {
          "total_lines": 7,
          "line_start": 660,
          "line_end": 666,
          "content": "long seconds = session.getCurrentDate().getSeconds()<br/>                                       + ti.getSeconds()<br/>                                       - session.getZoneSeconds();<br/><br/>                        return new TimestampData(seconds,<br/>                                                 scaleNanos(ti.getNanos()),<br/>                                                 session.getZoneSeconds());"
        },
        {
          "total_lines": 7,
          "line_start": 694,
          "line_end": 700,
          "content": "long seconds = session.getCurrentDate().getSeconds()<br/>                                       + ti.getSeconds()<br/>                                       - session.getZoneSeconds();<br/><br/>                        return new TimestampData(seconds,<br/>                                                 scaleNanos(ti.getNanos()),<br/>                                                 session.getZoneSeconds());"
        },
        {
          "total_lines": 6,
          "line_start": 1219,
          "line_end": 1224,
          "content": "case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :<br/>            case Types.SQL_TIMESTAMP : {<br/>                return new TimestampData(millis / 1000, 0,<br/>                                         ((TimestampData) a).getZone());<br/>            }<br/>            default :"
        },
        {
          "total_lines": 6,
          "line_start": 1186,
          "line_end": 1191,
          "content": "case Types.SQL_DATE :<br/>            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :<br/>            case Types.SQL_TIMESTAMP : {<br/>                return new TimestampData(millis / 1000, 0,<br/>                                         ((TimestampData) a).getZone());<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 1076,
          "line_end": 1081,
          "content": "if (typeCode == Types.SQL_DATE) {<br/>                b = ((NumberType) otherType).floor(b);<br/>            }<br/><br/>            b = Type.SQL_INTERVAL_SECOND_MAX_PRECISION.multiply(<br/>                IntervalSecondData.oneDay, b);"
        },
        {
          "total_lines": 6,
          "line_start": 1126,
          "line_end": 1131,
          "content": "if (typeCode == Types.SQL_DATE) {<br/>                b = ((NumberType) otherType).floor(b);<br/>            }<br/><br/>            b = Type.SQL_INTERVAL_SECOND_MAX_PRECISION.multiply(<br/>                IntervalSecondData.oneDay, b);"
        },
        {
          "total_lines": 6,
          "line_start": 1187,
          "line_end": 1192,
          "content": "case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :<br/>            case Types.SQL_TIMESTAMP : {<br/>                return new TimestampData(millis / 1000, 0,<br/>                                         ((TimestampData) a).getZone());<br/>            }<br/>            default :"
        },
        {
          "total_lines": 6,
          "line_start": 1218,
          "line_end": 1223,
          "content": "case Types.SQL_DATE :<br/>            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :<br/>            case Types.SQL_TIMESTAMP : {<br/>                return new TimestampData(millis / 1000, 0,<br/>                                         ((TimestampData) a).getZone());<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 1748,
          "line_end": 1752,
          "content": "cal.add(Calendar.MONTH, 1);<br/><br/>        millis = cal.getTimeInMillis();<br/><br/>        cal.add(Calendar.DAY_OF_MONTH, -1);"
        },
        {
          "total_lines": 5,
          "line_start": 1220,
          "line_end": 1224,
          "content": "{<br/>                return new TimestampData(millis / 1000, 0,<br/>                                         ((TimestampData) a).getZone());<br/>            }<br/>            default :"
        },
        {
          "total_lines": 5,
          "line_start": 1188,
          "line_end": 1192,
          "content": "{<br/>                return new TimestampData(millis / 1000, 0,<br/>                                         ((TimestampData) a).getZone());<br/>            }<br/>            default :"
        },
        {
          "total_lines": 5,
          "line_start": 1729,
          "line_end": 1733,
          "content": "cal.add(Calendar.MONTH, 1);<br/><br/>        millis = cal.getTimeInMillis();<br/><br/>        cal.add(Calendar.DAY_OF_MONTH, -1);"
        },
        {
          "total_lines": 4,
          "line_start": 1188,
          "line_end": 1191,
          "content": "case Types.SQL_TIMESTAMP : {<br/>                return new TimestampData(millis / 1000, 0,<br/>                                         ((TimestampData) a).getZone());<br/>            }"
        },
        {
          "total_lines": 4,
          "line_start": 1220,
          "line_end": 1223,
          "content": "case Types.SQL_TIMESTAMP : {<br/>                return new TimestampData(millis / 1000, 0,<br/>                                         ((TimestampData) a).getZone());<br/>            }"
        },
        {
          "total_lines": 3,
          "line_start": 211,
          "line_end": 213,
          "content": "break;<br/><br/>            default :"
        },
        {
          "total_lines": 3,
          "line_start": 1218,
          "line_end": 1220,
          "content": "case Types.SQL_DATE :<br/>            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :<br/>            case Types.SQL_TIMESTAMP :"
        },
        {
          "total_lines": 3,
          "line_start": 1186,
          "line_end": 1188,
          "content": "case Types.SQL_DATE :<br/>            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :<br/>            case Types.SQL_TIMESTAMP :"
        },
        {
          "total_lines": 3,
          "line_start": 1847,
          "line_end": 1849,
          "content": "nanos += DTIType.limitNanoseconds;<br/><br/>            seconds--;"
        },
        {
          "total_lines": 2,
          "line_start": 1118,
          "line_end": 1119,
          "content": "Session session, Object a, Object b,<br/>                           Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 894,
          "line_end": 895,
          "content": "cal,<br/>                    ((TimestampData) a).getSeconds() * 1000"
        },
        {
          "total_lines": 2,
          "line_start": 1183,
          "line_end": 1184,
          "content": "0,<br/>                                    ((TimeData) a).getZone()"
        },
        {
          "total_lines": 2,
          "line_start": 1312,
          "line_end": 1313,
          "content": "calendarPart = Calendar.MONTH;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 501,
          "line_end": 502,
          "content": "SessionInterface session, Object a,<br/>                                Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 904,
          "line_end": 905,
          "content": "cal,<br/>                    ((TimestampData) a).getSeconds() * 1000"
        },
        {
          "total_lines": 2,
          "line_start": 761,
          "line_end": 762,
          "content": "session.getCalendar(),<br/>                            ((java.util.Date) a).getTime()"
        },
        {
          "total_lines": 2,
          "line_start": 1254,
          "line_end": 1255,
          "content": "calendarPart = Calendar.MONTH;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 810,
          "line_end": 811,
          "content": "session.getCalendar(),<br/>                            ((java.util.Date) a).getTime()"
        },
        {
          "total_lines": 2,
          "line_start": 1186,
          "line_end": 1187,
          "content": "case Types.SQL_DATE :<br/>            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :"
        },
        {
          "total_lines": 2,
          "line_start": 1215,
          "line_end": 1216,
          "content": "0,<br/>                                    ((TimeData) a).getZone()"
        },
        {
          "total_lines": 2,
          "line_start": 1218,
          "line_end": 1219,
          "content": "case Types.SQL_DATE :<br/>            case Types.SQL_TIMESTAMP_WITH_TIME_ZONE :"
        },
        {
          "total_lines": 1,
          "line_start": 1069,
          "line_end": 1069,
          "content": "Session session, Object a, Object b, Type otherType"
        },
        {
          "total_lines": 1,
          "line_start": 789,
          "line_end": 789,
          "content": "session.getCalendar(), ((java.util.Date) a).getTime()"
        },
        {
          "total_lines": 1,
          "line_start": 1240,
          "line_end": 1240,
          "content": "Object dateTime, int part"
        },
        {
          "total_lines": 1,
          "line_start": 317,
          "line_end": 317,
          "content": "Session session, Type other, int operation"
        },
        {
          "total_lines": 1,
          "line_start": 1421,
          "line_end": 1421,
          "content": "Object dateTime, int part"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/BitMapCachedObject.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 104,
          "line_end": 104,
          "content": "RowOutputInterface out, LongLookup lookup"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestKarl.java",
      "loc_duplicate": 24,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 241,
          "line_end": 246,
          "content": "for (int i = 1; i <= col_count; i++) {<br/>                System.out.print(rs.getObject(i));<br/>                System.out.print(\"\\t\");<br/>            }<br/><br/>            System.out.println(\"\");"
        },
        {
          "total_lines": 6,
          "line_start": 276,
          "line_end": 281,
          "content": "for (int i = 1; i <= col_count; i++) {<br/>                System.out.print(rs.getObject(i));<br/>                System.out.print(\"\\t\");<br/>            }<br/><br/>            System.out.println(\"\");"
        },
        {
          "total_lines": 3,
          "line_start": 113,
          "line_end": 115,
          "content": "c.close();<br/><br/>            c = null;"
        },
        {
          "total_lines": 3,
          "line_start": 134,
          "line_end": 136,
          "content": "c.close();<br/><br/>            c = null;"
        },
        {
          "total_lines": 2,
          "line_start": 215,
          "line_end": 216,
          "content": "p.execute();<br/>        p.close();"
        },
        {
          "total_lines": 2,
          "line_start": 206,
          "line_end": 207,
          "content": "p.execute();<br/>        p.close();"
        },
        {
          "total_lines": 2,
          "line_start": 194,
          "line_end": 195,
          "content": "p.execute();<br/>        p.close();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/server/WebServer.java",
      "loc_duplicate": 12,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 188,
          "line_end": 191,
          "content": "server.printError(\"Failed to set properties\");<br/>            server.printStackTrace(e);<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 189,
          "line_end": 191,
          "content": "server.printStackTrace(e);<br/><br/>            return;"
        },
        {
          "total_lines": 2,
          "line_start": 201,
          "line_end": 202,
          "content": "server.print(\"Could not load properties from file\");<br/>            server.print(\"Using cli/default properties only\");"
        },
        {
          "total_lines": 2,
          "line_start": 188,
          "line_end": 189,
          "content": "server.printError(\"Failed to set properties\");<br/>            server.printStackTrace(e);"
        },
        {
          "total_lines": 1,
          "line_start": 166,
          "line_end": 166,
          "content": "propsPath, propsExtension"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/PostgresTransferHelper.java",
      "loc_duplicate": 30,
      "clones": [
          {
          "total_lines": 14,
          "line_start": 121,
          "line_end": 134,
          "content": "String SeqName = new String(\"_\" + columnDesc.getString(4)<br/>                                        + \"_seq\");<br/>            int spaceleft = 31 - SeqName.length();<br/><br/>            if (t.Stmts.sDestTable.length() > spaceleft) {<br/>                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)<br/>                          + SeqName;<br/>            } else {<br/>                SeqName = t.Stmts.sDestTable + SeqName;<br/>            }<br/><br/>            String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";<br/><br/>            t.Stmts.sDestDrop += DropSequence;"
        },
        {
          "total_lines": 4,
          "line_start": 34,
          "line_end": 37,
          "content": "import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;<br/>import java.sql.Types;"
        },
        {
          "total_lines": 3,
          "line_start": 116,
          "line_end": 118,
          "content": "TransferTable t, ResultSetMetaData meta,<br/>                               String columnType, ResultSet columnDesc,<br/>                               int columnIndex"
        },
        {
          "total_lines": 3,
          "line_start": 121,
          "line_end": 123,
          "content": "String SeqName = new String(\"_\" + columnDesc.getString(4)<br/>                                        + \"_seq\");<br/>            int spaceleft = 31 - SeqName.length();"
        },
        {
          "total_lines": 3,
          "line_start": 77,
          "line_end": 79,
          "content": "TransferTable t, ResultSetMetaData meta,<br/>                              String columnType, ResultSet columnDesc,<br/>                              int columnIndex"
        },
        {
          "total_lines": 1,
          "line_start": 62,
          "line_end": 62,
          "content": "Traceable t, String q"
        },
        {
          "total_lines": 1,
          "line_start": 117,
          "line_end": 117,
          "content": "String columnType, ResultSet columnDesc"
        },
        {
          "total_lines": 1,
          "line_start": 78,
          "line_end": 78,
          "content": "String columnType, ResultSet columnDesc"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/Logger.java",
      "loc_duplicate": 186,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 1433,
          "line_end": 1437,
          "content": "TableBase table,<br/>                          int[] columns, boolean[] descending,<br/>                          boolean[] nullsLast, Type[] colTypes, boolean pk,<br/>                          boolean unique, boolean constraint,<br/>                          boolean forward"
        },
        {
          "total_lines": 4,
          "line_start": 1433,
          "line_end": 1436,
          "content": "TableBase table,<br/>                          int[] columns, boolean[] descending,<br/>                          boolean[] nullsLast, Type[] colTypes, boolean pk,<br/>                          boolean unique, boolean constraint"
        },
        {
          "total_lines": 4,
          "line_start": 1831,
          "line_end": 1834,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');<br/>        sb.append(Tokens.T_TDC).append(' ');"
        },
        {
          "total_lines": 4,
          "line_start": 1927,
          "line_end": 1930,
          "content": "sb.append(database.sqlSyntaxOra ? Tokens.T_TRUE<br/>                                            : Tokens.T_FALSE);<br/>            list.add(sb.toString());<br/>            sb.setLength(0);"
        },
        {
          "total_lines": 4,
          "line_start": 1957,
          "line_end": 1960,
          "content": "sb.append(database.sqlSyntaxOra ? Tokens.T_TRUE<br/>                                            : Tokens.T_FALSE);<br/>            list.add(sb.toString());<br/>            sb.setLength(0);"
        },
        {
          "total_lines": 4,
          "line_start": 1824,
          "line_end": 1827,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');<br/>        sb.append(Tokens.T_TDC).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 1880,
          "line_end": 1882,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 2061,
          "line_end": 2063,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET FILES \").append(Tokens.T_CACHE);"
        },
        {
          "total_lines": 3,
          "line_start": 1812,
          "line_end": 1814,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 2114,
          "line_end": 2116,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET FILES \").append(Tokens.T_LOG).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 1457,
          "line_end": 1459,
          "content": "name, id, table, columns, descending,<br/>                                    nullsLast, colTypes, pk, unique,<br/>                                    constraint"
        },
        {
          "total_lines": 3,
          "line_start": 1831,
          "line_end": 1833,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 1991,
          "line_end": 1993,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_DEFAULT).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 1838,
          "line_end": 1840,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 1433,
          "line_end": 1435,
          "content": "HsqlName name, long id, TableBase table,<br/>                          int[] columns, boolean[] descending,<br/>                          boolean[] nullsLast"
        },
        {
          "total_lines": 3,
          "line_start": 1855,
          "line_end": 1857,
          "content": "sb.setLength(0);<br/>            sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');<br/>            sb.append(Tokens.T_NULLS).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 1845,
          "line_end": 1847,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 2109,
          "line_end": 2111,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET FILES \").append(Tokens.T_LOG).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 1824,
          "line_end": 1826,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 1893,
          "line_end": 1895,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 1818,
          "line_end": 1820,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 1768,
          "line_end": 1770,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_DEFAULT).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 1444,
          "line_end": 1446,
          "content": "name, id, table, columns,<br/>                                          descending, nullsLast, colTypes, pk,<br/>                                          unique"
        },
        {
          "total_lines": 3,
          "line_start": 1865,
          "line_end": 1867,
          "content": "sb.setLength(0);<br/>            sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');<br/>            sb.append(Tokens.T_NULLS).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 1887,
          "line_end": 1889,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 2056,
          "line_end": 2058,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);<br/>        sb.append(\"SET FILES \").append(Tokens.T_CACHE);"
        },
        {
          "total_lines": 2,
          "line_start": 1934,
          "line_end": 1935,
          "content": "sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');<br/>            sb.append(Tokens.T_SYNTAX).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 1900,
          "line_end": 1901,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1949,
          "line_end": 1950,
          "content": "list.add(sb.toString());<br/>            sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1939,
          "line_end": 1940,
          "content": "list.add(sb.toString());<br/>            sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1473,
          "line_end": 1474,
          "content": "false, false,<br/>                        false"
        },
        {
          "total_lines": 2,
          "line_start": 1833,
          "line_end": 1834,
          "content": "sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');<br/>        sb.append(Tokens.T_TDC).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 2009,
          "line_end": 2010,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1944,
          "line_end": 1945,
          "content": "sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');<br/>            sb.append(Tokens.T_SYNTAX).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 2109,
          "line_end": 2110,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1457,
          "line_end": 1458,
          "content": "name, id, table, columns, descending,<br/>                                    nullsLast"
        },
        {
          "total_lines": 2,
          "line_start": 1893,
          "line_end": 1894,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1880,
          "line_end": 1881,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1855,
          "line_end": 1856,
          "content": "sb.setLength(0);<br/>            sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 2056,
          "line_end": 2057,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1845,
          "line_end": 1846,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1969,
          "line_end": 1970,
          "content": "list.add(sb.toString());<br/>            sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1764,
          "line_end": 1765,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 2023,
          "line_end": 2024,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1436,
          "line_end": 1437,
          "content": "boolean unique, boolean constraint,<br/>                          boolean forward"
        },
        {
          "total_lines": 2,
          "line_start": 2114,
          "line_end": 2115,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 2118,
          "line_end": 2119,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1954,
          "line_end": 1955,
          "content": "sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');<br/>            sb.append(Tokens.T_SYNTAX).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 1924,
          "line_end": 1925,
          "content": "sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');<br/>            sb.append(Tokens.T_SYNTAX).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 1831,
          "line_end": 1832,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 964,
          "line_end": 965,
          "content": "Session session, Row row,<br/>            Table table"
        },
        {
          "total_lines": 2,
          "line_start": 2017,
          "line_end": 2018,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1812,
          "line_end": 1813,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1824,
          "line_end": 1825,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1865,
          "line_end": 1866,
          "content": "sb.setLength(0);<br/>            sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 1964,
          "line_end": 1965,
          "content": "sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');<br/>            sb.append(Tokens.T_SYNTAX).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 1838,
          "line_end": 1839,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1874,
          "line_end": 1875,
          "content": "sb.setLength(0);<br/>        sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 1826,
          "line_end": 1827,
          "content": "sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');<br/>        sb.append(Tokens.T_TDC).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 2061,
          "line_end": 2062,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1856,
          "line_end": 1857,
          "content": "sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');<br/>            sb.append(Tokens.T_NULLS).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 1818,
          "line_end": 1819,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1774,
          "line_end": 1775,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 2104,
          "line_end": 2105,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 975,
          "line_end": 976,
          "content": "Session session, Table t,<br/>            Object[] row"
        },
        {
          "total_lines": 2,
          "line_start": 2085,
          "line_end": 2086,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1444,
          "line_end": 1445,
          "content": "name, id, table, columns,<br/>                                          descending, nullsLast"
        },
        {
          "total_lines": 2,
          "line_start": 1887,
          "line_end": 1888,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 2050,
          "line_end": 2051,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1795,
          "line_end": 1796,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 2099,
          "line_end": 2100,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1433,
          "line_end": 1434,
          "content": "long id, TableBase table,<br/>                          int[] columns, boolean[] descending"
        },
        {
          "total_lines": 2,
          "line_start": 1787,
          "line_end": 1788,
          "content": "list.add(sb.toString());<br/>            sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1866,
          "line_end": 1867,
          "content": "sb.append(\"SET DATABASE \").append(Tokens.T_SQL).append(' ');<br/>            sb.append(Tokens.T_NULLS).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 1779,
          "line_end": 1780,
          "content": "list.add(sb.toString());<br/>        sb.setLength(0);"
        },
        {
          "total_lines": 2,
          "line_start": 1473,
          "line_end": 1474,
          "content": "false,<br/>                        false, false"
        },
        {
          "total_lines": 1,
          "line_start": 1436,
          "line_end": 1436,
          "content": "boolean unique, boolean constraint"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestTypeConversion.java",
      "loc_duplicate": 34,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 138,
          "line_end": 141,
          "content": "ps.setBytes(2, data);<br/>            ps.setBytes(3, data);<br/>            ps.setBytes(4, data);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 4,
          "line_start": 147,
          "line_end": 150,
          "content": "ps.setBytes(2, data);<br/>            ps.setBytes(3, data);<br/>            ps.setBytes(4, data);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 4,
          "line_start": 38,
          "line_end": 41,
          "content": "import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.SQLException;<br/>import java.sql.Statement;"
        },
        {
          "total_lines": 3,
          "line_start": 148,
          "line_end": 150,
          "content": "ps.setBytes(3, data);<br/>            ps.setBytes(4, data);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 3,
          "line_start": 168,
          "line_end": 170,
          "content": "boole = rs.getBoolean(1);<br/><br/>            assertFalse(boole);"
        },
        {
          "total_lines": 3,
          "line_start": 139,
          "line_end": 141,
          "content": "ps.setBytes(3, data);<br/>            ps.setBytes(4, data);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 3,
          "line_start": 172,
          "line_end": 174,
          "content": "boole = rs.getBoolean(1);<br/><br/>            assertFalse(boole);"
        },
        {
          "total_lines": 2,
          "line_start": 127,
          "line_end": 128,
          "content": "e.printStackTrace();<br/>            fail(\"ddl failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 111,
          "line_end": 112,
          "content": "e.printStackTrace();<br/>            fail(\"dml failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 61,
          "line_end": 62,
          "content": "connection = super.newConnection();<br/>            statement  = connection.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 78,
          "line_end": 79,
          "content": "e.printStackTrace();<br/>            fail(\"ddl failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 176,
          "line_end": 177,
          "content": "e.printStackTrace();<br/>            fail(\"dml failure\");"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rowio/RowOutputTextLog.java",
      "loc_duplicate": 15,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 246,
          "line_end": 248,
          "content": "write('\\'');<br/>        writeBytes(type.convertToString(o));<br/>        write('\\'');"
        },
        {
          "total_lines": 3,
          "line_start": 253,
          "line_end": 255,
          "content": "write('\\'');<br/>        writeBytes(type.convertToString(o));<br/>        write('\\'');"
        },
        {
          "total_lines": 3,
          "line_start": 260,
          "line_end": 262,
          "content": "write('\\'');<br/>        writeBytes(type.convertToString(o));<br/>        write('\\'');"
        },
        {
          "total_lines": 3,
          "line_start": 274,
          "line_end": 276,
          "content": "write('\\'');<br/>        writeBytes(type.convertToString(o));<br/>        write('\\'');"
        },
        {
          "total_lines": 3,
          "line_start": 267,
          "line_end": 269,
          "content": "write('\\'');<br/>        writeBytes(type.convertToString(o));<br/>        write('\\'');"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/TableBase.java",
      "loc_duplicate": 26,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 402,
          "line_end": 405,
          "content": "Session session,<br/>            HsqlName name, int[] columns, boolean[] descending,<br/>            boolean[] nullsLast, boolean unique, boolean constraint,<br/>            boolean forward"
        },
        {
          "total_lines": 4,
          "line_start": 516,
          "line_end": 519,
          "content": "HsqlName name,<br/>                                   int[] columns, boolean[] descending,<br/>                                   boolean[] nullsLast, boolean unique,<br/>                                   boolean constraint"
        },
        {
          "total_lines": 3,
          "line_start": 517,
          "line_end": 519,
          "content": "int[] columns, boolean[] descending,<br/>                                   boolean[] nullsLast, boolean unique,<br/>                                   boolean constraint"
        },
        {
          "total_lines": 3,
          "line_start": 403,
          "line_end": 405,
          "content": "boolean[] descending,<br/>            boolean[] nullsLast, boolean unique, boolean constraint,<br/>            boolean forward"
        },
        {
          "total_lines": 3,
          "line_start": 402,
          "line_end": 404,
          "content": "Session session,<br/>            HsqlName name, int[] columns, boolean[] descending,<br/>            boolean[] nullsLast"
        },
        {
          "total_lines": 2,
          "line_start": 404,
          "line_end": 405,
          "content": "boolean unique, boolean constraint,<br/>            boolean forward"
        },
        {
          "total_lines": 2,
          "line_start": 518,
          "line_end": 519,
          "content": "boolean unique,<br/>                                   boolean constraint"
        },
        {
          "total_lines": 2,
          "line_start": 403,
          "line_end": 404,
          "content": "int[] columns, boolean[] descending,<br/>            boolean[] nullsLast, boolean unique, boolean constraint"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 1,
          "line_start": 404,
          "line_end": 404,
          "content": "boolean unique, boolean constraint"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/ConnectionDialogSwing.java",
      "loc_duplicate": 45,
      "clones": [
          {
          "total_lines": 8,
          "line_start": 383,
          "line_end": 390,
          "content": "String s = (String) e.getItem();<br/><br/>        for (int i = 0; i < connTypes.length; i++) {<br/>            if (s.equals(connTypes[i][0])) {<br/>                mDriver.setText(connTypes[i][1]);<br/>                mURL.setText(connTypes[i][2]);<br/>            }<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 360,
          "line_end": 364,
          "content": "mName.setText(setting.getName());<br/>                mDriver.setText(setting.getDriver());<br/>                mURL.setText(setting.getUrl());<br/>                mUser.setText(setting.getUser());<br/>                mPassword.setText(setting.getPassword());"
        },
        {
          "total_lines": 4,
          "line_start": 360,
          "line_end": 363,
          "content": "mName.setText(setting.getName());<br/>                mDriver.setText(setting.getDriver());<br/>                mURL.setText(setting.getUrl());<br/>                mUser.setText(setting.getUser());"
        },
        {
          "total_lines": 3,
          "line_start": 215,
          "line_end": 217,
          "content": "// The button bar<br/>        buttons.add(Box.createHorizontalGlue());<br/>        buttons.add(Box.createHorizontalStrut(10));"
        },
        {
          "total_lines": 3,
          "line_start": 102,
          "line_end": 104,
          "content": "Class.forName(driver).newInstance();<br/><br/>        return DriverManager.getConnection(url, user, password);"
        },
        {
          "total_lines": 2,
          "line_start": 122,
          "line_end": 123,
          "content": "main.add(Box.createHorizontalStrut(10));<br/>        main.add(Box.createHorizontalGlue());"
        },
        {
          "total_lines": 2,
          "line_start": 176,
          "line_end": 177,
          "content": "buttons.add(Box.createHorizontalGlue());<br/>        buttons.add(Box.createHorizontalStrut(10));"
        },
        {
          "total_lines": 2,
          "line_start": 231,
          "line_end": 232,
          "content": "okCancel.addActionListener(this);<br/>        buttons.add(okCancel);"
        },
        {
          "total_lines": 2,
          "line_start": 233,
          "line_end": 234,
          "content": "buttons.add(Box.createHorizontalGlue());<br/>        buttons.add(Box.createHorizontalStrut(10));"
        },
        {
          "total_lines": 2,
          "line_start": 222,
          "line_end": 223,
          "content": "okCancel.addActionListener(this);<br/>        buttons.add(okCancel);"
        },
        {
          "total_lines": 2,
          "line_start": 135,
          "line_end": 136,
          "content": "whole.add(Box.createVerticalGlue());<br/>        whole.add(Box.createVerticalStrut(10));"
        },
        {
          "total_lines": 2,
          "line_start": 99,
          "line_end": 100,
          "content": "String driver, String url,<br/>            String user, String password"
        },
        {
          "total_lines": 2,
          "line_start": 257,
          "line_end": 258,
          "content": "(d.width - size.width) / 2,<br/>                        (d.height - size.height) / 2"
        },
        {
          "total_lines": 2,
          "line_start": 132,
          "line_end": 133,
          "content": "whole.add(Box.createVerticalGlue());<br/>        whole.add(Box.createVerticalStrut(10));"
        },
        {
          "total_lines": 2,
          "line_start": 125,
          "line_end": 126,
          "content": "main.add(Box.createHorizontalStrut(10));<br/>        main.add(Box.createHorizontalGlue());"
        },
        {
          "total_lines": 2,
          "line_start": 138,
          "line_end": 139,
          "content": "whole.add(Box.createVerticalGlue());<br/>        whole.add(Box.createVerticalStrut(10));"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCCommonDataSource.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 129,
          "line_end": 130,
          "content": "\"loginTimeout\",<br/>                                    Integer.toString(loginTimeout)"
        },
        {
          "total_lines": 1,
          "line_start": 298,
          "line_end": 298,
          "content": "\"loginTimeout\", Integer.toString(loginTimeout)"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/RangeVariableResolver.java",
      "loc_duplicate": 61,
      "clones": [
          {
          "total_lines": 12,
          "line_start": 446,
          "line_end": 457,
          "content": "if (idx < 0) {<br/>                    e.isSingleColumnEqual     = true;<br/>                    e.isSingleColumnCondition = true;<br/><br/>                    tempMap.put(e.getRightNode().getColumn(), e.getLeftNode());<br/><br/>                    continue;<br/>                }<br/><br/>                if (idx >= firstOuterJoinIndex) {<br/>                    continue;<br/>                }"
        },
        {
          "total_lines": 12,
          "line_start": 430,
          "line_end": 441,
          "content": "if (idx < 0) {<br/>                    e.isSingleColumnEqual     = true;<br/>                    e.isSingleColumnCondition = true;<br/><br/>                    tempMap.put(e.getRightNode().getColumn(), e.getLeftNode());<br/><br/>                    continue;<br/>                }<br/><br/>                if (idx >= firstOuterJoinIndex) {<br/>                    continue;<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 178,
          "line_end": 183,
          "content": "int index = rangeVarSet.getIndex(range);<br/><br/>                    if (index > 0) {<br/>                        rangeVariables[index].isLeftJoin      = false;<br/>                        rangeVariables[index - 1].isRightJoin = false;<br/>                    }"
        },
        {
          "total_lines": 6,
          "line_start": 190,
          "line_end": 195,
          "content": "int index = rangeVarSet.getIndex(range);<br/><br/>                    if (index > 0) {<br/>                        rangeVariables[index].isLeftJoin      = false;<br/>                        rangeVariables[index - 1].isRightJoin = false;<br/>                    }"
        },
        {
          "total_lines": 3,
          "line_start": 1393,
          "line_end": 1395,
          "content": "RangeVariableConditions conditions,<br/>                                          HsqlList exprList,<br/>                                          int rangeVarIndex"
        },
        {
          "total_lines": 3,
          "line_start": 1534,
          "line_end": 1536,
          "content": "rangeVar, leftIndex,<br/>                                                         newRangeVar,<br/>                                                         rightIndex"
        },
        {
          "total_lines": 3,
          "line_start": 1552,
          "line_end": 1554,
          "content": "rangeVar, leftIndex,<br/>                                                         newRangeVar,<br/>                                                         rightIndex"
        },
        {
          "total_lines": 2,
          "line_start": 1286,
          "line_end": 1287,
          "content": "RangeVariableConditions conditions,<br/>                                       HsqlList exprList, int rangeVarIndex"
        },
        {
          "total_lines": 2,
          "line_start": 903,
          "line_end": 904,
          "content": "conditions, i,<br/>                                      joinExpressions[i]"
        },
        {
          "total_lines": 2,
          "line_start": 758,
          "line_end": 759,
          "content": "session,<br/>                    colIndexSetEqual"
        },
        {
          "total_lines": 2,
          "line_start": 406,
          "line_end": 407,
          "content": "e.getRightNode().getColumn(),<br/>                                    e.getLeftNode()"
        },
        {
          "total_lines": 2,
          "line_start": 1301,
          "line_end": 1302,
          "content": "session,<br/>                    colIndexSetEqual"
        },
        {
          "total_lines": 2,
          "line_start": 657,
          "line_end": 658,
          "content": "session,<br/>                colIndexSetEqual"
        },
        {
          "total_lines": 2,
          "line_start": 909,
          "line_end": 910,
          "content": "conditions, i,<br/>                                      joinExpressions[i]"
        },
        {
          "total_lines": 2,
          "line_start": 1515,
          "line_end": 1516,
          "content": "null,<br/>                                      null"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestBase.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 139,
          "line_end": 140,
          "content": "e.printStackTrace();<br/>            System.out.println(this + \".setUp() error: \" + e.getMessage());"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rowio/RowInputText.java",
      "loc_duplicate": 181,
      "clones": [
          {
          "total_lines": 13,
          "line_start": 276,
          "line_end": 288,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();<br/><br/>        if (s.length() == 0) {<br/>            return null;<br/>        }<br/><br/>        return ValuePool.getInt(Integer.parseInt(s));"
        },
        {
          "total_lines": 13,
          "line_start": 293,
          "line_end": 305,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();<br/><br/>        if (s.length() == 0) {<br/>            return null;<br/>        }<br/><br/>        return ValuePool.getInt(Integer.parseInt(s));"
        },
        {
          "total_lines": 13,
          "line_start": 529,
          "line_end": 541,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();<br/><br/>        if (s.length() == 0) {<br/>            return null;<br/>        }<br/><br/>        long id = Long.parseLong(s);"
        },
        {
          "total_lines": 13,
          "line_start": 510,
          "line_end": 522,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();<br/><br/>        if (s.length() == 0) {<br/>            return null;<br/>        }<br/><br/>        long id = Long.parseLong(s);"
        },
        {
          "total_lines": 11,
          "line_start": 378,
          "line_end": 388,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();<br/><br/>        if (s.length() == 0) {<br/>            return null;<br/>        }"
        },
        {
          "total_lines": 11,
          "line_start": 293,
          "line_end": 303,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();<br/><br/>        if (s.length() == 0) {<br/>            return null;<br/>        }"
        },
        {
          "total_lines": 11,
          "line_start": 295,
          "line_end": 305,
          "content": "if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();<br/><br/>        if (s.length() == 0) {<br/>            return null;<br/>        }<br/><br/>        return ValuePool.getInt(Integer.parseInt(s));"
        },
        {
          "total_lines": 11,
          "line_start": 361,
          "line_end": 371,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();<br/><br/>        if (s.length() == 0) {<br/>            return null;<br/>        }"
        },
        {
          "total_lines": 11,
          "line_start": 278,
          "line_end": 288,
          "content": "if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();<br/><br/>        if (s.length() == 0) {<br/>            return null;<br/>        }<br/><br/>        return ValuePool.getInt(Integer.parseInt(s));"
        },
        {
          "total_lines": 11,
          "line_start": 276,
          "line_end": 286,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();<br/><br/>        if (s.length() == 0) {<br/>            return null;<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 378,
          "line_end": 384,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();"
        },
        {
          "total_lines": 7,
          "line_start": 182,
          "line_end": 188,
          "content": "Object[] messages = new Object[] {<br/>                new Integer(field), e.toString()<br/>            };<br/><br/>            throw new IOException(<br/>                Error.getMessage(<br/>                    ErrorCode.M_TEXT_SOURCE_FIELD_ERROR, 0, messages));"
        },
        {
          "total_lines": 7,
          "line_start": 293,
          "line_end": 299,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();"
        },
        {
          "total_lines": 7,
          "line_start": 276,
          "line_end": 282,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();"
        },
        {
          "total_lines": 7,
          "line_start": 361,
          "line_end": 367,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }<br/><br/>        s = s.trim();"
        },
        {
          "total_lines": 5,
          "line_start": 327,
          "line_end": 331,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 497,
          "line_end": 501,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 484,
          "line_end": 488,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 344,
          "line_end": 348,
          "content": "String s = readString();<br/><br/>        if (s == null) {<br/>            return null;<br/>        }"
        },
        {
          "total_lines": 2,
          "line_start": 99,
          "line_end": 100,
          "content": "fieldSepEnd = true;<br/>            fieldSep    = fieldSep.substring(0, fieldSep.length() - 1);"
        },
        {
          "total_lines": 2,
          "line_start": 104,
          "line_end": 105,
          "content": "varSepEnd = true;<br/>            varSep    = varSep.substring(0, varSep.length() - 1);"
        },
        {
          "total_lines": 2,
          "line_start": 109,
          "line_end": 110,
          "content": "longvarSepEnd = true;<br/>            longvarSep    = longvarSep.substring(0, longvarSep.length() - 1);"
        },
        {
          "total_lines": 2,
          "line_start": 90,
          "line_end": 91,
          "content": "String longvarSep,<br/>                        boolean allQuoted"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/TableSpaceManagerBlocks.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 204,
          "line_end": 205,
          "content": "rowSize,<br/>                    DataSpaceManager.fixedBlockSizeUnit"
        },
        {
          "total_lines": 2,
          "line_start": 143,
          "line_end": 144,
          "content": "rowSize,<br/>                    DataSpaceManager.fixedBlockSizeUnit"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ParserDQL.java",
      "loc_duplicate": 451,
      "clones": [
          {
          "total_lines": 22,
          "line_start": 3368,
          "line_end": 3389,
          "content": "Expression e = XreadDateTimeIntervalTerm();<br/><br/>        while (true) {<br/>            int type;<br/><br/>            if (token.tokenType == Tokens.PLUS) {<br/>                type = OpTypes.ADD;<br/>            } else if (token.tokenType == Tokens.MINUS) {<br/>                type = OpTypes.SUBTRACT;<br/>            } else {<br/>                break;<br/>            }<br/><br/>            read();<br/><br/>            Expression a = e;<br/><br/>            e = XreadDateTimeIntervalTerm();<br/>            e = new ExpressionArithmetic(type, a, e);<br/>        }<br/><br/>        return e;"
        },
        {
          "total_lines": 22,
          "line_start": 3342,
          "line_end": 3363,
          "content": "Expression e = XreadDateTimeIntervalTerm();<br/><br/>        while (true) {<br/>            int type;<br/><br/>            if (token.tokenType == Tokens.PLUS) {<br/>                type = OpTypes.ADD;<br/>            } else if (token.tokenType == Tokens.MINUS) {<br/>                type = OpTypes.SUBTRACT;<br/>            } else {<br/>                break;<br/>            }<br/><br/>            read();<br/><br/>            Expression a = e;<br/><br/>            e = XreadDateTimeIntervalTerm();<br/>            e = new ExpressionArithmetic(type, a, e);<br/>        }<br/><br/>        return e;"
        },
        {
          "total_lines": 11,
          "line_start": 1113,
          "line_end": 1123,
          "content": "if (sortAndSlice.hasLimit()) {<br/>                            throw Error.error(ErrorCode.X_42549);<br/>                        }<br/><br/>                        for (int i = 0; i < sortAndSlice.exprList.size();<br/>                                i++) {<br/>                            Expression e =<br/>                                (Expression) sortAndSlice.exprList.get(i);<br/><br/>                            queryExpression.sortAndSlice.addOrderExpression(e);<br/>                        }"
        },
        {
          "total_lines": 11,
          "line_start": 5240,
          "line_end": 5250,
          "content": "Expression e = XreadValueExpression();<br/><br/>                list.add(e);<br/><br/>                if (token.tokenType == Tokens.COMMA) {<br/>                    read();<br/>                } else {<br/>                    readThis(Tokens.CLOSEBRACKET);<br/><br/>                    break;<br/>                }"
        },
        {
          "total_lines": 11,
          "line_start": 5472,
          "line_end": 5482,
          "content": "int position = getPosition();<br/><br/>        read();<br/><br/>        if (!readIfThis(Tokens.OPENBRACKET)) {<br/>            rewind(position);<br/><br/>            return null;<br/>        }<br/><br/>        Expression casewhen = null;"
        },
        {
          "total_lines": 11,
          "line_start": 5443,
          "line_end": 5453,
          "content": "int position = getPosition();<br/><br/>        read();<br/><br/>        if (!readIfThis(Tokens.OPENBRACKET)) {<br/>            rewind(position);<br/><br/>            return null;<br/>        }<br/><br/>        Expression casewhen = null;"
        },
        {
          "total_lines": 9,
          "line_start": 1021,
          "line_end": 1029,
          "content": "if (sortAndSlice.hasLimit()) {<br/>                    throw Error.error(ErrorCode.X_42549);<br/>                }<br/><br/>                for (int i = 0; i < sortAndSlice.exprList.size(); i++) {<br/>                    Expression e = (Expression) sortAndSlice.exprList.get(i);<br/><br/>                    queryExpression.sortAndSlice.addOrderExpression(e);<br/>                }"
        },
        {
          "total_lines": 9,
          "line_start": 5242,
          "line_end": 5250,
          "content": "list.add(e);<br/><br/>                if (token.tokenType == Tokens.COMMA) {<br/>                    read();<br/>                } else {<br/>                    readThis(Tokens.CLOSEBRACKET);<br/><br/>                    break;<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 2969,
          "line_end": 2975,
          "content": "read();<br/><br/>            Expression e1 = XreadNumericValueExpression();<br/><br/>            readThis(Tokens.RIGHTBRACKET);<br/><br/>            e = new ExpressionAccessor(e, e1);"
        },
        {
          "total_lines": 7,
          "line_start": 5935,
          "line_end": 5941,
          "content": "checkValidCatalogName(token.namePrefix);<br/><br/>                    if (token.namePrePrefix != null) {<br/>                        throw tooManyIdentifiers();<br/>                    }<br/><br/>                    break;"
        },
        {
          "total_lines": 7,
          "line_start": 5945,
          "line_end": 5951,
          "content": "checkValidCatalogName(token.namePrefix);<br/><br/>                    if (token.namePrePrefix != null) {<br/>                        throw tooManyIdentifiers();<br/>                    }<br/><br/>                    break;"
        },
        {
          "total_lines": 7,
          "line_start": 4165,
          "line_end": 4171,
          "content": "Expression e = XreadExplicitRowValueConstructorOrNull();<br/><br/>        if (e != null) {<br/>            return e;<br/>        }<br/><br/>        return XreadRowValueSpecialCase();"
        },
        {
          "total_lines": 7,
          "line_start": 5445,
          "line_end": 5451,
          "content": "read();<br/><br/>        if (!readIfThis(Tokens.OPENBRACKET)) {<br/>            rewind(position);<br/><br/>            return null;<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 4909,
          "line_end": 4915,
          "content": "read();<br/><br/>            Expression e1 = XreadNumericValueExpression();<br/><br/>            readThis(Tokens.RIGHTBRACKET);<br/><br/>            e = new ExpressionAccessor(e, e1);"
        },
        {
          "total_lines": 7,
          "line_start": 5474,
          "line_end": 5480,
          "content": "read();<br/><br/>        if (!readIfThis(Tokens.OPENBRACKET)) {<br/>            rewind(position);<br/><br/>            return null;<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 4154,
          "line_end": 4160,
          "content": "Expression e = XreadExplicitRowValueConstructorOrNull();<br/><br/>        if (e != null) {<br/>            return e;<br/>        }<br/><br/>        return XreadRowValueSpecialCase();"
        },
        {
          "total_lines": 6,
          "line_start": 957,
          "line_end": 962,
          "content": "if (table.getColumnIndex(name.name) != -1) {<br/>                        throw Error.error(ErrorCode.X_42578,<br/>                                          token.tokenString);<br/>                    }<br/><br/>                    read();"
        },
        {
          "total_lines": 6,
          "line_start": 991,
          "line_end": 996,
          "content": "if (table.getColumnIndex(name.name) != -1) {<br/>                        throw Error.error(ErrorCode.X_42578,<br/>                                          token.tokenString);<br/>                    }<br/><br/>                    read();"
        },
        {
          "total_lines": 5,
          "line_start": 2568,
          "line_end": 2572,
          "content": "if (e != null) {<br/>                    return e;<br/>                }<br/><br/>                break;"
        },
        {
          "total_lines": 5,
          "line_start": 948,
          "line_end": 952,
          "content": "checkIsSimpleName();<br/><br/>                    name = database.nameManager.newColumnHsqlName(<br/>                        table.getName(), token.tokenString,<br/>                        token.isDelimitedIdentifier);"
        },
        {
          "total_lines": 5,
          "line_start": 2550,
          "line_end": 2554,
          "content": "if (e != null) {<br/>                    return e;<br/>                }<br/><br/>                break;"
        },
        {
          "total_lines": 5,
          "line_start": 2969,
          "line_end": 2973,
          "content": "read();<br/><br/>            Expression e1 = XreadNumericValueExpression();<br/><br/>            readThis(Tokens.RIGHTBRACKET);"
        },
        {
          "total_lines": 5,
          "line_start": 5176,
          "line_end": 5180,
          "content": "Expression e = readSQLFunction(function);<br/><br/>                    if (e != null) {<br/>                        return e;<br/>                    }"
        },
        {
          "total_lines": 5,
          "line_start": 1329,
          "line_end": 1333,
          "content": "if (natural) {<br/>                        throw unexpectedToken();<br/>                    }<br/><br/>                    read();"
        },
        {
          "total_lines": 5,
          "line_start": 5935,
          "line_end": 5939,
          "content": "checkValidCatalogName(token.namePrefix);<br/><br/>                    if (token.namePrePrefix != null) {<br/>                        throw tooManyIdentifiers();<br/>                    }"
        },
        {
          "total_lines": 5,
          "line_start": 2587,
          "line_end": 2591,
          "content": "if (e != null) {<br/>                    return e;<br/>                }<br/><br/>                break;"
        },
        {
          "total_lines": 5,
          "line_start": 2532,
          "line_end": 2536,
          "content": "if (e != null) {<br/>                    return e;<br/>                }<br/><br/>                break;"
        },
        {
          "total_lines": 5,
          "line_start": 1850,
          "line_end": 1854,
          "content": "if (table.isUpdatable()) {<br/>                        break;<br/>                    }<br/><br/>                    throw Error.error(ErrorCode.X_42545);"
        },
        {
          "total_lines": 5,
          "line_start": 2541,
          "line_end": 2545,
          "content": "if (e != null) {<br/>                    return e;<br/>                }<br/><br/>                break;"
        },
        {
          "total_lines": 5,
          "line_start": 5157,
          "line_end": 5161,
          "content": "Expression e = readSQLFunction(function);<br/><br/>                    if (e != null) {<br/>                        return e;<br/>                    }"
        },
        {
          "total_lines": 5,
          "line_start": 985,
          "line_end": 989,
          "content": "checkIsSimpleName();<br/><br/>                    name = database.nameManager.newColumnHsqlName(<br/>                        table.getName(), token.tokenString,<br/>                        token.isDelimitedIdentifier);"
        },
        {
          "total_lines": 5,
          "line_start": 4909,
          "line_end": 4913,
          "content": "read();<br/><br/>            Expression e1 = XreadNumericValueExpression();<br/><br/>            readThis(Tokens.RIGHTBRACKET);"
        },
        {
          "total_lines": 5,
          "line_start": 1860,
          "line_end": 1864,
          "content": "if (table.isUpdatable()) {<br/>                        break;<br/>                    }<br/><br/>                    throw Error.error(ErrorCode.X_42545);"
        },
        {
          "total_lines": 5,
          "line_start": 1344,
          "line_end": 1348,
          "content": "if (natural) {<br/>                        throw unexpectedToken();<br/>                    }<br/><br/>                    read();"
        },
        {
          "total_lines": 5,
          "line_start": 1373,
          "line_end": 1377,
          "content": "read();<br/>                    readIfThis(Tokens.OUTER);<br/>                    readThis(Tokens.JOIN);<br/><br/>                    left = true;"
        },
        {
          "total_lines": 5,
          "line_start": 5945,
          "line_end": 5949,
          "content": "checkValidCatalogName(token.namePrefix);<br/><br/>                    if (token.namePrePrefix != null) {<br/>                        throw tooManyIdentifiers();<br/>                    }"
        },
        {
          "total_lines": 5,
          "line_start": 1389,
          "line_end": 1393,
          "content": "read();<br/>                    readIfThis(Tokens.OUTER);<br/>                    readThis(Tokens.JOIN);<br/><br/>                    left  = true;"
        },
        {
          "total_lines": 4,
          "line_start": 1374,
          "line_end": 1377,
          "content": "readIfThis(Tokens.OUTER);<br/>                    readThis(Tokens.JOIN);<br/><br/>                    left = true;"
        },
        {
          "total_lines": 4,
          "line_start": 1390,
          "line_end": 1393,
          "content": "readIfThis(Tokens.OUTER);<br/>                    readThis(Tokens.JOIN);<br/><br/>                    left  = true;"
        },
        {
          "total_lines": 3,
          "line_start": 4937,
          "line_end": 4939,
          "content": "r.nodes = (Expression[]) ArrayUtil.resizeArray(r.nodes,<br/>                            r.nodes.length + 1);<br/>                    r.nodes[r.nodes.length - 1] = e;"
        },
        {
          "total_lines": 3,
          "line_start": 1348,
          "line_end": 1350,
          "content": "read();<br/>                    readThis(Tokens.JOIN);<br/>                    break;"
        },
        {
          "total_lines": 3,
          "line_start": 5494,
          "line_end": 5496,
          "content": "readThis(Tokens.CLOSEBRACKET);<br/><br/>        return casewhen;"
        },
        {
          "total_lines": 3,
          "line_start": 5465,
          "line_end": 5467,
          "content": "readThis(Tokens.CLOSEBRACKET);<br/><br/>        return casewhen;"
        },
        {
          "total_lines": 3,
          "line_start": 2245,
          "line_end": 2247,
          "content": "read();<br/><br/>                return e;"
        },
        {
          "total_lines": 3,
          "line_start": 2973,
          "line_end": 2975,
          "content": "readThis(Tokens.RIGHTBRACKET);<br/><br/>            e = new ExpressionAccessor(e, e1);"
        },
        {
          "total_lines": 3,
          "line_start": 4697,
          "line_end": 4699,
          "content": "r.nodes = (Expression[]) ArrayUtil.resizeArray(r.nodes,<br/>                        r.nodes.length + 1);<br/>                r.nodes[r.nodes.length - 1] = e;"
        },
        {
          "total_lines": 3,
          "line_start": 3110,
          "line_end": 3112,
          "content": "read();<br/><br/>                boole = false;"
        },
        {
          "total_lines": 3,
          "line_start": 4913,
          "line_end": 4915,
          "content": "readThis(Tokens.RIGHTBRACKET);<br/><br/>            e = new ExpressionAccessor(e, e1);"
        },
        {
          "total_lines": 3,
          "line_start": 2316,
          "line_end": 2318,
          "content": "read();<br/><br/>                return e;"
        },
        {
          "total_lines": 3,
          "line_start": 1389,
          "line_end": 1391,
          "content": "read();<br/>                    readIfThis(Tokens.OUTER);<br/>                    readThis(Tokens.JOIN);"
        },
        {
          "total_lines": 3,
          "line_start": 4753,
          "line_end": 4755,
          "content": "token.namePrePrefix,<br/>                                            token.namePrefix,<br/>                                            token.tokenString"
        },
        {
          "total_lines": 3,
          "line_start": 1373,
          "line_end": 1375,
          "content": "read();<br/>                    readIfThis(Tokens.OUTER);<br/>                    readThis(Tokens.JOIN);"
        },
        {
          "total_lines": 3,
          "line_start": 2346,
          "line_end": 2348,
          "content": "read();<br/><br/>                return e;"
        },
        {
          "total_lines": 3,
          "line_start": 3104,
          "line_end": 3106,
          "content": "read();<br/><br/>                boole = false;"
        },
        {
          "total_lines": 3,
          "line_start": 2238,
          "line_end": 2240,
          "content": "read();<br/><br/>                return e;"
        },
        {
          "total_lines": 3,
          "line_start": 1381,
          "line_end": 1383,
          "content": "read();<br/>                    readIfThis(Tokens.OUTER);<br/>                    readThis(Tokens.JOIN);"
        },
        {
          "total_lines": 3,
          "line_start": 1339,
          "line_end": 1341,
          "content": "read();<br/>                    readThis(Tokens.JOIN);<br/>                    break;"
        },
        {
          "total_lines": 3,
          "line_start": 670,
          "line_end": 672,
          "content": "ColumnSchema col = target.getColumn();<br/><br/>                throw Error.error(ErrorCode.X_42579, col.getName().name);"
        },
        {
          "total_lines": 2,
          "line_start": 1374,
          "line_end": 1375,
          "content": "readIfThis(Tokens.OUTER);<br/>                    readThis(Tokens.JOIN);"
        },
        {
          "total_lines": 2,
          "line_start": 1348,
          "line_end": 1349,
          "content": "read();<br/>                    readThis(Tokens.JOIN);"
        },
        {
          "total_lines": 2,
          "line_start": 5890,
          "line_end": 5891,
          "content": "token.tokenString,<br/>            isDelimitedIdentifier()"
        },
        {
          "total_lines": 2,
          "line_start": 1389,
          "line_end": 1390,
          "content": "read();<br/>                    readIfThis(Tokens.OUTER);"
        },
        {
          "total_lines": 2,
          "line_start": 3004,
          "line_end": 3005,
          "content": "boole = false;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 1227,
          "line_end": 1228,
          "content": "token.tokenString,<br/>                        isDelimitedIdentifier()"
        },
        {
          "total_lines": 2,
          "line_start": 2999,
          "line_end": 3000,
          "content": "boole = false;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 3052,
          "line_end": 3053,
          "content": "boole = false;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 1820,
          "line_end": 1821,
          "content": "token.tokenString,<br/>                                                      isDelimitedIdentifier()"
        },
        {
          "total_lines": 2,
          "line_start": 4897,
          "line_end": 4898,
          "content": "session,<br/>                token.tokenString, token.namePrefix"
        },
        {
          "total_lines": 2,
          "line_start": 6073,
          "line_end": 6074,
          "content": "session,<br/>            token.tokenString, token.namePrefix"
        },
        {
          "total_lines": 2,
          "line_start": 178,
          "line_end": 179,
          "content": "null,<br/>                                                null"
        },
        {
          "total_lines": 2,
          "line_start": 5412,
          "line_end": 5413,
          "content": "array.add(e);<br/>        readThis(Tokens.COMMA);"
        },
        {
          "total_lines": 2,
          "line_start": 309,
          "line_end": 310,
          "content": "read();<br/>                    readThis(Tokens.OBJECT);"
        },
        {
          "total_lines": 2,
          "line_start": 4754,
          "line_end": 4755,
          "content": "token.namePrefix,<br/>                                            token.tokenString"
        },
        {
          "total_lines": 2,
          "line_start": 1431,
          "line_end": 1432,
          "content": "select.addRangeVariable(session, rightRange);<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 286,
          "line_end": 287,
          "content": "read();<br/>                    readThis(Tokens.OBJECT);"
        },
        {
          "total_lines": 2,
          "line_start": 6093,
          "line_end": 6094,
          "content": "token.namePrefix,<br/>                                        token.tokenString"
        },
        {
          "total_lines": 2,
          "line_start": 5417,
          "line_end": 5418,
          "content": "array.add(e);<br/>        readThis(Tokens.COMMA);"
        },
        {
          "total_lines": 2,
          "line_start": 1222,
          "line_end": 1223,
          "content": "read();<br/>                checkIsNonCoreReservedIdentifier();"
        },
        {
          "total_lines": 2,
          "line_start": 2343,
          "line_end": 2344,
          "content": "token.namePrePrefix,<br/>                                         token.namePrefix, token.tokenString"
        },
        {
          "total_lines": 2,
          "line_start": 1381,
          "line_end": 1382,
          "content": "read();<br/>                    readIfThis(Tokens.OUTER);"
        },
        {
          "total_lines": 2,
          "line_start": 590,
          "line_end": 591,
          "content": "session,<br/>                        token.tokenString, token.namePrefix"
        },
        {
          "total_lines": 2,
          "line_start": 1390,
          "line_end": 1391,
          "content": "readIfThis(Tokens.OUTER);<br/>                    readThis(Tokens.JOIN);"
        },
        {
          "total_lines": 2,
          "line_start": 3057,
          "line_end": 3058,
          "content": "boole = false;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 1382,
          "line_end": 1383,
          "content": "readIfThis(Tokens.OUTER);<br/>                    readThis(Tokens.JOIN);"
        },
        {
          "total_lines": 2,
          "line_start": 600,
          "line_end": 601,
          "content": "session,<br/>                        token.tokenString, token.namePrefix"
        },
        {
          "total_lines": 2,
          "line_start": 1595,
          "line_end": 1596,
          "content": "ErrorCode.X_42563,<br/>                                  ErrorCode.M_INVALID_LIMIT"
        },
        {
          "total_lines": 2,
          "line_start": 1673,
          "line_end": 1674,
          "content": "ErrorCode.X_42563,<br/>                                  ErrorCode.M_INVALID_LIMIT"
        },
        {
          "total_lines": 2,
          "line_start": 1444,
          "line_end": 1445,
          "content": "session, RangeGroup.emptyGroup,<br/>                            compileContext.getOuterRanges()"
        },
        {
          "total_lines": 2,
          "line_start": 1423,
          "line_end": 1424,
          "content": "select.addRangeVariable(session, rightRange);<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 214,
          "line_end": 215,
          "content": "typeNumber     = Types.SQL_VARCHAR;<br/>                        break;"
        },
        {
          "total_lines": 2,
          "line_start": 1339,
          "line_end": 1340,
          "content": "read();<br/>                    readThis(Tokens.JOIN);"
        },
        {
          "total_lines": 2,
          "line_start": 5212,
          "line_end": 5213,
          "content": "name,<br/>                    schema.name, SchemaObject.FUNCTION"
        },
        {
          "total_lines": 2,
          "line_start": 1815,
          "line_end": 1816,
          "content": "read();<br/>                checkIsNonCoreReservedIdentifier();"
        },
        {
          "total_lines": 2,
          "line_start": 2924,
          "line_end": 2925,
          "content": "session,<br/>                        token.tokenString, token.namePrefix"
        },
        {
          "total_lines": 2,
          "line_start": 1657,
          "line_end": 1658,
          "content": "ErrorCode.X_42563,<br/>                                  ErrorCode.M_INVALID_LIMIT"
        },
        {
          "total_lines": 2,
          "line_start": 2184,
          "line_end": 2185,
          "content": "read();<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1385,
          "line_end": 1386,
          "content": "right = true;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 5628,
          "line_end": 5629,
          "content": "OpTypes.CASEWHEN,<br/>                                                   condition, alternatives"
        },
        {
          "total_lines": 2,
          "line_start": 5028,
          "line_end": 5029,
          "content": "OpTypes.CASEWHEN, condition,<br/>                                               alternatives"
        },
        {
          "total_lines": 2,
          "line_start": 1394,
          "line_end": 1395,
          "content": "right = true;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 1373,
          "line_end": 1374,
          "content": "read();<br/>                    readIfThis(Tokens.OUTER);"
        },
        {
          "total_lines": 2,
          "line_start": 2002,
          "line_end": 2003,
          "content": "token.tokenString,<br/>                                                  isDelimitedIdentifier()"
        },
        {
          "total_lines": 2,
          "line_start": 218,
          "line_end": 219,
          "content": "typeNumber = Types.SQL_VARCHAR;<br/>                        break;"
        },
        {
          "total_lines": 2,
          "line_start": 2026,
          "line_end": 2027,
          "content": "alias, columnList,<br/>                                            columnNameList, compileContext"
        },
        {
          "total_lines": 2,
          "line_start": 1447,
          "line_end": 1448,
          "content": "session, RangeGroup.emptyGroup,<br/>                            compileContext.getOuterRanges()"
        },
        {
          "total_lines": 2,
          "line_start": 2797,
          "line_end": 2798,
          "content": "scanner.token.tokenString,<br/>                                               schemaName, true"
        },
        {
          "total_lines": 2,
          "line_start": 3009,
          "line_end": 3010,
          "content": "boole = false;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 2029,
          "line_end": 2030,
          "content": "alias, columnList,<br/>                                      columnNameList, compileContext"
        },
        {
          "total_lines": 1,
          "line_start": 1444,
          "line_end": 1444,
          "content": "session, RangeGroup.emptyGroup"
        },
        {
          "total_lines": 1,
          "line_start": 5220,
          "line_end": 5220,
          "content": "name, schema.name, SchemaObject.FUNCTION"
        },
        {
          "total_lines": 1,
          "line_start": 1447,
          "line_end": 1447,
          "content": "session, RangeGroup.emptyGroup"
        },
        {
          "total_lines": 1,
          "line_start": 2344,
          "line_end": 2344,
          "content": "token.namePrefix, token.tokenString"
        },
        {
          "total_lines": 1,
          "line_start": 2798,
          "line_end": 2798,
          "content": "schemaName, true"
        },
        {
          "total_lines": 1,
          "line_start": 1746,
          "line_end": 1746,
          "content": "ErrorCode.X_42563, ErrorCode.M_INVALID_LIMIT"
        },
        {
          "total_lines": 1,
          "line_start": 601,
          "line_end": 601,
          "content": "token.tokenString, token.namePrefix"
        },
        {
          "total_lines": 1,
          "line_start": 6074,
          "line_end": 6074,
          "content": "token.tokenString, token.namePrefix"
        },
        {
          "total_lines": 1,
          "line_start": 5695,
          "line_end": 5695,
          "content": "exprList, parseList, 0"
        },
        {
          "total_lines": 1,
          "line_start": 4898,
          "line_end": 4898,
          "content": "token.tokenString, token.namePrefix"
        },
        {
          "total_lines": 1,
          "line_start": 1631,
          "line_end": 1631,
          "content": "ErrorCode.X_42563, ErrorCode.M_INVALID_LIMIT"
        },
        {
          "total_lines": 1,
          "line_start": 1622,
          "line_end": 1622,
          "content": "ErrorCode.X_42563, ErrorCode.M_INVALID_LIMIT"
        },
        {
          "total_lines": 1,
          "line_start": 1643,
          "line_end": 1643,
          "content": "ErrorCode.X_42563, ErrorCode.M_INVALID_LIMIT"
        },
        {
          "total_lines": 1,
          "line_start": 591,
          "line_end": 591,
          "content": "token.tokenString, token.namePrefix"
        },
        {
          "total_lines": 1,
          "line_start": 2925,
          "line_end": 2925,
          "content": "token.tokenString, token.namePrefix"
        },
        {
          "total_lines": 1,
          "line_start": 2677,
          "line_end": 2677,
          "content": "schemaName, true"
        },
        {
          "total_lines": 1,
          "line_start": 5675,
          "line_end": 5675,
          "content": "exprList, parseList, 0"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/cmdline/sqltool/Calculator.java",
      "loc_duplicate": 28,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 240,
          "line_end": 246,
          "content": "// Reduce multiplication and division<br/>        i = startAtomIndex;<br/>        atom = atoms.get(i);<br/>        if (atom.op != null)<br/>            throw new IllegalStateException(<br/>                    \"Expected initial value expected but got operation \"<br/>                    + atom.op);"
        },
        {
          "total_lines": 7,
          "line_start": 205,
          "line_end": 211,
          "content": "// Reduce powers<br/>        i = startAtomIndex;<br/>        atom = atoms.get(i);<br/>        if (atom.op != null)<br/>            throw new IllegalStateException(<br/>                    \"Expected initial value expected but got operation \"<br/>                    + atom.op);"
        },
        {
          "total_lines": 3,
          "line_start": 240,
          "line_end": 242,
          "content": "// Reduce multiplication and division<br/>        i = startAtomIndex;<br/>        atom = atoms.get(i);"
        },
        {
          "total_lines": 3,
          "line_start": 284,
          "line_end": 286,
          "content": "// Reduce the operator Atom<br/>            --remaining;<br/>            atom = atoms.remove(startAtomIndex);"
        },
        {
          "total_lines": 3,
          "line_start": 294,
          "line_end": 296,
          "content": "// Reduce the right operand<br/>            --remaining;<br/>            atom = atoms.remove(startAtomIndex);"
        },
        {
          "total_lines": 3,
          "line_start": 205,
          "line_end": 207,
          "content": "// Reduce powers<br/>        i = startAtomIndex;<br/>        atom = atoms.get(i);"
        },
        {
          "total_lines": 2,
          "line_start": 306,
          "line_end": 307,
          "content": "break;<br/>              default:"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/SessionData.java",
      "loc_duplicate": 18,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 186,
          "line_end": 187,
          "content": "returned,<br/>                    ResultProperties.isScrollable(required)"
        },
        {
          "total_lines": 2,
          "line_start": 177,
          "line_end": 178,
          "content": "returned,<br/>                                ResultProperties.isHoldable(required)"
        },
        {
          "total_lines": 2,
          "line_start": 381,
          "line_end": 382,
          "content": "ResultLob result,<br/>                                     InputStream inputStream"
        },
        {
          "total_lines": 2,
          "line_start": 138,
          "line_end": 139,
          "content": "returned,<br/>                            ResultProperties.isHoldable(required)"
        },
        {
          "total_lines": 2,
          "line_start": 149,
          "line_end": 150,
          "content": "returned,<br/>                    ResultProperties.isScrollable(required)"
        },
        {
          "total_lines": 2,
          "line_start": 171,
          "line_end": 172,
          "content": "returned,<br/>                            ResultProperties.isHoldable(required)"
        },
        {
          "total_lines": 2,
          "line_start": 130,
          "line_end": 131,
          "content": "returned,<br/>                        ResultProperties.isHoldable(required)"
        },
        {
          "total_lines": 2,
          "line_start": 167,
          "line_end": 168,
          "content": "returned,<br/>                        ResultProperties.isHoldable(required)"
        },
        {
          "total_lines": 1,
          "line_start": 460,
          "line_end": 460,
          "content": "countStream, result.getBlockLength()"
        },
        {
          "total_lines": 1,
          "line_start": 420,
          "line_end": 420,
          "content": "countStream, result.getBlockLength()"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/ClobType.java",
      "loc_duplicate": 17,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 181,
          "line_end": 185,
          "content": "if (a == null) {<br/>            return Tokens.T_NULL;<br/>        }<br/><br/>        return convertToString(a);"
        },
        {
          "total_lines": 5,
          "line_start": 160,
          "line_end": 164,
          "content": "ClobData clob = session.createClob(((String) a).length());<br/><br/>            clob.setString(session, 0, (String) a);<br/><br/>            return clob;"
        },
        {
          "total_lines": 2,
          "line_start": 93,
          "line_end": 94,
          "content": "factor     = precision / (1024);<br/>                multiplier = Tokens.T_K_FACTOR;"
        },
        {
          "total_lines": 2,
          "line_start": 87,
          "line_end": 88,
          "content": "factor     = precision / (1024 * 1024 * 1024);<br/>                multiplier = Tokens.T_G_FACTOR;"
        },
        {
          "total_lines": 2,
          "line_start": 90,
          "line_end": 91,
          "content": "factor     = precision / (1024 * 1024);<br/>                multiplier = Tokens.T_M_FACTOR;"
        },
        {
          "total_lines": 1,
          "line_start": 126,
          "line_end": 126,
          "content": "Object a, Object b, int opType"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestBug785429.java",
      "loc_duplicate": 55,
      "clones": [
          {
          "total_lines": 13,
          "line_start": 131,
          "line_end": 143,
          "content": "while (rs.next()) {<br/><br/>//            for (int i= 1; i <= colCount; i++) {<br/>//                System.out.print(rs.getString(i) + \", \");<br/>//            }<br/>//<br/>//            System.out.println();<br/>            rowcount++;<br/>        }<br/><br/>        msg = sql + \": row count:\";<br/><br/>        assertEquals(msg, 1, rowcount);"
        },
        {
          "total_lines": 11,
          "line_start": 131,
          "line_end": 141,
          "content": "while (rs.next()) {<br/><br/>//            for (int i= 1; i <= colCount; i++) {<br/>//                System.out.print(rs.getString(i) + \", \");<br/>//            }<br/>//<br/>//            System.out.println();<br/>            rowcount++;<br/>        }<br/><br/>        msg = sql + \": row count:\";"
        },
        {
          "total_lines": 7,
          "line_start": 89,
          "line_end": 95,
          "content": "while (rs.next()) {<br/>            rowcount++;<br/>        }<br/><br/>        msg = sql + \": row count:\";<br/><br/>        assertEquals(msg, 1, rowcount);"
        },
        {
          "total_lines": 7,
          "line_start": 34,
          "line_end": 40,
          "content": "import java.sql.Connection;<br/>import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.Statement;<br/><br/>import junit.framework.TestCase;<br/>import junit.framework.TestResult;"
        },
        {
          "total_lines": 6,
          "line_start": 35,
          "line_end": 40,
          "content": "import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.Statement;<br/><br/>import junit.framework.TestCase;<br/>import junit.framework.TestResult;"
        },
        {
          "total_lines": 5,
          "line_start": 89,
          "line_end": 93,
          "content": "while (rs.next()) {<br/>            rowcount++;<br/>        }<br/><br/>        msg = sql + \": row count:\";"
        },
        {
          "total_lines": 2,
          "line_start": 112,
          "line_end": 113,
          "content": "ps.setBytes(1, oid);<br/>        ps.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 107,
          "line_end": 108,
          "content": "ps.setBytes(1, oid);<br/>        ps.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 155,
          "line_end": 156,
          "content": "e.printStackTrace();<br/>            System.out.println(\"TestSql.tearDown() error: \" + e.getMessage());"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/DataSpaceManager.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 61,
          "line_end": 62,
          "content": "long offset,<br/>                               long limit"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/QueryExpression.java",
      "loc_duplicate": 33,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 459,
          "line_end": 461,
          "content": "leftQueryExpression.unionColumnTypes,<br/>                                    leftQueryExpression.unionColumnMap,<br/>                                    unionColumnTypes"
        },
        {
          "total_lines": 3,
          "line_start": 439,
          "line_end": 441,
          "content": "leftQueryExpression.unionColumnTypes,<br/>                             leftQueryExpression.unionColumnMap,<br/>                             unionColumnTypes"
        },
        {
          "total_lines": 3,
          "line_start": 705,
          "line_end": 707,
          "content": "break;<br/><br/>                default :"
        },
        {
          "total_lines": 3,
          "line_start": 464,
          "line_end": 466,
          "content": "rightQueryExpression.unionColumnTypes,<br/>                                    rightQueryExpression.unionColumnMap,<br/>                                    unionColumnTypes"
        },
        {
          "total_lines": 3,
          "line_start": 435,
          "line_end": 437,
          "content": "leftQueryExpression.unionColumnTypes,<br/>                                    leftQueryExpression.unionColumnMap,<br/>                                    unionColumnTypes"
        },
        {
          "total_lines": 3,
          "line_start": 446,
          "line_end": 448,
          "content": "rightQueryExpression.unionColumnTypes,<br/>                             rightQueryExpression.unionColumnMap,<br/>                             unionColumnTypes"
        },
        {
          "total_lines": 3,
          "line_start": 442,
          "line_end": 444,
          "content": "rightQueryExpression.unionColumnTypes,<br/>                                    rightQueryExpression.unionColumnMap,<br/>                                    unionColumnTypes"
        },
        {
          "total_lines": 2,
          "line_start": 1129,
          "line_end": 1130,
          "content": "RangeVariable[] ranges,<br/>                                      RangeVariable[] newRanges"
        },
        {
          "total_lines": 2,
          "line_start": 221,
          "line_end": 222,
          "content": "session,<br/>                    RangeGroup.emptyGroup, rangeGroups"
        },
        {
          "total_lines": 2,
          "line_start": 1123,
          "line_end": 1124,
          "content": "RangeVariable range,<br/>                                        Expression[] list"
        },
        {
          "total_lines": 2,
          "line_start": 887,
          "line_end": 888,
          "content": "RangeVariable[] rangeVars,<br/>                                         OrderedHashSet set"
        },
        {
          "total_lines": 2,
          "line_start": 873,
          "line_end": 874,
          "content": "OrderedHashSet set,<br/>            OrderedIntHashSet typeSet, OrderedIntHashSet stopAtTypeSet"
        },
        {
          "total_lines": 1,
          "line_start": 874,
          "line_end": 874,
          "content": "OrderedIntHashSet typeSet, OrderedIntHashSet stopAtTypeSet"
        },
        {
          "total_lines": 1,
          "line_start": 244,
          "line_end": 244,
          "content": "Session session, RangeGroup[] rangeGroups"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestGroupByHaving.java",
      "loc_duplicate": 12,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 228,
          "line_end": 232,
          "content": "{<br/>                new Double(42500), new Integer(13)<br/>            }, {<br/>                new Double(45000), new Integer(23)<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 201,
          "line_end": 205,
          "content": "{<br/>                new Double(42500), new Integer(13)<br/>            }, {<br/>                new Double(45000), new Integer(23)<br/>            }"
        },
        {
          "total_lines": 2,
          "line_start": 80,
          "line_end": 81,
          "content": "databaseURL, databaseUser,<br/>                                           databasePassword"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/ClosableByteArrayOutputStream.java",
      "loc_duplicate": 51,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 341,
          "line_end": 347,
          "content": "try {<br/>            checkFreed();<br/>        } catch (IOException ex) {<br/>            throw new RuntimeException(ex.toString());<br/>        }<br/><br/>        return new String(buf, 0, count);"
        },
        {
          "total_lines": 7,
          "line_start": 134,
          "line_end": 140,
          "content": "checkClosed();<br/><br/>        int newcount = count + 1;<br/><br/>        if (newcount > buf.length) {<br/>            buf = copyOf(buf, Math.max(buf.length << 1, newcount));<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 296,
          "line_end": 302,
          "content": "if (newSize < 0) {<br/>            throw new ArrayIndexOutOfBoundsException(newSize);<br/>        } else if (newSize > buf.length) {<br/>            buf = copyOf(buf, Math.max(buf.length << 1, newSize));<br/>        }<br/><br/>        count = newSize;"
        },
        {
          "total_lines": 5,
          "line_start": 253,
          "line_end": 257,
          "content": "checkFreed();<br/><br/>        if (buf.length > count) {<br/>            buf = copyOf(buf, count);<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 168,
          "line_end": 172,
          "content": "int newcount = count + len;<br/><br/>        if (newcount > buf.length) {<br/>            buf = copyOf(buf, Math.max(buf.length << 1, newcount));<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 136,
          "line_end": 140,
          "content": "int newcount = count + 1;<br/><br/>        if (newcount > buf.length) {<br/>            buf = copyOf(buf, Math.max(buf.length << 1, newcount));<br/>        }"
        },
        {
          "total_lines": 4,
          "line_start": 398,
          "line_end": 401,
          "content": "closed = true;<br/>        freed  = true;<br/>        buf    = null;<br/>        count  = 0;"
        },
        {
          "total_lines": 4,
          "line_start": 450,
          "line_end": 453,
          "content": "System.arraycopy(original, 0, copy, 0,<br/>                         Math.min(original.length, newLength));<br/><br/>        return copy;"
        },
        {
          "total_lines": 3,
          "line_start": 399,
          "line_end": 401,
          "content": "freed  = true;<br/>        buf    = null;<br/>        count  = 0;"
        },
        {
          "total_lines": 3,
          "line_start": 134,
          "line_end": 136,
          "content": "checkClosed();<br/><br/>        int newcount = count + 1;"
        },
        {
          "total_lines": 1,
          "line_start": 362,
          "line_end": 362,
          "content": "IOException, UnsupportedEncodingException"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestTextTables.java",
      "loc_duplicate": 109,
      "clones": [
          {
          "total_lines": 11,
          "line_start": 226,
          "line_end": 236,
          "content": "st   = conn.createStatement();<br/><br/>        rs = st.executeQuery(\"select count(*) from tmsingle\");<br/><br/>        assertTrue(rs.next());<br/>        assertEquals(20, rs.getInt(1));<br/><br/>        rs = st.executeQuery(\"select count(*) from tident\");<br/><br/>        assertTrue(rs.next());<br/>        assertEquals(20, rs.getInt(1));"
        },
        {
          "total_lines": 11,
          "line_start": 210,
          "line_end": 220,
          "content": "st   = conn.createStatement();<br/><br/>        rs = st.executeQuery(\"select count(*) from tmsingle\");<br/><br/>        assertTrue(rs.next());<br/>        assertEquals(20, rs.getInt(1));<br/><br/>        rs = st.executeQuery(\"select count(*) from tident\");<br/><br/>        assertTrue(rs.next());<br/>        assertEquals(20, rs.getInt(1));"
        },
        {
          "total_lines": 10,
          "line_start": 226,
          "line_end": 235,
          "content": "st   = conn.createStatement();<br/><br/>        rs = st.executeQuery(\"select count(*) from tmsingle\");<br/><br/>        assertTrue(rs.next());<br/>        assertEquals(20, rs.getInt(1));<br/><br/>        rs = st.executeQuery(\"select count(*) from tident\");<br/><br/>        assertTrue(rs.next());"
        },
        {
          "total_lines": 10,
          "line_start": 210,
          "line_end": 219,
          "content": "st   = conn.createStatement();<br/><br/>        rs = st.executeQuery(\"select count(*) from tmsingle\");<br/><br/>        assertTrue(rs.next());<br/>        assertEquals(20, rs.getInt(1));<br/><br/>        rs = st.executeQuery(\"select count(*) from tident\");<br/><br/>        assertTrue(rs.next());"
        },
        {
          "total_lines": 6,
          "line_start": 66,
          "line_end": 71,
          "content": "TestUtil.deleteDatabase(\"/hsql/testtext/test\");<br/>        TestUtil.delete(\"/hsql/testtext/t.txt\");<br/>        TestUtil.delete(\"/hsql/testtext/tt.txt\");<br/>        TestUtil.delete(\"/hsql/testtext/tident.txt\");<br/>        TestUtil.delete(\"/hsql/testtext/tsingle.txt\");<br/>        initDatabase();"
        },
        {
          "total_lines": 6,
          "line_start": 54,
          "line_end": 59,
          "content": "TestUtil.deleteDatabase(\"/hsql/testtext/test\");<br/>        TestUtil.delete(\"/hsql/testtext/t.txt\");<br/>        TestUtil.delete(\"/hsql/testtext/tt.txt\");<br/>        TestUtil.delete(\"/hsql/testtext/tident.txt\");<br/>        TestUtil.delete(\"/hsql/testtext/tsingle.txt\");<br/>        initDatabase();"
        },
        {
          "total_lines": 5,
          "line_start": 152,
          "line_end": 156,
          "content": "st.execute(\"SHUTDOWN SCRIPT\");<br/><br/>        conn = newConnection();<br/><br/>        st = conn.createStatement();"
        },
        {
          "total_lines": 4,
          "line_start": 223,
          "line_end": 226,
          "content": "st.execute(\"SHUTDOWN SCRIPT\");<br/><br/>        conn = newConnection();<br/>        st   = conn.createStatement();"
        },
        {
          "total_lines": 4,
          "line_start": 34,
          "line_end": 37,
          "content": "import java.sql.Connection;<br/>import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.Statement;"
        },
        {
          "total_lines": 3,
          "line_start": 215,
          "line_end": 217,
          "content": "assertEquals(20, rs.getInt(1));<br/><br/>        rs = st.executeQuery(\"select count(*) from tident\");"
        },
        {
          "total_lines": 3,
          "line_start": 184,
          "line_end": 186,
          "content": "rs = st.executeQuery(\"select count(*) from tident\");<br/><br/>        assertTrue(rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 259,
          "line_end": 261,
          "content": "Statement st = conn.createStatement();<br/><br/>        st.execute(\"SHUTDOWN\");"
        },
        {
          "total_lines": 3,
          "line_start": 154,
          "line_end": 156,
          "content": "conn = newConnection();<br/><br/>        st = conn.createStatement();"
        },
        {
          "total_lines": 3,
          "line_start": 231,
          "line_end": 233,
          "content": "assertEquals(20, rs.getInt(1));<br/><br/>        rs = st.executeQuery(\"select count(*) from tident\");"
        },
        {
          "total_lines": 3,
          "line_start": 281,
          "line_end": 283,
          "content": "Statement st = conn.createStatement();<br/><br/>        st.execute(\"SHUTDOWN\");"
        },
        {
          "total_lines": 3,
          "line_start": 179,
          "line_end": 181,
          "content": "rs = st.executeQuery(\"select count(*) from tmsingle\");<br/><br/>        assertTrue(rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 35,
          "line_end": 37,
          "content": "import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.Statement;"
        },
        {
          "total_lines": 2,
          "line_start": 186,
          "line_end": 187,
          "content": "assertTrue(rs.next());<br/>        assertEquals(0, rs.getInt(1));"
        },
        {
          "total_lines": 2,
          "line_start": 238,
          "line_end": 239,
          "content": "conn = newConnection();<br/>        st   = conn.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 122,
          "line_end": 123,
          "content": "conn = newConnection();<br/>        st   = conn.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 181,
          "line_end": 182,
          "content": "assertTrue(rs.next());<br/>        assertEquals(0, rs.getInt(1));"
        },
        {
          "total_lines": 2,
          "line_start": 166,
          "line_end": 167,
          "content": "assertTrue(rs.next());<br/>        assertEquals(0, rs.getInt(1));"
        },
        {
          "total_lines": 2,
          "line_start": 225,
          "line_end": 226,
          "content": "conn = newConnection();<br/>        st   = conn.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 55,
          "line_end": 56,
          "content": "TestUtil.delete(\"/hsql/testtext/t.txt\");<br/>        TestUtil.delete(\"/hsql/testtext/tt.txt\");"
        },
        {
          "total_lines": 2,
          "line_start": 67,
          "line_end": 68,
          "content": "TestUtil.delete(\"/hsql/testtext/t.txt\");<br/>        TestUtil.delete(\"/hsql/testtext/tt.txt\");"
        },
        {
          "total_lines": 2,
          "line_start": 138,
          "line_end": 139,
          "content": "conn = newConnection();<br/>        st   = conn.createStatement();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/navigator/RowSetNavigatorData.java",
      "loc_duplicate": 181,
      "clones": [
          {
          "total_lines": 14,
          "line_start": 298,
          "line_end": 311,
          "content": "reset();<br/>        out.writeLong(id);<br/>        out.writeInt(size);<br/>        out.writeInt(0);    // offset<br/>        out.writeInt(size);<br/><br/>        while (hasNext()) {<br/>            Object[] data = getNext();<br/><br/>            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,<br/>                          data, null, null);<br/>        }<br/><br/>        reset();"
        },
        {
          "total_lines": 13,
          "line_start": 299,
          "line_end": 311,
          "content": "out.writeLong(id);<br/>        out.writeInt(size);<br/>        out.writeInt(0);    // offset<br/>        out.writeInt(size);<br/><br/>        while (hasNext()) {<br/>            Object[] data = getNext();<br/><br/>            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,<br/>                          data, null, null);<br/>        }<br/><br/>        reset();"
        },
        {
          "total_lines": 12,
          "line_start": 300,
          "line_end": 311,
          "content": "out.writeInt(size);<br/>        out.writeInt(0);    // offset<br/>        out.writeInt(size);<br/><br/>        while (hasNext()) {<br/>            Object[] data = getNext();<br/><br/>            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,<br/>                          data, null, null);<br/>        }<br/><br/>        reset();"
        },
        {
          "total_lines": 12,
          "line_start": 298,
          "line_end": 309,
          "content": "reset();<br/>        out.writeLong(id);<br/>        out.writeInt(size);<br/>        out.writeInt(0);    // offset<br/>        out.writeInt(size);<br/><br/>        while (hasNext()) {<br/>            Object[] data = getNext();<br/><br/>            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,<br/>                          data, null, null);<br/>        }"
        },
        {
          "total_lines": 11,
          "line_start": 301,
          "line_end": 311,
          "content": "out.writeInt(0);    // offset<br/>        out.writeInt(size);<br/><br/>        while (hasNext()) {<br/>            Object[] data = getNext();<br/><br/>            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,<br/>                          data, null, null);<br/>        }<br/><br/>        reset();"
        },
        {
          "total_lines": 9,
          "line_start": 249,
          "line_end": 257,
          "content": "if (currentPos < 0 || currentPos >= size) {<br/>            return null;<br/>        }<br/><br/>        if (currentPos == currentOffset + table.length) {<br/>            getBlock(currentOffset + table.length);<br/>        }<br/><br/>        return table[currentPos - currentOffset];"
        },
        {
          "total_lines": 7,
          "line_start": 644,
          "line_end": 650,
          "content": "int        newSize  = size == 0 ? 4<br/>                                            : size * 2;<br/>            Object[][] newTable = new Object[newSize][];<br/><br/>            System.arraycopy(table, 0, newTable, 0, size);<br/><br/>            table = newTable;"
        },
        {
          "total_lines": 7,
          "line_start": 249,
          "line_end": 255,
          "content": "if (currentPos < 0 || currentPos >= size) {<br/>            return null;<br/>        }<br/><br/>        if (currentPos == currentOffset + table.length) {<br/>            getBlock(currentOffset + table.length);<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 579,
          "line_end": 585,
          "content": "for (int i = 0; i < visibleColumnCount; i++) {<br/>            if (data[i] == null) {<br/>                return true;<br/>            }<br/>        }<br/><br/>        return false;"
        },
        {
          "total_lines": 7,
          "line_start": 594,
          "line_end": 600,
          "content": "if (simpleAggregateData == null) {<br/>                simpleAggregateData = data;<br/><br/>                return null;<br/>            }<br/><br/>            return simpleAggregateData;"
        },
        {
          "total_lines": 6,
          "line_start": 428,
          "line_end": 433,
          "content": "Object[] currentData = getNext();<br/>            boolean  hasRow      = other.containsRow(currentData);<br/><br/>            if (hasRow) {<br/>                removeCurrent();<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 372,
          "line_end": 377,
          "content": "Object[] currentData = getNext();<br/>            boolean  hasRow      = other.containsRow(currentData);<br/><br/>            if (!hasRow) {<br/>                removeCurrent();<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 551,
          "line_end": 556,
          "content": "reset();<br/><br/>            for (int i = 0; i < limitstart; i++) {<br/>                next();<br/>                removeCurrent();<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 644,
          "line_end": 648,
          "content": "int        newSize  = size == 0 ? 4<br/>                                            : size * 2;<br/>            Object[][] newTable = new Object[newSize][];<br/><br/>            System.arraycopy(table, 0, newTable, 0, size);"
        },
        {
          "total_lines": 5,
          "line_start": 298,
          "line_end": 302,
          "content": "reset();<br/>        out.writeLong(id);<br/>        out.writeInt(size);<br/>        out.writeInt(0);    // offset<br/>        out.writeInt(size);"
        },
        {
          "total_lines": 5,
          "line_start": 203,
          "line_end": 207,
          "content": "Object[] newData = new Object[visibleColumnCount];<br/><br/>            ArrayUtil.projectRow(data, columnMap, newData);<br/><br/>            data = newData;"
        },
        {
          "total_lines": 5,
          "line_start": 253,
          "line_end": 257,
          "content": "if (currentPos == currentOffset + table.length) {<br/>            getBlock(currentOffset + table.length);<br/>        }<br/><br/>        return table[currentPos - currentOffset];"
        },
        {
          "total_lines": 4,
          "line_start": 237,
          "line_end": 240,
          "content": "this.table = emptyTable;<br/>        this.size  = 0;<br/><br/>        reset();"
        },
        {
          "total_lines": 4,
          "line_start": 229,
          "line_end": 232,
          "content": "this.table = emptyTable;<br/>        this.size  = 0;<br/><br/>        reset();"
        },
        {
          "total_lines": 4,
          "line_start": 298,
          "line_end": 301,
          "content": "reset();<br/>        out.writeLong(id);<br/>        out.writeInt(size);<br/>        out.writeInt(0);    // offset"
        },
        {
          "total_lines": 3,
          "line_start": 205,
          "line_end": 207,
          "content": "ArrayUtil.projectRow(data, columnMap, newData);<br/><br/>            data = newData;"
        },
        {
          "total_lines": 3,
          "line_start": 648,
          "line_end": 650,
          "content": "System.arraycopy(table, 0, newTable, 0, size);<br/><br/>            table = newTable;"
        },
        {
          "total_lines": 3,
          "line_start": 203,
          "line_end": 205,
          "content": "Object[] newData = new Object[visibleColumnCount];<br/><br/>            ArrayUtil.projectRow(data, columnMap, newData);"
        },
        {
          "total_lines": 3,
          "line_start": 321,
          "line_end": 323,
          "content": "Object[] currentData = other.getNext();<br/><br/>            addAdjusted(currentData, rightColumnIndexes);"
        },
        {
          "total_lines": 2,
          "line_start": 109,
          "line_end": 110,
          "content": "Session session,<br/>                               QueryExpression queryExpression"
        },
        {
          "total_lines": 2,
          "line_start": 459,
          "line_end": 460,
          "content": "compareData = currentData;<br/>                it          = other.findFirstRow(currentData);"
        },
        {
          "total_lines": 2,
          "line_start": 295,
          "line_end": 296,
          "content": "RowOutputInterface out,<br/>                      ResultMetaData meta"
        },
        {
          "total_lines": 2,
          "line_start": 403,
          "line_end": 404,
          "content": "compareData = currentData;<br/>                it          = other.findFirstRow(currentData);"
        },
        {
          "total_lines": 2,
          "line_start": 292,
          "line_end": 293,
          "content": "RowInputInterface in,<br/>                     ResultMetaData meta"
        },
        {
          "total_lines": 1,
          "line_start": 327,
          "line_end": 327,
          "content": "Session session, RowSetNavigatorData other"
        },
        {
          "total_lines": 1,
          "line_start": 439,
          "line_end": 439,
          "content": "Session session, RowSetNavigatorData other"
        },
        {
          "total_lines": 1,
          "line_start": 147,
          "line_end": 147,
          "content": "Session session, SortAndSlice sortAndSlice"
        },
        {
          "total_lines": 1,
          "line_start": 422,
          "line_end": 422,
          "content": "Session session, RowSetNavigatorData other"
        },
        {
          "total_lines": 1,
          "line_start": 366,
          "line_end": 366,
          "content": "Session session, RowSetNavigatorData other"
        },
        {
          "total_lines": 1,
          "line_start": 383,
          "line_end": 383,
          "content": "Session session, RowSetNavigatorData other"
        },
        {
          "total_lines": 1,
          "line_start": 177,
          "line_end": 177,
          "content": "ErrorCode.U_S0500, \"RowSetNavigatorClient\""
        },
        {
          "total_lines": 1,
          "line_start": 91,
          "line_end": 91,
          "content": "Session session, QuerySpecification select"
        },
        {
          "total_lines": 1,
          "line_start": 353,
          "line_end": 353,
          "content": "Session session, RowSetNavigatorData other"
        },
        {
          "total_lines": 1,
          "line_start": 261,
          "line_end": 261,
          "content": "ErrorCode.U_S0500, \"RowSetNavigatorClient\""
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/TypeInvariants.java",
      "loc_duplicate": 6,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 91,
          "line_end": 92,
          "content": "Types.SQL_TIMESTAMP,<br/>                                      Types.SQL_TIMESTAMP"
        },
        {
          "total_lines": 2,
          "line_start": 78,
          "line_end": 79,
          "content": "name,<br/>                SchemaObject.DOMAIN"
        },
        {
          "total_lines": 2,
          "line_start": 85,
          "line_end": 86,
          "content": "name,<br/>                SchemaObject.DOMAIN"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/DataFileCache.java",
      "loc_duplicate": 95,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 1027,
          "line_end": 1035,
          "content": "object = cache.get(pos);<br/><br/>            if (object != null) {<br/>                if (keep) {<br/>                    object.keepInMemory(true);<br/>                }<br/><br/>                return object;<br/>            }"
        },
        {
          "total_lines": 9,
          "line_start": 1000,
          "line_end": 1008,
          "content": "object = cache.get(pos);<br/><br/>            if (object != null) {<br/>                if (keep) {<br/>                    object.keepInMemory(true);<br/>                }<br/><br/>                return object;<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 1419,
          "line_end": 1424,
          "content": "deleteFile(database, backupFileName);<br/><br/>                    if (fa.isStreamElement(backupFileName)) {<br/>                        throw Error.error(ErrorCode.DATA_FILE_ERROR,<br/>                                          \"cannot delete old backup file\");<br/>                    }"
        },
        {
          "total_lines": 6,
          "line_start": 1404,
          "line_end": 1409,
          "content": "deleteFile(database, backupFileName);<br/><br/>                    if (fa.isStreamElement(backupFileName)) {<br/>                        throw Error.error(ErrorCode.DATA_FILE_ERROR,<br/>                                          \"cannot delete old backup file\");<br/>                    }"
        },
        {
          "total_lines": 5,
          "line_start": 959,
          "line_end": 963,
          "content": "if (keep) {<br/>                    object.keepInMemory(true);<br/>                }<br/><br/>                return object;"
        },
        {
          "total_lines": 5,
          "line_start": 975,
          "line_end": 979,
          "content": "if (keep) {<br/>                    object.keepInMemory(true);<br/>                }<br/><br/>                return object;"
        },
        {
          "total_lines": 5,
          "line_start": 1125,
          "line_end": 1129,
          "content": "if (keep) {<br/>                    object.keepInMemory(true);<br/>                }<br/><br/>                return object;"
        },
        {
          "total_lines": 5,
          "line_start": 1054,
          "line_end": 1058,
          "content": "if (keep) {<br/>                    object.keepInMemory(true);<br/>                }<br/><br/>                return object;"
        },
        {
          "total_lines": 4,
          "line_start": 499,
          "line_end": 502,
          "content": "t, ErrorCode.FILE_IO_ERROR,<br/>                              ErrorCode.M_DataFileCache_open, new Object[] {<br/>                t.toString(), dataFileName<br/>            }"
        },
        {
          "total_lines": 4,
          "line_start": 802,
          "line_end": 805,
          "content": "t, ErrorCode.FILE_IO_ERROR,<br/>                              ErrorCode.M_DataFileCache_close, new Object[] {<br/>                t.toString(), dataFileName<br/>            }"
        },
        {
          "total_lines": 4,
          "line_start": 710,
          "line_end": 713,
          "content": "t, ErrorCode.FILE_IO_ERROR,<br/>                              ErrorCode.M_DataFileCache_close, new Object[] {<br/>                t.toString(), dataFileName<br/>            }"
        },
        {
          "total_lines": 4,
          "line_start": 394,
          "line_end": 397,
          "content": "t, ErrorCode.FILE_IO_ERROR,<br/>                              ErrorCode.M_DataFileCache_open, new Object[] {<br/>                t.toString(), dataFileName<br/>            }"
        },
        {
          "total_lines": 3,
          "line_start": 1163,
          "line_end": 1165,
          "content": "logSevereEvent(dataFileName + \" getFromFile failed \" + pos, e);<br/><br/>            throw e;"
        },
        {
          "total_lines": 3,
          "line_start": 1106,
          "line_end": 1108,
          "content": "logSevereEvent(dataFileName + \" getFromFile failed \" + pos, e);<br/><br/>            throw e;"
        },
        {
          "total_lines": 2,
          "line_start": 988,
          "line_end": 989,
          "content": "int size, PersistentStore store,<br/>                            boolean keep"
        },
        {
          "total_lines": 2,
          "line_start": 589,
          "line_end": 590,
          "content": "String dataFileName,<br/>                                 String backupFileName"
        },
        {
          "total_lines": 2,
          "line_start": 628,
          "line_end": 629,
          "content": "Database database,<br/>            String dataFileName"
        },
        {
          "total_lines": 2,
          "line_start": 578,
          "line_end": 579,
          "content": "String dataFileName,<br/>                                     String backupFileName"
        },
        {
          "total_lines": 2,
          "line_start": 950,
          "line_end": 951,
          "content": "CachedObject object, PersistentStore store,<br/>                            boolean keep"
        },
        {
          "total_lines": 2,
          "line_start": 861,
          "line_end": 862,
          "content": "HsqlDatabaseProperties.hsqldb_script_format,<br/>                database.logger.propScriptFormat"
        },
        {
          "total_lines": 2,
          "line_start": 1328,
          "line_end": 1329,
          "content": "0,<br/>                           rowOut.getOutputStream().size()"
        },
        {
          "total_lines": 2,
          "line_start": 177,
          "line_end": 178,
          "content": "Database database, String baseFileName,<br/>                              boolean defrag"
        },
        {
          "total_lines": 2,
          "line_start": 1313,
          "line_end": 1314,
          "content": "0,<br/>                           rowOut.getOutputStream().size()"
        },
        {
          "total_lines": 2,
          "line_start": 1114,
          "line_end": 1115,
          "content": "int size,<br/>                                     PersistentStore store, boolean keep"
        },
        {
          "total_lines": 1,
          "line_start": 578,
          "line_end": 578,
          "content": "Database database, String dataFileName"
        },
        {
          "total_lines": 1,
          "line_start": 589,
          "line_end": 589,
          "content": "Database database, String dataFileName"
        },
        {
          "total_lines": 1,
          "line_start": 177,
          "line_end": 177,
          "content": "Database database, String baseFileName"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/CachedObjectBase.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/TriggerDef.java",
      "loc_duplicate": 10,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 683,
          "line_end": 684,
          "content": "String name, String table, Object[] row1,<br/>                         Object[] row2"
        },
        {
          "total_lines": 2,
          "line_start": 326,
          "line_end": 327,
          "content": "sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_TABLE);<br/>                sb.append(' ').append(Tokens.T_AS).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 319,
          "line_end": 320,
          "content": "sb.append(Tokens.T_OLD).append(' ').append(Tokens.T_TABLE);<br/>                sb.append(' ').append(Tokens.T_AS).append(' ');"
        },
        {
          "total_lines": 1,
          "line_start": 683,
          "line_end": 683,
          "content": "int i, String name, String table, Object[] row1"
        },
        {
          "total_lines": 1,
          "line_start": 236,
          "line_end": 236,
          "content": "Session session, SchemaObject parentObject"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestViewAsterisks.java",
      "loc_duplicate": 28,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 540,
          "line_end": 548,
          "content": "new Object[] {<br/>                new Integer(1), \"first A\"<br/>            }, new Object[] {<br/>                new Integer(1), \"first B\"<br/>            }, new Object[] {<br/>                new Integer(2), \"second A\"<br/>            }, new Object[] {<br/>                new Integer(2), \"second B\"<br/>            }"
        },
        {
          "total_lines": 9,
          "line_start": 555,
          "line_end": 563,
          "content": "new Object[] {<br/>                new Integer(1), \"first A\"<br/>            }, new Object[] {<br/>                new Integer(1), \"first B\"<br/>            }, new Object[] {<br/>                new Integer(2), \"second A\"<br/>            }, new Object[] {<br/>                new Integer(2), \"second B\"<br/>            }"
        },
        {
          "total_lines": 2,
          "line_start": 103,
          "line_end": 104,
          "content": "executeStatement(\"SHUTDOWN\");<br/>        super.tearDown();"
        },
        {
          "total_lines": 1,
          "line_start": 445,
          "line_end": 445,
          "content": "new Integer(2), \"second B\""
        },
        {
          "total_lines": 1,
          "line_start": 447,
          "line_end": 447,
          "content": "new Integer(2), \"second A\""
        },
        {
          "total_lines": 1,
          "line_start": 427,
          "line_end": 427,
          "content": "new Integer(1), \"first B\""
        },
        {
          "total_lines": 1,
          "line_start": 449,
          "line_end": 449,
          "content": "new Integer(2), \"second B\""
        },
        {
          "total_lines": 1,
          "line_start": 431,
          "line_end": 431,
          "content": "new Integer(2), \"second A\""
        },
        {
          "total_lines": 1,
          "line_start": 443,
          "line_end": 443,
          "content": "new Integer(1), \"first B\""
        },
        {
          "total_lines": 1,
          "line_start": 433,
          "line_end": 433,
          "content": "new Integer(2), \"second B\""
        },
        {
          "total_lines": 1,
          "line_start": 429,
          "line_end": 429,
          "content": "new Integer(2), \"second B\""
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/ValidatingResourceBundle.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 277,
          "line_end": 277,
          "content": "Enum<?> key, String s1"
        },
        {
          "total_lines": 1,
          "line_start": 268,
          "line_end": 268,
          "content": "Enum<?> key, String s1"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementSimple.java",
      "loc_duplicate": 49,
      "clones": [
          {
          "total_lines": 13,
          "line_start": 123,
          "line_end": 135,
          "content": "Result result;<br/><br/>        try {<br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 11,
          "line_start": 108,
          "line_end": 118,
          "content": "StringBuffer sb = new StringBuffer();<br/><br/>        sb.append('\\n');<br/><br/>        for (int i = 0; i < blanks; i++) {<br/>            sb.append(' ');<br/>        }<br/><br/>        sb.append(Tokens.T_STATEMENT);<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 11,
          "line_start": 125,
          "line_end": 135,
          "content": "try {<br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 3,
          "line_start": 84,
          "line_end": 86,
          "content": "sb.append(Tokens.T_SQLSTATE);<br/>                sb.append(' ').append('\\'').append(sqlState).append('\\'');<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 90,
          "line_end": 92,
          "content": "sb.append(Tokens.T_SQLSTATE);<br/>                sb.append(' ').append('\\'').append(sqlState).append('\\'');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 203,
          "line_end": 204,
          "content": "resolved = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 175,
          "line_end": 176,
          "content": "resolved = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 84,
          "line_end": 85,
          "content": "sb.append(Tokens.T_SQLSTATE);<br/>                sb.append(' ').append('\\'').append(sqlState).append('\\'');"
        },
        {
          "total_lines": 2,
          "line_start": 90,
          "line_end": 91,
          "content": "sb.append(Tokens.T_SQLSTATE);<br/>                sb.append(' ').append('\\'').append(sqlState).append('\\'');"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestSubselect.java",
      "loc_duplicate": 15,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 210,
          "line_end": 211,
          "content": "\"Statement <\" + sql + \"> returned wrong value.\",<br/>                         expectedTrees[rowCount]"
        },
        {
          "total_lines": 2,
          "line_start": 438,
          "line_end": 439,
          "content": "\"Statement <\" + sql + \"> returned wrong value.\",<br/>                         expectedTrees[rowCount]"
        },
        {
          "total_lines": 2,
          "line_start": 436,
          "line_end": 437,
          "content": "\"Statement <\" + sql + \"> returned wrong value.\",<br/>                         expectedSizes[rowCount]"
        },
        {
          "total_lines": 2,
          "line_start": 212,
          "line_end": 213,
          "content": "\"Statement <\" + sql + \"> returned wrong value.\",<br/>                         expectedSizes[rowCount]"
        },
        {
          "total_lines": 2,
          "line_start": 81,
          "line_end": 82,
          "content": "databaseURL, databaseUser,<br/>                                           databasePassword"
        },
        {
          "total_lines": 1,
          "line_start": 336,
          "line_end": 336,
          "content": "\"large red delicious tree\", \"small red delicious tree\""
        },
        {
          "total_lines": 1,
          "line_start": 278,
          "line_end": 278,
          "content": "\"golden delicious\", \"granny smith\", \"macintosh\", \"red delicious\""
        },
        {
          "total_lines": 1,
          "line_start": 422,
          "line_end": 422,
          "content": "\"large red delicious tree\", \"small red delicious tree\""
        },
        {
          "total_lines": 1,
          "line_start": 322,
          "line_end": 322,
          "content": "\"large red delicious tree\", \"small red delicious tree\""
        },
        {
          "total_lines": 1,
          "line_start": 264,
          "line_end": 264,
          "content": "\"golden delicious\", \"granny smith\", \"macintosh\", \"red delicious\""
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/TriggerDefSQL.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 69,
          "line_end": 69,
          "content": "Session session, SchemaObject parentObject"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataTable.java",
      "loc_duplicate": 145,
      "clones": [
          {
          "total_lines": 14,
          "line_start": 314,
          "line_end": 327,
          "content": "reset();<br/>        out.writeLong(id);<br/>        out.writeInt(size);<br/>        out.writeInt(0);    // offset<br/>        out.writeInt(size);<br/><br/>        while (hasNext()) {<br/>            Object[] data = getNext();<br/><br/>            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,<br/>                          data, null, null);<br/>        }<br/><br/>        reset();"
        },
        {
          "total_lines": 13,
          "line_start": 315,
          "line_end": 327,
          "content": "out.writeLong(id);<br/>        out.writeInt(size);<br/>        out.writeInt(0);    // offset<br/>        out.writeInt(size);<br/><br/>        while (hasNext()) {<br/>            Object[] data = getNext();<br/><br/>            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,<br/>                          data, null, null);<br/>        }<br/><br/>        reset();"
        },
        {
          "total_lines": 12,
          "line_start": 316,
          "line_end": 327,
          "content": "out.writeInt(size);<br/>        out.writeInt(0);    // offset<br/>        out.writeInt(size);<br/><br/>        while (hasNext()) {<br/>            Object[] data = getNext();<br/><br/>            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,<br/>                          data, null, null);<br/>        }<br/><br/>        reset();"
        },
        {
          "total_lines": 12,
          "line_start": 314,
          "line_end": 325,
          "content": "reset();<br/>        out.writeLong(id);<br/>        out.writeInt(size);<br/>        out.writeInt(0);    // offset<br/>        out.writeInt(size);<br/><br/>        while (hasNext()) {<br/>            Object[] data = getNext();<br/><br/>            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,<br/>                          data, null, null);<br/>        }"
        },
        {
          "total_lines": 11,
          "line_start": 317,
          "line_end": 327,
          "content": "out.writeInt(0);    // offset<br/>        out.writeInt(size);<br/><br/>        while (hasNext()) {<br/>            Object[] data = getNext();<br/><br/>            out.writeData(meta.getExtendedColumnCount(), meta.columnTypes,<br/>                          data, null, null);<br/>        }<br/><br/>        reset();"
        },
        {
          "total_lines": 7,
          "line_start": 577,
          "line_end": 583,
          "content": "for (int i = 0; i < visibleColumnCount; i++) {<br/>            if (data[i] == null) {<br/>                return true;<br/>            }<br/>        }<br/><br/>        return false;"
        },
        {
          "total_lines": 7,
          "line_start": 592,
          "line_end": 598,
          "content": "if (simpleAggregateData == null) {<br/>                simpleAggregateData = data;<br/><br/>                return null;<br/>            }<br/><br/>            return simpleAggregateData;"
        },
        {
          "total_lines": 6,
          "line_start": 441,
          "line_end": 446,
          "content": "Object[] currentData = getNext();<br/>            boolean  hasRow      = other.containsRow(currentData);<br/><br/>            if (hasRow) {<br/>                removeCurrent();<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 382,
          "line_end": 387,
          "content": "Object[] currentData = getNext();<br/>            boolean  hasRow      = other.containsRow(currentData);<br/><br/>            if (!hasRow) {<br/>                removeCurrent();<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 551,
          "line_end": 556,
          "content": "reset();<br/><br/>            for (int i = 0; i < limitstart; i++) {<br/>                next();<br/>                removeCurrent();<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 314,
          "line_end": 318,
          "content": "reset();<br/>        out.writeLong(id);<br/>        out.writeInt(size);<br/>        out.writeInt(0);    // offset<br/>        out.writeInt(size);"
        },
        {
          "total_lines": 5,
          "line_start": 208,
          "line_end": 212,
          "content": "Object[] newData = new Object[visibleColumnCount];<br/><br/>                ArrayUtil.projectRow(data, columnMap, newData);<br/><br/>                data = newData;"
        },
        {
          "total_lines": 4,
          "line_start": 314,
          "line_end": 317,
          "content": "reset();<br/>        out.writeLong(id);<br/>        out.writeInt(size);<br/>        out.writeInt(0);    // offset"
        },
        {
          "total_lines": 3,
          "line_start": 210,
          "line_end": 212,
          "content": "ArrayUtil.projectRow(data, columnMap, newData);<br/><br/>                data = newData;"
        },
        {
          "total_lines": 3,
          "line_start": 343,
          "line_end": 345,
          "content": "Object[] currentData = other.getNext();<br/><br/>            addAdjusted(currentData, rightColumnIndexes);"
        },
        {
          "total_lines": 3,
          "line_start": 208,
          "line_end": 210,
          "content": "Object[] newData = new Object[visibleColumnCount];<br/><br/>                ArrayUtil.projectRow(data, columnMap, newData);"
        },
        {
          "total_lines": 2,
          "line_start": 410,
          "line_end": 411,
          "content": "session, currentData, compareData,<br/>                    fullIndex.getColumnCount()"
        },
        {
          "total_lines": 2,
          "line_start": 82,
          "line_end": 83,
          "content": "Session session,<br/>                                    QuerySpecification select"
        },
        {
          "total_lines": 2,
          "line_start": 311,
          "line_end": 312,
          "content": "RowOutputInterface out,<br/>                      ResultMetaData meta"
        },
        {
          "total_lines": 2,
          "line_start": 43,
          "line_end": 44,
          "content": "import org.hsqldb.index.Index;<br/>import org.hsqldb.lib.ArrayUtil;"
        },
        {
          "total_lines": 2,
          "line_start": 414,
          "line_end": 415,
          "content": "compareData = currentData;<br/>                it          = other.findFirstRow(currentData);"
        },
        {
          "total_lines": 2,
          "line_start": 483,
          "line_end": 484,
          "content": "session, currentData, otherData,<br/>                        fullIndex.getColumnCount()"
        },
        {
          "total_lines": 2,
          "line_start": 469,
          "line_end": 470,
          "content": "session, currentData, compareData,<br/>                    fullIndex.getColumnCount()"
        },
        {
          "total_lines": 2,
          "line_start": 308,
          "line_end": 309,
          "content": "RowInputInterface in,<br/>                     ResultMetaData meta"
        },
        {
          "total_lines": 2,
          "line_start": 424,
          "line_end": 425,
          "content": "session, currentData, otherData,<br/>                        fullIndex.getColumnCount()"
        },
        {
          "total_lines": 2,
          "line_start": 473,
          "line_end": 474,
          "content": "compareData = currentData;<br/>                it          = other.findFirstRow(currentData);"
        },
        {
          "total_lines": 2,
          "line_start": 118,
          "line_end": 119,
          "content": "Session session,<br/>                                    QueryExpression queryExpression"
        },
        {
          "total_lines": 1,
          "line_start": 181,
          "line_end": 181,
          "content": "Session session, SortAndSlice sortAndSlice"
        },
        {
          "total_lines": 1,
          "line_start": 435,
          "line_end": 435,
          "content": "Session session, RowSetNavigatorData other"
        },
        {
          "total_lines": 1,
          "line_start": 376,
          "line_end": 376,
          "content": "Session session, RowSetNavigatorData other"
        },
        {
          "total_lines": 1,
          "line_start": 393,
          "line_end": 393,
          "content": "Session session, RowSetNavigatorData other"
        },
        {
          "total_lines": 1,
          "line_start": 351,
          "line_end": 351,
          "content": "Session session, RowSetNavigatorData other"
        },
        {
          "total_lines": 1,
          "line_start": 452,
          "line_end": 452,
          "content": "Session session, RowSetNavigatorData other"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/RowAVLDiskLarge.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 56,
          "line_end": 56,
          "content": "TableBase t, Object[] o, PersistentStore store"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/TransferResultSet.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 97,
          "line_end": 100,
          "content": "iRowIdx      = 0;<br/>        iMaxRowIdx   = 0;<br/>        iColumnCount = 0;<br/>        vRows        = new Vector();"
        },
        {
          "total_lines": 4,
          "line_start": 88,
          "line_end": 91,
          "content": "iRowIdx      = 0;<br/>            iMaxRowIdx   = 0;<br/>            iColumnCount = 0;<br/>            vRows        = new Vector();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/TimeData.java",
      "loc_duplicate": 31,
      "clones": [
          {
          "total_lines": 12,
          "line_start": 95,
          "line_end": 106,
          "content": "long diff = seconds - b.seconds;<br/><br/>        if (diff == 0) {<br/>            diff = nanos - b.nanos;<br/><br/>            if (diff == 0) {<br/>                return 0;<br/>            }<br/>        }<br/><br/>        return diff > 0 ? 1<br/>                        : -1;"
        },
        {
          "total_lines": 10,
          "line_start": 97,
          "line_end": 106,
          "content": "if (diff == 0) {<br/>            diff = nanos - b.nanos;<br/><br/>            if (diff == 0) {<br/>                return 0;<br/>            }<br/>        }<br/><br/>        return diff > 0 ? 1<br/>                        : -1;"
        },
        {
          "total_lines": 9,
          "line_start": 95,
          "line_end": 103,
          "content": "long diff = seconds - b.seconds;<br/><br/>        if (diff == 0) {<br/>            diff = nanos - b.nanos;<br/><br/>            if (diff == 0) {<br/>                return 0;<br/>            }<br/>        }"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/BlobType.java",
      "loc_duplicate": 17,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 311,
          "line_end": 315,
          "content": "if (a == null) {<br/>            return Tokens.T_NULL;<br/>        }<br/><br/>        return convertToString(a);"
        },
        {
          "total_lines": 2,
          "line_start": 89,
          "line_end": 90,
          "content": "factor     = precision / (1024 * 1024 * 1024);<br/>            multiplier = Tokens.T_G_FACTOR;"
        },
        {
          "total_lines": 2,
          "line_start": 206,
          "line_end": 207,
          "content": "SessionInterface session, Object a,<br/>                                Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 161,
          "line_end": 162,
          "content": "SessionInterface session, Object a,<br/>                             Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 95,
          "line_end": 96,
          "content": "factor     = precision / (1024);<br/>            multiplier = Tokens.T_K_FACTOR;"
        },
        {
          "total_lines": 2,
          "line_start": 37,
          "line_end": 38,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 92,
          "line_end": 93,
          "content": "factor     = precision / (1024 * 1024);<br/>            multiplier = Tokens.T_M_FACTOR;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rowio/RowOutputInterface.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 71,
          "line_end": 71,
          "content": "int l, Type[] types, Object[] data"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/TextTable.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 321,
          "line_end": 322,
          "content": "Session session, PersistentStore store,<br/>                           Object[] data"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rowio/RowOutputTextQuoted.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 46,
          "line_end": 48,
          "content": "String fieldSep, String varSep,<br/>                               String longvarSep, boolean allQuoted,<br/>                               String encoding"
        },
        {
          "total_lines": 1,
          "line_start": 47,
          "line_end": 47,
          "content": "String longvarSep, boolean allQuoted"
        },
        {
          "total_lines": 1,
          "line_start": 49,
          "line_end": 49,
          "content": "longvarSep, allQuoted"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/RangeVariableJoined.java",
      "loc_duplicate": 27,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 349,
          "line_end": 353,
          "content": "temp = \"LEFT OUTER\";<br/><br/>            if (isRightJoin) {<br/>                temp = \"FULL\";<br/>            }"
        },
        {
          "total_lines": 4,
          "line_start": 54,
          "line_end": 57,
          "content": "Table table, SimpleName alias,<br/>                               OrderedHashSet columnList,<br/>                               SimpleName[] columnNameList,<br/>                               CompileContext compileContext"
        },
        {
          "total_lines": 3,
          "line_start": 54,
          "line_end": 56,
          "content": "Table table, SimpleName alias,<br/>                               OrderedHashSet columnList,<br/>                               SimpleName[] columnNameList"
        },
        {
          "total_lines": 2,
          "line_start": 325,
          "line_end": 326,
          "content": "Session session, RangeGroup rangeGroup,<br/>                                  RangeGroup[] rangeGroups"
        },
        {
          "total_lines": 2,
          "line_start": 317,
          "line_end": 318,
          "content": "RangeVariable range,<br/>                                       Expression[] list"
        },
        {
          "total_lines": 2,
          "line_start": 165,
          "line_end": 166,
          "content": "String tableName,<br/>                          String columnName"
        },
        {
          "total_lines": 2,
          "line_start": 259,
          "line_end": 260,
          "content": "HsqlArrayList exprList, int position,<br/>                               HashSet exclude"
        },
        {
          "total_lines": 2,
          "line_start": 264,
          "line_end": 265,
          "content": "RangeVariable subRange, Expression expression,<br/>                                HashSet exclude"
        },
        {
          "total_lines": 2,
          "line_start": 320,
          "line_end": 321,
          "content": "RangeVariable[] ranges,<br/>                                      RangeVariable[] newRanges"
        },
        {
          "total_lines": 2,
          "line_start": 40,
          "line_end": 41,
          "content": "import org.hsqldb.lib.OrderedHashSet;<br/>import org.hsqldb.map.ValuePool;"
        },
        {
          "total_lines": 1,
          "line_start": 59,
          "line_end": 59,
          "content": "alias, columnList, columnNameList, compileContext"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/BlaineTrig.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 36,
          "line_end": 37,
          "content": "String name, String table, Object[] row1,<br/>                     Object[] row2"
        },
        {
          "total_lines": 1,
          "line_start": 36,
          "line_end": 36,
          "content": "int i, String name, String table, Object[] row1"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/IntValueHashMap.java",
      "loc_duplicate": 40,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 127,
          "line_end": 135,
          "content": "if (key == null) {<br/>            throw new NoSuchElementException();<br/>        }<br/><br/>        int oldSize = size();<br/><br/>        super.addOrRemove(0, value, key, null, false);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 7,
          "line_start": 261,
          "line_end": 267,
          "content": "Iterator it = t.keySet().iterator();<br/><br/>        while (it.hasNext()) {<br/>            Object key = it.next();<br/><br/>            put(key, t.get(key));<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 157,
          "line_end": 161,
          "content": "if (keySet == null) {<br/>            keySet = new KeySet();<br/>        }<br/><br/>        return keySet;"
        },
        {
          "total_lines": 5,
          "line_start": 166,
          "line_end": 170,
          "content": "if (values == null) {<br/>            values = new Values();<br/>        }<br/><br/>        return values;"
        },
        {
          "total_lines": 5,
          "line_start": 140,
          "line_end": 144,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(0, 0, key, null, true);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 3,
          "line_start": 131,
          "line_end": 133,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(0, value, key, null, false);"
        },
        {
          "total_lines": 3,
          "line_start": 142,
          "line_end": 144,
          "content": "super.addOrRemove(0, 0, key, null, true);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import java.util.NoSuchElementException;<br/><br/>import org.hsqldb.map.BaseHashMap;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/navigator/RowSetNavigatorClient.java",
      "loc_duplicate": 57,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 113,
          "line_end": 121,
          "content": "if (currentPos < 0 || currentPos >= size) {<br/>            return null;<br/>        }<br/><br/>        if (currentPos == currentOffset + table.length) {<br/>            getBlock(currentOffset + table.length);<br/>        }<br/><br/>        return table[currentPos - currentOffset];"
        },
        {
          "total_lines": 7,
          "line_start": 265,
          "line_end": 271,
          "content": "int        newSize  = size == 0 ? 4<br/>                                            : size * 2;<br/>            Object[][] newTable = new Object[newSize][];<br/><br/>            System.arraycopy(table, 0, newTable, 0, size);<br/><br/>            table = newTable;"
        },
        {
          "total_lines": 7,
          "line_start": 113,
          "line_end": 119,
          "content": "if (currentPos < 0 || currentPos >= size) {<br/>            return null;<br/>        }<br/><br/>        if (currentPos == currentOffset + table.length) {<br/>            getBlock(currentOffset + table.length);<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 117,
          "line_end": 121,
          "content": "if (currentPos == currentOffset + table.length) {<br/>            getBlock(currentOffset + table.length);<br/>        }<br/><br/>        return table[currentPos - currentOffset];"
        },
        {
          "total_lines": 5,
          "line_start": 265,
          "line_end": 269,
          "content": "int        newSize  = size == 0 ? 4<br/>                                            : size * 2;<br/>            Object[][] newTable = new Object[newSize][];<br/><br/>            System.arraycopy(table, 0, newTable, 0, size);"
        },
        {
          "total_lines": 4,
          "line_start": 202,
          "line_end": 205,
          "content": "Object[] data = table[i];<br/><br/>            out.writeData(meta.getColumnCount(), meta.columnTypes, data, null,<br/>                          null);"
        },
        {
          "total_lines": 4,
          "line_start": 241,
          "line_end": 244,
          "content": "Object[] data = table[i];<br/><br/>            out.writeData(meta.getColumnCount(), meta.columnTypes, data, null,<br/>                          null);"
        },
        {
          "total_lines": 3,
          "line_start": 269,
          "line_end": 271,
          "content": "System.arraycopy(table, 0, newTable, 0, size);<br/><br/>            table = newTable;"
        },
        {
          "total_lines": 2,
          "line_start": 182,
          "line_end": 183,
          "content": "RowInputInterface in,<br/>                           ResultMetaData meta"
        },
        {
          "total_lines": 2,
          "line_start": 38,
          "line_end": 39,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 196,
          "line_end": 197,
          "content": "RowOutputInterface out,<br/>                            ResultMetaData meta"
        },
        {
          "total_lines": 2,
          "line_start": 226,
          "line_end": 227,
          "content": "RowOutputInterface out,<br/>                      ResultMetaData meta"
        },
        {
          "total_lines": 2,
          "line_start": 209,
          "line_end": 210,
          "content": "RowInputInterface in,<br/>                     ResultMetaData meta"
        },
        {
          "total_lines": 1,
          "line_start": 129,
          "line_end": 129,
          "content": "ErrorCode.U_S0500, \"RowSetNavigatorClient\""
        },
        {
          "total_lines": 1,
          "line_start": 125,
          "line_end": 125,
          "content": "ErrorCode.U_S0500, \"RowSetNavigatorClient\""
        },
        {
          "total_lines": 1,
          "line_start": 142,
          "line_end": 142,
          "content": "ErrorCode.U_S0500, \"RowSetNavigatorClient\""
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/preprocessor/Document.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 177,
          "line_end": 178,
          "content": "IOException,<br/>            UnsupportedEncodingException"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/HsqlByteArrayOutputStream.java",
      "loc_duplicate": 12,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 172,
          "line_end": 175,
          "content": "ensureRoom(2);<br/><br/>        buffer[count++] = (byte) (v >>> 8);<br/>        buffer[count++] = (byte) v;"
        },
        {
          "total_lines": 4,
          "line_start": 113,
          "line_end": 116,
          "content": "ensureRoom(2);<br/><br/>        buffer[count++] = (byte) (v >>> 8);<br/>        buffer[count++] = (byte) v;"
        },
        {
          "total_lines": 2,
          "line_start": 187,
          "line_end": 188,
          "content": "buffer[count++] = (byte) (v >>> 8);<br/>            buffer[count++] = (byte) v;"
        },
        {
          "total_lines": 2,
          "line_start": 266,
          "line_end": 267,
          "content": "buffer[count++] = (byte) (v >>> 8);<br/>            buffer[count++] = (byte) v;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/dbinfo/DatabaseInformation.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 369,
          "line_end": 370,
          "content": "Session session, Table table,<br/>                                      PersistentStore store"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ExpressionColumn.java",
      "loc_duplicate": 66,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 1001,
          "line_end": 1006,
          "content": "if (nodes[i] == null) {<br/>                continue;<br/>            }<br/><br/>            nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,<br/>                    length);"
        },
        {
          "total_lines": 5,
          "line_start": 674,
          "line_end": 678,
          "content": "Object value =<br/>                    session.sessionContext.rangeIterators[rangePosition]<br/>                        .getCurrent(columnIndex);<br/><br/>                return value;"
        },
        {
          "total_lines": 5,
          "line_start": 930,
          "line_end": 934,
          "content": "if (nodes[i] == null) {<br/>                continue;<br/>            }<br/><br/>            unresolvedSet = nodes[i].getUnkeyedColumns(unresolvedSet);"
        },
        {
          "total_lines": 5,
          "line_start": 1083,
          "line_end": 1087,
          "content": "if (nodes[i] == null) {<br/>                continue;<br/>            }<br/><br/>            nodes[i] = nodes[i].replaceColumnReferences(range, list);"
        },
        {
          "total_lines": 5,
          "line_start": 939,
          "line_end": 943,
          "content": "if (unresolvedSet == null) {<br/>                unresolvedSet = new OrderedHashSet();<br/>            }<br/><br/>            unresolvedSet.add(this);"
        },
        {
          "total_lines": 4,
          "line_start": 835,
          "line_end": 838,
          "content": "if (alias != null) {<br/>                    sb.append(\" AS \").append(alias.name);<br/>                }<br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 844,
          "line_end": 847,
          "content": "if (alias != null) {<br/>                    sb.append(\" AS \").append(alias.name);<br/>                }<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 1042,
          "line_end": 1044,
          "content": "String message = getColumnName();<br/><br/>                                throw Error.error(ErrorCode.X_42580, message);"
        },
        {
          "total_lines": 3,
          "line_start": 1025,
          "line_end": 1027,
          "content": "String message = getColumnName();<br/><br/>                            throw Error.error(ErrorCode.X_42580, message);"
        },
        {
          "total_lines": 3,
          "line_start": 360,
          "line_end": 362,
          "content": "Session session,<br/>            RangeGroup rangeGroup, int rangeCount, RangeGroup[] rangeGroups,<br/>            HsqlList unresolvedSet, boolean acceptsSequences"
        },
        {
          "total_lines": 3,
          "line_start": 1055,
          "line_end": 1057,
          "content": "String message = getColumnName();<br/><br/>                                throw Error.error(ErrorCode.X_42580, message);"
        },
        {
          "total_lines": 2,
          "line_start": 449,
          "line_end": 450,
          "content": "tableName, session.getSchemaName(schema),<br/>                                    false"
        },
        {
          "total_lines": 2,
          "line_start": 997,
          "line_end": 998,
          "content": "Expression[] columns,<br/>                                     int length"
        },
        {
          "total_lines": 2,
          "line_start": 823,
          "line_end": 824,
          "content": "sb.append(column.getName().name);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 828,
          "line_end": 829,
          "content": "sb.append(column.getName().name);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1075,
          "line_end": 1076,
          "content": "RangeVariable range,<br/>                                       Expression[] list"
        },
        {
          "total_lines": 2,
          "line_start": 464,
          "line_end": 465,
          "content": "tableName, session.getSchemaName(schema),<br/>                                    false"
        },
        {
          "total_lines": 2,
          "line_start": 971,
          "line_end": 972,
          "content": "RangeVariable[] rangeVariables,<br/>                                         OrderedHashSet set"
        },
        {
          "total_lines": 2,
          "line_start": 1149,
          "line_end": 1150,
          "content": "RangeVariable[] ranges,<br/>                               RangeVariable[] newRanges"
        },
        {
          "total_lines": 1,
          "line_start": 449,
          "line_end": 449,
          "content": "tableName, session.getSchemaName(schema)"
        },
        {
          "total_lines": 1,
          "line_start": 1200,
          "line_end": 1200,
          "content": "Session session, RangeVariable range, int operation"
        },
        {
          "total_lines": 1,
          "line_start": 382,
          "line_end": 382,
          "content": "session, rangeGroup"
        },
        {
          "total_lines": 1,
          "line_start": 464,
          "line_end": 464,
          "content": "tableName, session.getSchemaName(schema)"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/SchemaObjectSet.java",
      "loc_duplicate": 69,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 273,
          "line_end": 279,
          "content": "case SchemaObject.VIEW :<br/>            case SchemaObject.TABLE :<br/>            case SchemaObject.COLUMN :<br/>            case SchemaObject.SEQUENCE :<br/>            case SchemaObject.CHARSET :<br/>            case SchemaObject.DOMAIN :<br/>            case SchemaObject.TYPE :"
        },
        {
          "total_lines": 7,
          "line_start": 304,
          "line_end": 310,
          "content": "case SchemaObject.VIEW :<br/>            case SchemaObject.TABLE :<br/>            case SchemaObject.COLUMN :<br/>            case SchemaObject.SEQUENCE :<br/>            case SchemaObject.CHARSET :<br/>            case SchemaObject.DOMAIN :<br/>            case SchemaObject.TYPE :"
        },
        {
          "total_lines": 4,
          "line_start": 320,
          "line_end": 323,
          "content": "break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"SchemaObjectSet\");"
        },
        {
          "total_lines": 4,
          "line_start": 304,
          "line_end": 307,
          "content": "case SchemaObject.VIEW :<br/>            case SchemaObject.TABLE :<br/>            case SchemaObject.COLUMN :<br/>            case SchemaObject.SEQUENCE :"
        },
        {
          "total_lines": 4,
          "line_start": 289,
          "line_end": 292,
          "content": "break;<br/><br/>            default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"SchemaObjectSet\");"
        },
        {
          "total_lines": 4,
          "line_start": 273,
          "line_end": 276,
          "content": "case SchemaObject.VIEW :<br/>            case SchemaObject.TABLE :<br/>            case SchemaObject.COLUMN :<br/>            case SchemaObject.SEQUENCE :"
        },
        {
          "total_lines": 4,
          "line_start": 312,
          "line_end": 315,
          "content": "case SchemaObject.COLLATION :<br/>            case SchemaObject.PROCEDURE :<br/>            case SchemaObject.FUNCTION :<br/>            case SchemaObject.SPECIFIC_ROUTINE :"
        },
        {
          "total_lines": 4,
          "line_start": 280,
          "line_end": 283,
          "content": "case SchemaObject.COLLATION :<br/>            case SchemaObject.PROCEDURE :<br/>            case SchemaObject.FUNCTION :<br/>            case SchemaObject.SPECIFIC_ROUTINE :"
        },
        {
          "total_lines": 3,
          "line_start": 277,
          "line_end": 279,
          "content": "case SchemaObject.CHARSET :<br/>            case SchemaObject.DOMAIN :<br/>            case SchemaObject.TYPE :"
        },
        {
          "total_lines": 3,
          "line_start": 316,
          "line_end": 318,
          "content": "case SchemaObject.ASSERTION :<br/>            case SchemaObject.INDEX :<br/>            case SchemaObject.TRIGGER :"
        },
        {
          "total_lines": 3,
          "line_start": 312,
          "line_end": 314,
          "content": "case SchemaObject.COLLATION :<br/>            case SchemaObject.PROCEDURE :<br/>            case SchemaObject.FUNCTION :"
        },
        {
          "total_lines": 3,
          "line_start": 175,
          "line_end": 177,
          "content": "int code = getAddErrorCode(name.type);<br/><br/>            throw Error.error(code, name.name);"
        },
        {
          "total_lines": 3,
          "line_start": 285,
          "line_end": 287,
          "content": "case SchemaObject.ASSERTION :<br/>            case SchemaObject.INDEX :<br/>            case SchemaObject.TRIGGER :"
        },
        {
          "total_lines": 3,
          "line_start": 308,
          "line_end": 310,
          "content": "case SchemaObject.CHARSET :<br/>            case SchemaObject.DOMAIN :<br/>            case SchemaObject.TYPE :"
        },
        {
          "total_lines": 3,
          "line_start": 280,
          "line_end": 282,
          "content": "case SchemaObject.COLLATION :<br/>            case SchemaObject.PROCEDURE :<br/>            case SchemaObject.FUNCTION :"
        },
        {
          "total_lines": 3,
          "line_start": 147,
          "line_end": 149,
          "content": "int code = getAddErrorCode(name.type);<br/><br/>            throw Error.error(code, name.name);"
        },
        {
          "total_lines": 2,
          "line_start": 41,
          "line_end": 42,
          "content": "import org.hsqldb.lib.OrderedHashSet;<br/>import org.hsqldb.map.ValuePool;"
        },
        {
          "total_lines": 2,
          "line_start": 291,
          "line_end": 292,
          "content": "default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"SchemaObjectSet\");"
        },
        {
          "total_lines": 2,
          "line_start": 322,
          "line_end": 323,
          "content": "default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"SchemaObjectSet\");"
        },
        {
          "total_lines": 1,
          "line_start": 380,
          "line_end": 380,
          "content": "OrderedHashSet resolved, OrderedHashSet unresolved"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/server/ServerProperties.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 141,
          "line_end": 141,
          "content": "int protocol, String path, String extension"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementSchemaDefinition.java",
      "loc_duplicate": 68,
      "clones": [
          {
          "total_lines": 13,
          "line_start": 61,
          "line_end": 73,
          "content": "Result result;<br/><br/>        try {<br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 11,
          "line_start": 63,
          "line_end": 73,
          "content": "try {<br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 9,
          "line_start": 116,
          "line_end": 124,
          "content": "cs                    = session.parser.compileCreate();<br/>                        cs.isSchemaDefinition = true;<br/><br/>                        cs.setSchemaHsqlName(schemaDefinitionName);<br/><br/>                        if (session.parser.token.tokenType<br/>                                != Tokens.X_ENDPARSE) {<br/>                            throw session.parser.unexpectedToken();<br/>                        }"
        },
        {
          "total_lines": 9,
          "line_start": 156,
          "line_end": 164,
          "content": "cs                    = session.parser.compileCreate();<br/>                        cs.isSchemaDefinition = true;<br/><br/>                        cs.setSchemaHsqlName(schemaDefinitionName);<br/><br/>                        if (session.parser.token.tokenType<br/>                                != Tokens.X_ENDPARSE) {<br/>                            throw session.parser.unexpectedToken();<br/>                        }"
        },
        {
          "total_lines": 6,
          "line_start": 119,
          "line_end": 124,
          "content": "cs.setSchemaHsqlName(schemaDefinitionName);<br/><br/>                        if (session.parser.token.tokenType<br/>                                != Tokens.X_ENDPARSE) {<br/>                            throw session.parser.unexpectedToken();<br/>                        }"
        },
        {
          "total_lines": 6,
          "line_start": 159,
          "line_end": 164,
          "content": "cs.setSchemaHsqlName(schemaDefinitionName);<br/><br/>                        if (session.parser.token.tokenType<br/>                                != Tokens.X_ENDPARSE) {<br/>                            throw session.parser.unexpectedToken();<br/>                        }"
        },
        {
          "total_lines": 4,
          "line_start": 116,
          "line_end": 119,
          "content": "cs                    = session.parser.compileCreate();<br/>                        cs.isSchemaDefinition = true;<br/><br/>                        cs.setSchemaHsqlName(schemaDefinitionName);"
        },
        {
          "total_lines": 4,
          "line_start": 156,
          "line_end": 159,
          "content": "cs                    = session.parser.compileCreate();<br/>                        cs.isSchemaDefinition = true;<br/><br/>                        cs.setSchemaHsqlName(schemaDefinitionName);"
        },
        {
          "total_lines": 2,
          "line_start": 148,
          "line_end": 149,
          "content": "result = statements[i].execute(session);<br/>                        break;"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 112,
          "line_end": 113,
          "content": "result = statements[i].execute(session);<br/>                        break;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/Types.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/TableDerived.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 152,
          "line_end": 153,
          "content": "new Scanner(),<br/>                                        session.parser.compileContext"
        },
        {
          "total_lines": 1,
          "line_start": 68,
          "line_end": 68,
          "content": "Database database, HsqlName name, int type"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/HsqldbTestCase.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 162,
          "line_end": 164,
          "content": "tmpIndex = scrollableSet.getInt(3);<br/><br/>                System.out.println(tmpIndex);"
        },
        {
          "total_lines": 3,
          "line_start": 153,
          "line_end": 155,
          "content": "tmpIndex = scrollableSet.getInt(3);<br/><br/>                System.out.println(tmpIndex);"
        },
        {
          "total_lines": 2,
          "line_start": 135,
          "line_end": 136,
          "content": "ResultSet.TYPE_SCROLL_INSENSITIVE,<br/>                                     ResultSet.CONCUR_READ_ONLY"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rowio/RowOutputBinaryEncode.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 67,
          "line_end": 68,
          "content": "buffer,<br/>                                          start + INT_STORE_SIZE"
        },
        {
          "total_lines": 1,
          "line_start": 66,
          "line_end": 66,
          "content": "buffer, start + INT_STORE_SIZE"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestLobs.java",
      "loc_duplicate": 208,
      "clones": [
          {
          "total_lines": 13,
          "line_start": 238,
          "line_end": 250,
          "content": "if (baOut.length != baR1.length) {<br/>                assertTrue(\"Expected array len \" + baR1.length + \", got len \"<br/>                           + baOut.length, false);<br/>            }<br/><br/>            for (int i = 0; i < baOut.length; i++) {<br/>                if (baOut[i] != baR1[i]) {<br/>                    assertTrue(\"Expected array len \" + baR1.length<br/>                               + \", got len \" + baOut.length, false);<br/>                }<br/>            }<br/><br/>            rs.close();"
        },
        {
          "total_lines": 13,
          "line_start": 183,
          "line_end": 195,
          "content": "if (baOut.length != baR1.length) {<br/>                assertTrue(\"Expected array len \" + baR1.length + \", got len \"<br/>                           + baOut.length, false);<br/>            }<br/><br/>            for (int i = 0; i < baOut.length; i++) {<br/>                if (baOut[i] != baR1[i]) {<br/>                    assertTrue(\"Expected array len \" + baR1.length<br/>                               + \", got len \" + baOut.length, false);<br/>                }<br/>            }<br/><br/>            rs.close();"
        },
        {
          "total_lines": 9,
          "line_start": 446,
          "line_end": 454,
          "content": "InputStream fis =<br/>                    getClass().getResourceAsStream(resourceFileName);<br/><br/>                fis    = getClass().getResourceAsStream(resourceFileName);<br/>                reader = new InputStreamReader(fis, \"ISO-8859-1\");<br/><br/>                for (int i = 0; i < 100; i++) {<br/>                    reader.read();<br/>                }"
        },
        {
          "total_lines": 9,
          "line_start": 473,
          "line_end": 481,
          "content": "InputStream fis =<br/>                    getClass().getResourceAsStream(resourceFileName);<br/><br/>                fis    = getClass().getResourceAsStream(resourceFileName);<br/>                reader = new InputStreamReader(fis, \"ISO-8859-1\");<br/><br/>                for (int i = 0; i < 100; i++) {<br/>                    reader.read();<br/>                }"
        },
        {
          "total_lines": 8,
          "line_start": 197,
          "line_end": 204,
          "content": "rs = st.executeQuery(\"SELECT b FROM blo WHERE id = 2\");<br/><br/>            if (!rs.next()) {<br/>                assertTrue(\"No row with id 2\", false);<br/>            }<br/><br/>//            ba = rs.getBytes(\"b\"); doesn't convert but throws ClassCast<br/>            blob1 = rs.getBlob(\"b\");"
        },
        {
          "total_lines": 8,
          "line_start": 531,
          "line_end": 538,
          "content": "reader = dataClob.getCharacterStream();<br/><br/>                ps.setString(1, \"test-id-1\" + i);<br/>                ps.setLong(2, 23456789123456L + i);<br/>                ps.setCharacterStream(3, reader, dataClob.length());<br/>                ps.setString(4, \"test-scope-1\" + i);<br/>                ps.executeUpdate();<br/>                connection.commit();"
        },
        {
          "total_lines": 8,
          "line_start": 604,
          "line_end": 611,
          "content": "reader = dataClob.getCharacterStream();<br/><br/>                ps.setString(1, \"test-id-1\" + i);<br/>                ps.setLong(2, 23456789123456L + i);<br/>                ps.setCharacterStream(3, reader, dataClob.length());<br/>                ps.setString(4, \"test-scope-1\" + i);<br/>                ps.executeUpdate();<br/>                connection.commit();"
        },
        {
          "total_lines": 7,
          "line_start": 604,
          "line_end": 610,
          "content": "reader = dataClob.getCharacterStream();<br/><br/>                ps.setString(1, \"test-id-1\" + i);<br/>                ps.setLong(2, 23456789123456L + i);<br/>                ps.setCharacterStream(3, reader, dataClob.length());<br/>                ps.setString(4, \"test-scope-1\" + i);<br/>                ps.executeUpdate();"
        },
        {
          "total_lines": 7,
          "line_start": 225,
          "line_end": 231,
          "content": "rs = st.executeQuery(\"SELECT b FROM blo WHERE id = 2\");<br/><br/>            if (!rs.next()) {<br/>                assertTrue(\"No row with id 2\", false);<br/>            }<br/><br/>            blob1 = rs.getBlob(\"b\");"
        },
        {
          "total_lines": 7,
          "line_start": 531,
          "line_end": 537,
          "content": "reader = dataClob.getCharacterStream();<br/><br/>                ps.setString(1, \"test-id-1\" + i);<br/>                ps.setLong(2, 23456789123456L + i);<br/>                ps.setCharacterStream(3, reader, dataClob.length());<br/>                ps.setString(4, \"test-scope-1\" + i);<br/>                ps.executeUpdate();"
        },
        {
          "total_lines": 7,
          "line_start": 168,
          "line_end": 174,
          "content": "ps.executeUpdate();<br/><br/>            rs = st.executeQuery(\"SELECT b FROM blo WHERE id = 2\");<br/><br/>            if (!rs.next()) {<br/>                assertTrue(\"No row with id 2\", false);<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 223,
          "line_end": 229,
          "content": "ps.executeUpdate();<br/><br/>            rs = st.executeQuery(\"SELECT b FROM blo WHERE id = 2\");<br/><br/>            if (!rs.next()) {<br/>                assertTrue(\"No row with id 2\", false);<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 668,
          "line_end": 673,
          "content": "String ddl0 = \"DROP TABLE CLOBTEST IF EXISTS\";<br/>            String ddl1 =<br/>                \"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))\";<br/><br/>            statement.execute(ddl0);<br/>            statement.execute(ddl1);"
        },
        {
          "total_lines": 6,
          "line_start": 263,
          "line_end": 268,
          "content": "String ddl0 = \"DROP TABLE CLOBTEST IF EXISTS\";<br/>            String ddl1 =<br/>                \"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))\";<br/><br/>            statement.execute(ddl0);<br/>            statement.execute(ddl1);"
        },
        {
          "total_lines": 6,
          "line_start": 743,
          "line_end": 748,
          "content": "String ddl0 = \"DROP TABLE CLOBTEST IF EXISTS\";<br/>            String ddl1 =<br/>                \"CREATE TABLE CLOBTEST(ID IDENTITY, CLOBFIELD CLOB(100000))\";<br/><br/>            statement.execute(ddl0);<br/>            statement.execute(ddl1);"
        },
        {
          "total_lines": 6,
          "line_start": 199,
          "line_end": 204,
          "content": "if (!rs.next()) {<br/>                assertTrue(\"No row with id 2\", false);<br/>            }<br/><br/>//            ba = rs.getBytes(\"b\"); doesn't convert but throws ClassCast<br/>            blob1 = rs.getBlob(\"b\");"
        },
        {
          "total_lines": 5,
          "line_start": 227,
          "line_end": 231,
          "content": "if (!rs.next()) {<br/>                assertTrue(\"No row with id 2\", false);<br/>            }<br/><br/>            blob1 = rs.getBlob(\"b\");"
        },
        {
          "total_lines": 5,
          "line_start": 225,
          "line_end": 229,
          "content": "rs = st.executeQuery(\"SELECT b FROM blo WHERE id = 2\");<br/><br/>            if (!rs.next()) {<br/>                assertTrue(\"No row with id 2\", false);<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 197,
          "line_end": 201,
          "content": "rs = st.executeQuery(\"SELECT b FROM blo WHERE id = 2\");<br/><br/>            if (!rs.next()) {<br/>                assertTrue(\"No row with id 2\", false);<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 170,
          "line_end": 174,
          "content": "rs = st.executeQuery(\"SELECT b FROM blo WHERE id = 2\");<br/><br/>            if (!rs.next()) {<br/>                assertTrue(\"No row with id 2\", false);<br/>            }"
        },
        {
          "total_lines": 3,
          "line_start": 555,
          "line_end": 557,
          "content": "ps.setString(4, \"test-scope-1\" + i);<br/>                ps.executeUpdate();<br/>                connection.commit();"
        },
        {
          "total_lines": 2,
          "line_start": 896,
          "line_end": 897,
          "content": "e.printStackTrace();<br/>            fail(\"test failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 75,
          "line_end": 76,
          "content": "connection = super.newConnection();<br/>            statement  = connection.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 91,
          "line_end": 92,
          "content": "statement.execute(ddl0);<br/>            statement.execute(ddl1);"
        },
        {
          "total_lines": 2,
          "line_start": 658,
          "line_end": 659,
          "content": "e.printStackTrace();<br/>            fail(\"test failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 941,
          "line_end": 942,
          "content": "e.printStackTrace();<br/>            fail(\"test failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 810,
          "line_end": 811,
          "content": "e.printStackTrace();<br/>            fail(\"test failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 555,
          "line_end": 556,
          "content": "ps.setString(4, \"test-scope-1\" + i);<br/>                ps.executeUpdate();"
        },
        {
          "total_lines": 2,
          "line_start": 875,
          "line_end": 876,
          "content": "ps.setBlob(1, blob);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 2,
          "line_start": 133,
          "line_end": 134,
          "content": "e.printStackTrace();<br/>            fail(\"test failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 708,
          "line_end": 709,
          "content": "new CharArrayReader(testChars),<br/>                                  testChars.length"
        },
        {
          "total_lines": 2,
          "line_start": 253,
          "line_end": 254,
          "content": "e.printStackTrace();<br/>            fail(\"test failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 107,
          "line_end": 108,
          "content": "ps.setBlob(1, blob);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 2,
          "line_start": 489,
          "line_end": 490,
          "content": "ps.setString(4, \"test-scope-1\");<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 2,
          "line_start": 556,
          "line_end": 557,
          "content": "ps.executeUpdate();<br/>                connection.commit();"
        },
        {
          "total_lines": 2,
          "line_start": 493,
          "line_end": 494,
          "content": "e.printStackTrace();<br/>            fail(\"test failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 564,
          "line_end": 565,
          "content": "e.printStackTrace();<br/>            fail(\"test failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 333,
          "line_end": 334,
          "content": "e.printStackTrace();<br/>            fail(\"test failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 785,
          "line_end": 786,
          "content": "new CharArrayReader(testChars),<br/>                                  testChars.length"
        },
        {
          "total_lines": 2,
          "line_start": 869,
          "line_end": 870,
          "content": "ps.setBlob(1, blob);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 2,
          "line_start": 401,
          "line_end": 402,
          "content": "e.printStackTrace();<br/>            fail(\"test failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 360,
          "line_end": 361,
          "content": "ps.setClob(3, clob);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 2,
          "line_start": 284,
          "line_end": 285,
          "content": "ps.setClob(1, clob);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 2,
          "line_start": 366,
          "line_end": 367,
          "content": "ps.setClob(3, clob);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 2,
          "line_start": 442,
          "line_end": 443,
          "content": "ps.setString(4, \"test-scope-1\");<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 2,
          "line_start": 94,
          "line_end": 95,
          "content": "e.printStackTrace();<br/>            fail(\"test failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 278,
          "line_end": 279,
          "content": "ps.setClob(1, clob);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 2,
          "line_start": 733,
          "line_end": 734,
          "content": "e.printStackTrace();<br/>            fail(\"test failure\");"
        },
        {
          "total_lines": 2,
          "line_start": 113,
          "line_end": 114,
          "content": "ps.setBlob(1, blob);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 1,
          "line_start": 708,
          "line_end": 708,
          "content": "1, new CharArrayReader(testChars)"
        },
        {
          "total_lines": 1,
          "line_start": 785,
          "line_end": 785,
          "content": "1, new CharArrayReader(testChars)"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/TransactionManager.java",
      "loc_duplicate": 16,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 60,
          "line_end": 62,
          "content": "Session session, Table table,<br/>                                     PersistentStore store, Row row,<br/>                                     int[] colMap"
        },
        {
          "total_lines": 3,
          "line_start": 64,
          "line_end": 66,
          "content": "Session session, Table table,<br/>                                PersistentStore store, Row row,<br/>                                int[] changedColumns"
        },
        {
          "total_lines": 2,
          "line_start": 61,
          "line_end": 62,
          "content": "Row row,<br/>                                     int[] colMap"
        },
        {
          "total_lines": 2,
          "line_start": 82,
          "line_end": 83,
          "content": "Session session, PersistentStore store, long id,<br/>                           int mode"
        },
        {
          "total_lines": 2,
          "line_start": 79,
          "line_end": 80,
          "content": "Row row,<br/>                           int mode"
        },
        {
          "total_lines": 2,
          "line_start": 60,
          "line_end": 61,
          "content": "Session session, Table table,<br/>                                     PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 117,
          "line_end": 117,
          "content": "PersistentStore store, CachedObject object"
        },
        {
          "total_lines": 1,
          "line_start": 82,
          "line_end": 82,
          "content": "PersistentStore store, long id"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ExpressionLike.java",
      "loc_duplicate": 10,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 84,
          "line_end": 86,
          "content": "session,<br/>                        rangeGroup, rangeCount, rangeGroups, unresolvedSet,<br/>                        acceptsSequences"
        },
        {
          "total_lines": 3,
          "line_start": 78,
          "line_end": 80,
          "content": "Session session,<br/>            RangeGroup rangeGroup, int rangeCount, RangeGroup[] rangeGroups,<br/>            HsqlList unresolvedSet, boolean acceptsSequences"
        },
        {
          "total_lines": 2,
          "line_start": 85,
          "line_end": 86,
          "content": "rangeCount, rangeGroups, unresolvedSet,<br/>                        acceptsSequences"
        },
        {
          "total_lines": 2,
          "line_start": 84,
          "line_end": 85,
          "content": "session,<br/>                        rangeGroup, rangeCount, rangeGroups, unresolvedSet"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/HsqlDatabaseProperties.java",
      "loc_duplicate": 11,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 575,
          "line_end": 578,
          "content": "t, ErrorCode.FILE_IO_ERROR,<br/>                              ErrorCode.M_LOAD_SAVE_PROPERTIES, new Object[] {<br/>                t.toString(), fileName<br/>            }"
        },
        {
          "total_lines": 4,
          "line_start": 646,
          "line_end": 649,
          "content": "t, ErrorCode.FILE_IO_ERROR,<br/>                              ErrorCode.M_LOAD_SAVE_PROPERTIES, new Object[] {<br/>                t.toString(), fileName<br/>            }"
        },
        {
          "total_lines": 1,
          "line_start": 511,
          "line_end": 511,
          "content": "100, 4 * 1024 * 1024"
        },
        {
          "total_lines": 1,
          "line_start": 514,
          "line_end": 514,
          "content": "100, 4 * 1024 * 1024"
        },
        {
          "total_lines": 1,
          "line_start": 508,
          "line_end": 508,
          "content": "0, 0"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/TransferCommon.java",
      "loc_duplicate": 22,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 111,
          "line_end": 114,
          "content": "t          = (TransferTable) tTable.elementAt(i);<br/>                t.tracer   = tracer;<br/>                t.sourceDb = (TransferDb) sourceDb;<br/>                t.destDb   = targetDb;"
        },
        {
          "total_lines": 4,
          "line_start": 136,
          "line_end": 139,
          "content": "t          = (TransferTable) tTable.elementAt(i);<br/>                t.tracer   = tracer;<br/>                t.sourceDb = (TransferDb) sourceDb;<br/>                t.destDb   = targetDb;"
        },
        {
          "total_lines": 3,
          "line_start": 112,
          "line_end": 114,
          "content": "t.tracer   = tracer;<br/>                t.sourceDb = (TransferDb) sourceDb;<br/>                t.destDb   = targetDb;"
        },
        {
          "total_lines": 3,
          "line_start": 137,
          "line_end": 139,
          "content": "t.tracer   = tracer;<br/>                t.sourceDb = (TransferDb) sourceDb;<br/>                t.destDb   = targetDb;"
        },
        {
          "total_lines": 2,
          "line_start": 136,
          "line_end": 137,
          "content": "t          = (TransferTable) tTable.elementAt(i);<br/>                t.tracer   = tracer;"
        },
        {
          "total_lines": 2,
          "line_start": 111,
          "line_end": 112,
          "content": "t          = (TransferTable) tTable.elementAt(i);<br/>                t.tracer   = tracer;"
        },
        {
          "total_lines": 2,
          "line_start": 113,
          "line_end": 114,
          "content": "t.sourceDb = (TransferDb) sourceDb;<br/>                t.destDb   = targetDb;"
        },
        {
          "total_lines": 2,
          "line_start": 138,
          "line_end": 139,
          "content": "t.sourceDb = (TransferDb) sourceDb;<br/>                t.destDb   = targetDb;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/OracleTransferHelper.java",
      "loc_duplicate": 37,
      "clones": [
          {
          "total_lines": 14,
          "line_start": 99,
          "line_end": 112,
          "content": "String SeqName = new String(\"_\" + columnDesc.getString(4)<br/>                                        + \"_seq\");<br/>            int spaceleft = 31 - SeqName.length();<br/><br/>            if (t.Stmts.sDestTable.length() > spaceleft) {<br/>                SeqName = t.Stmts.sDestTable.substring(0, spaceleft)<br/>                          + SeqName;<br/>            } else {<br/>                SeqName = t.Stmts.sDestTable + SeqName;<br/>            }<br/><br/>            String DropSequence = \"DROP SEQUENCE \" + SeqName + \";\";<br/><br/>            t.Stmts.sDestDrop += DropSequence;"
        },
        {
          "total_lines": 3,
          "line_start": 99,
          "line_end": 101,
          "content": "String SeqName = new String(\"_\" + columnDesc.getString(4)<br/>                                        + \"_seq\");<br/>            int spaceleft = 31 - SeqName.length();"
        },
        {
          "total_lines": 3,
          "line_start": 146,
          "line_end": 148,
          "content": "ResultSetMetaData meta,<br/>                              String columnType, ResultSet columnDesc,<br/>                              int columnIndex"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;"
        },
        {
          "total_lines": 3,
          "line_start": 94,
          "line_end": 96,
          "content": "TransferTable t, ResultSetMetaData meta,<br/>                               String columnType, ResultSet columnDesc,<br/>                               int columnIndex"
        },
        {
          "total_lines": 3,
          "line_start": 87,
          "line_end": 89,
          "content": "TransferTable t, ResultSetMetaData meta,<br/>                              String columnType, ResultSet columnDesc,<br/>                              int columnIndex"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;"
        },
        {
          "total_lines": 2,
          "line_start": 146,
          "line_end": 147,
          "content": "String aTableName, ResultSetMetaData meta,<br/>                              String columnType"
        },
        {
          "total_lines": 1,
          "line_start": 68,
          "line_end": 68,
          "content": "Traceable t, String q"
        },
        {
          "total_lines": 1,
          "line_start": 88,
          "line_end": 88,
          "content": "String columnType, ResultSet columnDesc"
        },
        {
          "total_lines": 1,
          "line_start": 64,
          "line_end": 64,
          "content": "Traceable t, String q"
        },
        {
          "total_lines": 1,
          "line_start": 95,
          "line_end": 95,
          "content": "String columnType, ResultSet columnDesc"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/result/ResultLob.java",
      "loc_duplicate": 235,
      "clones": [
          {
          "total_lines": 8,
          "line_start": 393,
          "line_end": 400,
          "content": "result.blockOffset = dataInput.readLong();<br/>                result.blockLength = dataInput.readLong();<br/>                result.charBlock   = new char[(int) result.blockLength];<br/><br/>                for (int i = 0; i < result.charBlock.length; i++) {<br/>                    result.charBlock[i] = dataInput.readChar();<br/>                }<br/>                break;"
        },
        {
          "total_lines": 8,
          "line_start": 416,
          "line_end": 423,
          "content": "result.blockOffset = dataInput.readLong();<br/>                result.blockLength = dataInput.readLong();<br/>                result.charBlock   = new char[(int) result.blockLength];<br/><br/>                for (int i = 0; i < result.charBlock.length; i++) {<br/>                    result.charBlock[i] = dataInput.readChar();<br/>                }<br/>                break;"
        },
        {
          "total_lines": 7,
          "line_start": 393,
          "line_end": 399,
          "content": "result.blockOffset = dataInput.readLong();<br/>                result.blockLength = dataInput.readLong();<br/>                result.charBlock   = new char[(int) result.blockLength];<br/><br/>                for (int i = 0; i < result.charBlock.length; i++) {<br/>                    result.charBlock[i] = dataInput.readChar();<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 417,
          "line_end": 423,
          "content": "result.blockLength = dataInput.readLong();<br/>                result.charBlock   = new char[(int) result.blockLength];<br/><br/>                for (int i = 0; i < result.charBlock.length; i++) {<br/>                    result.charBlock[i] = dataInput.readChar();<br/>                }<br/>                break;"
        },
        {
          "total_lines": 7,
          "line_start": 394,
          "line_end": 400,
          "content": "result.blockLength = dataInput.readLong();<br/>                result.charBlock   = new char[(int) result.blockLength];<br/><br/>                for (int i = 0; i < result.charBlock.length; i++) {<br/>                    result.charBlock[i] = dataInput.readChar();<br/>                }<br/>                break;"
        },
        {
          "total_lines": 7,
          "line_start": 416,
          "line_end": 422,
          "content": "result.blockOffset = dataInput.readLong();<br/>                result.blockLength = dataInput.readLong();<br/>                result.charBlock   = new char[(int) result.blockLength];<br/><br/>                for (int i = 0; i < result.charBlock.length; i++) {<br/>                    result.charBlock[i] = dataInput.readChar();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 384,
          "line_end": 389,
          "content": "result.blockOffset = dataInput.readLong();<br/>                result.blockLength = dataInput.readLong();<br/>                result.byteBlock   = new byte[(int) result.blockLength];<br/><br/>                dataInput.readFully(result.byteBlock);<br/>                break;"
        },
        {
          "total_lines": 6,
          "line_start": 394,
          "line_end": 399,
          "content": "result.blockLength = dataInput.readLong();<br/>                result.charBlock   = new char[(int) result.blockLength];<br/><br/>                for (int i = 0; i < result.charBlock.length; i++) {<br/>                    result.charBlock[i] = dataInput.readChar();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 408,
          "line_end": 413,
          "content": "result.blockOffset = dataInput.readLong();<br/>                result.blockLength = dataInput.readLong();<br/>                result.byteBlock   = new byte[(int) result.blockLength];<br/><br/>                dataInput.readFully(result.byteBlock);<br/>                break;"
        },
        {
          "total_lines": 6,
          "line_start": 417,
          "line_end": 422,
          "content": "result.blockLength = dataInput.readLong();<br/>                result.charBlock   = new char[(int) result.blockLength];<br/><br/>                for (int i = 0; i < result.charBlock.length; i++) {<br/>                    result.charBlock[i] = dataInput.readChar();<br/>                }"
        },
        {
          "total_lines": 5,
          "line_start": 395,
          "line_end": 399,
          "content": "result.charBlock   = new char[(int) result.blockLength];<br/><br/>                for (int i = 0; i < result.charBlock.length; i++) {<br/>                    result.charBlock[i] = dataInput.readChar();<br/>                }"
        },
        {
          "total_lines": 5,
          "line_start": 418,
          "line_end": 422,
          "content": "result.charBlock   = new char[(int) result.blockLength];<br/><br/>                for (int i = 0; i < result.charBlock.length; i++) {<br/>                    result.charBlock[i] = dataInput.readChar();<br/>                }"
        },
        {
          "total_lines": 5,
          "line_start": 113,
          "line_end": 117,
          "content": "result.lobID       = id;<br/>        result.blockOffset = offset;<br/>        result.blockLength = length;<br/><br/>        return result;"
        },
        {
          "total_lines": 5,
          "line_start": 384,
          "line_end": 388,
          "content": "result.blockOffset = dataInput.readLong();<br/>                result.blockLength = dataInput.readLong();<br/>                result.byteBlock   = new byte[(int) result.blockLength];<br/><br/>                dataInput.readFully(result.byteBlock);"
        },
        {
          "total_lines": 5,
          "line_start": 126,
          "line_end": 130,
          "content": "result.lobID       = id;<br/>        result.blockOffset = offset;<br/>        result.blockLength = length;<br/><br/>        return result;"
        },
        {
          "total_lines": 5,
          "line_start": 408,
          "line_end": 412,
          "content": "result.blockOffset = dataInput.readLong();<br/>                result.blockLength = dataInput.readLong();<br/>                result.byteBlock   = new byte[(int) result.blockLength];<br/><br/>                dataInput.readFully(result.byteBlock);"
        },
        {
          "total_lines": 4,
          "line_start": 495,
          "line_end": 498,
          "content": "dataOut.writeLong(blockOffset);<br/>                dataOut.writeLong(blockLength);<br/>                dataOut.write(byteBlock);<br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 114,
          "line_end": 117,
          "content": "result.blockOffset = offset;<br/>        result.blockLength = length;<br/><br/>        return result;"
        },
        {
          "total_lines": 4,
          "line_start": 502,
          "line_end": 505,
          "content": "dataOut.writeLong(blockOffset);<br/>                dataOut.writeLong(blockLength);<br/>                dataOut.writeChars(charBlock);<br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 529,
          "line_end": 532,
          "content": "dataOut.writeLong(blockOffset);<br/>                dataOut.writeLong(blockLength);<br/>                dataOut.writeChars(charBlock);<br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 409,
          "line_end": 412,
          "content": "result.blockLength = dataInput.readLong();<br/>                result.byteBlock   = new byte[(int) result.blockLength];<br/><br/>                dataInput.readFully(result.byteBlock);"
        },
        {
          "total_lines": 4,
          "line_start": 397,
          "line_end": 400,
          "content": "for (int i = 0; i < result.charBlock.length; i++) {<br/>                    result.charBlock[i] = dataInput.readChar();<br/>                }<br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 385,
          "line_end": 388,
          "content": "result.blockLength = dataInput.readLong();<br/>                result.byteBlock   = new byte[(int) result.blockLength];<br/><br/>                dataInput.readFully(result.byteBlock);"
        },
        {
          "total_lines": 4,
          "line_start": 523,
          "line_end": 526,
          "content": "dataOut.writeLong(blockOffset);<br/>                dataOut.writeLong(blockLength);<br/>                dataOut.write(byteBlock);<br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 127,
          "line_end": 130,
          "content": "result.blockOffset = offset;<br/>        result.blockLength = length;<br/><br/>        return result;"
        },
        {
          "total_lines": 4,
          "line_start": 420,
          "line_end": 423,
          "content": "for (int i = 0; i < result.charBlock.length; i++) {<br/>                    result.charBlock[i] = dataInput.readChar();<br/>                }<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 349,
          "line_end": 351,
          "content": "result.lobID   = id;<br/><br/>        return result;"
        },
        {
          "total_lines": 3,
          "line_start": 378,
          "line_end": 380,
          "content": "result.blockOffset = dataInput.readLong();<br/>                result.blockLength = dataInput.readLong();<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 280,
          "line_end": 282,
          "content": "ResultLob result = new ResultLob();<br/><br/>        result.lobID       = lobID;"
        },
        {
          "total_lines": 3,
          "line_start": 529,
          "line_end": 531,
          "content": "dataOut.writeLong(blockOffset);<br/>                dataOut.writeLong(blockLength);<br/>                dataOut.writeChars(charBlock);"
        },
        {
          "total_lines": 3,
          "line_start": 315,
          "line_end": 317,
          "content": "result.lobID   = id;<br/><br/>        return result;"
        },
        {
          "total_lines": 3,
          "line_start": 502,
          "line_end": 504,
          "content": "dataOut.writeLong(blockOffset);<br/>                dataOut.writeLong(blockLength);<br/>                dataOut.writeChars(charBlock);"
        },
        {
          "total_lines": 3,
          "line_start": 126,
          "line_end": 128,
          "content": "result.lobID       = id;<br/>        result.blockOffset = offset;<br/>        result.blockLength = length;"
        },
        {
          "total_lines": 3,
          "line_start": 220,
          "line_end": 222,
          "content": "result.blockLength = pattern.length;<br/><br/>        return result;"
        },
        {
          "total_lines": 3,
          "line_start": 305,
          "line_end": 307,
          "content": "result.lobID   = id;<br/><br/>        return result;"
        },
        {
          "total_lines": 3,
          "line_start": 368,
          "line_end": 370,
          "content": "result.blockOffset = dataInput.readLong();<br/>                result.blockLength = dataInput.readLong();<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 113,
          "line_end": 115,
          "content": "result.lobID       = id;<br/>        result.blockOffset = offset;<br/>        result.blockLength = length;"
        },
        {
          "total_lines": 3,
          "line_start": 246,
          "line_end": 248,
          "content": "result.blockLength = pattern.length;<br/><br/>        return result;"
        },
        {
          "total_lines": 3,
          "line_start": 267,
          "line_end": 269,
          "content": "ResultLob result = new ResultLob();<br/><br/>        result.lobID       = lobID;"
        },
        {
          "total_lines": 2,
          "line_start": 404,
          "line_end": 405,
          "content": "result.blockOffset = dataInput.readLong();<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 543,
          "line_end": 544,
          "content": "dataOut.writeLong(blockOffset);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 530,
          "line_end": 531,
          "content": "dataOut.writeLong(blockLength);<br/>                dataOut.writeChars(charBlock);"
        },
        {
          "total_lines": 2,
          "line_start": 513,
          "line_end": 514,
          "content": "dataOut.writeLong(blockOffset);<br/>                dataOut.writeLong(blockLength);"
        },
        {
          "total_lines": 2,
          "line_start": 456,
          "line_end": 457,
          "content": "SessionInterface session,<br/>                          DataOutputStream dataOut"
        },
        {
          "total_lines": 2,
          "line_start": 412,
          "line_end": 413,
          "content": "dataInput.readFully(result.byteBlock);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 217,
          "line_end": 218,
          "content": "result.lobID       = id;<br/>        result.blockOffset = offset;"
        },
        {
          "total_lines": 2,
          "line_start": 514,
          "line_end": 515,
          "content": "dataOut.writeLong(blockLength);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 153,
          "line_end": 154,
          "content": "result.lobID       = id;<br/>        result.blockOffset = offset;"
        },
        {
          "total_lines": 2,
          "line_start": 519,
          "line_end": 520,
          "content": "dataOut.writeLong(blockOffset);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 429,
          "line_end": 430,
          "content": "result.blockLength = dataInput.readLong();<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 139,
          "line_end": 140,
          "content": "result.lobID       = id;<br/>        result.blockOffset = offset;"
        },
        {
          "total_lines": 2,
          "line_start": 40,
          "line_end": 41,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 178,
          "line_end": 179,
          "content": "result.lobID       = id;<br/>        result.blockOffset = offset;"
        },
        {
          "total_lines": 2,
          "line_start": 551,
          "line_end": 552,
          "content": "SessionInterface session,<br/>                             DataOutputStream dataOut"
        },
        {
          "total_lines": 2,
          "line_start": 630,
          "line_end": 631,
          "content": "SessionInterface session,<br/>                                         DataOutputStream dataOut"
        },
        {
          "total_lines": 2,
          "line_start": 243,
          "line_end": 244,
          "content": "result.lobID       = id;<br/>        result.blockOffset = offset;"
        },
        {
          "total_lines": 2,
          "line_start": 538,
          "line_end": 539,
          "content": "dataOut.writeLong(blockLength);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 388,
          "line_end": 389,
          "content": "dataInput.readFully(result.byteBlock);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 448,
          "line_end": 449,
          "content": "SessionInterface session, DataOutputStream dataOut,<br/>                      RowOutputInterface rowOut"
        },
        {
          "total_lines": 2,
          "line_start": 113,
          "line_end": 114,
          "content": "result.lobID       = id;<br/>        result.blockOffset = offset;"
        },
        {
          "total_lines": 2,
          "line_start": 192,
          "line_end": 193,
          "content": "result.lobID       = id;<br/>        result.blockOffset = offset;"
        },
        {
          "total_lines": 2,
          "line_start": 126,
          "line_end": 127,
          "content": "result.lobID       = id;<br/>        result.blockOffset = offset;"
        },
        {
          "total_lines": 2,
          "line_start": 434,
          "line_end": 435,
          "content": "result.blockOffset = dataInput.readLong();<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 574,
          "line_end": 575,
          "content": "SessionInterface session,<br/>                                         DataOutputStream dataOut"
        },
        {
          "total_lines": 2,
          "line_start": 503,
          "line_end": 504,
          "content": "dataOut.writeLong(blockLength);<br/>                dataOut.writeChars(charBlock);"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.io.IOException;<br/>import java.io.InputStream;"
        },
        {
          "total_lines": 1,
          "line_start": 678,
          "line_end": 678,
          "content": "0, byteArrayOS.size()"
        },
        {
          "total_lines": 1,
          "line_start": 653,
          "line_end": 653,
          "content": "0, byteArrayOS.size()"
        },
        {
          "total_lines": 1,
          "line_start": 595,
          "line_end": 595,
          "content": "0, byteArrayOS.size()"
        },
        {
          "total_lines": 1,
          "line_start": 620,
          "line_end": 620,
          "content": "0, byteArrayOS.size()"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/BlockObjectStore.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 99,
          "line_end": 99,
          "content": "CachedObject object, boolean tx"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ParserBase.java",
      "loc_duplicate": 21,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 36,
          "line_end": 38,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.lib.ArrayUtil;"
        },
        {
          "total_lines": 2,
          "line_start": 703,
          "line_end": 704,
          "content": "Tokens.SQL_INTERVAL_FIELD_CODES,<br/>                                      endToken"
        },
        {
          "total_lines": 2,
          "line_start": 834,
          "line_end": 835,
          "content": "tokenS,<br/>                                scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 202,
          "line_end": 203,
          "content": "startPosition,<br/>                                     scanner.getTokenPosition()"
        },
        {
          "total_lines": 2,
          "line_start": 45,
          "line_end": 46,
          "content": "import org.hsqldb.types.Type;<br/>import org.hsqldb.types.Types;"
        },
        {
          "total_lines": 2,
          "line_start": 761,
          "line_end": 762,
          "content": "tokenS,<br/>                                scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 816,
          "line_end": 817,
          "content": "tokenS,<br/>                                scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 798,
          "line_end": 799,
          "content": "null,<br/>                                    scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 169,
          "line_end": 170,
          "content": "startPosition,<br/>                                     scanner.getTokenPosition()"
        },
        {
          "total_lines": 2,
          "line_start": 701,
          "line_end": 702,
          "content": "Tokens.SQL_INTERVAL_FIELD_CODES,<br/>                                        startToken"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/FrameworkLogger.java",
      "loc_duplicate": 13,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 539,
          "line_end": 539,
          "content": "message, t, 2, FrameworkLogger.class"
        },
        {
          "total_lines": 1,
          "line_start": 476,
          "line_end": 476,
          "content": "2, FrameworkLogger.class"
        },
        {
          "total_lines": 1,
          "line_start": 579,
          "line_end": 579,
          "content": "message, t, 2, FrameworkLogger.class"
        },
        {
          "total_lines": 1,
          "line_start": 519,
          "line_end": 519,
          "content": "Level.WARNING, message, null"
        },
        {
          "total_lines": 1,
          "line_start": 492,
          "line_end": 492,
          "content": "message, null"
        },
        {
          "total_lines": 1,
          "line_start": 569,
          "line_end": 569,
          "content": "message, t, 2, FrameworkLogger.class"
        },
        {
          "total_lines": 1,
          "line_start": 424,
          "line_end": 424,
          "content": "\"Logging failed when attempting to log: \" + message, e"
        },
        {
          "total_lines": 1,
          "line_start": 484,
          "line_end": 484,
          "content": "Level.WARNING, message, null"
        },
        {
          "total_lines": 1,
          "line_start": 559,
          "line_end": 559,
          "content": "2, FrameworkLogger.class"
        },
        {
          "total_lines": 1,
          "line_start": 508,
          "line_end": 508,
          "content": "message, null"
        },
        {
          "total_lines": 1,
          "line_start": 454,
          "line_end": 454,
          "content": "\"Logging failed when attempting to log: \" + message, e"
        },
        {
          "total_lines": 1,
          "line_start": 549,
          "line_end": 549,
          "content": "message, t, 2, FrameworkLogger.class"
        },
        {
          "total_lines": 1,
          "line_start": 529,
          "line_end": 529,
          "content": "2, FrameworkLogger.class"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/Routine.java",
      "loc_duplicate": 31,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 1229,
          "line_end": 1232,
          "content": "ErrorCode.X_42501,<br/>                                  ErrorCode.M_Message_Pair, new Object[] {<br/>                    t.toString(), className<br/>                }"
        },
        {
          "total_lines": 4,
          "line_start": 1239,
          "line_end": 1242,
          "content": "ErrorCode.X_42501, ErrorCode.M_Message_Pair,<br/>                              new Object[] {<br/>                t.toString(), className<br/>            }"
        },
        {
          "total_lines": 3,
          "line_start": 682,
          "line_end": 684,
          "content": "ErrorCode.X_42608,<br/>                                          Tokens.T_MODIFIES + ' '<br/>                                          + Tokens.T_SQL"
        },
        {
          "total_lines": 2,
          "line_start": 696,
          "line_end": 697,
          "content": "ErrorCode.X_42608,<br/>                                      Tokens.T_MODIFIES + ' ' + Tokens.T_SQL"
        },
        {
          "total_lines": 2,
          "line_start": 1229,
          "line_end": 1230,
          "content": "t, ErrorCode.X_42501,<br/>                                  ErrorCode.M_Message_Pair"
        },
        {
          "total_lines": 2,
          "line_start": 1401,
          "line_end": 1402,
          "content": "HsqlName schema,<br/>                                      String name"
        },
        {
          "total_lines": 2,
          "line_start": 676,
          "line_end": 677,
          "content": "ErrorCode.X_42608,<br/>                                          Tokens.T_READS + ' ' + Tokens.T_SQL"
        },
        {
          "total_lines": 2,
          "line_start": 352,
          "line_end": 353,
          "content": "sb.append(Tokens.T_EXTERNAL).append(' ').append(Tokens.T_NAME);<br/>            sb.append(' ').append('\\'').append(methodName).append('\\'');"
        },
        {
          "total_lines": 2,
          "line_start": 332,
          "line_end": 333,
          "content": "sb.append(Tokens.T_EXTERNAL).append(' ').append(Tokens.T_NAME);<br/>            sb.append(' ').append('\\'').append(methodName).append('\\'');"
        },
        {
          "total_lines": 2,
          "line_start": 707,
          "line_end": 708,
          "content": "ErrorCode.X_42608,<br/>                                      Tokens.T_READS + ' ' + Tokens.T_SQL"
        },
        {
          "total_lines": 1,
          "line_start": 972,
          "line_end": 972,
          "content": "Error.error(e, ErrorCode.X_46000, getName().name), null"
        },
        {
          "total_lines": 1,
          "line_start": 134,
          "line_end": 134,
          "content": "null, false"
        },
        {
          "total_lines": 1,
          "line_start": 969,
          "line_end": 969,
          "content": "Error.error(e, ErrorCode.X_46000, getName().name), null"
        },
        {
          "total_lines": 1,
          "line_start": 1239,
          "line_end": 1239,
          "content": "t, ErrorCode.X_42501, ErrorCode.M_Message_Pair"
        },
        {
          "total_lines": 1,
          "line_start": 183,
          "line_end": 183,
          "content": "Session session, SchemaObject parentObject"
        },
        {
          "total_lines": 1,
          "line_start": 966,
          "line_end": 966,
          "content": "Error.error(e, ErrorCode.X_46000, getName().name), null"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/HashMap.java",
      "loc_duplicate": 41,
      "clones": [
          {
          "total_lines": 8,
          "line_start": 98,
          "line_end": 105,
          "content": "Iterator it = values().iterator();<br/>        int      i  = 0;<br/><br/>        while (it.hasNext()) {<br/>            array[i] = it.next();<br/><br/>            i++;<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 99,
          "line_end": 105,
          "content": "int      i  = 0;<br/><br/>        while (it.hasNext()) {<br/>            array[i] = it.next();<br/><br/>            i++;<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 87,
          "line_end": 93,
          "content": "Iterator it = t.keySet().iterator();<br/><br/>        while (it.hasNext()) {<br/>            Object key = it.next();<br/><br/>            put(key, t.get(key));<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 111,
          "line_end": 117,
          "content": "int      i  = 0;<br/><br/>        while (it.hasNext()) {<br/>            array[i] = it.next();<br/><br/>            i++;<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 122,
          "line_end": 126,
          "content": "if (keySet == null) {<br/>            keySet = new KeySet();<br/>        }<br/><br/>        return keySet;"
        },
        {
          "total_lines": 5,
          "line_start": 131,
          "line_end": 135,
          "content": "if (values == null) {<br/>            values = new Values();<br/>        }<br/><br/>        return values;"
        },
        {
          "total_lines": 2,
          "line_start": 53,
          "line_end": 54,
          "content": "initialCapacity, BaseHashMap.objectKeyOrValue,<br/>              BaseHashMap.objectKeyOrValue"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestOdbcService.java",
      "loc_duplicate": 797,
      "clones": [
          {
          "total_lines": 34,
          "line_start": 288,
          "line_end": 321,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));<br/>            assertEquals(\"forty\", rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertFalse(\"Too many rows fetched\", rs.next());<br/>            rs.close();"
        },
        {
          "total_lines": 34,
          "line_start": 253,
          "line_end": 286,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));<br/>            assertEquals(\"forty\", rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertFalse(\"Too many rows fetched\", rs.next());<br/>            rs.close();"
        },
        {
          "total_lines": 28,
          "line_start": 290,
          "line_end": 317,
          "content": "assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));<br/>            assertEquals(\"forty\", rs.getString(3));"
        },
        {
          "total_lines": 28,
          "line_start": 255,
          "line_end": 282,
          "content": "assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));<br/>            assertEquals(\"forty\", rs.getString(3));"
        },
        {
          "total_lines": 25,
          "line_start": 297,
          "line_end": 321,
          "content": "assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));<br/>            assertEquals(\"forty\", rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertFalse(\"Too many rows fetched\", rs.next());<br/>            rs.close();"
        },
        {
          "total_lines": 25,
          "line_start": 262,
          "line_end": 286,
          "content": "assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));<br/>            assertEquals(\"forty\", rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertFalse(\"Too many rows fetched\", rs.next());<br/>            rs.close();"
        },
        {
          "total_lines": 24,
          "line_start": 293,
          "line_end": 316,
          "content": "assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));"
        },
        {
          "total_lines": 24,
          "line_start": 258,
          "line_end": 281,
          "content": "assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));"
        },
        {
          "total_lines": 23,
          "line_start": 259,
          "line_end": 281,
          "content": "assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));"
        },
        {
          "total_lines": 23,
          "line_start": 294,
          "line_end": 316,
          "content": "assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));"
        },
        {
          "total_lines": 22,
          "line_start": 294,
          "line_end": 315,
          "content": "assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));"
        },
        {
          "total_lines": 22,
          "line_start": 293,
          "line_end": 314,
          "content": "assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());"
        },
        {
          "total_lines": 22,
          "line_start": 258,
          "line_end": 279,
          "content": "assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());"
        },
        {
          "total_lines": 22,
          "line_start": 259,
          "line_end": 280,
          "content": "assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));"
        },
        {
          "total_lines": 19,
          "line_start": 292,
          "line_end": 310,
          "content": "assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));"
        },
        {
          "total_lines": 19,
          "line_start": 298,
          "line_end": 316,
          "content": "assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));"
        },
        {
          "total_lines": 19,
          "line_start": 257,
          "line_end": 275,
          "content": "assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));"
        },
        {
          "total_lines": 19,
          "line_start": 263,
          "line_end": 281,
          "content": "assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));"
        },
        {
          "total_lines": 18,
          "line_start": 269,
          "line_end": 286,
          "content": "assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));<br/>            assertEquals(\"forty\", rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertFalse(\"Too many rows fetched\", rs.next());<br/>            rs.close();"
        },
        {
          "total_lines": 18,
          "line_start": 294,
          "line_end": 311,
          "content": "assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));"
        },
        {
          "total_lines": 18,
          "line_start": 257,
          "line_end": 274,
          "content": "assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));"
        },
        {
          "total_lines": 18,
          "line_start": 292,
          "line_end": 309,
          "content": "assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));"
        },
        {
          "total_lines": 18,
          "line_start": 259,
          "line_end": 276,
          "content": "assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));"
        },
        {
          "total_lines": 18,
          "line_start": 304,
          "line_end": 321,
          "content": "assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));<br/>            assertEquals(\"forty\", rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertFalse(\"Too many rows fetched\", rs.next());<br/>            rs.close();"
        },
        {
          "total_lines": 17,
          "line_start": 253,
          "line_end": 269,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));"
        },
        {
          "total_lines": 17,
          "line_start": 267,
          "line_end": 283,
          "content": "assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));<br/>            assertEquals(\"forty\", rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));"
        },
        {
          "total_lines": 17,
          "line_start": 302,
          "line_end": 318,
          "content": "assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));<br/>            assertEquals(\"forty\", rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));"
        },
        {
          "total_lines": 17,
          "line_start": 288,
          "line_end": 304,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"ten\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));"
        },
        {
          "total_lines": 16,
          "line_start": 303,
          "line_end": 318,
          "content": "assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));<br/>            assertEquals(\"forty\", rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));"
        },
        {
          "total_lines": 16,
          "line_start": 268,
          "line_end": 283,
          "content": "assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(15, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"fifteen\", rs.getString(3));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(25, rs.getInt(1));<br/>            assertNull(rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));<br/><br/>            assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(40, rs.getInt(1));<br/>            assertEquals(\"forty\", rs.getString(3));<br/>            assertEquals(\"str\", rs.getString(4));"
        },
        {
          "total_lines": 9,
          "line_start": 253,
          "line_end": 261,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());"
        },
        {
          "total_lines": 9,
          "line_start": 288,
          "line_end": 296,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());"
        },
        {
          "total_lines": 7,
          "line_start": 113,
          "line_end": 119,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));"
        },
        {
          "total_lines": 7,
          "line_start": 94,
          "line_end": 100,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));"
        },
        {
          "total_lines": 6,
          "line_start": 293,
          "line_end": 298,
          "content": "assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));"
        },
        {
          "total_lines": 6,
          "line_start": 94,
          "line_end": 99,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));"
        },
        {
          "total_lines": 6,
          "line_start": 113,
          "line_end": 118,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));"
        },
        {
          "total_lines": 6,
          "line_start": 258,
          "line_end": 263,
          "content": "assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(10, rs.getInt(1));"
        },
        {
          "total_lines": 5,
          "line_start": 96,
          "line_end": 100,
          "content": "assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));"
        },
        {
          "total_lines": 5,
          "line_start": 290,
          "line_end": 294,
          "content": "assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));"
        },
        {
          "total_lines": 5,
          "line_start": 115,
          "line_end": 119,
          "content": "assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));"
        },
        {
          "total_lines": 5,
          "line_start": 94,
          "line_end": 98,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));"
        },
        {
          "total_lines": 5,
          "line_start": 255,
          "line_end": 259,
          "content": "assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));<br/>            assertEquals(3, rs.getInt(2));<br/>            assertEquals(\"five\", rs.getString(3));"
        },
        {
          "total_lines": 5,
          "line_start": 113,
          "line_end": 117,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));<br/>            assertEquals(5, rs.getInt(1));"
        },
        {
          "total_lines": 4,
          "line_start": 240,
          "line_end": 243,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 138,
          "line_end": 141,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 113,
          "line_end": 116,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));"
        },
        {
          "total_lines": 4,
          "line_start": 94,
          "line_end": 97,
          "content": "rs = ps.executeQuery();<br/><br/>            assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));"
        },
        {
          "total_lines": 4,
          "line_start": 325,
          "line_end": 328,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 149,
          "line_end": 152,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 344,
          "line_end": 347,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 3,
          "line_start": 240,
          "line_end": 242,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 149,
          "line_end": 151,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 138,
          "line_end": 140,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 344,
          "line_end": 346,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 325,
          "line_end": 327,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 2,
          "line_start": 121,
          "line_end": 122,
          "content": "assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));"
        },
        {
          "total_lines": 2,
          "line_start": 207,
          "line_end": 208,
          "content": "assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"second\", rs.getString(4));"
        },
        {
          "total_lines": 2,
          "line_start": 133,
          "line_end": 134,
          "content": "assertFalse(\"Too many rows fetched\", rs.next());<br/>            rs.close();"
        },
        {
          "total_lines": 2,
          "line_start": 219,
          "line_end": 220,
          "content": "assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));"
        },
        {
          "total_lines": 2,
          "line_start": 242,
          "line_end": 243,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 346,
          "line_end": 347,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 231,
          "line_end": 232,
          "content": "assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));"
        },
        {
          "total_lines": 2,
          "line_start": 225,
          "line_end": 226,
          "content": "assertTrue(\"Not enough rows fetched\", rs.next());<br/>            assertEquals(3, rs.getInt(2));"
        },
        {
          "total_lines": 2,
          "line_start": 140,
          "line_end": 141,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 108,
          "line_end": 109,
          "content": "assertFalse(\"Too many rows fetched\", rs.next());<br/>            rs.close();"
        },
        {
          "total_lines": 2,
          "line_start": 327,
          "line_end": 328,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 151,
          "line_end": 152,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 201,
          "line_end": 202,
          "content": "assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"second\", rs.getString(4));"
        },
        {
          "total_lines": 2,
          "line_start": 127,
          "line_end": 128,
          "content": "assertTrue(\"No rows fetched\", rs.next());<br/>            assertEquals(\"str\", rs.getString(4));"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ParserDML.java",
      "loc_duplicate": 131,
      "clones": [
          {
          "total_lines": 11,
          "line_start": 1157,
          "line_end": 1167,
          "content": "Expression e = XreadValueExpression();<br/><br/>                        list.add(e);<br/><br/>                        if (token.tokenType == Tokens.COMMA) {<br/>                            read();<br/>                        } else {<br/>                            readThis(Tokens.CLOSEBRACKET);<br/><br/>                            break;<br/>                        }"
        },
        {
          "total_lines": 9,
          "line_start": 1159,
          "line_end": 1167,
          "content": "list.add(e);<br/><br/>                        if (token.tokenType == Tokens.COMMA) {<br/>                            read();<br/>                        } else {<br/>                            readThis(Tokens.CLOSEBRACKET);<br/><br/>                            break;<br/>                        }"
        },
        {
          "total_lines": 9,
          "line_start": 616,
          "line_end": 624,
          "content": "rangeVariables[0].addJoinCondition(condition);<br/><br/>            RangeVariableResolver resolver =<br/>                new RangeVariableResolver(rangeVariables, null,<br/>                                          compileContext, false);<br/><br/>            resolver.processConditions(session);<br/><br/>            rangeVariables = resolver.rangeVariables;"
        },
        {
          "total_lines": 9,
          "line_start": 497,
          "line_end": 505,
          "content": "rangeVariables[0].addJoinCondition(condition);<br/><br/>            RangeVariableResolver resolver =<br/>                new RangeVariableResolver(rangeVariables, null,<br/>                                          compileContext, false);<br/><br/>            resolver.processConditions(session);<br/><br/>            rangeVariables = resolver.rangeVariables;"
        },
        {
          "total_lines": 7,
          "line_start": 618,
          "line_end": 624,
          "content": "RangeVariableResolver resolver =<br/>                new RangeVariableResolver(rangeVariables, null,<br/>                                          compileContext, false);<br/><br/>            resolver.processConditions(session);<br/><br/>            rangeVariables = resolver.rangeVariables;"
        },
        {
          "total_lines": 7,
          "line_start": 207,
          "line_end": 213,
          "content": "int[] baseColumnMap = table.getBaseTableColumnMap();<br/>                    int[] newColumnMap  = new int[columnMap.length];<br/><br/>                    ArrayUtil.projectRow(baseColumnMap, columnMap,<br/>                                         newColumnMap);<br/><br/>                    columnMap = newColumnMap;"
        },
        {
          "total_lines": 7,
          "line_start": 616,
          "line_end": 622,
          "content": "rangeVariables[0].addJoinCondition(condition);<br/><br/>            RangeVariableResolver resolver =<br/>                new RangeVariableResolver(rangeVariables, null,<br/>                                          compileContext, false);<br/><br/>            resolver.processConditions(session);"
        },
        {
          "total_lines": 7,
          "line_start": 497,
          "line_end": 503,
          "content": "rangeVariables[0].addJoinCondition(condition);<br/><br/>            RangeVariableResolver resolver =<br/>                new RangeVariableResolver(rangeVariables, null,<br/>                                          compileContext, false);<br/><br/>            resolver.processConditions(session);"
        },
        {
          "total_lines": 7,
          "line_start": 499,
          "line_end": 505,
          "content": "RangeVariableResolver resolver =<br/>                new RangeVariableResolver(rangeVariables, null,<br/>                                          compileContext, false);<br/><br/>            resolver.processConditions(session);<br/><br/>            rangeVariables = resolver.rangeVariables;"
        },
        {
          "total_lines": 6,
          "line_start": 208,
          "line_end": 213,
          "content": "int[] newColumnMap  = new int[columnMap.length];<br/><br/>                    ArrayUtil.projectRow(baseColumnMap, columnMap,<br/>                                         newColumnMap);<br/><br/>                    columnMap = newColumnMap;"
        },
        {
          "total_lines": 6,
          "line_start": 284,
          "line_end": 289,
          "content": "int[] baseColumnMap = table.getBaseTableColumnMap();<br/>            int[] newColumnMap  = new int[columnMap.length];<br/><br/>            ArrayUtil.projectRow(baseColumnMap, columnMap, newColumnMap);<br/><br/>            columnMap = newColumnMap;"
        },
        {
          "total_lines": 5,
          "line_start": 285,
          "line_end": 289,
          "content": "int[] newColumnMap  = new int[columnMap.length];<br/><br/>            ArrayUtil.projectRow(baseColumnMap, columnMap, newColumnMap);<br/><br/>            columnMap = newColumnMap;"
        },
        {
          "total_lines": 5,
          "line_start": 616,
          "line_end": 620,
          "content": "rangeVariables[0].addJoinCondition(condition);<br/><br/>            RangeVariableResolver resolver =<br/>                new RangeVariableResolver(rangeVariables, null,<br/>                                          compileContext, false);"
        },
        {
          "total_lines": 5,
          "line_start": 497,
          "line_end": 501,
          "content": "rangeVariables[0].addJoinCondition(condition);<br/><br/>            RangeVariableResolver resolver =<br/>                new RangeVariableResolver(rangeVariables, null,<br/>                                          compileContext, false);"
        },
        {
          "total_lines": 4,
          "line_start": 210,
          "line_end": 213,
          "content": "ArrayUtil.projectRow(baseColumnMap, columnMap,<br/>                                         newColumnMap);<br/><br/>                    columnMap = newColumnMap;"
        },
        {
          "total_lines": 3,
          "line_start": 287,
          "line_end": 289,
          "content": "ArrayUtil.projectRow(baseColumnMap, columnMap, newColumnMap);<br/><br/>            columnMap = newColumnMap;"
        },
        {
          "total_lines": 3,
          "line_start": 852,
          "line_end": 854,
          "content": "ColumnSchema col = target.getColumn();<br/><br/>                throw Error.error(ErrorCode.X_42579, col.getName().name);"
        },
        {
          "total_lines": 3,
          "line_start": 774,
          "line_end": 776,
          "content": "ColumnSchema col = target.getColumn();<br/><br/>                    throw Error.error(ErrorCode.X_42579, col.getName().name);"
        },
        {
          "total_lines": 2,
          "line_start": 599,
          "line_end": 600,
          "content": "rangeVariables[0],<br/>                                                      baseSelect.exprColumns"
        },
        {
          "total_lines": 2,
          "line_start": 844,
          "line_end": 845,
          "content": "RangeVariable[] rangeVars, OrderedHashSet targets,<br/>                           LongDeque colIndexList, HsqlArrayList expressions"
        },
        {
          "total_lines": 2,
          "line_start": 1231,
          "line_end": 1232,
          "content": "session,<br/>            RangeGroup.emptyGroup, rangeGroups"
        },
        {
          "total_lines": 2,
          "line_start": 199,
          "line_end": 200,
          "content": "session,<br/>                        RangeGroup.emptyGroup, rangeGroups"
        },
        {
          "total_lines": 2,
          "line_start": 207,
          "line_end": 208,
          "content": "int[] baseColumnMap = table.getBaseTableColumnMap();<br/>                    int[] newColumnMap  = new int[columnMap.length];"
        },
        {
          "total_lines": 2,
          "line_start": 486,
          "line_end": 487,
          "content": "rangeVariables[0],<br/>                                                      baseSelect.exprColumns"
        },
        {
          "total_lines": 2,
          "line_start": 284,
          "line_end": 285,
          "content": "int[] baseColumnMap = table.getBaseTableColumnMap();<br/>            int[] newColumnMap  = new int[columnMap.length];"
        },
        {
          "total_lines": 2,
          "line_start": 753,
          "line_end": 754,
          "content": "RangeVariable[] rangeVars, OrderedHashSet targets,<br/>                           LongDeque colIndexList, HsqlArrayList expressions"
        },
        {
          "total_lines": 1,
          "line_start": 606,
          "line_end": 606,
          "content": "rangeVariables[0], baseSelect.exprColumns"
        },
        {
          "total_lines": 1,
          "line_start": 1247,
          "line_end": 1247,
          "content": "null, false"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/LineGroupReader.java",
      "loc_duplicate": 10,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 91,
          "line_end": 95,
          "content": "this.reader               = reader;<br/><br/>        try {<br/>            getSection();<br/>        } catch (Exception e) {}"
        },
        {
          "total_lines": 5,
          "line_start": 76,
          "line_end": 80,
          "content": "this.reader               = reader;<br/><br/>        try {<br/>            getSection();<br/>        } catch (Exception e) {}"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCArrayBasic.java",
      "loc_duplicate": 17,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 542,
          "line_end": 547,
          "content": "Object[] rowData = new Object[2];<br/><br/>            rowData[0] = Integer.valueOf(i + 1);<br/>            rowData[1] = data[i];<br/><br/>            navigator.add(rowData);"
        },
        {
          "total_lines": 5,
          "line_start": 466,
          "line_end": 470,
          "content": "if (arrayType == null) {<br/>            arrayType = Type.getDefaultArrayType(elementType.typeCode);<br/>        }<br/><br/>        return arrayType.convertToString(data);"
        },
        {
          "total_lines": 3,
          "line_start": 128,
          "line_end": 130,
          "content": "checkClosed();<br/><br/>        return elementType.getJDBCTypeCode();"
        },
        {
          "total_lines": 3,
          "line_start": 108,
          "line_end": 110,
          "content": "checkClosed();<br/><br/>        return elementType.getNameString();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/server/OdbcPreparedStatement.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 74,
          "line_end": 74,
          "content": "0, 0, 0"
        },
        {
          "total_lines": 1,
          "line_start": 74,
          "line_end": 74,
          "content": "0, 0, 0"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/Type.java",
      "loc_duplicate": 26,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 508,
          "line_end": 509,
          "content": "Session session, Type other,<br/>                                         int operation"
        },
        {
          "total_lines": 2,
          "line_start": 669,
          "line_end": 670,
          "content": "NumberType.defaultNumericPrecision,<br/>                       0"
        },
        {
          "total_lines": 2,
          "line_start": 308,
          "line_end": 309,
          "content": "SessionInterface session, Object a,<br/>                                    Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 260,
          "line_end": 261,
          "content": "Object a, Object b,<br/>                       SortAndSlice sort"
        },
        {
          "total_lines": 2,
          "line_start": 530,
          "line_end": 531,
          "content": "Session session, Object a, Object b,<br/>                           Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 301,
          "line_end": 302,
          "content": "SessionInterface session, Object a,<br/>                                         Type type"
        },
        {
          "total_lines": 2,
          "line_start": 672,
          "line_end": 673,
          "content": "NumberType.defaultNumericPrecision,<br/>                       0"
        },
        {
          "total_lines": 1,
          "line_start": 738,
          "line_end": 738,
          "content": "DTIType.defaultIntervalPrecision, 0"
        },
        {
          "total_lines": 1,
          "line_start": 143,
          "line_end": 143,
          "content": "Session session, SchemaObject parentObject"
        },
        {
          "total_lines": 1,
          "line_start": 292,
          "line_end": 292,
          "content": "SessionInterface session, Object a, Type type"
        },
        {
          "total_lines": 1,
          "line_start": 710,
          "line_end": 710,
          "content": "Types.SQL_TIMESTAMP, Types.SQL_TIMESTAMP"
        },
        {
          "total_lines": 1,
          "line_start": 715,
          "line_end": 715,
          "content": "DTIType.defaultIntervalPrecision, 0"
        },
        {
          "total_lines": 1,
          "line_start": 764,
          "line_end": 764,
          "content": "DTIType.maxIntervalPrecision, 0"
        },
        {
          "total_lines": 1,
          "line_start": 251,
          "line_end": 251,
          "content": "Object a, Object b, int opType"
        },
        {
          "total_lines": 1,
          "line_start": 724,
          "line_end": 724,
          "content": "DTIType.defaultIntervalPrecision, 0"
        },
        {
          "total_lines": 1,
          "line_start": 773,
          "line_end": 773,
          "content": "DTIType.maxIntervalPrecision, 0"
        },
        {
          "total_lines": 1,
          "line_start": 526,
          "line_end": 526,
          "content": "Session session, Object a, Object b, Type otherType"
        },
        {
          "total_lines": 1,
          "line_start": 744,
          "line_end": 744,
          "content": "DTIType.defaultIntervalPrecision, 0"
        },
        {
          "total_lines": 1,
          "line_start": 330,
          "line_end": 330,
          "content": "SessionInterface sessionInterface, Object o"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/ClosableCharArrayWriter.java",
      "loc_duplicate": 51,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 375,
          "line_end": 381,
          "content": "try {<br/>            checkFreed();<br/>        } catch (IOException ex) {<br/>            throw new RuntimeException(ex.toString());<br/>        }<br/><br/>        return new String(buf, 0, count);"
        },
        {
          "total_lines": 7,
          "line_start": 129,
          "line_end": 135,
          "content": "checkClosed();<br/><br/>        int newcount = count + 1;<br/><br/>        if (newcount > buf.length) {<br/>            buf = copyOf(buf, Math.max(buf.length << 1, newcount));<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 331,
          "line_end": 337,
          "content": "if (newSize < 0) {<br/>            throw new ArrayIndexOutOfBoundsException(newSize);<br/>        } else if (newSize > buf.length) {<br/>            buf = copyOf(buf, Math.max(buf.length << 1, newSize));<br/>        }<br/><br/>        count = newSize;"
        },
        {
          "total_lines": 5,
          "line_start": 286,
          "line_end": 290,
          "content": "checkFreed();<br/><br/>        if (buf.length > count) {<br/>            buf = copyOf(buf, count);<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 163,
          "line_end": 167,
          "content": "int newcount = count + len;<br/><br/>        if (newcount > buf.length) {<br/>            buf = copyOf(buf, Math.max(buf.length << 1, newcount));<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 131,
          "line_end": 135,
          "content": "int newcount = count + 1;<br/><br/>        if (newcount > buf.length) {<br/>            buf = copyOf(buf, Math.max(buf.length << 1, newcount));<br/>        }"
        },
        {
          "total_lines": 4,
          "line_start": 457,
          "line_end": 460,
          "content": "System.arraycopy(original, 0, copy, 0,<br/>                         Math.min(original.length, newLength));<br/><br/>        return copy;"
        },
        {
          "total_lines": 4,
          "line_start": 412,
          "line_end": 415,
          "content": "closed = true;<br/>        freed  = true;<br/>        buf    = null;<br/>        count  = 0;"
        },
        {
          "total_lines": 3,
          "line_start": 413,
          "line_end": 415,
          "content": "freed  = true;<br/>        buf    = null;<br/>        count  = 0;"
        },
        {
          "total_lines": 3,
          "line_start": 129,
          "line_end": 131,
          "content": "checkClosed();<br/><br/>        int newcount = count + 1;"
        },
        {
          "total_lines": 1,
          "line_start": 204,
          "line_end": 204,
          "content": "buf, Math.max(buf.length << 1, newcount)"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCStatementBase.java",
      "loc_duplicate": 7,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 182,
          "line_end": 188,
          "content": "SQLWarning w = JDBCUtil.sqlWarning(current);<br/><br/>                if (rootWarning == null) {<br/>                    rootWarning = w;<br/>                } else {<br/>                    rootWarning.setNextWarning(w);<br/>                }"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ClientConnectionHTTP.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 60,
          "line_end": 63,
          "content": "String path,<br/>                                String database, boolean isTLS,<br/>                                boolean isTLSWrapper, String user,<br/>                                String password"
        },
        {
          "total_lines": 3,
          "line_start": 61,
          "line_end": 63,
          "content": "String database, boolean isTLS,<br/>                                boolean isTLSWrapper, String user,<br/>                                String password"
        },
        {
          "total_lines": 3,
          "line_start": 60,
          "line_end": 62,
          "content": "int port, String path,<br/>                                String database, boolean isTLS,<br/>                                boolean isTLSWrapper, String user"
        },
        {
          "total_lines": 2,
          "line_start": 61,
          "line_end": 62,
          "content": "boolean isTLS,<br/>                                boolean isTLSWrapper, String user"
        },
        {
          "total_lines": 2,
          "line_start": 60,
          "line_end": 61,
          "content": "String host, int port, String path,<br/>                                String database"
        }
        
      ]
    },
    {
      "path": "hsqldb/integration/hibernate_3_3_1/src/org/hibernate/dialect/HSQLDialect.java",
      "loc_duplicate": 144,
      "clones": [
          {
          "total_lines": 26,
          "line_start": 302,
          "line_end": 327,
          "content": "String constraintName = null;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( errorCode == -8 ) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraintName = extractUsingTemplate(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Integrity constraint violation \", \" table:\", sqle.getMessage()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if ( errorCode == -9 ) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraintName = extractUsingTemplate(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Violation of unique index: \", \" in statement [\", sqle.getMessage()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if ( errorCode == -104 ) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraintName = extractUsingTemplate(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Unique constraint violation: \", \" in statement [\", sqle.getMessage()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if ( errorCode == -177 ) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraintName = extractUsingTemplate(<br/>                                                \"Integrity constraint violation - no parent \", \" table:\",<br/>                                                sqle.getMessage()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return constraintName;"
        },
        {
          "total_lines": 25,
          "line_start": 339,
          "line_end": 363,
          "content": "String constraintName = null;<br/><br/>                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );<br/><br/>                        if ( errorCode == -8 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -9 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -104 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -177 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        return constraintName;"
        },
        {
          "total_lines": 24,
          "line_start": 304,
          "line_end": 327,
          "content": "int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( errorCode == -8 ) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraintName = extractUsingTemplate(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Integrity constraint violation \", \" table:\", sqle.getMessage()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if ( errorCode == -9 ) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraintName = extractUsingTemplate(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Violation of unique index: \", \" in statement [\", sqle.getMessage()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if ( errorCode == -104 ) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraintName = extractUsingTemplate(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Unique constraint violation: \", \" in statement [\", sqle.getMessage()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if ( errorCode == -177 ) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraintName = extractUsingTemplate(<br/>                                                \"Integrity constraint violation - no parent \", \" table:\",<br/>                                                sqle.getMessage()<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return constraintName;"
        },
        {
          "total_lines": 23,
          "line_start": 341,
          "line_end": 363,
          "content": "int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );<br/><br/>                        if ( errorCode == -8 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -9 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -104 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -177 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        return constraintName;"
        },
        {
          "total_lines": 21,
          "line_start": 343,
          "line_end": 363,
          "content": "if ( errorCode == -8 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -9 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -104 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -177 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        return constraintName;"
        },
        {
          "total_lines": 5,
          "line_start": 76,
          "line_end": 80,
          "content": "Class props = ReflectHelper.classForName( \"org.hsqldb.persist.HsqlDatabaseProperties\" );<br/>                        String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );<br/><br/>                        hsqldbVersion = Integer.parseInt( versionString.substring( 0, 1 ) ) * 10;<br/>                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );"
        },
        {
          "total_lines": 4,
          "line_start": 77,
          "line_end": 80,
          "content": "String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );<br/><br/>                        hsqldbVersion = Integer.parseInt( versionString.substring( 0, 1 ) ) * 10;<br/>                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );"
        },
        {
          "total_lines": 2,
          "line_start": 79,
          "line_end": 80,
          "content": "hsqldbVersion = Integer.parseInt( versionString.substring( 0, 1 ) ) * 10;<br/>                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );"
        },
        {
          "total_lines": 2,
          "line_start": 119,
          "line_end": 120,
          "content": "registerColumnType( Types.BLOB, \"blob\" );<br/>                        registerColumnType( Types.CLOB, \"clob\" );"
        },
        {
          "total_lines": 2,
          "line_start": 235,
          "line_end": 236,
          "content": "sql.toLowerCase().indexOf( \"select\" ) + 6,<br/>                                                        hasOffset ? \" limit ? ?\" : \" top ?\""
        },
        {
          "total_lines": 2,
          "line_start": 76,
          "line_end": 77,
          "content": "Class props = ReflectHelper.classForName( \"org.hsqldb.persist.HsqlDatabaseProperties\" );<br/>                        String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );"
        },
        {
          "total_lines": 2,
          "line_start": 115,
          "line_end": 116,
          "content": "registerColumnType( Types.BLOB, \"longvarbinary\" );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registerColumnType( Types.CLOB, \"longvarchar\" );"
        },
        {
          "total_lines": 1,
          "line_start": 136,
          "line_end": 136,
          "content": "\"hextoraw\", new StandardSQLFunction( \"hextoraw\" )"
        },
        {
          "total_lines": 1,
          "line_start": 133,
          "line_end": 133,
          "content": "\"reverse\", new StandardSQLFunction( \"reverse\" )"
        },
        {
          "total_lines": 1,
          "line_start": 180,
          "line_end": 180,
          "content": "\"roundmagic\", new StandardSQLFunction( \"roundmagic\" )"
        },
        {
          "total_lines": 1,
          "line_start": 191,
          "line_end": 191,
          "content": "Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE"
        },
        {
          "total_lines": 1,
          "line_start": 135,
          "line_end": 135,
          "content": "\"rawtohex\", new StandardSQLFunction( \"rawtohex\" )"
        },
        {
          "total_lines": 1,
          "line_start": 182,
          "line_end": 182,
          "content": "\"ceiling\", new StandardSQLFunction( \"ceiling\" )"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/cmdline/SqlTool.java",
      "loc_duplicate": 36,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 458,
          "line_end": 459,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 481,
          "line_end": 482,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 341,
          "line_end": 342,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_abort_continue_mutuallyexclusive.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 379,
          "line_end": 380,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 417,
          "line_end": 418,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 348,
          "line_end": 349,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_abort_continue_mutuallyexclusive.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 449,
          "line_end": 450,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 429,
          "line_end": 430,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 442,
          "line_end": 443,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 465,
          "line_end": 466,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 423,
          "line_end": 424,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 474,
          "line_end": 475,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 372,
          "line_end": 373,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 85,
          "line_end": 86,
          "content": "\"$Revision: \".length(),<br/>                    revStringLength - \" $\".length()"
        },
        {
          "total_lines": 2,
          "line_start": 363,
          "line_end": 364,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 409,
          "line_end": 410,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 435,
          "line_end": 436,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_params_redundant.getString()"
        },
        {
          "total_lines": 2,
          "line_start": 355,
          "line_end": 356,
          "content": "SYNTAXERR_EXITVAL,<br/>                                SqltoolRB.SqlTool_abort_continue_mutuallyexclusive.getString()"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestHTTPKeepAlive.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 108,
          "line_end": 109,
          "content": "e.printStackTrace();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"TestSql.tearDown() error: \" + e.getMessage());"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/OrderedHashSet.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 108,
          "line_end": 110,
          "content": "checkRange(index);<br/><br/>        return objectKeyTable[index];"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/RoutineSchema.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 106,
          "line_end": 106,
          "content": "Session session, SchemaObject parentObject"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ParserRoutine.java",
      "loc_duplicate": 233,
      "clones": [
          {
          "total_lines": 10,
          "line_start": 2120,
          "line_end": 2129,
          "content": "readThis(Tokens.MESSAGE_TEXT);<br/>            readThis(Tokens.EQUALS);<br/><br/>            message = XreadSimpleValueSpecificationOrNull();<br/><br/>            if (message == null) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            resolveOuterReferencesAndTypes(routine, context, message);"
        },
        {
          "total_lines": 10,
          "line_start": 2151,
          "line_end": 2160,
          "content": "readThis(Tokens.MESSAGE_TEXT);<br/>                readThis(Tokens.EQUALS);<br/><br/>                message = XreadSimpleValueSpecificationOrNull();<br/><br/>                if (message == null) {<br/>                    throw unexpectedToken();<br/>                }<br/><br/>                resolveOuterReferencesAndTypes(routine, context, message);"
        },
        {
          "total_lines": 9,
          "line_start": 2121,
          "line_end": 2129,
          "content": "readThis(Tokens.EQUALS);<br/><br/>            message = XreadSimpleValueSpecificationOrNull();<br/><br/>            if (message == null) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            resolveOuterReferencesAndTypes(routine, context, message);"
        },
        {
          "total_lines": 9,
          "line_start": 1792,
          "line_end": 1800,
          "content": "if (label == null) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            if (!label.name.equals(token.tokenString)) {<br/>                throw Error.error(ErrorCode.X_42508, token.tokenString);<br/>            }<br/><br/>            read();"
        },
        {
          "total_lines": 9,
          "line_start": 1824,
          "line_end": 1832,
          "content": "if (label == null) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            if (!label.name.equals(token.tokenString)) {<br/>                throw Error.error(ErrorCode.X_42508, token.tokenString);<br/>            }<br/><br/>            read();"
        },
        {
          "total_lines": 9,
          "line_start": 1750,
          "line_end": 1758,
          "content": "if (label == null) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            if (!label.name.equals(token.tokenString)) {<br/>                throw Error.error(ErrorCode.X_42508, token.tokenString);<br/>            }<br/><br/>            read();"
        },
        {
          "total_lines": 9,
          "line_start": 1370,
          "line_end": 1378,
          "content": "if (label == null) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            if (!label.name.equals(token.tokenString)) {<br/>                throw Error.error(ErrorCode.X_42508, token.tokenString);<br/>            }<br/><br/>            read();"
        },
        {
          "total_lines": 9,
          "line_start": 1876,
          "line_end": 1884,
          "content": "if (label == null) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            if (!label.name.equals(token.tokenString)) {<br/>                throw Error.error(ErrorCode.X_42508, token.tokenString);<br/>            }<br/><br/>            read();"
        },
        {
          "total_lines": 9,
          "line_start": 2152,
          "line_end": 2160,
          "content": "readThis(Tokens.EQUALS);<br/><br/>                message = XreadSimpleValueSpecificationOrNull();<br/><br/>                if (message == null) {<br/>                    throw unexpectedToken();<br/>                }<br/><br/>                resolveOuterReferencesAndTypes(routine, context, message);"
        },
        {
          "total_lines": 7,
          "line_start": 1370,
          "line_end": 1376,
          "content": "if (label == null) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            if (!label.name.equals(token.tokenString)) {<br/>                throw Error.error(ErrorCode.X_42508, token.tokenString);<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 1750,
          "line_end": 1756,
          "content": "if (label == null) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            if (!label.name.equals(token.tokenString)) {<br/>                throw Error.error(ErrorCode.X_42508, token.tokenString);<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 1792,
          "line_end": 1798,
          "content": "if (label == null) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            if (!label.name.equals(token.tokenString)) {<br/>                throw Error.error(ErrorCode.X_42508, token.tokenString);<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 1824,
          "line_end": 1830,
          "content": "if (label == null) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            if (!label.name.equals(token.tokenString)) {<br/>                throw Error.error(ErrorCode.X_42508, token.tokenString);<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 1876,
          "line_end": 1882,
          "content": "if (label == null) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            if (!label.name.equals(token.tokenString)) {<br/>                throw Error.error(ErrorCode.X_42508, token.tokenString);<br/>            }"
        },
        {
          "total_lines": 3,
          "line_start": 2086,
          "line_end": 2088,
          "content": "session, compileContext,<br/>                                                StatementTypes.CONDITION,<br/>                                                condition"
        },
        {
          "total_lines": 3,
          "line_start": 2050,
          "line_end": 2052,
          "content": "session, compileContext,<br/>                                                StatementTypes.CONDITION,<br/>                                                condition"
        },
        {
          "total_lines": 3,
          "line_start": 268,
          "line_end": 270,
          "content": "function.resolveTypes(session, null);<br/><br/>                        return function;"
        },
        {
          "total_lines": 3,
          "line_start": 277,
          "line_end": 279,
          "content": "function.resolveTypes(session, null);<br/><br/>                        return function;"
        },
        {
          "total_lines": 3,
          "line_start": 2138,
          "line_end": 2140,
          "content": "Routine routine,<br/>                                      StatementCompound context,<br/>                                      HsqlName label"
        },
        {
          "total_lines": 3,
          "line_start": 1770,
          "line_end": 1772,
          "content": "Routine routine,<br/>                                    StatementCompound context,<br/>                                    HsqlName label"
        },
        {
          "total_lines": 3,
          "line_start": 2107,
          "line_end": 2109,
          "content": "Routine routine,<br/>                                    StatementCompound context,<br/>                                    HsqlName label"
        },
        {
          "total_lines": 3,
          "line_start": 1209,
          "line_end": 1211,
          "content": "break;<br/><br/>            default :"
        },
        {
          "total_lines": 3,
          "line_start": 1985,
          "line_end": 1987,
          "content": "session, compileContext,<br/>                                                StatementTypes.CONDITION,<br/>                                                condition"
        },
        {
          "total_lines": 2,
          "line_start": 1384,
          "line_end": 1385,
          "content": "Routine routine,<br/>            StatementCompound context"
        },
        {
          "total_lines": 2,
          "line_start": 353,
          "line_end": 354,
          "content": "null,<br/>                                       scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 1037,
          "line_end": 1038,
          "content": "Routine routine,<br/>            StatementCompound context"
        },
        {
          "total_lines": 2,
          "line_start": 1184,
          "line_end": 1185,
          "content": "Routine routine,<br/>            StatementCompound context"
        },
        {
          "total_lines": 2,
          "line_start": 173,
          "line_end": 174,
          "content": "null,<br/>                                       scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 418,
          "line_end": 419,
          "content": "null,<br/>                                       scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 1922,
          "line_end": 1923,
          "content": "session, compileContext,<br/>                                                StatementTypes.CONDITION, e"
        },
        {
          "total_lines": 2,
          "line_start": 2013,
          "line_end": 2014,
          "content": "Routine routine,<br/>            StatementCompound context"
        },
        {
          "total_lines": 2,
          "line_start": 1412,
          "line_end": 1413,
          "content": "Routine routine,<br/>            StatementCompound context"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 424,
          "line_end": 425,
          "content": "null,<br/>                                       scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 2071,
          "line_end": 2072,
          "content": "Routine routine,<br/>                                       StatementCompound context"
        },
        {
          "total_lines": 2,
          "line_start": 563,
          "line_end": 564,
          "content": "null,<br/>                                       scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 1843,
          "line_end": 1844,
          "content": "Routine routine, StatementCompound context,<br/>                                 HsqlName label"
        },
        {
          "total_lines": 2,
          "line_start": 1079,
          "line_end": 1080,
          "content": "list.add(var);<br/>                    readThis(Tokens.SEMICOLON);"
        },
        {
          "total_lines": 2,
          "line_start": 1719,
          "line_end": 1720,
          "content": "Routine routine,<br/>                                   StatementCompound context"
        },
        {
          "total_lines": 2,
          "line_start": 487,
          "line_end": 488,
          "content": "null,<br/>                                       scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 1062,
          "line_end": 1063,
          "content": "list.add(var);<br/>                    readThis(Tokens.SEMICOLON);"
        },
        {
          "total_lines": 2,
          "line_start": 1679,
          "line_end": 1680,
          "content": "Routine routine,<br/>                                         StatementCompound context"
        },
        {
          "total_lines": 2,
          "line_start": 1729,
          "line_end": 1730,
          "content": "Routine routine, StatementCompound context,<br/>                                   HsqlName label"
        },
        {
          "total_lines": 2,
          "line_start": 1812,
          "line_end": 1813,
          "content": "Routine routine, StatementCompound context,<br/>                                  HsqlName label"
        },
        {
          "total_lines": 2,
          "line_start": 450,
          "line_end": 451,
          "content": "null,<br/>                                   scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 1444,
          "line_end": 1445,
          "content": "ErrorCode.X_42602,<br/>                                          routine.getDataImpactString()"
        },
        {
          "total_lines": 2,
          "line_start": 1577,
          "line_end": 1578,
          "content": "ErrorCode.X_42602,<br/>                                        routine.getDataImpactString()"
        },
        {
          "total_lines": 2,
          "line_start": 1785,
          "line_end": 1786,
          "content": "session,<br/>            compileContext"
        },
        {
          "total_lines": 2,
          "line_start": 1568,
          "line_end": 1569,
          "content": "ErrorCode.X_42602,<br/>                                        routine.getDataImpactString()"
        },
        {
          "total_lines": 2,
          "line_start": 315,
          "line_end": 316,
          "content": "null,<br/>                               scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 1527,
          "line_end": 1528,
          "content": "rangeGroups,<br/>                                    rangeGroup.getRangeVariables()"
        },
        {
          "total_lines": 2,
          "line_start": 1313,
          "line_end": 1314,
          "content": "null,<br/>                                   scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 481,
          "line_end": 482,
          "content": "ErrorCode.X_0U000,<br/>                                  col.getName().statementName"
        },
        {
          "total_lines": 2,
          "line_start": 187,
          "line_end": 188,
          "content": "null,<br/>                                       scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 1939,
          "line_end": 1940,
          "content": "session, compileContext,<br/>                                                StatementTypes.CONDITION, e"
        },
        {
          "total_lines": 2,
          "line_start": 1702,
          "line_end": 1703,
          "content": "null,<br/>                                   scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 492,
          "line_end": 493,
          "content": "session, targets, expression,<br/>                                           columnMap"
        },
        {
          "total_lines": 2,
          "line_start": 429,
          "line_end": 430,
          "content": "session, targets, expression,<br/>                                           columnMap"
        },
        {
          "total_lines": 2,
          "line_start": 389,
          "line_end": 390,
          "content": "null,<br/>                                   scanner.getLineNumber()"
        },
        {
          "total_lines": 2,
          "line_start": 1902,
          "line_end": 1903,
          "content": "session, compileContext,<br/>            StatementTypes.CONDITION, e"
        },
        {
          "total_lines": 2,
          "line_start": 1738,
          "line_end": 1739,
          "content": "session,<br/>            compileContext"
        },
        {
          "total_lines": 2,
          "line_start": 1322,
          "line_end": 1323,
          "content": "Routine routine,<br/>            StatementCompound context, HsqlName label"
        },
        {
          "total_lines": 1,
          "line_start": 447,
          "line_end": 447,
          "content": "rangeVars, targetSet"
        },
        {
          "total_lines": 1,
          "line_start": 212,
          "line_end": 212,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 1939,
          "line_end": 1939,
          "content": "session, compileContext"
        },
        {
          "total_lines": 1,
          "line_start": 386,
          "line_end": 386,
          "content": "rangeVars, targetSet"
        },
        {
          "total_lines": 1,
          "line_start": 1922,
          "line_end": 1922,
          "content": "session, compileContext"
        },
        {
          "total_lines": 1,
          "line_start": 1538,
          "line_end": 1538,
          "content": "rangeGroups, rangeGroup.getRangeVariables()"
        },
        {
          "total_lines": 1,
          "line_start": 1532,
          "line_end": 1532,
          "content": "rangeGroups, rangeGroup.getRangeVariables()"
        },
        {
          "total_lines": 1,
          "line_start": 1892,
          "line_end": 1892,
          "content": "Routine routine, StatementCompound context"
        },
        {
          "total_lines": 1,
          "line_start": 1902,
          "line_end": 1902,
          "content": "session, compileContext"
        },
        {
          "total_lines": 1,
          "line_start": 1966,
          "line_end": 1966,
          "content": "Routine routine, StatementCompound context"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/BinaryType.java",
      "loc_duplicate": 52,
      "clones": [
          {
          "total_lines": 12,
          "line_start": 120,
          "line_end": 131,
          "content": "if (precision == 0) {<br/>            return getNameString();<br/>        }<br/><br/>        StringBuffer sb = new StringBuffer(16);<br/><br/>        sb.append(getNameString());<br/>        sb.append('(');<br/>        sb.append(precision);<br/>        sb.append(')');<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 6,
          "line_start": 126,
          "line_end": 131,
          "content": "sb.append(getNameString());<br/>        sb.append('(');<br/>        sb.append(precision);<br/>        sb.append(')');<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 120,
          "line_end": 124,
          "content": "if (precision == 0) {<br/>            return getNameString();<br/>        }<br/><br/>        StringBuffer sb = new StringBuffer(16);"
        },
        {
          "total_lines": 5,
          "line_start": 452,
          "line_end": 456,
          "content": "if (!cast) {<br/>                throw Error.error(ErrorCode.X_22001);<br/>            }<br/><br/>            session.addWarning(Error.error(ErrorCode.W_01004));"
        },
        {
          "total_lines": 3,
          "line_start": 477,
          "line_end": 479,
          "content": "byte[] data = b.getBytes(session, 0, (int) precision);<br/><br/>                    b = new BinaryData(data, false);"
        },
        {
          "total_lines": 3,
          "line_start": 463,
          "line_end": 465,
          "content": "byte[] data = b.getBytes(session, 0, (int) precision);<br/><br/>                    b = new BinaryData(data, false);"
        },
        {
          "total_lines": 2,
          "line_start": 268,
          "line_end": 269,
          "content": "newType = this;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 580,
          "line_end": 581,
          "content": "SessionInterface session, BlobData data,<br/>                         BlobData otherData, Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 264,
          "line_end": 265,
          "content": "newType      = this;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 394,
          "line_end": 395,
          "content": "Object a,<br/>                               Type otherType, boolean cast"
        },
        {
          "total_lines": 2,
          "line_start": 362,
          "line_end": 363,
          "content": "SessionInterface session, Object a,<br/>                             Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 367,
          "line_end": 368,
          "content": "SessionInterface session, Object a,<br/>                                Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 596,
          "line_end": 597,
          "content": "BlobData data,<br/>                              long offset"
        },
        {
          "total_lines": 1,
          "line_start": 581,
          "line_end": 581,
          "content": "BlobData otherData, Type otherType, long offset"
        },
        {
          "total_lines": 1,
          "line_start": 597,
          "line_end": 597,
          "content": "long length, boolean hasLength"
        },
        {
          "total_lines": 1,
          "line_start": 247,
          "line_end": 247,
          "content": "Session session, Type other, int operation"
        },
        {
          "total_lines": 1,
          "line_start": 395,
          "line_end": 395,
          "content": "Type otherType, boolean cast"
        }
        
      ]
    },
    {
      "path": "hsqldb/integration/extAuthWithSpring/src/org/hsqldb/sample/JdbcAppClass.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 102,
          "line_end": 103,
          "content": "\"Failed to close emulation database setup Connection\",<br/>                        se"
        },
        {
          "total_lines": 2,
          "line_start": 94,
          "line_end": 95,
          "content": "\"Failed to close emulation database setup Connection\",<br/>                        se"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/StringConverter.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 253,
          "line_end": 256,
          "content": "int c = ((int) b[i]) & 0xff;<br/><br/>            s[j++] = (char) HEXBYTES[c >> 4 & 0xf];<br/>            s[j++] = (char) HEXBYTES[c & 0xf];"
        },
        {
          "total_lines": 4,
          "line_start": 225,
          "line_end": 228,
          "content": "int c = ((int) b[i]) & 0xff;<br/><br/>            s[j++] = (char) HEXBYTES[c >> 4 & 0xf];<br/>            s[j++] = (char) HEXBYTES[c & 0xf];"
        },
        {
          "total_lines": 3,
          "line_start": 225,
          "line_end": 227,
          "content": "int c = ((int) b[i]) & 0xff;<br/><br/>            s[j++] = (char) HEXBYTES[c >> 4 & 0xf];"
        },
        {
          "total_lines": 3,
          "line_start": 253,
          "line_end": 255,
          "content": "int c = ((int) b[i]) & 0xff;<br/><br/>            s[j++] = (char) HEXBYTES[c >> 4 & 0xf];"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestTextTable.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 223,
          "line_end": 224,
          "content": "executeStatement(\"SHUTDOWN\");<br/>        super.tearDown();"
        },
        {
          "total_lines": 1,
          "line_start": 546,
          "line_end": 546,
          "content": "m_products.getName(), m_products.getData()"
        },
        {
          "total_lines": 1,
          "line_start": 402,
          "line_end": 402,
          "content": "m_products.getName(), m_products.getData()"
        },
        {
          "total_lines": 1,
          "line_start": 466,
          "line_end": 466,
          "content": "m_products.getName(), m_products.getData()"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/DataSpaceManagerBlocks.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 147,
          "line_end": 148,
          "content": "null, lastFreePosition,<br/>                cache.getFileFreePos()"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 158,
          "line_end": 159,
          "content": "null, lastFreePosition,<br/>                cache.getFileFreePos()"
        },
        {
          "total_lines": 2,
          "line_start": 576,
          "line_end": 577,
          "content": "long offset,<br/>                               long limit"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/UserTypeModifier.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 41,
          "line_end": 42,
          "content": "import org.hsqldb.lib.ArrayUtil;<br/>import org.hsqldb.lib.OrderedHashSet;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/TransferHelper.java",
      "loc_duplicate": 20,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 155,
          "line_end": 157,
          "content": "TransferTable t, ResultSetMetaData meta,<br/>                              String columnType, ResultSet columnDesc,<br/>                              int columnIndex"
        },
        {
          "total_lines": 3,
          "line_start": 202,
          "line_end": 204,
          "content": "ResultSetMetaData meta,<br/>                               String columnType, ResultSet columnDesc,<br/>                               int columnIndex"
        },
        {
          "total_lines": 3,
          "line_start": 161,
          "line_end": 163,
          "content": "TransferTable t, ResultSetMetaData meta,<br/>                               String columnType, ResultSet columnDesc,<br/>                               int columnIndex"
        },
        {
          "total_lines": 3,
          "line_start": 196,
          "line_end": 198,
          "content": "ResultSetMetaData meta,<br/>                              String columnType, ResultSet columnDesc,<br/>                              int columnIndex"
        },
        {
          "total_lines": 2,
          "line_start": 202,
          "line_end": 203,
          "content": "String aTableName, ResultSetMetaData meta,<br/>                               String columnType"
        },
        {
          "total_lines": 2,
          "line_start": 196,
          "line_end": 197,
          "content": "String aTableName, ResultSetMetaData meta,<br/>                              String columnType"
        },
        {
          "total_lines": 1,
          "line_start": 156,
          "line_end": 156,
          "content": "String columnType, ResultSet columnDesc"
        },
        {
          "total_lines": 1,
          "line_start": 71,
          "line_end": 71,
          "content": "Traceable t, String q"
        },
        {
          "total_lines": 1,
          "line_start": 162,
          "line_end": 162,
          "content": "String columnType, ResultSet columnDesc"
        },
        {
          "total_lines": 1,
          "line_start": 63,
          "line_end": 63,
          "content": "Traceable t, String q"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/LongKeyIntValueHashMap.java",
      "loc_duplicate": 64,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 89,
          "line_end": 97,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            value[0] = intValueTable[lookup];<br/><br/>            return true;<br/>        }<br/><br/>        return false;"
        },
        {
          "total_lines": 7,
          "line_start": 78,
          "line_end": 84,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            return intValueTable[lookup];<br/>        }<br/><br/>        return defaultValue;"
        },
        {
          "total_lines": 7,
          "line_start": 91,
          "line_end": 97,
          "content": "if (lookup != -1) {<br/>            value[0] = intValueTable[lookup];<br/><br/>            return true;<br/>        }<br/><br/>        return false;"
        },
        {
          "total_lines": 7,
          "line_start": 67,
          "line_end": 73,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            return intValueTable[lookup];<br/>        }<br/><br/>        throw new NoSuchElementException();"
        },
        {
          "total_lines": 5,
          "line_start": 124,
          "line_end": 128,
          "content": "if (keySet == null) {<br/>            keySet = new KeySet();<br/>        }<br/><br/>        return keySet;"
        },
        {
          "total_lines": 5,
          "line_start": 133,
          "line_end": 137,
          "content": "if (values == null) {<br/>            values = new Values();<br/>        }<br/><br/>        return values;"
        },
        {
          "total_lines": 5,
          "line_start": 80,
          "line_end": 84,
          "content": "if (lookup != -1) {<br/>            return intValueTable[lookup];<br/>        }<br/><br/>        return defaultValue;"
        },
        {
          "total_lines": 5,
          "line_start": 106,
          "line_end": 110,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(key, value, null, null, false);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 5,
          "line_start": 115,
          "line_end": 119,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(key, 0, null, null, true);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import java.util.NoSuchElementException;<br/><br/>import org.hsqldb.map.BaseHashMap;"
        },
        {
          "total_lines": 3,
          "line_start": 117,
          "line_end": 119,
          "content": "super.addOrRemove(key, 0, null, null, true);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 3,
          "line_start": 108,
          "line_end": 110,
          "content": "super.addOrRemove(key, value, null, null, false);<br/><br/>        return oldSize != size();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCClobFile.java",
      "loc_duplicate": 266,
      "clones": [
          {
          "total_lines": 37,
          "line_start": 662,
          "line_end": 698,
          "content": "if (m_closed) {<br/>            return;<br/>        }<br/><br/>        m_closed = true;<br/><br/>        final List streams = new ArrayList();<br/><br/>        streams.addAll(m_streams);<br/><br/>        m_streams = null;<br/><br/>        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {<br/>            final Object stream = itr.next();<br/><br/>            if (stream instanceof InputStream) {<br/>                try {<br/>                    ((InputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            } else if (stream instanceof OutputStream) {<br/>                try {<br/>                    ((OutputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            }<br/>        }<br/><br/>        if (m_deleteOnFree) {<br/>            try {<br/>                m_file.delete();<br/>            } catch (Exception e) {}<br/>        }"
        },
        {
          "total_lines": 33,
          "line_start": 666,
          "line_end": 698,
          "content": "m_closed = true;<br/><br/>        final List streams = new ArrayList();<br/><br/>        streams.addAll(m_streams);<br/><br/>        m_streams = null;<br/><br/>        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {<br/>            final Object stream = itr.next();<br/><br/>            if (stream instanceof InputStream) {<br/>                try {<br/>                    ((InputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            } else if (stream instanceof OutputStream) {<br/>                try {<br/>                    ((OutputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            }<br/>        }<br/><br/>        if (m_deleteOnFree) {<br/>            try {<br/>                m_file.delete();<br/>            } catch (Exception e) {}<br/>        }"
        },
        {
          "total_lines": 31,
          "line_start": 668,
          "line_end": 698,
          "content": "final List streams = new ArrayList();<br/><br/>        streams.addAll(m_streams);<br/><br/>        m_streams = null;<br/><br/>        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {<br/>            final Object stream = itr.next();<br/><br/>            if (stream instanceof InputStream) {<br/>                try {<br/>                    ((InputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            } else if (stream instanceof OutputStream) {<br/>                try {<br/>                    ((OutputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            }<br/>        }<br/><br/>        if (m_deleteOnFree) {<br/>            try {<br/>                m_file.delete();<br/>            } catch (Exception e) {}<br/>        }"
        },
        {
          "total_lines": 27,
          "line_start": 672,
          "line_end": 698,
          "content": "m_streams = null;<br/><br/>        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {<br/>            final Object stream = itr.next();<br/><br/>            if (stream instanceof InputStream) {<br/>                try {<br/>                    ((InputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            } else if (stream instanceof OutputStream) {<br/>                try {<br/>                    ((OutputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            }<br/>        }<br/><br/>        if (m_deleteOnFree) {<br/>            try {<br/>                m_file.delete();<br/>            } catch (Exception e) {}<br/>        }"
        },
        {
          "total_lines": 25,
          "line_start": 674,
          "line_end": 698,
          "content": "for (Iterator itr = streams.iterator(); itr.hasNext(); ) {<br/>            final Object stream = itr.next();<br/><br/>            if (stream instanceof InputStream) {<br/>                try {<br/>                    ((InputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            } else if (stream instanceof OutputStream) {<br/>                try {<br/>                    ((OutputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            }<br/>        }<br/><br/>        if (m_deleteOnFree) {<br/>            try {<br/>                m_file.delete();<br/>            } catch (Exception e) {}<br/>        }"
        },
        {
          "total_lines": 24,
          "line_start": 965,
          "line_end": 988,
          "content": "boolean exists = false;<br/>        boolean isFile = false;<br/><br/>        try {<br/>            exists = m_file.exists();<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }<br/><br/>        if (exists) {<br/>            try {<br/>                isFile = m_file.isFile();<br/>            } catch (Exception ex) {<br/>                throw JDBCUtil.sqlException(ex);<br/>            }<br/>        }<br/><br/>        if (exists) {<br/>            if (!isFile) {<br/>                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);<br/>            }<br/>        } else if (checkExists) {<br/>            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);<br/>        }"
        },
        {
          "total_lines": 23,
          "line_start": 966,
          "line_end": 988,
          "content": "boolean isFile = false;<br/><br/>        try {<br/>            exists = m_file.exists();<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }<br/><br/>        if (exists) {<br/>            try {<br/>                isFile = m_file.isFile();<br/>            } catch (Exception ex) {<br/>                throw JDBCUtil.sqlException(ex);<br/>            }<br/>        }<br/><br/>        if (exists) {<br/>            if (!isFile) {<br/>                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);<br/>            }<br/>        } else if (checkExists) {<br/>            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);<br/>        }"
        },
        {
          "total_lines": 21,
          "line_start": 968,
          "line_end": 988,
          "content": "try {<br/>            exists = m_file.exists();<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }<br/><br/>        if (exists) {<br/>            try {<br/>                isFile = m_file.isFile();<br/>            } catch (Exception ex) {<br/>                throw JDBCUtil.sqlException(ex);<br/>            }<br/>        }<br/><br/>        if (exists) {<br/>            if (!isFile) {<br/>                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);<br/>            }<br/>        } else if (checkExists) {<br/>            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);<br/>        }"
        },
        {
          "total_lines": 13,
          "line_start": 968,
          "line_end": 980,
          "content": "try {<br/>            exists = m_file.exists();<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }<br/><br/>        if (exists) {<br/>            try {<br/>                isFile = m_file.isFile();<br/>            } catch (Exception ex) {<br/>                throw JDBCUtil.sqlException(ex);<br/>            }<br/>        }"
        },
        {
          "total_lines": 11,
          "line_start": 662,
          "line_end": 672,
          "content": "if (m_closed) {<br/>            return;<br/>        }<br/><br/>        m_closed = true;<br/><br/>        final List streams = new ArrayList();<br/><br/>        streams.addAll(m_streams);<br/><br/>        m_streams = null;"
        },
        {
          "total_lines": 10,
          "line_start": 1000,
          "line_end": 1009,
          "content": "try {<br/>            if (!m_file.exists()) {<br/>                FileUtil.getFileUtil().makeParentDirectories(m_file);<br/>                m_file.createNewFile();<br/>            }<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }<br/><br/>        checkIsFile( /*checkExists*/true);"
        },
        {
          "total_lines": 5,
          "line_start": 169,
          "line_end": 173,
          "content": "catch (SQLException ex) {<br/>            throw ex;<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 277,
          "line_end": 281,
          "content": "catch (SQLException ex) {<br/>            throw ex;<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }"
        },
        {
          "total_lines": 1,
          "line_start": 161,
          "line_end": 161,
          "content": "InOutUtil.DEFAULT_COPY_BUFFER_SIZE, length"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/AbstractTestOdbc.java",
      "loc_duplicate": 9,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 196,
          "line_end": 199,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 3,
          "line_start": 196,
          "line_end": 198,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 2,
          "line_start": 198,
          "line_end": 199,
          "content": "ase.initCause(se);<br/>            throw ase;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementExpression.java",
      "loc_duplicate": 109,
      "clones": [
          {
          "total_lines": 19,
          "line_start": 96,
          "line_end": 114,
          "content": "OrderedHashSet subQueries = null;<br/><br/>        if (expression != null) {<br/>            subQueries = expression.collectAllSubqueries(subQueries);<br/>        }<br/><br/>        if (subQueries == null || subQueries.size() == 0) {<br/>            return TableDerived.emptyArray;<br/>        }<br/><br/>        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];<br/><br/>        subQueries.toArray(subQueryArray);<br/><br/>        for (int i = 0; i < subqueries.length; i++) {<br/>            subQueryArray[i].prepareTable();<br/>        }<br/><br/>        return subQueryArray;"
        },
        {
          "total_lines": 17,
          "line_start": 134,
          "line_end": 150,
          "content": "Result result;<br/><br/>        try {<br/>            if (subqueries.length > 0) {<br/>                materializeSubQueries(session);<br/>            }<br/><br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 17,
          "line_start": 98,
          "line_end": 114,
          "content": "if (expression != null) {<br/>            subQueries = expression.collectAllSubqueries(subQueries);<br/>        }<br/><br/>        if (subQueries == null || subQueries.size() == 0) {<br/>            return TableDerived.emptyArray;<br/>        }<br/><br/>        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];<br/><br/>        subQueries.toArray(subQueryArray);<br/><br/>        for (int i = 0; i < subqueries.length; i++) {<br/>            subQueryArray[i].prepareTable();<br/>        }<br/><br/>        return subQueryArray;"
        },
        {
          "total_lines": 13,
          "line_start": 136,
          "line_end": 148,
          "content": "try {<br/>            if (subqueries.length > 0) {<br/>                materializeSubQueries(session);<br/>            }<br/><br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/>        }"
        },
        {
          "total_lines": 13,
          "line_start": 102,
          "line_end": 114,
          "content": "if (subQueries == null || subQueries.size() == 0) {<br/>            return TableDerived.emptyArray;<br/>        }<br/><br/>        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];<br/><br/>        subQueries.toArray(subQueryArray);<br/><br/>        for (int i = 0; i < subqueries.length; i++) {<br/>            subQueryArray[i].prepareTable();<br/>        }<br/><br/>        return subQueryArray;"
        },
        {
          "total_lines": 11,
          "line_start": 119,
          "line_end": 129,
          "content": "StringBuffer sb = new StringBuffer();<br/><br/>        sb.append('\\n');<br/><br/>        for (int i = 0; i < blanks; i++) {<br/>            sb.append(' ');<br/>        }<br/><br/>        sb.append(Tokens.T_STATEMENT);<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 9,
          "line_start": 185,
          "line_end": 193,
          "content": "for (int i = 0; i < subqueries.length; i++) {<br/>            if (subqueries[i].queryExpression != null) {<br/>                subqueries[i].queryExpression.getBaseTableNames(set);<br/>            }<br/>        }<br/><br/>        for (int i = 0; i < routines.length; i++) {<br/>            set.addAll(routines[i].getTableNamesForRead());<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 146,
          "line_end": 150,
          "content": "if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 5,
          "line_start": 96,
          "line_end": 100,
          "content": "OrderedHashSet subQueries = null;<br/><br/>        if (expression != null) {<br/>            subQueries = expression.collectAllSubqueries(subQueries);<br/>        }"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementSet.java",
      "loc_duplicate": 157,
      "clones": [
          {
          "total_lines": 19,
          "line_start": 130,
          "line_end": 148,
          "content": "OrderedHashSet subQueries = null;<br/><br/>        if (expression != null) {<br/>            subQueries = expression.collectAllSubqueries(subQueries);<br/>        }<br/><br/>        if (subQueries == null || subQueries.size() == 0) {<br/>            return TableDerived.emptyArray;<br/>        }<br/><br/>        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];<br/><br/>        subQueries.toArray(subQueryArray);<br/><br/>        for (int i = 0; i < subqueries.length; i++) {<br/>            subQueryArray[i].prepareTable();<br/>        }<br/><br/>        return subQueryArray;"
        },
        {
          "total_lines": 17,
          "line_start": 132,
          "line_end": 148,
          "content": "if (expression != null) {<br/>            subQueries = expression.collectAllSubqueries(subQueries);<br/>        }<br/><br/>        if (subQueries == null || subQueries.size() == 0) {<br/>            return TableDerived.emptyArray;<br/>        }<br/><br/>        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];<br/><br/>        subQueries.toArray(subQueryArray);<br/><br/>        for (int i = 0; i < subqueries.length; i++) {<br/>            subQueryArray[i].prepareTable();<br/>        }<br/><br/>        return subQueryArray;"
        },
        {
          "total_lines": 17,
          "line_start": 287,
          "line_end": 303,
          "content": "Result result;<br/><br/>        try {<br/>            if (subqueries.length > 0) {<br/>                materializeSubQueries(session);<br/>            }<br/><br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 13,
          "line_start": 136,
          "line_end": 148,
          "content": "if (subQueries == null || subQueries.size() == 0) {<br/>            return TableDerived.emptyArray;<br/>        }<br/><br/>        TableDerived[] subQueryArray = new TableDerived[subQueries.size()];<br/><br/>        subQueries.toArray(subQueryArray);<br/><br/>        for (int i = 0; i < subqueries.length; i++) {<br/>            subQueryArray[i].prepareTable();<br/>        }<br/><br/>        return subQueryArray;"
        },
        {
          "total_lines": 13,
          "line_start": 289,
          "line_end": 301,
          "content": "try {<br/>            if (subqueries.length > 0) {<br/>                materializeSubQueries(session);<br/>            }<br/><br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/>        }"
        },
        {
          "total_lines": 12,
          "line_start": 330,
          "line_end": 341,
          "content": "Table    rangeTable = rangeVariables[i].rangeTable;<br/>            HsqlName name       = rangeTable.getName();<br/><br/>            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {<br/>                continue;<br/>            }<br/><br/>            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {<br/>                continue;<br/>            }<br/><br/>            set.add(name);"
        },
        {
          "total_lines": 11,
          "line_start": 272,
          "line_end": 282,
          "content": "StringBuffer sb = new StringBuffer();<br/><br/>        sb.append('\\n');<br/><br/>        for (int i = 0; i < blanks; i++) {<br/>            sb.append(' ');<br/>        }<br/><br/>        sb.append(Tokens.T_STATEMENT);<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 11,
          "line_start": 331,
          "line_end": 341,
          "content": "HsqlName name       = rangeTable.getName();<br/><br/>            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {<br/>                continue;<br/>            }<br/><br/>            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {<br/>                continue;<br/>            }<br/><br/>            set.add(name);"
        },
        {
          "total_lines": 10,
          "line_start": 330,
          "line_end": 339,
          "content": "Table    rangeTable = rangeVariables[i].rangeTable;<br/>            HsqlName name       = rangeTable.getName();<br/><br/>            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {<br/>                continue;<br/>            }<br/><br/>            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {<br/>                continue;<br/>            }"
        },
        {
          "total_lines": 9,
          "line_start": 333,
          "line_end": 341,
          "content": "if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {<br/>                continue;<br/>            }<br/><br/>            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {<br/>                continue;<br/>            }<br/><br/>            set.add(name);"
        },
        {
          "total_lines": 9,
          "line_start": 331,
          "line_end": 339,
          "content": "HsqlName name       = rangeTable.getName();<br/><br/>            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {<br/>                continue;<br/>            }<br/><br/>            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {<br/>                continue;<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 299,
          "line_end": 303,
          "content": "if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 5,
          "line_start": 130,
          "line_end": 134,
          "content": "OrderedHashSet subQueries = null;<br/><br/>        if (expression != null) {<br/>            subQueries = expression.collectAllSubqueries(subQueries);<br/>        }"
        },
        {
          "total_lines": 2,
          "line_start": 363,
          "line_end": 364,
          "content": "ErrorCode.X_0U000,<br/>                                  col.getName().statementName"
        },
        {
          "total_lines": 2,
          "line_start": 38,
          "line_end": 39,
          "content": "import org.hsqldb.lib.ArrayUtil;<br/>import org.hsqldb.lib.OrderedHashSet;"
        },
        {
          "total_lines": 1,
          "line_start": 115,
          "line_end": 115,
          "content": "StatementTypes.X_SQL_CONTROL, null"
        },
        {
          "total_lines": 1,
          "line_start": 96,
          "line_end": 96,
          "content": "StatementTypes.X_SQL_CONTROL, null"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/IntKeyLongValueHashMap.java",
      "loc_duplicate": 49,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 79,
          "line_end": 87,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            value[0] = longValueTable[lookup];<br/><br/>            return true;<br/>        }<br/><br/>        return false;"
        },
        {
          "total_lines": 7,
          "line_start": 57,
          "line_end": 63,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            return longValueTable[lookup];<br/>        }<br/><br/>        throw new NoSuchElementException();"
        },
        {
          "total_lines": 7,
          "line_start": 68,
          "line_end": 74,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            return longValueTable[lookup];<br/>        }<br/><br/>        return defaultValue;"
        },
        {
          "total_lines": 7,
          "line_start": 81,
          "line_end": 87,
          "content": "if (lookup != -1) {<br/>            value[0] = longValueTable[lookup];<br/><br/>            return true;<br/>        }<br/><br/>        return false;"
        },
        {
          "total_lines": 5,
          "line_start": 101,
          "line_end": 105,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(key, 0, null, null, true);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 5,
          "line_start": 92,
          "line_end": 96,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(key, value, null, null, false);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import java.util.NoSuchElementException;<br/><br/>import org.hsqldb.map.BaseHashMap;"
        },
        {
          "total_lines": 3,
          "line_start": 94,
          "line_end": 96,
          "content": "super.addOrRemove(key, value, null, null, false);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 3,
          "line_start": 103,
          "line_end": 105,
          "content": "super.addOrRemove(key, 0, null, null, true);<br/><br/>        return oldSize != size();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/Cache.java",
      "loc_duplicate": 10,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 104,
          "line_end": 106,
          "content": "updateAccessCounts();<br/>            resetAccessCount();<br/>            updateObjectAccessCounts();"
        },
        {
          "total_lines": 3,
          "line_start": 143,
          "line_end": 145,
          "content": "updateAccessCounts();<br/>            resetAccessCount();<br/>            updateObjectAccessCounts();"
        },
        {
          "total_lines": 2,
          "line_start": 143,
          "line_end": 144,
          "content": "updateAccessCounts();<br/>            resetAccessCount();"
        },
        {
          "total_lines": 2,
          "line_start": 104,
          "line_end": 105,
          "content": "updateAccessCounts();<br/>            resetAccessCount();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestBug808460.java",
      "loc_duplicate": 18,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 72,
          "line_end": 77,
          "content": "TestResult            result;<br/>        TestCase              test;<br/>        java.util.Enumeration failures;<br/>        int                   count;<br/><br/>        result = new TestResult();"
        },
        {
          "total_lines": 5,
          "line_start": 86,
          "line_end": 90,
          "content": "failures = result.failures();<br/><br/>        while (failures.hasMoreElements()) {<br/>            System.out.println(failures.nextElement());<br/>        }"
        },
        {
          "total_lines": 3,
          "line_start": 80,
          "line_end": 82,
          "content": "test.run(result);<br/><br/>        count = result.failureCount();"
        },
        {
          "total_lines": 2,
          "line_start": 65,
          "line_end": 66,
          "content": "stmt.executeQuery(\"SELECT * FROM INFORMATION_SCHEMA.SYSTEM_SESSIONS\");<br/>        conn.close();"
        },
        {
          "total_lines": 2,
          "line_start": 59,
          "line_end": 60,
          "content": "stmt.executeQuery(\"SELECT * FROM INFORMATION_SCHEMA.SYSTEM_SESSIONS\");<br/>        conn.close();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ExpressionAggregate.java",
      "loc_duplicate": 32,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 204,
          "line_end": 206,
          "content": "Session session,<br/>            RangeGroup rangeGroup, int rangeCount,<br/>            RangeGroup[] rangeGroups, HsqlList unresolvedSet, boolean acceptsSequences"
        },
        {
          "total_lines": 3,
          "line_start": 196,
          "line_end": 198,
          "content": "sb.append(\" arg=[\");<br/>            sb.append(nodes[LEFT].describe(session, blanks + 1));<br/>            sb.append(']');"
        },
        {
          "total_lines": 2,
          "line_start": 117,
          "line_end": 118,
          "content": "sb.append(left).append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 208,
          "line_end": 209,
          "content": "session,<br/>            rangeGroup, rangeCount, rangeGroups, null, false"
        },
        {
          "total_lines": 2,
          "line_start": 197,
          "line_end": 198,
          "content": "sb.append(nodes[LEFT].describe(session, blanks + 1));<br/>            sb.append(']');"
        },
        {
          "total_lines": 2,
          "line_start": 82,
          "line_end": 83,
          "content": "sb.append(left).append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 92,
          "line_end": 93,
          "content": "sb.append(left).append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 107,
          "line_end": 108,
          "content": "sb.append(left).append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 127,
          "line_end": 128,
          "content": "sb.append(left).append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 112,
          "line_end": 113,
          "content": "sb.append(left).append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 131,
          "line_end": 132,
          "content": "ErrorCode.U_S0500,<br/>                                         \"ExpressionAggregate\""
        },
        {
          "total_lines": 2,
          "line_start": 87,
          "line_end": 88,
          "content": "sb.append(left).append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 122,
          "line_end": 123,
          "content": "sb.append(left).append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 97,
          "line_end": 98,
          "content": "sb.append(left).append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 102,
          "line_end": 103,
          "content": "sb.append(left).append(')');<br/>                break;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestAllTypes.java",
      "loc_duplicate": 56,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 438,
          "line_end": 446,
          "content": "int b = r.nextInt();<br/><br/>        if (b == Integer.MIN_VALUE) {<br/>            b = Integer.MAX_VALUE;<br/>        }<br/><br/>        b = Math.abs(b);<br/><br/>        return b % range;"
        },
        {
          "total_lines": 7,
          "line_start": 438,
          "line_end": 444,
          "content": "int b = r.nextInt();<br/><br/>        if (b == Integer.MIN_VALUE) {<br/>            b = Integer.MAX_VALUE;<br/>        }<br/><br/>        b = Math.abs(b);"
        },
        {
          "total_lines": 5,
          "line_start": 301,
          "line_end": 305,
          "content": "rs = sStatement.getResultSet();<br/><br/>            rs.next();<br/>            System.out.println(\"Row Count: \" + rs.getInt(1));<br/>            System.out.println(\"Time to count: \" + sw.elapsedTime());"
        },
        {
          "total_lines": 5,
          "line_start": 311,
          "line_end": 315,
          "content": "rs = sStatement.getResultSet();<br/><br/>            rs.next();<br/>            System.out.println(\"Row Count: \" + rs.getInt(1));<br/>            System.out.println(\"Time to count: \" + sw.elapsedTime());"
        },
        {
          "total_lines": 4,
          "line_start": 311,
          "line_end": 314,
          "content": "rs = sStatement.getResultSet();<br/><br/>            rs.next();<br/>            System.out.println(\"Row Count: \" + rs.getInt(1));"
        },
        {
          "total_lines": 4,
          "line_start": 301,
          "line_end": 304,
          "content": "rs = sStatement.getResultSet();<br/><br/>            rs.next();<br/>            System.out.println(\"Row Count: \" + rs.getInt(1));"
        },
        {
          "total_lines": 3,
          "line_start": 311,
          "line_end": 313,
          "content": "rs = sStatement.getResultSet();<br/><br/>            rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 301,
          "line_end": 303,
          "content": "rs = sStatement.getResultSet();<br/><br/>            rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 303,
          "line_end": 305,
          "content": "rs.next();<br/>            System.out.println(\"Row Count: \" + rs.getInt(1));<br/>            System.out.println(\"Time to count: \" + sw.elapsedTime());"
        },
        {
          "total_lines": 3,
          "line_start": 313,
          "line_end": 315,
          "content": "rs.next();<br/>            System.out.println(\"Row Count: \" + rs.getInt(1));<br/>            System.out.println(\"Time to count: \" + sw.elapsedTime());"
        },
        {
          "total_lines": 2,
          "line_start": 313,
          "line_end": 314,
          "content": "rs.next();<br/>            System.out.println(\"Row Count: \" + rs.getInt(1));"
        },
        {
          "total_lines": 2,
          "line_start": 95,
          "line_end": 96,
          "content": "cConnection = DriverManager.getConnection(url, user, password);<br/>                sStatement  = cConnection.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 107,
          "line_end": 108,
          "content": "cConnection = DriverManager.getConnection(url, user, password);<br/>                sStatement  = cConnection.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 111,
          "line_end": 112,
          "content": "e.printStackTrace();<br/>            System.out.println(\"TestSql.setUp() error: \" + e.getMessage());"
        },
        {
          "total_lines": 2,
          "line_start": 303,
          "line_end": 304,
          "content": "rs.next();<br/>            System.out.println(\"Row Count: \" + rs.getInt(1));"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/OrderedIntHashSet.java",
      "loc_duplicate": 50,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 103,
          "line_end": 111,
          "content": "int i = 0;<br/><br/>        for (; i < array.length; i++) {<br/>            if (!super.containsKey(array[i])) {<br/>                break;<br/>            }<br/>        }<br/><br/>        return i;"
        },
        {
          "total_lines": 9,
          "line_start": 116,
          "line_end": 124,
          "content": "int i = 0;<br/><br/>        for (; i < array.length; i++) {<br/>            if (i >= size() || get(i) != array[i]) {<br/>                break;<br/>            }<br/>        }<br/><br/>        return i;"
        },
        {
          "total_lines": 7,
          "line_start": 116,
          "line_end": 122,
          "content": "int i = 0;<br/><br/>        for (; i < array.length; i++) {<br/>            if (i >= size() || get(i) != array[i]) {<br/>                break;<br/>            }<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 103,
          "line_end": 109,
          "content": "int i = 0;<br/><br/>        for (; i < array.length; i++) {<br/>            if (!super.containsKey(array[i])) {<br/>                break;<br/>            }<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 62,
          "line_end": 66,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(key, 0, null, null, false);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 5,
          "line_start": 71,
          "line_end": 75,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(key, 0, null, null, true);<br/><br/>        boolean result = oldSize != size();"
        },
        {
          "total_lines": 5,
          "line_start": 80,
          "line_end": 84,
          "content": "super.clear();<br/><br/>            for (int i = 0; i < array.length; i++) {<br/>                add(array[i]);<br/>            }"
        },
        {
          "total_lines": 3,
          "line_start": 64,
          "line_end": 66,
          "content": "super.addOrRemove(key, 0, null, null, false);<br/><br/>        return oldSize != size();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementInsert.java",
      "loc_duplicate": 9,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 118,
          "line_end": 120,
          "content": "resultOut = Result.newUpdateCountResult(generatedResultMetaData,<br/>                    0);<br/>            generatedNavigator = resultOut.getChainedResult().getNavigator();"
        },
        {
          "total_lines": 2,
          "line_start": 87,
          "line_end": 88,
          "content": "StatementTypes.INSERT, StatementTypes.X_SQL_DATA_CHANGE,<br/>              session.getCurrentSchemaHsqlName()"
        },
        {
          "total_lines": 2,
          "line_start": 125,
          "line_end": 126,
          "content": "colTypes,<br/>                                          insertExpression.nodes[0].nodes"
        },
        {
          "total_lines": 2,
          "line_start": 60,
          "line_end": 61,
          "content": "StatementTypes.INSERT, StatementTypes.X_SQL_DATA_CHANGE,<br/>              session.getCurrentSchemaHsqlName()"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementDML.java",
      "loc_duplicate": 178,
      "clones": [
          {
          "total_lines": 12,
          "line_start": 280,
          "line_end": 291,
          "content": "Table    rangeTable = rangeVariables[i].rangeTable;<br/>            HsqlName name       = rangeTable.getName();<br/><br/>            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {<br/>                continue;<br/>            }<br/><br/>            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {<br/>                continue;<br/>            }<br/><br/>            set.add(name);"
        },
        {
          "total_lines": 11,
          "line_start": 281,
          "line_end": 291,
          "content": "HsqlName name       = rangeTable.getName();<br/><br/>            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {<br/>                continue;<br/>            }<br/><br/>            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {<br/>                continue;<br/>            }<br/><br/>            set.add(name);"
        },
        {
          "total_lines": 10,
          "line_start": 280,
          "line_end": 289,
          "content": "Table    rangeTable = rangeVariables[i].rangeTable;<br/>            HsqlName name       = rangeTable.getName();<br/><br/>            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {<br/>                continue;<br/>            }<br/><br/>            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {<br/>                continue;<br/>            }"
        },
        {
          "total_lines": 9,
          "line_start": 283,
          "line_end": 291,
          "content": "if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {<br/>                continue;<br/>            }<br/><br/>            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {<br/>                continue;<br/>            }<br/><br/>            set.add(name);"
        },
        {
          "total_lines": 9,
          "line_start": 281,
          "line_end": 289,
          "content": "HsqlName name       = rangeTable.getName();<br/><br/>            if (rangeTable.isDataReadOnly() || rangeTable.isTemp()) {<br/>                continue;<br/>            }<br/><br/>            if (name.schema == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {<br/>                continue;<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 563,
          "line_end": 569,
          "content": "resultOut.setUpdateCount(count);<br/><br/>            if (count == 0) {<br/>                session.addWarning(HsqlException.noDataCondition);<br/>            }<br/><br/>            return resultOut;"
        },
        {
          "total_lines": 7,
          "line_start": 789,
          "line_end": 795,
          "content": "resultOut.setUpdateCount(count);<br/><br/>            if (count == 0) {<br/>                session.addWarning(HsqlException.noDataCondition);<br/>            }<br/><br/>            return resultOut;"
        },
        {
          "total_lines": 6,
          "line_start": 1500,
          "line_end": 1505,
          "content": "String[] info = getConstraintInfo(c);<br/><br/>                                refiterator.release();<br/><br/>                                throw Error.error(null, ErrorCode.X_27000,<br/>                                                  ErrorCode.CONSTRAINT, info);"
        },
        {
          "total_lines": 6,
          "line_start": 1586,
          "line_end": 1591,
          "content": "String[] info = getConstraintInfo(c);<br/><br/>                    refiterator.release();<br/><br/>                    throw Error.error(null, ErrorCode.X_27000,<br/>                                      ErrorCode.CONSTRAINT, info);"
        },
        {
          "total_lines": 5,
          "line_start": 1097,
          "line_end": 1101,
          "content": "if (extraUpdateTables == null) {<br/>                    extraUpdateTables = new OrderedHashSet();<br/>                }<br/><br/>                extraUpdateTables.add(currentTable);"
        },
        {
          "total_lines": 5,
          "line_start": 1352,
          "line_end": 1356,
          "content": "if (extraUpdateTables == null) {<br/>                            extraUpdateTables = new OrderedHashSet();<br/>                        }<br/><br/>                        extraUpdateTables.add(currentTable);"
        },
        {
          "total_lines": 4,
          "line_start": 1502,
          "line_end": 1505,
          "content": "refiterator.release();<br/><br/>                                throw Error.error(null, ErrorCode.X_27000,<br/>                                                  ErrorCode.CONSTRAINT, info);"
        },
        {
          "total_lines": 4,
          "line_start": 1389,
          "line_end": 1392,
          "content": "Table currentTable = (Table) extraUpdateTables.get(i);<br/><br/>                currentTable.fireTriggers(session, Trigger.UPDATE_AFTER,<br/>                                          navigator);"
        },
        {
          "total_lines": 4,
          "line_start": 1588,
          "line_end": 1591,
          "content": "refiterator.release();<br/><br/>                    throw Error.error(null, ErrorCode.X_27000,<br/>                                      ErrorCode.CONSTRAINT, info);"
        },
        {
          "total_lines": 4,
          "line_start": 1131,
          "line_end": 1134,
          "content": "Table currentTable = (Table) extraUpdateTables.get(i);<br/><br/>                currentTable.fireTriggers(session, Trigger.UPDATE_AFTER,<br/>                                          navigator);"
        },
        {
          "total_lines": 3,
          "line_start": 840,
          "line_end": 842,
          "content": "Object[] generatedValues = getGeneratedColumns(data);<br/><br/>                generatedNavigator.add(generatedValues);"
        },
        {
          "total_lines": 3,
          "line_start": 503,
          "line_end": 505,
          "content": "resultOut = Result.newUpdateCountResult(generatedResultMetaData,<br/>                    0);<br/>            generatedNavigator = resultOut.getChainedResult().getNavigator();"
        },
        {
          "total_lines": 3,
          "line_start": 1170,
          "line_end": 1172,
          "content": "session.addWarning(HsqlException.noDataCondition);<br/><br/>            return Result.updateZeroResult;"
        },
        {
          "total_lines": 3,
          "line_start": 556,
          "line_end": 558,
          "content": "session.addWarning(HsqlException.noDataCondition);<br/><br/>                return Result.updateZeroResult;"
        },
        {
          "total_lines": 3,
          "line_start": 675,
          "line_end": 677,
          "content": "resultOut = Result.newUpdateCountResult(generatedResultMetaData,<br/>                    0);<br/>            generatedNavigator = resultOut.getChainedResult().getNavigator();"
        },
        {
          "total_lines": 3,
          "line_start": 1329,
          "line_end": 1331,
          "content": "currentTable,<br/>                                           row.getData(), changedData,<br/>                                           changedColumns"
        },
        {
          "total_lines": 3,
          "line_start": 1073,
          "line_end": 1075,
          "content": "Object[] generatedValues = getGeneratedColumns(data);<br/><br/>                generatedNavigator.add(generatedValues);"
        },
        {
          "total_lines": 3,
          "line_start": 782,
          "line_end": 784,
          "content": "session.addWarning(HsqlException.noDataCondition);<br/><br/>                return Result.updateZeroResult;"
        },
        {
          "total_lines": 3,
          "line_start": 1586,
          "line_end": 1588,
          "content": "String[] info = getConstraintInfo(c);<br/><br/>                    refiterator.release();"
        },
        {
          "total_lines": 3,
          "line_start": 1500,
          "line_end": 1502,
          "content": "String[] info = getConstraintInfo(c);<br/><br/>                                refiterator.release();"
        },
        {
          "total_lines": 2,
          "line_start": 888,
          "line_end": 889,
          "content": "session, Trigger.INSERT_AFTER_ROW, null,<br/>                                   data, null"
        },
        {
          "total_lines": 2,
          "line_start": 1520,
          "line_end": 1521,
          "content": "refData, 0,<br/>                                         refData.length"
        },
        {
          "total_lines": 2,
          "line_start": 1545,
          "line_end": 1546,
          "content": "refData, 0,<br/>                                         refData.length"
        },
        {
          "total_lines": 2,
          "line_start": 860,
          "line_end": 861,
          "content": "session, Trigger.INSERT_AFTER_ROW,<br/>                                       null"
        },
        {
          "total_lines": 2,
          "line_start": 872,
          "line_end": 873,
          "content": "session, Trigger.INSERT_BEFORE_ROW, null,<br/>                                   data, null"
        },
        {
          "total_lines": 2,
          "line_start": 815,
          "line_end": 816,
          "content": "session, Trigger.INSERT_BEFORE_ROW,<br/>                                       null"
        },
        {
          "total_lines": 2,
          "line_start": 173,
          "line_end": 174,
          "content": "StatementTypes.UPDATE_CURSOR, StatementTypes.X_SQL_DATA_CHANGE,<br/>              null"
        },
        {
          "total_lines": 2,
          "line_start": 252,
          "line_end": 253,
          "content": "constraint.getRefColumns(),<br/>                                    updateColumnMap"
        },
        {
          "total_lines": 2,
          "line_start": 118,
          "line_end": 119,
          "content": "StatementTypes.X_SQL_DATA_CHANGE,<br/>              session.getCurrentSchemaHsqlName()"
        },
        {
          "total_lines": 2,
          "line_start": 712,
          "line_end": 713,
          "content": "colTypes,<br/>                                      insertExpression.nodes[0].nodes"
        },
        {
          "total_lines": 2,
          "line_start": 868,
          "line_end": 869,
          "content": "Session session, PersistentStore store,<br/>                           Object[] data"
        },
        {
          "total_lines": 2,
          "line_start": 90,
          "line_end": 91,
          "content": "StatementTypes.X_SQL_DATA_CHANGE,<br/>              session.getCurrentSchemaHsqlName()"
        },
        {
          "total_lines": 2,
          "line_start": 1197,
          "line_end": 1198,
          "content": "ErrorCode.X_23504,<br/>                                      refTable.getName().name"
        },
        {
          "total_lines": 2,
          "line_start": 1533,
          "line_end": 1534,
          "content": "refData, 0,<br/>                                         refData.length"
        },
        {
          "total_lines": 2,
          "line_start": 1093,
          "line_end": 1094,
          "content": "session, currentTable, row.getData(),<br/>                                   changedData"
        },
        {
          "total_lines": 2,
          "line_start": 1329,
          "line_end": 1330,
          "content": "session, currentTable,<br/>                                           row.getData(), changedData"
        },
        {
          "total_lines": 1,
          "line_start": 1373,
          "line_end": 1373,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 173,
          "line_end": 173,
          "content": "StatementTypes.UPDATE_CURSOR, StatementTypes.X_SQL_DATA_CHANGE"
        },
        {
          "total_lines": 1,
          "line_start": 860,
          "line_end": 860,
          "content": "session, Trigger.INSERT_AFTER_ROW"
        },
        {
          "total_lines": 1,
          "line_start": 861,
          "line_end": 861,
          "content": "data, null"
        },
        {
          "total_lines": 1,
          "line_start": 873,
          "line_end": 873,
          "content": "data, null"
        },
        {
          "total_lines": 1,
          "line_start": 889,
          "line_end": 889,
          "content": "data, null"
        },
        {
          "total_lines": 1,
          "line_start": 1512,
          "line_end": 1512,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 815,
          "line_end": 815,
          "content": "session, Trigger.INSERT_BEFORE_ROW"
        },
        {
          "total_lines": 1,
          "line_start": 872,
          "line_end": 872,
          "content": "session, Trigger.INSERT_BEFORE_ROW"
        },
        {
          "total_lines": 1,
          "line_start": 1264,
          "line_end": 1264,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 888,
          "line_end": 888,
          "content": "session, Trigger.INSERT_AFTER_ROW"
        },
        {
          "total_lines": 1,
          "line_start": 816,
          "line_end": 816,
          "content": "data, null"
        },
        {
          "total_lines": 1,
          "line_start": 236,
          "line_end": 236,
          "content": "constraint.getRefColumns(), updateColumnMap"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/tar/DbBackup.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 150,
          "line_end": 154,
          "content": "patternStrings = new String[sa.length - firstPatInd];<br/><br/>                    for (int i = firstPatInd; i < sa.length; i++) {<br/>                        patternStrings[i - firstPatInd] = sa[i];<br/>                    }"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/map/ValuePoolHashMap.java",
      "loc_duplicate": 72,
      "clones": [
          {
          "total_lines": 11,
          "line_start": 257,
          "line_end": 267,
          "content": "testValue = (String) objectKeyTable[lookup];<br/><br/>            if (key.equals(testValue)) {<br/>                if (accessCount > ACCESS_MAX) {<br/>                    resetAccessCount();<br/>                }<br/><br/>                accessTable[lookup] = accessCount++;<br/><br/>                return testValue;<br/>            }"
        },
        {
          "total_lines": 11,
          "line_start": 212,
          "line_end": 222,
          "content": "testValue = (String) objectKeyTable[lookup];<br/><br/>            if (key.equals(testValue)) {<br/>                if (accessCount > ACCESS_MAX) {<br/>                    resetAccessCount();<br/>                }<br/><br/>                accessTable[lookup] = accessCount++;<br/><br/>                return testValue;<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 345,
          "line_end": 351,
          "content": "if (accessCount > ACCESS_MAX) {<br/>                    resetAccessCount();<br/>                }<br/><br/>                accessTable[lookup] = accessCount++;<br/><br/>                return testValue;"
        },
        {
          "total_lines": 7,
          "line_start": 387,
          "line_end": 393,
          "content": "if (accessCount > ACCESS_MAX) {<br/>                    resetAccessCount();<br/>                }<br/><br/>                accessTable[lookup] = accessCount++;<br/><br/>                return testValue;"
        },
        {
          "total_lines": 7,
          "line_start": 303,
          "line_end": 309,
          "content": "if (accessCount > ACCESS_MAX) {<br/>                    resetAccessCount();<br/>                }<br/><br/>                accessTable[lookup] = accessCount++;<br/><br/>                return testValue;"
        },
        {
          "total_lines": 7,
          "line_start": 156,
          "line_end": 162,
          "content": "if (accessCount > ACCESS_MAX) {<br/>                    resetAccessCount();<br/>                }<br/><br/>                accessTable[lookup] = accessCount++;<br/><br/>                return testValue;"
        },
        {
          "total_lines": 7,
          "line_start": 114,
          "line_end": 120,
          "content": "if (accessCount > ACCESS_MAX) {<br/>                    resetAccessCount();<br/>                }<br/><br/>                accessTable[lookup] = accessCount++;<br/><br/>                return testValue;"
        },
        {
          "total_lines": 2,
          "line_start": 340,
          "line_end": 341,
          "content": "lastLookup = lookup,<br/>                lookup = hashIndex.getNextLookup(lookup)"
        },
        {
          "total_lines": 2,
          "line_start": 382,
          "line_end": 383,
          "content": "lastLookup = lookup,<br/>                lookup = hashIndex.getNextLookup(lookup)"
        },
        {
          "total_lines": 2,
          "line_start": 109,
          "line_end": 110,
          "content": "lastLookup = lookup,<br/>                lookup = hashIndex.getNextLookup(lookup)"
        },
        {
          "total_lines": 2,
          "line_start": 255,
          "line_end": 256,
          "content": "lastLookup = lookup,<br/>                lookup = hashIndex.getNextLookup(lookup)"
        },
        {
          "total_lines": 2,
          "line_start": 298,
          "line_end": 299,
          "content": "lastLookup = lookup,<br/>                lookup = hashIndex.getNextLookup(lookup)"
        },
        {
          "total_lines": 2,
          "line_start": 151,
          "line_end": 152,
          "content": "lastLookup = lookup,<br/>                lookup = hashIndex.getNextLookup(lookup)"
        },
        {
          "total_lines": 2,
          "line_start": 210,
          "line_end": 211,
          "content": "lastLookup = lookup,<br/>                lookup = hashIndex.getNextLookup(lookup)"
        },
        {
          "total_lines": 1,
          "line_start": 63,
          "line_end": 63,
          "content": "initialCapacity, BaseHashMap.objectKeyOrValue, BaseHashMap.noKeyOrValue"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rowio/RowInputTextQuoted.java",
      "loc_duplicate": 13,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 141,
          "line_end": 147,
          "content": "Object[] messages = new Object[] {<br/>                new Integer(field), e.toString()<br/>            };<br/><br/>            throw new IOException(<br/>                Error.getMessage(<br/>                    ErrorCode.M_TEXT_SOURCE_FIELD_ERROR, 0, messages));"
        },
        {
          "total_lines": 2,
          "line_start": 55,
          "line_end": 56,
          "content": "String fieldSep, String varSep,<br/>                              String longvarSep, boolean allQuoted"
        },
        {
          "total_lines": 2,
          "line_start": 36,
          "line_end": 37,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 1,
          "line_start": 56,
          "line_end": 56,
          "content": "String longvarSep, boolean allQuoted"
        },
        {
          "total_lines": 1,
          "line_start": 55,
          "line_end": 55,
          "content": "String fieldSep, String varSep"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestOdbcTypes.java",
      "loc_duplicate": 715,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 1164,
          "line_end": 1169,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 1286,
          "line_end": 1291,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 699,
          "line_end": 704,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 959,
          "line_end": 964,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 731,
          "line_end": 736,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 191,
          "line_end": 196,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 1084,
          "line_end": 1089,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 1417,
          "line_end": 1422,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 805,
          "line_end": 810,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 1328,
          "line_end": 1333,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 838,
          "line_end": 843,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 221,
          "line_end": 226,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 1044,
          "line_end": 1049,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 521,
          "line_end": 526,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 460,
          "line_end": 465,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 671,
          "line_end": 676,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 430,
          "line_end": 435,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 1124,
          "line_end": 1129,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 1375,
          "line_end": 1380,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 1204,
          "line_end": 1209,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 918,
          "line_end": 923,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 401,
          "line_end": 406,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 372,
          "line_end": 377,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 550,
          "line_end": 555,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 642,
          "line_end": 647,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 161,
          "line_end": 166,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 314,
          "line_end": 319,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 999,
          "line_end": 1004,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 490,
          "line_end": 495,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 767,
          "line_end": 772,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 1545,
          "line_end": 1550,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 343,
          "line_end": 348,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 612,
          "line_end": 617,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 878,
          "line_end": 883,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 1597,
          "line_end": 1602,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (ps != null) {<br/>                    ps.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 250,
          "line_end": 255,
          "content": "if (rs != null) {<br/>                    rs.close();<br/>                }<br/>                if (st != null) {<br/>                    st.close();<br/>                }"
        },
        {
          "total_lines": 5,
          "line_start": 1023,
          "line_end": 1027,
          "content": "assertEquals(1, ps.executeUpdate());<br/>            ps.setInt(1, 4);<br/>            assertEquals(1, ps.executeUpdate());<br/>            ps.close();<br/>            netConn.commit();"
        },
        {
          "total_lines": 5,
          "line_start": 1063,
          "line_end": 1067,
          "content": "assertEquals(1, ps.executeUpdate());<br/>            ps.setInt(1, 4);<br/>            assertEquals(1, ps.executeUpdate());<br/>            ps.close();<br/>            netConn.commit();"
        },
        {
          "total_lines": 5,
          "line_start": 1307,
          "line_end": 1311,
          "content": "assertEquals(1, ps.executeUpdate());<br/>            ps.setInt(1, 4);<br/>            assertEquals(1, ps.executeUpdate());<br/>            ps.close();<br/>            netConn.commit();"
        },
        {
          "total_lines": 5,
          "line_start": 1103,
          "line_end": 1107,
          "content": "assertEquals(1, ps.executeUpdate());<br/>            ps.setInt(1, 4);<br/>            assertEquals(1, ps.executeUpdate());<br/>            ps.close();<br/>            netConn.commit();"
        },
        {
          "total_lines": 5,
          "line_start": 937,
          "line_end": 941,
          "content": "assertEquals(1, ps.executeUpdate());<br/>            ps.setInt(1, 4);<br/>            assertEquals(1, ps.executeUpdate());<br/>            ps.close();<br/>            netConn.commit();"
        },
        {
          "total_lines": 5,
          "line_start": 1143,
          "line_end": 1147,
          "content": "assertEquals(1, ps.executeUpdate());<br/>            ps.setInt(1, 4);<br/>            assertEquals(1, ps.executeUpdate());<br/>            ps.close();<br/>            netConn.commit();"
        },
        {
          "total_lines": 4,
          "line_start": 515,
          "line_end": 518,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 424,
          "line_end": 427,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 832,
          "line_end": 835,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 544,
          "line_end": 547,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 872,
          "line_end": 875,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 454,
          "line_end": 457,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 185,
          "line_end": 188,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 665,
          "line_end": 668,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 1322,
          "line_end": 1325,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 484,
          "line_end": 487,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 636,
          "line_end": 639,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 1198,
          "line_end": 1201,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 1158,
          "line_end": 1161,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 366,
          "line_end": 369,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 912,
          "line_end": 915,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 337,
          "line_end": 340,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 606,
          "line_end": 609,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 1539,
          "line_end": 1542,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 244,
          "line_end": 247,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 993,
          "line_end": 996,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 1369,
          "line_end": 1372,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 725,
          "line_end": 728,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 1038,
          "line_end": 1041,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 1591,
          "line_end": 1594,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 1280,
          "line_end": 1283,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 155,
          "line_end": 158,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 215,
          "line_end": 218,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 395,
          "line_end": 398,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 953,
          "line_end": 956,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 1078,
          "line_end": 1081,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 799,
          "line_end": 802,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 761,
          "line_end": 764,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 308,
          "line_end": 311,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 1118,
          "line_end": 1121,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 693,
          "line_end": 696,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 4,
          "line_start": 1411,
          "line_end": 1414,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 3,
          "line_start": 1158,
          "line_end": 1160,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 358,
          "line_end": 360,
          "content": "st = netConn.createStatement();<br/>            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 912,
          "line_end": 914,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 872,
          "line_end": 874,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 454,
          "line_end": 456,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 515,
          "line_end": 517,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 1198,
          "line_end": 1200,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 215,
          "line_end": 217,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 155,
          "line_end": 157,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 329,
          "line_end": 331,
          "content": "st = netConn.createStatement();<br/>            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 693,
          "line_end": 695,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 606,
          "line_end": 608,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 395,
          "line_end": 397,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 484,
          "line_end": 486,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 832,
          "line_end": 834,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 1322,
          "line_end": 1324,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 236,
          "line_end": 238,
          "content": "st = netConn.createStatement();<br/>            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 544,
          "line_end": 546,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 761,
          "line_end": 763,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 1118,
          "line_end": 1120,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 244,
          "line_end": 246,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 424,
          "line_end": 426,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 993,
          "line_end": 995,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 300,
          "line_end": 302,
          "content": "st = netConn.createStatement();<br/>            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 185,
          "line_end": 187,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 1369,
          "line_end": 1371,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 725,
          "line_end": 727,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 147,
          "line_end": 149,
          "content": "st = netConn.createStatement();<br/>            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 1038,
          "line_end": 1040,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 206,
          "line_end": 208,
          "content": "st = netConn.createStatement();<br/>            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 665,
          "line_end": 667,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 1591,
          "line_end": 1593,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 337,
          "line_end": 339,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 799,
          "line_end": 801,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 953,
          "line_end": 955,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 1411,
          "line_end": 1413,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 1539,
          "line_end": 1541,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 387,
          "line_end": 389,
          "content": "st = netConn.createStatement();<br/>            rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 1078,
          "line_end": 1080,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 636,
          "line_end": 638,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 1280,
          "line_end": 1282,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 366,
          "line_end": 368,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 3,
          "line_start": 308,
          "line_end": 310,
          "content": "junit.framework.AssertionFailedError ase<br/>                = new junit.framework.AssertionFailedError(se.getMessage());<br/>            ase.initCause(se);"
        },
        {
          "total_lines": 2,
          "line_start": 144,
          "line_end": 145,
          "content": "ResultSet rs = null;<br/>        Statement st = null;"
        },
        {
          "total_lines": 2,
          "line_start": 801,
          "line_end": 802,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 1593,
          "line_end": 1594,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 237,
          "line_end": 238,
          "content": "rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 187,
          "line_end": 188,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 1016,
          "line_end": 1017,
          "content": "PreparedStatement ps = null;<br/>        ResultSet rs = null;"
        },
        {
          "total_lines": 2,
          "line_start": 1558,
          "line_end": 1559,
          "content": "\"Retrieved bye array length wrong (2)\",<br/>            expectedBytes.length, ba2.length"
        },
        {
          "total_lines": 2,
          "line_start": 1200,
          "line_end": 1201,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 740,
          "line_end": 741,
          "content": "\"Retrieved bye array length wrong\",<br/>            expectedBytes.length, ba.length"
        },
        {
          "total_lines": 2,
          "line_start": 995,
          "line_end": 996,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 1413,
          "line_end": 1414,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 1605,
          "line_end": 1606,
          "content": "\"Retrieved bye array length wrong (1)\",<br/>            expectedBytes.length, ba1.length"
        },
        {
          "total_lines": 2,
          "line_start": 217,
          "line_end": 218,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 667,
          "line_end": 668,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 1541,
          "line_end": 1542,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 157,
          "line_end": 158,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 384,
          "line_end": 385,
          "content": "ResultSet rs = null;<br/>        Statement st = null;"
        },
        {
          "total_lines": 2,
          "line_start": 310,
          "line_end": 311,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 695,
          "line_end": 696,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 1371,
          "line_end": 1372,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 297,
          "line_end": 298,
          "content": "ResultSet rs = null;<br/>        Statement st = null;"
        },
        {
          "total_lines": 2,
          "line_start": 355,
          "line_end": 356,
          "content": "ResultSet rs = null;<br/>        Statement st = null;"
        },
        {
          "total_lines": 2,
          "line_start": 727,
          "line_end": 728,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 914,
          "line_end": 915,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 595,
          "line_end": 596,
          "content": "ResultSet rs = null;<br/>        Statement st = null;"
        },
        {
          "total_lines": 2,
          "line_start": 1553,
          "line_end": 1554,
          "content": "\"Retrieved bye array length wrong (1)\",<br/>            expectedBytes.length, ba1.length"
        },
        {
          "total_lines": 2,
          "line_start": 233,
          "line_end": 234,
          "content": "ResultSet rs = null;<br/>        Statement st = null;"
        },
        {
          "total_lines": 2,
          "line_start": 955,
          "line_end": 956,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 763,
          "line_end": 764,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 1080,
          "line_end": 1081,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 486,
          "line_end": 487,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 326,
          "line_end": 327,
          "content": "ResultSet rs = null;<br/>        Statement st = null;"
        },
        {
          "total_lines": 2,
          "line_start": 246,
          "line_end": 247,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 426,
          "line_end": 427,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 207,
          "line_end": 208,
          "content": "rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 368,
          "line_end": 369,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 1160,
          "line_end": 1161,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 930,
          "line_end": 931,
          "content": "PreparedStatement ps = null;<br/>        ResultSet rs = null;"
        },
        {
          "total_lines": 2,
          "line_start": 1120,
          "line_end": 1121,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 1040,
          "line_end": 1041,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 339,
          "line_end": 340,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 397,
          "line_end": 398,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 608,
          "line_end": 609,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 546,
          "line_end": 547,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 1136,
          "line_end": 1137,
          "content": "PreparedStatement ps = null;<br/>        ResultSet rs = null;"
        },
        {
          "total_lines": 2,
          "line_start": 456,
          "line_end": 457,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 301,
          "line_end": 302,
          "content": "rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 874,
          "line_end": 875,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 359,
          "line_end": 360,
          "content": "rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 1282,
          "line_end": 1283,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 1610,
          "line_end": 1611,
          "content": "\"Retrieved bye array length wrong (2)\",<br/>            expectedBytes.length, ba2.length"
        },
        {
          "total_lines": 2,
          "line_start": 834,
          "line_end": 835,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 517,
          "line_end": 518,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 148,
          "line_end": 149,
          "content": "rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 638,
          "line_end": 639,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 2,
          "line_start": 203,
          "line_end": 204,
          "content": "ResultSet rs = null;<br/>        Statement st = null;"
        },
        {
          "total_lines": 2,
          "line_start": 330,
          "line_end": 331,
          "content": "rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 388,
          "line_end": 389,
          "content": "rs = st.executeQuery(\"SELECT * FROM alltypes WHERE id in (1, 2)\");<br/>            assertTrue(\"Got no rows with id in (1, 2)\", rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 776,
          "line_end": 777,
          "content": "\"Retrieved bye array length wrong\",<br/>            expectedBytes.length, ba.length"
        },
        {
          "total_lines": 2,
          "line_start": 1056,
          "line_end": 1057,
          "content": "PreparedStatement ps = null;<br/>        ResultSet rs = null;"
        },
        {
          "total_lines": 2,
          "line_start": 472,
          "line_end": 473,
          "content": "ResultSet rs = null;<br/>        Statement st = null;"
        },
        {
          "total_lines": 2,
          "line_start": 1324,
          "line_end": 1325,
          "content": "ase.initCause(se);<br/>            throw ase;"
        },
        {
          "total_lines": 1,
          "line_start": 513,
          "line_end": 513,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 825,
          "line_end": 825,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 240,
          "line_end": 240,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 1364,
          "line_end": 1364,
          "content": "Timestamp.class, rs.getObject(\"ts\").getClass()"
        },
        {
          "total_lines": 1,
          "line_start": 1406,
          "line_end": 1406,
          "content": "Timestamp.class, rs.getObject(\"tsw\").getClass()"
        },
        {
          "total_lines": 1,
          "line_start": 242,
          "line_end": 242,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 827,
          "line_end": 827,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 759,
          "line_end": 759,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 183,
          "line_end": 183,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 660,
          "line_end": 660,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 691,
          "line_end": 691,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 1273,
          "line_end": 1273,
          "content": "java.sql.Date.class, rs.getObject(\"d\").getClass()"
        },
        {
          "total_lines": 1,
          "line_start": 420,
          "line_end": 420,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 335,
          "line_end": 335,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 743,
          "line_end": 743,
          "content": "expectedBytes[i], ba[i]"
        },
        {
          "total_lines": 1,
          "line_start": 631,
          "line_end": 631,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 151,
          "line_end": 151,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 1556,
          "line_end": 1556,
          "content": "expectedBytes[i], ba1[i]"
        },
        {
          "total_lines": 1,
          "line_start": 629,
          "line_end": 629,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 209,
          "line_end": 209,
          "content": "Integer.class, rs.getObject(\"si\").getClass()"
        },
        {
          "total_lines": 1,
          "line_start": 179,
          "line_end": 179,
          "content": "Integer.class, rs.getObject(\"ti\").getClass()"
        },
        {
          "total_lines": 1,
          "line_start": 507,
          "line_end": 507,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 393,
          "line_end": 393,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 480,
          "line_end": 480,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 907,
          "line_end": 907,
          "content": "Integer.class, rs.getObject(\"ti\").getClass()"
        },
        {
          "total_lines": 1,
          "line_start": 306,
          "line_end": 306,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 755,
          "line_end": 755,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 689,
          "line_end": 689,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 830,
          "line_end": 830,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 448,
          "line_end": 448,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 153,
          "line_end": 153,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 178,
          "line_end": 178,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 688,
          "line_end": 688,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 181,
          "line_end": 181,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 722,
          "line_end": 722,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 211,
          "line_end": 211,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 634,
          "line_end": 634,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 418,
          "line_end": 418,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 604,
          "line_end": 604,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 509,
          "line_end": 509,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 422,
          "line_end": 422,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 213,
          "line_end": 213,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 663,
          "line_end": 663,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 1613,
          "line_end": 1613,
          "content": "expectedBytes[i], ba2[i]"
        },
        {
          "total_lines": 1,
          "line_start": 482,
          "line_end": 482,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 794,
          "line_end": 794,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 724,
          "line_end": 724,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 391,
          "line_end": 391,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 600,
          "line_end": 600,
          "content": "Timestamp.class, rs.getObject(\"ts\").getClass()"
        },
        {
          "total_lines": 1,
          "line_start": 364,
          "line_end": 364,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 450,
          "line_end": 450,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 1561,
          "line_end": 1561,
          "content": "expectedBytes[i], ba2[i]"
        },
        {
          "total_lines": 1,
          "line_start": 601,
          "line_end": 601,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 538,
          "line_end": 538,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 630,
          "line_end": 630,
          "content": "Timestamp.class, rs.getObject(\"tsw\").getClass()"
        },
        {
          "total_lines": 1,
          "line_start": 599,
          "line_end": 599,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 540,
          "line_end": 540,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 508,
          "line_end": 508,
          "content": "java.sql.Date.class, rs.getObject(\"d\").getClass()"
        },
        {
          "total_lines": 1,
          "line_start": 661,
          "line_end": 661,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 452,
          "line_end": 452,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 757,
          "line_end": 757,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 542,
          "line_end": 542,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 304,
          "line_end": 304,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 947,
          "line_end": 947,
          "content": "Integer.class, rs.getObject(\"si\").getClass()"
        },
        {
          "total_lines": 1,
          "line_start": 797,
          "line_end": 797,
          "content": "\"Got too many rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 1608,
          "line_end": 1608,
          "content": "expectedBytes[i], ba1[i]"
        },
        {
          "total_lines": 1,
          "line_start": 478,
          "line_end": 478,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 333,
          "line_end": 333,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 792,
          "line_end": 792,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 720,
          "line_end": 720,
          "content": "\"Got no rows with id in (1, 2)\", rs.next()"
        },
        {
          "total_lines": 1,
          "line_start": 779,
          "line_end": 779,
          "content": "expectedBytes[i], ba[i]"
        },
        {
          "total_lines": 1,
          "line_start": 362,
          "line_end": 362,
          "content": "\"Got only one row with id in (1, 2)\", rs.next()"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/TableWorks.java",
      "loc_duplicate": 92,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 391,
          "line_end": 395,
          "content": "\"IDX\",<br/>                                                         c.getName().name,<br/>                                                         table.getSchemaName(),<br/>                                                         table.getName(),<br/>                                                         SchemaObject.INDEX"
        },
        {
          "total_lines": 5,
          "line_start": 336,
          "line_end": 340,
          "content": "\"IDX\",<br/>                                                         c.getName().name,<br/>                                                         table.getSchemaName(),<br/>                                                         table.getName(),<br/>                                                         SchemaObject.INDEX"
        },
        {
          "total_lines": 4,
          "line_start": 391,
          "line_end": 394,
          "content": "\"IDX\",<br/>                                                         c.getName().name,<br/>                                                         table.getSchemaName(),<br/>                                                         table.getName()"
        },
        {
          "total_lines": 4,
          "line_start": 337,
          "line_end": 340,
          "content": "c.getName().name,<br/>                                                         table.getSchemaName(),<br/>                                                         table.getName(),<br/>                                                         SchemaObject.INDEX"
        },
        {
          "total_lines": 4,
          "line_start": 336,
          "line_end": 339,
          "content": "\"IDX\",<br/>                                                         c.getName().name,<br/>                                                         table.getSchemaName(),<br/>                                                         table.getName()"
        },
        {
          "total_lines": 4,
          "line_start": 708,
          "line_end": 711,
          "content": "ColumnSchema column = table.getColumn(c.notNullColumnIndex);<br/><br/>            column.setNullable(false);<br/>            table.setColumnTypeVars(c.notNullColumnIndex);"
        },
        {
          "total_lines": 4,
          "line_start": 392,
          "line_end": 395,
          "content": "c.getName().name,<br/>                                                         table.getSchemaName(),<br/>                                                         table.getName(),<br/>                                                         SchemaObject.INDEX"
        },
        {
          "total_lines": 3,
          "line_start": 217,
          "line_end": 219,
          "content": "\"REF\",<br/>            c.getName().name, table.getSchemaName(), table.getName(),<br/>            SchemaObject.INDEX"
        },
        {
          "total_lines": 3,
          "line_start": 391,
          "line_end": 393,
          "content": "\"IDX\",<br/>                                                         c.getName().name,<br/>                                                         table.getSchemaName()"
        },
        {
          "total_lines": 3,
          "line_start": 336,
          "line_end": 338,
          "content": "\"IDX\",<br/>                                                         c.getName().name,<br/>                                                         table.getSchemaName()"
        },
        {
          "total_lines": 3,
          "line_start": 1158,
          "line_end": 1160,
          "content": "\"CT\",<br/>                table.getSchemaName(), table.getName(),<br/>                SchemaObject.CONSTRAINT"
        },
        {
          "total_lines": 3,
          "line_start": 392,
          "line_end": 394,
          "content": "c.getName().name,<br/>                                                         table.getSchemaName(),<br/>                                                         table.getName()"
        },
        {
          "total_lines": 3,
          "line_start": 652,
          "line_end": 654,
          "content": "\"IDX\",<br/>            name.name, table.getSchemaName(), table.getName(),<br/>            SchemaObject.INDEX"
        },
        {
          "total_lines": 3,
          "line_start": 337,
          "line_end": 339,
          "content": "c.getName().name,<br/>                                                         table.getSchemaName(),<br/>                                                         table.getName()"
        },
        {
          "total_lines": 2,
          "line_start": 804,
          "line_end": 805,
          "content": "ErrorCode.X_42536,<br/>                                      name.getSchemaQualifiedStatementName()"
        },
        {
          "total_lines": 2,
          "line_start": 1162,
          "line_end": 1163,
          "content": "constName, null,<br/>                               SchemaObject.ConstraintTypes.CHECK"
        },
        {
          "total_lines": 2,
          "line_start": 929,
          "line_end": 930,
          "content": "session, table.tableType,<br/>                                                null, null"
        },
        {
          "total_lines": 2,
          "line_start": 652,
          "line_end": 653,
          "content": "\"IDX\",<br/>            name.name, table.getSchemaName(), table.getName()"
        },
        {
          "total_lines": 2,
          "line_start": 526,
          "line_end": 527,
          "content": "null,<br/>                                        null, -1, 0"
        },
        {
          "total_lines": 2,
          "line_start": 37,
          "line_end": 38,
          "content": "import org.hsqldb.index.Index;<br/>import org.hsqldb.lib.ArrayUtil;"
        },
        {
          "total_lines": 2,
          "line_start": 217,
          "line_end": 218,
          "content": "\"REF\",<br/>            c.getName().name, table.getSchemaName()"
        },
        {
          "total_lines": 2,
          "line_start": 782,
          "line_end": 783,
          "content": "ErrorCode.X_42536,<br/>                                  name.getSchemaQualifiedStatementName()"
        },
        {
          "total_lines": 2,
          "line_start": 218,
          "line_end": 219,
          "content": "c.getName().name, table.getSchemaName(), table.getName(),<br/>            SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 743,
          "line_end": 744,
          "content": "null,<br/>                                            null"
        },
        {
          "total_lines": 2,
          "line_start": 837,
          "line_end": 838,
          "content": "null,<br/>                                        null"
        },
        {
          "total_lines": 2,
          "line_start": 710,
          "line_end": 711,
          "content": "column.setNullable(false);<br/>            table.setColumnTypeVars(c.notNullColumnIndex);"
        },
        {
          "total_lines": 2,
          "line_start": 213,
          "line_end": 214,
          "content": "\"IDX\",<br/>            table.getSchemaName(), table.getName()"
        },
        {
          "total_lines": 2,
          "line_start": 658,
          "line_end": 659,
          "content": "index,<br/>                           SchemaObject.ConstraintTypes.UNIQUE"
        },
        {
          "total_lines": 1,
          "line_start": 744,
          "line_end": 744,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 1224,
          "line_end": 1224,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 345,
          "line_end": 345,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 399,
          "line_end": 399,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 1097,
          "line_end": 1097,
          "content": "ColumnSchema oldCol, ColumnSchema newCol"
        },
        {
          "total_lines": 1,
          "line_start": 216,
          "line_end": 216,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 1020,
          "line_end": 1020,
          "content": "ColumnSchema oldCol, ColumnSchema newCol"
        },
        {
          "total_lines": 1,
          "line_start": 930,
          "line_end": 930,
          "content": "null, null, -1, 0"
        },
        {
          "total_lines": 1,
          "line_start": 1297,
          "line_end": 1297,
          "content": "int colIndex, int adjust"
        },
        {
          "total_lines": 1,
          "line_start": 980,
          "line_end": 980,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 1224,
          "line_end": 1224,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 837,
          "line_end": 837,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 980,
          "line_end": 980,
          "content": "null, null"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestDima.java",
      "loc_duplicate": 18,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 114,
          "line_end": 116,
          "content": "System.out.println(rs.getInt(1));<br/>                System.out.println(rs.getInt(2));<br/>                System.out.println(rs.getString(3));"
        },
        {
          "total_lines": 3,
          "line_start": 104,
          "line_end": 106,
          "content": "System.out.println(rs.getInt(1));<br/>                System.out.println(rs.getInt(2));<br/>                System.out.println(rs.getString(3));"
        },
        {
          "total_lines": 2,
          "line_start": 57,
          "line_end": 58,
          "content": "conn.commit();<br/>            stat.executeUpdate(\"CHECKPOINT\");"
        },
        {
          "total_lines": 2,
          "line_start": 114,
          "line_end": 115,
          "content": "System.out.println(rs.getInt(1));<br/>                System.out.println(rs.getInt(2));"
        },
        {
          "total_lines": 2,
          "line_start": 124,
          "line_end": 125,
          "content": "System.err.println(e.getMessage());<br/>            e.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 104,
          "line_end": 105,
          "content": "System.out.println(rs.getInt(1));<br/>                System.out.println(rs.getInt(2));"
        },
        {
          "total_lines": 2,
          "line_start": 206,
          "line_end": 207,
          "content": "System.err.println(e.getMessage());<br/>            e.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 67,
          "line_end": 68,
          "content": "conn.commit();<br/>            stat.executeUpdate(\"CHECKPOINT\");"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/MainInvoker.java",
      "loc_duplicate": 6,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 103,
          "line_end": 104,
          "content": "(String) outList.remove(0),<br/>                   (String[]) outList.toArray(emptyStringArray)"
        },
        {
          "total_lines": 2,
          "line_start": 57,
          "line_end": 58,
          "content": "System.err.println(SYNTAX_MSG);<br/>        System.exit(2);"
        },
        {
          "total_lines": 2,
          "line_start": 91,
          "line_end": 92,
          "content": "(String) outList.remove(0),<br/>                           (String[]) outList.toArray(emptyStringArray)"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/PersistentStoreCollectionDatabase.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 90,
          "line_end": 92,
          "content": "PersistentStore store = (PersistentStore) it.next();<br/><br/>            store.release();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestNullInUnion.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 64,
          "line_end": 65,
          "content": "assertTrue(rs.next());<br/>        assertEquals(\"t1\", rs.getObject(\"atable\"));"
        },
        {
          "total_lines": 2,
          "line_start": 69,
          "line_end": 70,
          "content": "assertEquals(null, rs.getObject(\"value3\"));<br/>        assertTrue(rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 75,
          "line_end": 76,
          "content": "assertEquals(null, rs.getObject(\"value3\"));<br/>        assertTrue(rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 70,
          "line_end": 71,
          "content": "assertTrue(rs.next());<br/>        assertEquals(\"t1\", rs.getObject(\"atable\"));"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestCacheSize.java",
      "loc_duplicate": 32,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 995,
          "line_end": 1003,
          "content": "int b = r.nextInt();<br/><br/>        if (b == Integer.MIN_VALUE) {<br/>            b = Integer.MAX_VALUE;<br/>        }<br/><br/>        b = Math.abs(b);<br/><br/>        return b % range;"
        },
        {
          "total_lines": 7,
          "line_start": 995,
          "line_end": 1001,
          "content": "int b = r.nextInt();<br/><br/>        if (b == Integer.MIN_VALUE) {<br/>            b = Integer.MAX_VALUE;<br/>        }<br/><br/>        b = Math.abs(b);"
        },
        {
          "total_lines": 2,
          "line_start": 915,
          "line_end": 916,
          "content": "System.out.println(\"error : \" + random);<br/>            e.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 822,
          "line_end": 823,
          "content": "System.out.println(\"error : \" + random);<br/>            e.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 192,
          "line_end": 193,
          "content": "e.printStackTrace();<br/>            System.out.println(\"TestSql.setUp() error: \" + e.getMessage());"
        },
        {
          "total_lines": 2,
          "line_start": 959,
          "line_end": 960,
          "content": "System.out.println(\"error : \" + random);<br/>            e.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 776,
          "line_end": 777,
          "content": "System.out.println(\"error : \" + random);<br/>            e.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 864,
          "line_end": 865,
          "content": "System.out.println(\"error : \" + random);<br/>            e.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 734,
          "line_end": 735,
          "content": "System.out.println(\"error : \" + random);<br/>            e.printStackTrace();"
        },
        {
          "total_lines": 1,
          "line_start": 646,
          "line_end": 646,
          "content": "rs.getInt(1), time"
        },
        {
          "total_lines": 1,
          "line_start": 662,
          "line_end": 662,
          "content": "rs.getInt(1), time"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCBlobFile.java",
      "loc_duplicate": 266,
      "clones": [
          {
          "total_lines": 37,
          "line_start": 551,
          "line_end": 587,
          "content": "if (m_closed) {<br/>            return;<br/>        }<br/><br/>        m_closed = true;<br/><br/>        final List streams = new ArrayList();<br/><br/>        streams.addAll(m_streams);<br/><br/>        m_streams = null;<br/><br/>        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {<br/>            final Object stream = itr.next();<br/><br/>            if (stream instanceof InputStream) {<br/>                try {<br/>                    ((InputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            } else if (stream instanceof OutputStream) {<br/>                try {<br/>                    ((OutputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            }<br/>        }<br/><br/>        if (m_deleteOnFree) {<br/>            try {<br/>                m_file.delete();<br/>            } catch (Exception e) {}<br/>        }"
        },
        {
          "total_lines": 33,
          "line_start": 555,
          "line_end": 587,
          "content": "m_closed = true;<br/><br/>        final List streams = new ArrayList();<br/><br/>        streams.addAll(m_streams);<br/><br/>        m_streams = null;<br/><br/>        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {<br/>            final Object stream = itr.next();<br/><br/>            if (stream instanceof InputStream) {<br/>                try {<br/>                    ((InputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            } else if (stream instanceof OutputStream) {<br/>                try {<br/>                    ((OutputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            }<br/>        }<br/><br/>        if (m_deleteOnFree) {<br/>            try {<br/>                m_file.delete();<br/>            } catch (Exception e) {}<br/>        }"
        },
        {
          "total_lines": 31,
          "line_start": 557,
          "line_end": 587,
          "content": "final List streams = new ArrayList();<br/><br/>        streams.addAll(m_streams);<br/><br/>        m_streams = null;<br/><br/>        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {<br/>            final Object stream = itr.next();<br/><br/>            if (stream instanceof InputStream) {<br/>                try {<br/>                    ((InputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            } else if (stream instanceof OutputStream) {<br/>                try {<br/>                    ((OutputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            }<br/>        }<br/><br/>        if (m_deleteOnFree) {<br/>            try {<br/>                m_file.delete();<br/>            } catch (Exception e) {}<br/>        }"
        },
        {
          "total_lines": 27,
          "line_start": 561,
          "line_end": 587,
          "content": "m_streams = null;<br/><br/>        for (Iterator itr = streams.iterator(); itr.hasNext(); ) {<br/>            final Object stream = itr.next();<br/><br/>            if (stream instanceof InputStream) {<br/>                try {<br/>                    ((InputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            } else if (stream instanceof OutputStream) {<br/>                try {<br/>                    ((OutputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            }<br/>        }<br/><br/>        if (m_deleteOnFree) {<br/>            try {<br/>                m_file.delete();<br/>            } catch (Exception e) {}<br/>        }"
        },
        {
          "total_lines": 25,
          "line_start": 563,
          "line_end": 587,
          "content": "for (Iterator itr = streams.iterator(); itr.hasNext(); ) {<br/>            final Object stream = itr.next();<br/><br/>            if (stream instanceof InputStream) {<br/>                try {<br/>                    ((InputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            } else if (stream instanceof OutputStream) {<br/>                try {<br/>                    ((OutputStream) stream).close();<br/>                } catch (Exception ex) {<br/><br/>                    //<br/>                }<br/>            }<br/>        }<br/><br/>        if (m_deleteOnFree) {<br/>            try {<br/>                m_file.delete();<br/>            } catch (Exception e) {}<br/>        }"
        },
        {
          "total_lines": 24,
          "line_start": 772,
          "line_end": 795,
          "content": "boolean exists = false;<br/>        boolean isFile = false;<br/><br/>        try {<br/>            exists = m_file.exists();<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }<br/><br/>        if (exists) {<br/>            try {<br/>                isFile = m_file.isFile();<br/>            } catch (Exception ex) {<br/>                throw JDBCUtil.sqlException(ex);<br/>            }<br/>        }<br/><br/>        if (exists) {<br/>            if (!isFile) {<br/>                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);<br/>            }<br/>        } else if (checkExists) {<br/>            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);<br/>        }"
        },
        {
          "total_lines": 23,
          "line_start": 773,
          "line_end": 795,
          "content": "boolean isFile = false;<br/><br/>        try {<br/>            exists = m_file.exists();<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }<br/><br/>        if (exists) {<br/>            try {<br/>                isFile = m_file.isFile();<br/>            } catch (Exception ex) {<br/>                throw JDBCUtil.sqlException(ex);<br/>            }<br/>        }<br/><br/>        if (exists) {<br/>            if (!isFile) {<br/>                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);<br/>            }<br/>        } else if (checkExists) {<br/>            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);<br/>        }"
        },
        {
          "total_lines": 21,
          "line_start": 775,
          "line_end": 795,
          "content": "try {<br/>            exists = m_file.exists();<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }<br/><br/>        if (exists) {<br/>            try {<br/>                isFile = m_file.isFile();<br/>            } catch (Exception ex) {<br/>                throw JDBCUtil.sqlException(ex);<br/>            }<br/>        }<br/><br/>        if (exists) {<br/>            if (!isFile) {<br/>                throw JDBCUtil.invalidArgument(\"Is not a file: \" + m_file);<br/>            }<br/>        } else if (checkExists) {<br/>            throw JDBCUtil.invalidArgument(\"Does not exist: \" + m_file);<br/>        }"
        },
        {
          "total_lines": 13,
          "line_start": 775,
          "line_end": 787,
          "content": "try {<br/>            exists = m_file.exists();<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }<br/><br/>        if (exists) {<br/>            try {<br/>                isFile = m_file.isFile();<br/>            } catch (Exception ex) {<br/>                throw JDBCUtil.sqlException(ex);<br/>            }<br/>        }"
        },
        {
          "total_lines": 11,
          "line_start": 551,
          "line_end": 561,
          "content": "if (m_closed) {<br/>            return;<br/>        }<br/><br/>        m_closed = true;<br/><br/>        final List streams = new ArrayList();<br/><br/>        streams.addAll(m_streams);<br/><br/>        m_streams = null;"
        },
        {
          "total_lines": 10,
          "line_start": 807,
          "line_end": 816,
          "content": "try {<br/>            if (!m_file.exists()) {<br/>                FileUtil.getFileUtil().makeParentDirectories(m_file);<br/>                m_file.createNewFile();<br/>            }<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }<br/><br/>        checkIsFile( /*checkExists*/true);"
        },
        {
          "total_lines": 5,
          "line_start": 139,
          "line_end": 143,
          "content": "catch (SQLException ex) {<br/>            throw ex;<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 207,
          "line_end": 211,
          "content": "catch (SQLException ex) {<br/>            throw ex;<br/>        } catch (Exception ex) {<br/>            throw JDBCUtil.sqlException(ex);<br/>        }"
        },
        {
          "total_lines": 1,
          "line_start": 132,
          "line_end": 132,
          "content": "InOutUtil.DEFAULT_COPY_BUFFER_SIZE, length"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ExpressionColumnAccessor.java",
      "loc_duplicate": 11,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 83,
          "line_end": 85,
          "content": "Session session,<br/>            RangeGroup rangeGroup, int rangeCount, RangeGroup[] rangeGroups,<br/>            HsqlList unresolvedSet, boolean acceptsSequences"
        },
        {
          "total_lines": 2,
          "line_start": 152,
          "line_end": 153,
          "content": "RangeVariable[] ranges,<br/>                               RangeVariable[] newRanges"
        },
        {
          "total_lines": 2,
          "line_start": 115,
          "line_end": 116,
          "content": "Expression[] columns,<br/>                                     int length"
        },
        {
          "total_lines": 2,
          "line_start": 120,
          "line_end": 121,
          "content": "RangeVariable range,<br/>                                       Expression[] list"
        },
        {
          "total_lines": 2,
          "line_start": 110,
          "line_end": 111,
          "content": "RangeVariable[] rangeVariables,<br/>                                         OrderedHashSet set"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/DataFileCacheSession.java",
      "loc_duplicate": 13,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 122,
          "line_end": 125,
          "content": "t, ErrorCode.FILE_IO_ERROR,<br/>                              ErrorCode.M_DataFileCache_close, new Object[] {<br/>                t.toString(), dataFileName<br/>            }"
        },
        {
          "total_lines": 4,
          "line_start": 91,
          "line_end": 94,
          "content": "t, ErrorCode.FILE_IO_ERROR,<br/>                              ErrorCode.M_DataFileCache_open, new Object[] {<br/>                t.toString(), dataFileName<br/>            }"
        },
        {
          "total_lines": 2,
          "line_start": 36,
          "line_end": 37,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 60,
          "line_end": 61,
          "content": "Database database, String baseFileName,<br/>                              boolean defrag"
        },
        {
          "total_lines": 1,
          "line_start": 60,
          "line_end": 60,
          "content": "Database database, String baseFileName"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/LongKeyHashMap.java",
      "loc_duplicate": 29,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 74,
          "line_end": 80,
          "content": "int lookup = getLookup(key);<br/><br/>            if (lookup != -1) {<br/>                return objectValueTable[lookup];<br/>            }<br/><br/>            return null;"
        },
        {
          "total_lines": 5,
          "line_start": 185,
          "line_end": 189,
          "content": "if (keySet == null) {<br/>            keySet = new KeySet();<br/>        }<br/><br/>        return keySet;"
        },
        {
          "total_lines": 5,
          "line_start": 76,
          "line_end": 80,
          "content": "if (lookup != -1) {<br/>                return objectValueTable[lookup];<br/>            }<br/><br/>            return null;"
        },
        {
          "total_lines": 5,
          "line_start": 194,
          "line_end": 198,
          "content": "if (values == null) {<br/>            values = new Values();<br/>        }<br/><br/>        return values;"
        },
        {
          "total_lines": 4,
          "line_start": 34,
          "line_end": 37,
          "content": "import java.util.concurrent.locks.Lock;<br/>import java.util.concurrent.locks.ReentrantReadWriteLock;<br/><br/>import org.hsqldb.map.BaseHashMap;"
        },
        {
          "total_lines": 2,
          "line_start": 61,
          "line_end": 62,
          "content": "BaseHashMap.longKeyOrValue,<br/>              BaseHashMap.objectKeyOrValue, false"
        },
        {
          "total_lines": 1,
          "line_start": 62,
          "line_end": 62,
          "content": "BaseHashMap.objectKeyOrValue, false"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/OrderedLongHashSet.java",
      "loc_duplicate": 50,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 103,
          "line_end": 111,
          "content": "int i = 0;<br/><br/>        for (; i < array.length; i++) {<br/>            if (!super.containsKey(array[i])) {<br/>                break;<br/>            }<br/>        }<br/><br/>        return i;"
        },
        {
          "total_lines": 9,
          "line_start": 116,
          "line_end": 124,
          "content": "int i = 0;<br/><br/>        for (; i < array.length; i++) {<br/>            if (i >= size() || get(i) != array[i]) {<br/>                break;<br/>            }<br/>        }<br/><br/>        return i;"
        },
        {
          "total_lines": 7,
          "line_start": 103,
          "line_end": 109,
          "content": "int i = 0;<br/><br/>        for (; i < array.length; i++) {<br/>            if (!super.containsKey(array[i])) {<br/>                break;<br/>            }<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 116,
          "line_end": 122,
          "content": "int i = 0;<br/><br/>        for (; i < array.length; i++) {<br/>            if (i >= size() || get(i) != array[i]) {<br/>                break;<br/>            }<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 71,
          "line_end": 75,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(key, 0, null, null, true);<br/><br/>        boolean result = oldSize != size();"
        },
        {
          "total_lines": 5,
          "line_start": 80,
          "line_end": 84,
          "content": "super.clear();<br/><br/>            for (int i = 0; i < array.length; i++) {<br/>                add(array[i]);<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 62,
          "line_end": 66,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(key, 0, null, null, false);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 3,
          "line_start": 64,
          "line_end": 66,
          "content": "super.addOrRemove(key, 0, null, null, false);<br/><br/>        return oldSize != size();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/Log.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 427,
          "line_end": 428,
          "content": "HsqlDatabaseProperties.hsqldb_script_format,<br/>                                   database.logger.propScriptFormat"
        },
        {
          "total_lines": 2,
          "line_start": 217,
          "line_end": 218,
          "content": "HsqlDatabaseProperties.hsqldb_script_format,<br/>                               database.logger.propScriptFormat"
        },
        {
          "total_lines": 1,
          "line_start": 623,
          "line_end": 623,
          "content": "Session session, Table t, Object[] row"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/cmdline/SqlFile.java",
      "loc_duplicate": 270,
      "clones": [
          {
          "total_lines": 15,
          "line_start": 958,
          "line_end": 972,
          "content": "try {<br/>                                    rs = statement.getResultSet();<br/>                                } catch (SQLException se) {<br/>                                    try {<br/>                                        if (statement != null)<br/>                                            statement.close();<br/>                                    } catch (SQLException nse) {<br/>                                        // Purposefully doing nothing<br/>                                    } finally {<br/>                                        statement = null;<br/>                                    }<br/>                                    throw se;  // rethrow<br/>                                }<br/>                                displaySqlResults(<br/>                                        statement, rs, null, null, true);"
        },
        {
          "total_lines": 14,
          "line_start": 1010,
          "line_end": 1023,
          "content": "try {<br/>                                rs = statement.getResultSet();<br/>                            } catch (SQLException se) {<br/>                                try {<br/>                                    if (statement != null) statement.close();<br/>                                } catch (SQLException nse) {<br/>                                    // Purposefully doing nothing<br/>                                } finally {<br/>                                    statement = null;<br/>                                }<br/>                                throw se;  // rethrow<br/>                            }<br/>                            displaySqlResults(<br/>                                    statement, rs, null, null, true);"
        },
        {
          "total_lines": 11,
          "line_start": 4080,
          "line_end": 4090,
          "content": "condlPrint(\"<TH>\"<br/>                                    + SqlFile.escapeHtml(headerArray[i])<br/>                                    + \"</TH>\", true);<br/>                            condlPrint(((i > 0) ? \"  \" : \"\")<br/>                                    + ((i < headerArray.length - 1<br/>                                        || rightJust[i])<br/>                                       ? StringUtil.toPaddedString(<br/>                                         headerArray[i], maxWidth[i],<br/>                                         ' ', !rightJust[i])<br/>                                       : headerArray[i])<br/>                                    , false);"
        },
        {
          "total_lines": 8,
          "line_start": 4122,
          "line_end": 4129,
          "content": "((j > 0) ? \"  \" : \"\")<br/>                                    + ((j < fieldArray.length - 1<br/>                                        || rightJust[j])<br/>                                       ? StringUtil.toPaddedString(<br/>                                         fieldArray[j], maxWidth[j],<br/>                                         ' ', !rightJust[j])<br/>                                       : fieldArray[j])<br/>                                    , false"
        },
        {
          "total_lines": 8,
          "line_start": 4475,
          "line_end": 4482,
          "content": "condlPrint(\"<TH>\"<br/>                        + SqlFile.escapeHtml(headerArray[i]) + \"</TH>\", true);<br/>                condlPrint(((i > 0) ? \"  \" : \"\")<br/>                        + ((i < headerArray.length - 1 || rightJust[i])<br/>                           ? StringUtil.toPaddedString(<br/>                             headerArray[i], maxWidth[i], ' ', !rightJust[i])<br/>                           : headerArray[i])<br/>                        , false);"
        },
        {
          "total_lines": 7,
          "line_start": 3462,
          "line_end": 3468,
          "content": "if (rs == null)<br/>                        throw new BadSpecial(<br/>                            SqltoolRB.metadata_fetch_fail.getString());<br/><br/>                    displaySqlResults(null, rs, listMDSchemaCols, filter, false);<br/><br/>                    return;"
        },
        {
          "total_lines": 7,
          "line_start": 2611,
          "line_end": 2617,
          "content": "catch (QuitNow qn) {<br/>                throw qn;<br/>            } catch (RuntimeException re) {<br/>                throw re;  // Unrecoverable<br/>            } catch (Exception e) {<br/>                throw new BadSpecial(SqltoolRB.pl_block_fail.getString(), e);<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 2385,
          "line_end": 2391,
          "content": "mathMatcher.group(1), Long.toString(<br/>                                        new Calculator(<br/>                                        ((mathMatcher.groupCount() > 1<br/>                                        && mathMatcher.group(2) != null)<br/>                                        ? mathMatcher.group(2)<br/>                                        : \"\"),<br/>                                        shared.userVars).reduce(0, false))"
        },
        {
          "total_lines": 7,
          "line_start": 2547,
          "line_end": 2553,
          "content": "catch (QuitNow qn) {<br/>                throw qn;<br/>            } catch (RuntimeException re) {<br/>                throw re;  // Unrecoverable<br/>            } catch (Exception e) {<br/>                throw new BadSpecial(SqltoolRB.pl_block_fail.getString(), e);<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 3473,
          "line_end": 3479,
          "content": "if (rs == null)<br/>                        throw new BadSpecial(<br/>                            SqltoolRB.metadata_fetch_fail.getString());<br/><br/>                    displaySqlResults(null, rs, listMDSchemaCols, filter, false);<br/><br/>                    return;"
        },
        {
          "total_lines": 6,
          "line_start": 4508,
          "line_end": 4513,
          "content": "((j > 0) ? \"  \" : \"\")<br/>                            + ((j < fieldArray.length - 1 || rightJust[j])<br/>                               ? StringUtil.toPaddedString(<br/>                                 fieldArray[j], maxWidth[j], ' ', !rightJust[j])<br/>                               : fieldArray[j])<br/>                            , false"
        },
        {
          "total_lines": 6,
          "line_start": 5796,
          "line_end": 5801,
          "content": "// To be consistent, if *DSV_RECORDS_PER_COMMIT is set, we<br/>                    // always commit all inserted records.<br/>                    // This little block commits any straggler commits since the<br/>                    // last commit.<br/>                    shared.jdbcConn.commit();<br/>                    shared.possiblyUncommitteds = false;"
        },
        {
          "total_lines": 6,
          "line_start": 4097,
          "line_end": 4102,
          "content": "for (int i = 0; i < headerArray.length; i++)<br/>                                condlPrint(((i > 0) ? \"  \"<br/>                                                    : \"\") + SqlFile.divider(<br/>                                                        maxWidth[i]), false);<br/><br/>                            condlPrintln(\"\", false);"
        },
        {
          "total_lines": 6,
          "line_start": 2374,
          "line_end": 2379,
          "content": "mathMatcher.group(1), Long.toString(<br/>                                    Calculator.reassignValue(<br/>                                    mathMatcher.group(1),<br/>                                    shared.userVars, mathMatcher.group(2),<br/>                                    (mathMatcher.groupCount() < 3)<br/>                                    ? null : mathMatcher.group(3)))"
        },
        {
          "total_lines": 5,
          "line_start": 2332,
          "line_end": 2336,
          "content": "mathMatcher.group(1), Long.toString(<br/>                            Calculator.reassignValue(mathMatcher.group(1),<br/>                            shared.userVars, mathMatcher.group(2),<br/>                            (mathMatcher.groupCount() < 3)<br/>                            ? null : mathMatcher.group(3)))"
        },
        {
          "total_lines": 5,
          "line_start": 3462,
          "line_end": 3466,
          "content": "if (rs == null)<br/>                        throw new BadSpecial(<br/>                            SqltoolRB.metadata_fetch_fail.getString());<br/><br/>                    displaySqlResults(null, rs, listMDSchemaCols, filter, false);"
        },
        {
          "total_lines": 5,
          "line_start": 4490,
          "line_end": 4494,
          "content": "for (int i = 0; i < headerArray.length; i++)<br/>                    condlPrint(((i > 0) ? \"  \" : \"\")<br/>                            + SqlFile.divider(maxWidth[i]), false);<br/><br/>                condlPrintln(\"\", false);"
        },
        {
          "total_lines": 5,
          "line_start": 2745,
          "line_end": 2749,
          "content": "mathMatcher.group(1), Long.toString(<br/>                    Calculator.reassignValue(mathMatcher.group(1),<br/>                    shared.userVars, mathMatcher.group(2),<br/>                    (mathMatcher.groupCount() < 3)<br/>                    ? null : mathMatcher.group(3)))"
        },
        {
          "total_lines": 5,
          "line_start": 2340,
          "line_end": 2344,
          "content": "mathMatcher.group(1), Long.toString(<br/>                                new Calculator(((mathMatcher.groupCount() > 1<br/>                                && mathMatcher.group(2) != null)<br/>                                ? mathMatcher.group(2)<br/>                                : \"\"), shared.userVars).reduce(0, false))"
        },
        {
          "total_lines": 5,
          "line_start": 3473,
          "line_end": 3477,
          "content": "if (rs == null)<br/>                        throw new BadSpecial(<br/>                            SqltoolRB.metadata_fetch_fail.getString());<br/><br/>                    displaySqlResults(null, rs, listMDSchemaCols, filter, false);"
        },
        {
          "total_lines": 4,
          "line_start": 980,
          "line_end": 983,
          "content": "// Storing prevToken as an attempted hack<br/>                        prevToken = buffer;<br/>                        setBuf(token);<br/>                        historize();"
        },
        {
          "total_lines": 4,
          "line_start": 3194,
          "line_end": 3197,
          "content": "\"MDSYS\", \"ORDSYS\",<br/>        \"ORDPLUGINS\", \"CTXSYS\", \"DSSYS\", \"PERFSTAT\", \"WKPROXY\", \"WKSYS\",<br/>        \"WMSYS\", \"XDB\", \"ANONYMOUS\", \"ODM\", \"ODM_MTR\", \"OLAPSYS\", \"TRACESVR\",<br/>        \"REPADMIN\""
        },
        {
          "total_lines": 4,
          "line_start": 987,
          "line_end": 990,
          "content": "// Storing prevToken as an attempted hack<br/>                        prevToken = buffer;<br/>                        setBuf(token);<br/>                        historize();"
        },
        {
          "total_lines": 4,
          "line_start": 6011,
          "line_end": 6014,
          "content": "if (newVal.length() < 1)<br/>                    throw new BadSpecial(SqltoolRB.macrodef_empty.getString());<br/>                if (newVal.charAt(newVal.length() - 1) == ';')<br/>                    throw new BadSpecial(SqltoolRB.macrodef_semi.getString());"
        },
        {
          "total_lines": 4,
          "line_start": 3995,
          "line_end": 3998,
          "content": "updateUserSettings();<br/>                                sqlExpandMode = null;<br/><br/>                                fetchingVar = null;"
        },
        {
          "total_lines": 4,
          "line_start": 6055,
          "line_end": 6058,
          "content": "if (newVal.length() < 1)<br/>                    throw new BadSpecial(SqltoolRB.macrodef_empty.getString());<br/>                if (newVal.charAt(newVal.length() - 1) == ';')<br/>                    throw new BadSpecial(SqltoolRB.macrodef_semi.getString());"
        },
        {
          "total_lines": 4,
          "line_start": 2975,
          "line_end": 2978,
          "content": "updateUserSettings();<br/>                sqlExpandMode = null;<br/><br/>                return;"
        },
        {
          "total_lines": 4,
          "line_start": 4065,
          "line_end": 4068,
          "content": "updateUserSettings();<br/>                    sqlExpandMode = null;<br/><br/>                    fetchingVar = null;"
        },
        {
          "total_lines": 4,
          "line_start": 2758,
          "line_end": 2761,
          "content": "mathMatcher.group(1), Long.toString(<br/>                    new Calculator(((mathMatcher.groupCount() > 1<br/>                    && mathMatcher.group(2) != null) ? mathMatcher.group(2)<br/>                    : \"\"), shared.userVars).reduce(0, false))"
        },
        {
          "total_lines": 4,
          "line_start": 3029,
          "line_end": 3032,
          "content": "updateUserSettings();<br/>                sqlExpandMode = null;<br/><br/>                return;"
        },
        {
          "total_lines": 3,
          "line_start": 1363,
          "line_end": 1365,
          "content": "if (targetCommand == null) targetCommand = buffer;<br/>                if (targetCommand == null) throw new BadSpecial(<br/>                        SqltoolRB.nobuffer_yet.getString());"
        },
        {
          "total_lines": 3,
          "line_start": 2976,
          "line_end": 2978,
          "content": "sqlExpandMode = null;<br/><br/>                return;"
        },
        {
          "total_lines": 3,
          "line_start": 1411,
          "line_end": 1413,
          "content": "if (targetCommand == null) targetCommand = buffer;<br/>                if (targetCommand == null) throw new BadSpecial(<br/>                        SqltoolRB.nobuffer_yet.getString());"
        },
        {
          "total_lines": 3,
          "line_start": 3030,
          "line_end": 3032,
          "content": "sqlExpandMode = null;<br/><br/>                return;"
        },
        {
          "total_lines": 3,
          "line_start": 3996,
          "line_end": 3998,
          "content": "sqlExpandMode = null;<br/><br/>                                fetchingVar = null;"
        },
        {
          "total_lines": 3,
          "line_start": 4108,
          "line_end": 4110,
          "content": "SqlFile.htmlRow(((i % 2) == 0) ? COL_EVEN<br/>                                                          : COL_ODD) + LS<br/>                                                          + PRE_TD, true"
        },
        {
          "total_lines": 3,
          "line_start": 4066,
          "line_end": 4068,
          "content": "sqlExpandMode = null;<br/><br/>                    fetchingVar = null;"
        },
        {
          "total_lines": 3,
          "line_start": 882,
          "line_end": 884,
          "content": "token,<br/>                            inlineNestMatcher.group(1),<br/>                            inlineNestMatcher.group(2)"
        },
        {
          "total_lines": 3,
          "line_start": 1449,
          "line_end": 1451,
          "content": "if (targetCommand == null) targetCommand = buffer;<br/>                if (targetCommand == null) throw new BadSpecial(<br/>                        SqltoolRB.nobuffer_yet.getString());"
        },
        {
          "total_lines": 3,
          "line_start": 5966,
          "line_end": 5968,
          "content": "token,<br/>                        inlineNestMatcher.group(1),<br/>                        inlineNestMatcher.group(2)"
        },
        {
          "total_lines": 3,
          "line_start": 3194,
          "line_end": 3196,
          "content": "\"OUTLN\", \"DBSNMP\", \"OUTLN\", \"MDSYS\", \"ORDSYS\",<br/>        \"ORDPLUGINS\", \"CTXSYS\", \"DSSYS\", \"PERFSTAT\", \"WKPROXY\", \"WKSYS\",<br/>        \"WMSYS\", \"XDB\", \"ANONYMOUS\""
        },
        {
          "total_lines": 2,
          "line_start": 1708,
          "line_end": 1709,
          "content": "SqltoolRB.file_writefail.getString(<br/>                            other), e"
        },
        {
          "total_lines": 2,
          "line_start": 1788,
          "line_end": 1789,
          "content": "SqltoolRB.file_writefail.getString(<br/>                            filePath), e"
        },
        {
          "total_lines": 2,
          "line_start": 1711,
          "line_end": 1712,
          "content": "SqltoolRB.file_writefail.getString(<br/>                            other), e"
        },
        {
          "total_lines": 2,
          "line_start": 1005,
          "line_end": 1006,
          "content": "setBuf(token);<br/>                        historize();"
        },
        {
          "total_lines": 2,
          "line_start": 456,
          "line_end": 457,
          "content": "\"$Revision: \".length(),<br/>                    revStringLength - \" $\".length()"
        },
        {
          "total_lines": 2,
          "line_start": 989,
          "line_end": 990,
          "content": "setBuf(token);<br/>                        historize();"
        },
        {
          "total_lines": 2,
          "line_start": 5967,
          "line_end": 5968,
          "content": "inlineNestMatcher.group(1),<br/>                        inlineNestMatcher.group(2)"
        },
        {
          "total_lines": 2,
          "line_start": 982,
          "line_end": 983,
          "content": "setBuf(token);<br/>                        historize();"
        },
        {
          "total_lines": 2,
          "line_start": 5966,
          "line_end": 5967,
          "content": "token,<br/>                        inlineNestMatcher.group(1)"
        },
        {
          "total_lines": 2,
          "line_start": 2994,
          "line_end": 2995,
          "content": "updateUserSettings();<br/>                sqlExpandMode = null;"
        },
        {
          "total_lines": 2,
          "line_start": 2305,
          "line_end": 2306,
          "content": "stdprintln(SqltoolRB.deprecated_noop.getString(\"*\"));<br/>            return;"
        },
        {
          "total_lines": 2,
          "line_start": 1491,
          "line_end": 1492,
          "content": "stdprintln(SqltoolRB.substitution_nomatch.getString());<br/>                        return;"
        },
        {
          "total_lines": 2,
          "line_start": 1318,
          "line_end": 1319,
          "content": "stdprintln(SqltoolRB.substitution_nomatch.getString());<br/>                return;"
        },
        {
          "total_lines": 2,
          "line_start": 2775,
          "line_end": 2776,
          "content": "stdprintln(SqltoolRB.deprecated_noop.getString(\"*\"));<br/>            return;"
        },
        {
          "total_lines": 2,
          "line_start": 4498,
          "line_end": 4499,
          "content": "SqlFile.htmlRow( ((i % 2) == 0)<br/>                        ? COL_EVEN : COL_ODD) + LS + PRE_TD, true"
        },
        {
          "total_lines": 2,
          "line_start": 3194,
          "line_end": 3195,
          "content": "\"ORDSYS\",<br/>        \"ORDPLUGINS\", \"CTXSYS\", \"DSSYS\", \"PERFSTAT\", \"WKPROXY\", \"WKSYS\""
        },
        {
          "total_lines": 2,
          "line_start": 1609,
          "line_end": 1610,
          "content": "shared.userVars.remove(\"?\");<br/>                requireConnection();"
        },
        {
          "total_lines": 2,
          "line_start": 5755,
          "line_end": 5756,
          "content": "shared.jdbcConn.commit();<br/>                    shared.possiblyUncommitteds = false;"
        },
        {
          "total_lines": 2,
          "line_start": 3196,
          "line_end": 3197,
          "content": "\"OLAPSYS\", \"TRACESVR\",<br/>        \"REPADMIN\""
        },
        {
          "total_lines": 2,
          "line_start": 3195,
          "line_end": 3196,
          "content": "\"PERFSTAT\", \"WKPROXY\", \"WKSYS\",<br/>        \"WMSYS\""
        },
        {
          "total_lines": 2,
          "line_start": 883,
          "line_end": 884,
          "content": "inlineNestMatcher.group(1),<br/>                            inlineNestMatcher.group(2)"
        },
        {
          "total_lines": 2,
          "line_start": 1577,
          "line_end": 1578,
          "content": "shared.userVars.remove(\"?\");<br/>                requireConnection();"
        },
        {
          "total_lines": 2,
          "line_start": 882,
          "line_end": 883,
          "content": "token,<br/>                            inlineNestMatcher.group(1)"
        },
        {
          "total_lines": 1,
          "line_start": 5604,
          "line_end": 5604,
          "content": "(csvStyleQuoting ? \"\\u0002\" : dsvColSplitter), -1"
        },
        {
          "total_lines": 1,
          "line_start": 1753,
          "line_end": 1753,
          "content": "SqltoolRB.metadata_fetch_fail.getString(), se"
        },
        {
          "total_lines": 1,
          "line_start": 6330,
          "line_end": 6330,
          "content": "SqltoolRB.file_writefail.getString(filePath), e"
        },
        {
          "total_lines": 1,
          "line_start": 6292,
          "line_end": 6292,
          "content": "SqltoolRB.file_writefail.getString(filePath), e"
        },
        {
          "total_lines": 1,
          "line_start": 3579,
          "line_end": 3579,
          "content": "SqltoolRB.metadata_fetch_fail.getString(), se"
        },
        {
          "total_lines": 1,
          "line_start": 5333,
          "line_end": 5333,
          "content": "(csvStyleQuoting ? \"\\u0002\" : dsvColSplitter), -1"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/DataAccessPoint.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 88,
          "line_end": 89,
          "content": "String statement, TransferResultSet r,<br/>                 int iMaxRows"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/scriptio/ScriptWriterText.java",
      "loc_duplicate": 17,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 135,
          "line_end": 138,
          "content": "e, ErrorCode.FILE_IO_ERROR,<br/>                                  ErrorCode.M_Message_Pair, new Object[] {<br/>                    e.toString(), outFile<br/>                }"
        },
        {
          "total_lines": 3,
          "line_start": 112,
          "line_end": 114,
          "content": "Database db, OutputStream outputStream,<br/>                            FileAccess.FileSync descriptor,<br/>                            boolean includeCachedData"
        },
        {
          "total_lines": 2,
          "line_start": 201,
          "line_end": 202,
          "content": "Session session, Row row,<br/>                         Table table"
        },
        {
          "total_lines": 2,
          "line_start": 253,
          "line_end": 254,
          "content": "Session session, Table table,<br/>                                     Object[] data"
        },
        {
          "total_lines": 2,
          "line_start": 112,
          "line_end": 113,
          "content": "Database db, OutputStream outputStream,<br/>                            FileAccess.FileSync descriptor"
        },
        {
          "total_lines": 2,
          "line_start": 245,
          "line_end": 246,
          "content": "Session session, Row row,<br/>                                     Table table"
        },
        {
          "total_lines": 2,
          "line_start": 113,
          "line_end": 114,
          "content": "FileAccess.FileSync descriptor,<br/>                            boolean includeCachedData"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/IntervalType.java",
      "loc_duplicate": 66,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 1495,
          "line_end": 1497,
          "content": "limit = DTIType.precisionLimits[(int) precision] * 24 * 60<br/>                        * 60;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 1500,
          "line_end": 1502,
          "content": "limit = DTIType.precisionLimits[(int) precision] * 24 * 60<br/>                        * 60;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 1510,
          "line_end": 1512,
          "content": "limit = DTIType.precisionLimits[(int) precision] * 24 * 60<br/>                        * 60;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 1505,
          "line_end": 1507,
          "content": "limit = DTIType.precisionLimits[(int) precision] * 24 * 60<br/>                        * 60;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1364,
          "line_end": 1365,
          "content": "endType = Types.SQL_INTERVAL_HOUR;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1360,
          "line_end": 1361,
          "content": "endType = Types.SQL_INTERVAL_SECOND;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1340,
          "line_end": 1341,
          "content": "endType = Types.SQL_INTERVAL_MONTH;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1380,
          "line_end": 1381,
          "content": "endType = Types.SQL_INTERVAL_SECOND;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1535,
          "line_end": 1536,
          "content": "limit = DTIType.precisionLimits[(int) precision];<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1281,
          "line_end": 1282,
          "content": "type, precision, fractionPrecision,<br/>                                startType, endType"
        },
        {
          "total_lines": 2,
          "line_start": 1531,
          "line_end": 1532,
          "content": "limit = DTIType.precisionLimits[(int) precision] * 60;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1384,
          "line_end": 1385,
          "content": "endType = Types.SQL_INTERVAL_SECOND;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1519,
          "line_end": 1520,
          "content": "limit = DTIType.precisionLimits[(int) precision] * 60 * 60;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1368,
          "line_end": 1369,
          "content": "endType = Types.SQL_INTERVAL_MINUTE;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 507,
          "line_end": 508,
          "content": "SessionInterface session, Object a,<br/>                                Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 1527,
          "line_end": 1528,
          "content": "limit = DTIType.precisionLimits[(int) precision] * 60;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1344,
          "line_end": 1345,
          "content": "endType = Types.SQL_INTERVAL_MONTH;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1376,
          "line_end": 1377,
          "content": "endType = Types.SQL_INTERVAL_MINUTE;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1372,
          "line_end": 1373,
          "content": "endType = Types.SQL_INTERVAL_SECOND;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1185,
          "line_end": 1186,
          "content": "type, precision, fractionPrecision,<br/>                                    startType, endType"
        },
        {
          "total_lines": 2,
          "line_start": 1409,
          "line_end": 1410,
          "content": "startType, endType, precision,<br/>                               fractionPrecision"
        },
        {
          "total_lines": 2,
          "line_start": 1123,
          "line_end": 1124,
          "content": "startType, endType, precision,<br/>                               fractionPrecision"
        },
        {
          "total_lines": 2,
          "line_start": 1491,
          "line_end": 1492,
          "content": "limit = DTIType.precisionLimits[(int) precision];<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1523,
          "line_end": 1524,
          "content": "limit = DTIType.precisionLimits[(int) precision] * 60 * 60;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1356,
          "line_end": 1357,
          "content": "endType = Types.SQL_INTERVAL_MINUTE;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1352,
          "line_end": 1353,
          "content": "endType = Types.SQL_INTERVAL_HOUR;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1515,
          "line_end": 1516,
          "content": "limit = DTIType.precisionLimits[(int) precision] * 60 * 60;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 860,
          "line_end": 861,
          "content": "Session session, Object a, Object b,<br/>                           Type otherType"
        },
        {
          "total_lines": 1,
          "line_start": 399,
          "line_end": 399,
          "content": "Session session, Type other, int operation"
        },
        {
          "total_lines": 1,
          "line_start": 1185,
          "line_end": 1185,
          "content": "group, type"
        },
        {
          "total_lines": 1,
          "line_start": 1281,
          "line_end": 1281,
          "content": "group, type"
        },
        {
          "total_lines": 1,
          "line_start": 1186,
          "line_end": 1186,
          "content": "startType, endType, defaultPrecision"
        },
        {
          "total_lines": 1,
          "line_start": 1282,
          "line_end": 1282,
          "content": "startType, endType, defaultPrecision"
        },
        {
          "total_lines": 1,
          "line_start": 822,
          "line_end": 822,
          "content": "Session session, Object a, Object b, Type otherType"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rights/GranteeManager.java",
      "loc_duplicate": 16,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 497,
          "line_end": 499,
          "content": "Grantee g = (Grantee) map.get(i);<br/><br/>            g.revokeDbObject(name);"
        },
        {
          "total_lines": 3,
          "line_start": 511,
          "line_end": 513,
          "content": "Grantee g = (Grantee) map.get(i);<br/><br/>                g.revokeDbObject(name);"
        },
        {
          "total_lines": 2,
          "line_start": 228,
          "line_end": 229,
          "content": "ErrorCode.X_0L000,<br/>                              grantor.getName().getNameString()"
        },
        {
          "total_lines": 2,
          "line_start": 327,
          "line_end": 328,
          "content": "ErrorCode.X_0L000,<br/>                              grantor.getName().getNameString()"
        },
        {
          "total_lines": 2,
          "line_start": 265,
          "line_end": 266,
          "content": "ErrorCode.X_0L000,<br/>                              grantor.getName().getNameString()"
        },
        {
          "total_lines": 2,
          "line_start": 372,
          "line_end": 373,
          "content": "ErrorCode.X_0L000,<br/>                                  grantor.getName().getNameString()"
        },
        {
          "total_lines": 1,
          "line_start": 385,
          "line_end": 385,
          "content": "String roleName, Grantee grantor"
        },
        {
          "total_lines": 1,
          "line_start": 293,
          "line_end": 293,
          "content": "String roleName, Grantee grantor"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestUpdatableResultSets.java",
      "loc_duplicate": 63,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 107,
          "line_end": 113,
          "content": "rs = statement.executeQuery(select);<br/><br/>            while (rs.next()) {<br/>                String s = rs.getString(2);<br/><br/>                System.out.println(s);<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 97,
          "line_end": 103,
          "content": "rs = statement.executeQuery(select);<br/><br/>            while (rs.next()) {<br/>                String s = rs.getString(2);<br/><br/>                System.out.println(s);<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 133,
          "line_end": 138,
          "content": "ps.setInt(1, i);<br/>                ps.setString(2, String.valueOf(i) + \" s\");<br/>                ps.setBytes(3, new byte[] {<br/>                    (byte) i, ' ', (byte) i<br/>                });<br/>                ps.execute();"
        },
        {
          "total_lines": 6,
          "line_start": 228,
          "line_end": 233,
          "content": "ps.setInt(1, i);<br/>                ps.setString(2, String.valueOf(i) + \" s\");<br/>                ps.setBytes(3, new byte[] {<br/>                    (byte) i, ' ', (byte) i<br/>                });<br/>                ps.execute();"
        },
        {
          "total_lines": 6,
          "line_start": 76,
          "line_end": 81,
          "content": "ps.setInt(1, i);<br/>                ps.setString(2, String.valueOf(i) + \" s\");<br/>                ps.setBytes(3, new byte[] {<br/>                    (byte) i, ' ', (byte) i<br/>                });<br/>                ps.execute();"
        },
        {
          "total_lines": 4,
          "line_start": 260,
          "line_end": 263,
          "content": "String name = srs.getString(2);<br/>                float  id   = srs.getFloat(1);<br/><br/>                System.out.println(name + \"   \" + id);"
        },
        {
          "total_lines": 4,
          "line_start": 269,
          "line_end": 272,
          "content": "String name = srs.getString(2);<br/>                float  id   = srs.getFloat(1);<br/><br/>                System.out.println(name + \"   \" + id);"
        },
        {
          "total_lines": 4,
          "line_start": 278,
          "line_end": 281,
          "content": "String name = srs.getString(2);<br/>                float  id   = srs.getFloat(1);<br/><br/>                System.out.println(name + \"   \" + id);"
        },
        {
          "total_lines": 4,
          "line_start": 247,
          "line_end": 250,
          "content": "String name = srs.getString(2);<br/>                float  id   = srs.getFloat(1);<br/><br/>                System.out.println(name + \"   \" + id);"
        },
        {
          "total_lines": 3,
          "line_start": 164,
          "line_end": 166,
          "content": "String s = rs.getString(2);<br/><br/>                System.out.println(s);"
        },
        {
          "total_lines": 2,
          "line_start": 247,
          "line_end": 248,
          "content": "String name = srs.getString(2);<br/>                float  id   = srs.getFloat(1);"
        },
        {
          "total_lines": 2,
          "line_start": 260,
          "line_end": 261,
          "content": "String name = srs.getString(2);<br/>                float  id   = srs.getFloat(1);"
        },
        {
          "total_lines": 2,
          "line_start": 239,
          "line_end": 240,
          "content": "ResultSet.TYPE_SCROLL_INSENSITIVE,<br/>                                           ResultSet.CONCUR_READ_ONLY"
        },
        {
          "total_lines": 2,
          "line_start": 278,
          "line_end": 279,
          "content": "String name = srs.getString(2);<br/>                float  id   = srs.getFloat(1);"
        },
        {
          "total_lines": 2,
          "line_start": 37,
          "line_end": 38,
          "content": "import java.sql.SQLException;<br/>import java.sql.Statement;"
        },
        {
          "total_lines": 2,
          "line_start": 269,
          "line_end": 270,
          "content": "String name = srs.getString(2);<br/>                float  id   = srs.getFloat(1);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestBatchBug.java",
      "loc_duplicate": 42,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 171,
          "line_end": 177,
          "content": "prep.setTimestamp(2, now);    // last_update<br/><br/>        for (int ii = 0; ii < DECIMAL_FIELDS_PER_DATASET; ii++) {<br/>            prep.setDouble(ii + 3, 0.123456789);    // Wert<br/>        }<br/><br/>        prep.addBatch();"
        },
        {
          "total_lines": 7,
          "line_start": 179,
          "line_end": 185,
          "content": "prep.setTimestamp(2, now);    // last_update<br/><br/>        for (int ii = 0; ii < DECIMAL_FIELDS_PER_DATASET; ii++) {<br/>            prep.setDouble(ii + 3, 0.123456789);    // Wert<br/>        }<br/><br/>        prep.addBatch();"
        },
        {
          "total_lines": 5,
          "line_start": 181,
          "line_end": 185,
          "content": "for (int ii = 0; ii < DECIMAL_FIELDS_PER_DATASET; ii++) {<br/>            prep.setDouble(ii + 3, 0.123456789);    // Wert<br/>        }<br/><br/>        prep.addBatch();"
        },
        {
          "total_lines": 5,
          "line_start": 173,
          "line_end": 177,
          "content": "for (int ii = 0; ii < DECIMAL_FIELDS_PER_DATASET; ii++) {<br/>            prep.setDouble(ii + 3, 0.123456789);    // Wert<br/>        }<br/><br/>        prep.addBatch();"
        },
        {
          "total_lines": 5,
          "line_start": 179,
          "line_end": 183,
          "content": "prep.setTimestamp(2, now);    // last_update<br/><br/>        for (int ii = 0; ii < DECIMAL_FIELDS_PER_DATASET; ii++) {<br/>            prep.setDouble(ii + 3, 0.123456789);    // Wert<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 171,
          "line_end": 175,
          "content": "prep.setTimestamp(2, now);    // last_update<br/><br/>        for (int ii = 0; ii < DECIMAL_FIELDS_PER_DATASET; ii++) {<br/>            prep.setDouble(ii + 3, 0.123456789);    // Wert<br/>        }"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import java.sql.Connection;<br/>import java.sql.DriverManager;"
        },
        {
          "total_lines": 2,
          "line_start": 145,
          "line_end": 146,
          "content": "System.out.println(sql.toString());<br/>        stmt.executeUpdate(sql.toString());"
        },
        {
          "total_lines": 2,
          "line_start": 153,
          "line_end": 154,
          "content": "System.out.println(sql.toString());<br/>        stmt.executeUpdate(sql.toString());"
        },
        {
          "total_lines": 2,
          "line_start": 37,
          "line_end": 38,
          "content": "import java.sql.SQLException;<br/>import java.sql.Statement;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestJDBCSavepoints.java",
      "loc_duplicate": 204,
      "clones": [
          {
          "total_lines": 36,
          "line_start": 434,
          "line_end": 469,
          "content": "conn1.createStatement().executeUpdate(\"savepoint \\\"savepoint1\\\"\");<br/><br/>        //-- test 17 : A JDBC Savepoint shall be considered invalid if used to<br/>        //             release an SQL-savepoint other than precisely the<br/>        //             one created in correspondence to the creation of that<br/>        //             JDBC Savepoint object<br/>        // fredt@users - we allow this if the name is valid<br/>/*<br/>        msg = \"JDBC Savepoint used to successfully release an identically named \"<br/>              + \"savepoint in a transaction other than the originating \"<br/>              + \"transaction\";<br/>        try {<br/>            conn1.releaseSavepoint(sp1);<br/>            assertTrue(msg, false);<br/>        } catch (Exception e) {}<br/>*/<br/><br/>        //-- test 18 : A JDBC Savepoint shall be considered invalid if used to<br/>        //             roll back to an SQL-savepoint other than precisely the<br/>        //             one created in correspondence to the creation of that<br/>        //             JDBC Savepoint object<br/>        // fredt@users - we allow this if the name is valid<br/>/*<br/>        msg = \"JDBC Savepoint used to successfully to roll back to an \"<br/>              + \"identically named savepoint in a transaction distinct \"<br/>              + \"from the originating transaction\";<br/>        try {<br/>            conn1.rollback(sp1);<br/>            assertTrue(msg, false);<br/>        } catch (Exception e) {}<br/>*/<br/>        conn1.setAutoCommit(false);<br/><br/>        sp1 = conn1.setSavepoint(\"savepoint1\");<br/><br/>        conn1.createStatement().executeUpdate(\"savepoint \\\"savepoint1\\\"\");"
        },
        {
          "total_lines": 32,
          "line_start": 434,
          "line_end": 465,
          "content": "conn1.createStatement().executeUpdate(\"savepoint \\\"savepoint1\\\"\");<br/><br/>        //-- test 17 : A JDBC Savepoint shall be considered invalid if used to<br/>        //             release an SQL-savepoint other than precisely the<br/>        //             one created in correspondence to the creation of that<br/>        //             JDBC Savepoint object<br/>        // fredt@users - we allow this if the name is valid<br/>/*<br/>        msg = \"JDBC Savepoint used to successfully release an identically named \"<br/>              + \"savepoint in a transaction other than the originating \"<br/>              + \"transaction\";<br/>        try {<br/>            conn1.releaseSavepoint(sp1);<br/>            assertTrue(msg, false);<br/>        } catch (Exception e) {}<br/>*/<br/><br/>        //-- test 18 : A JDBC Savepoint shall be considered invalid if used to<br/>        //             roll back to an SQL-savepoint other than precisely the<br/>        //             one created in correspondence to the creation of that<br/>        //             JDBC Savepoint object<br/>        // fredt@users - we allow this if the name is valid<br/>/*<br/>        msg = \"JDBC Savepoint used to successfully to roll back to an \"<br/>              + \"identically named savepoint in a transaction distinct \"<br/>              + \"from the originating transaction\";<br/>        try {<br/>            conn1.rollback(sp1);<br/>            assertTrue(msg, false);<br/>        } catch (Exception e) {}<br/>*/<br/>        conn1.setAutoCommit(false);"
        },
        {
          "total_lines": 21,
          "line_start": 414,
          "line_end": 434,
          "content": "conn1.createStatement().executeUpdate(\"savepoint \\\"savepoint1\\\"\");<br/><br/>        //-- test 16 : A JDBC Savepoint shall be considered invalid if used to<br/>        //             release an SQL-savepoint other than precisely the<br/>        //             one created in correspondence to the creation of that<br/>        //             JDBC Savepoint object<br/>        // fredt@users - we allow this if the name is valid<br/>/*<br/>        msg = \"JDBC Savepoint used to successfully release an identically named \"<br/>              + \"savepoint in a transaction distinct from the originating \"<br/>              + \"transaction\";<br/>        try {<br/>            conn1.releaseSavepoint(sp1);<br/>            assertTrue(msg, false);<br/>        } catch (Exception e) {}<br/>*/<br/>        conn1.setAutoCommit(false);<br/><br/>        sp1 = conn1.setSavepoint(\"savepoint1\");<br/><br/>        conn1.createStatement().executeUpdate(\"savepoint \\\"savepoint1\\\"\");"
        },
        {
          "total_lines": 17,
          "line_start": 414,
          "line_end": 430,
          "content": "conn1.createStatement().executeUpdate(\"savepoint \\\"savepoint1\\\"\");<br/><br/>        //-- test 16 : A JDBC Savepoint shall be considered invalid if used to<br/>        //             release an SQL-savepoint other than precisely the<br/>        //             one created in correspondence to the creation of that<br/>        //             JDBC Savepoint object<br/>        // fredt@users - we allow this if the name is valid<br/>/*<br/>        msg = \"JDBC Savepoint used to successfully release an identically named \"<br/>              + \"savepoint in a transaction distinct from the originating \"<br/>              + \"transaction\";<br/>        try {<br/>            conn1.releaseSavepoint(sp1);<br/>            assertTrue(msg, false);<br/>        } catch (Exception e) {}<br/>*/<br/>        conn1.setAutoCommit(false);"
        },
        {
          "total_lines": 7,
          "line_start": 220,
          "line_end": 226,
          "content": "rs  = stmt.executeQuery(\"select count(*) from t\");<br/><br/>        rs.next();<br/><br/>        rowcount = rs.getInt(1);<br/><br/>        rs.close();"
        },
        {
          "total_lines": 7,
          "line_start": 357,
          "line_end": 363,
          "content": "rs = stmt.executeQuery(\"select count(*) from t\");<br/><br/>        rs.next();<br/><br/>        rowcount = rs.getInt(1);<br/><br/>        rs.close();"
        },
        {
          "total_lines": 7,
          "line_start": 330,
          "line_end": 336,
          "content": "rs = stmt.executeQuery(\"select count(*) from t\");<br/><br/>        rs.next();<br/><br/>        rowcount = rs.getInt(1);<br/><br/>        rs.close();"
        },
        {
          "total_lines": 5,
          "line_start": 332,
          "line_end": 336,
          "content": "rs.next();<br/><br/>        rowcount = rs.getInt(1);<br/><br/>        rs.close();"
        },
        {
          "total_lines": 5,
          "line_start": 359,
          "line_end": 363,
          "content": "rs.next();<br/><br/>        rowcount = rs.getInt(1);<br/><br/>        rs.close();"
        },
        {
          "total_lines": 5,
          "line_start": 222,
          "line_end": 226,
          "content": "rs.next();<br/><br/>        rowcount = rs.getInt(1);<br/><br/>        rs.close();"
        },
        {
          "total_lines": 3,
          "line_start": 204,
          "line_end": 206,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 3,
          "line_start": 224,
          "line_end": 226,
          "content": "rowcount = rs.getInt(1);<br/><br/>        rs.close();"
        },
        {
          "total_lines": 3,
          "line_start": 516,
          "line_end": 518,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 3,
          "line_start": 212,
          "line_end": 214,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 3,
          "line_start": 408,
          "line_end": 410,
          "content": "conn1.setAutoCommit(false);<br/><br/>        sp1 = conn1.setSavepoint(\"savepoint1\");"
        },
        {
          "total_lines": 3,
          "line_start": 357,
          "line_end": 359,
          "content": "rs = stmt.executeQuery(\"select count(*) from t\");<br/><br/>        rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 196,
          "line_end": 198,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 3,
          "line_start": 330,
          "line_end": 332,
          "content": "rs = stmt.executeQuery(\"select count(*) from t\");<br/><br/>        rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 524,
          "line_end": 526,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 3,
          "line_start": 432,
          "line_end": 434,
          "content": "sp1 = conn1.setSavepoint(\"savepoint1\");<br/><br/>        conn1.createStatement().executeUpdate(\"savepoint \\\"savepoint1\\\"\");"
        },
        {
          "total_lines": 3,
          "line_start": 220,
          "line_end": 222,
          "content": "rs  = stmt.executeQuery(\"select count(*) from t\");<br/><br/>        rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 361,
          "line_end": 363,
          "content": "rowcount = rs.getInt(1);<br/><br/>        rs.close();"
        },
        {
          "total_lines": 3,
          "line_start": 188,
          "line_end": 190,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 3,
          "line_start": 334,
          "line_end": 336,
          "content": "rowcount = rs.getInt(1);<br/><br/>        rs.close();"
        },
        {
          "total_lines": 3,
          "line_start": 467,
          "line_end": 469,
          "content": "sp1 = conn1.setSavepoint(\"savepoint1\");<br/><br/>        conn1.createStatement().executeUpdate(\"savepoint \\\"savepoint1\\\"\");"
        },
        {
          "total_lines": 3,
          "line_start": 180,
          "line_end": 182,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);<br/>            ps.executeUpdate();"
        },
        {
          "total_lines": 2,
          "line_start": 516,
          "line_end": 517,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);"
        },
        {
          "total_lines": 2,
          "line_start": 524,
          "line_end": 525,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);"
        },
        {
          "total_lines": 2,
          "line_start": 188,
          "line_end": 189,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);"
        },
        {
          "total_lines": 2,
          "line_start": 196,
          "line_end": 197,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);"
        },
        {
          "total_lines": 2,
          "line_start": 212,
          "line_end": 213,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);"
        },
        {
          "total_lines": 2,
          "line_start": 204,
          "line_end": 205,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);"
        },
        {
          "total_lines": 2,
          "line_start": 180,
          "line_end": 181,
          "content": "ps.setInt(1, i);<br/>            ps.setInt(4, i);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/HashSet.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 50,
          "line_end": 51,
          "content": "initialCapacity, BaseHashMap.objectKeyOrValue,<br/>              BaseHashMap.noKeyOrValue"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCResultSet.java",
      "loc_duplicate": 173,
      "clones": [
          {
          "total_lines": 15,
          "line_start": 1991,
          "line_end": 2005,
          "content": "case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :<br/>                break;<br/>            case Types.TINYINT :<br/>            case Types.SQL_SMALLINT :<br/>            case Types.SQL_INTEGER :<br/>            case Types.SQL_BIGINT :<br/>                targetType = Type.SQL_DECIMAL;<br/><br/>                break;<br/>            case Types.SQL_DOUBLE :<br/>            default :<br/>                targetType = Type.SQL_DECIMAL_DEFAULT;<br/><br/>                break;"
        },
        {
          "total_lines": 7,
          "line_start": 4929,
          "line_end": 4935,
          "content": "Calendar calendar = cal == null ? session.getCalendar()<br/>                    : cal;<br/><br/>            if (cal != null) {<br/>                millis = HsqlDateTime.convertMillisToCalendar(calendar,<br/>                        millis);<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 6977,
          "line_end": 6981,
          "content": "if (isWrapperFor(iface)) {<br/>            return (T) this;<br/>        }<br/><br/>        throw JDBCUtil.invalidArgument(\"iface: \" + iface);"
        },
        {
          "total_lines": 5,
          "line_start": 4822,
          "line_end": 4826,
          "content": "Calendar calendar = cal == null ? session.getCalendar()<br/>                    : cal;<br/><br/>            millis = HsqlDateTime.convertMillisToCalendar(calendar, millis);<br/>            millis = HsqlDateTime.getNormalisedTime(millis);"
        },
        {
          "total_lines": 4,
          "line_start": 3006,
          "line_end": 3009,
          "content": "Double value = new Double(x);<br/><br/>        startUpdate(columnIndex);<br/>        preparedStatement.setParameter(columnIndex, value);"
        },
        {
          "total_lines": 4,
          "line_start": 6948,
          "line_end": 6951,
          "content": "int columnIndex = findColumn(columnLabel);<br/><br/>        startUpdate(columnIndex);<br/>        preparedStatement.setClob(columnIndex, reader);"
        },
        {
          "total_lines": 4,
          "line_start": 6747,
          "line_end": 6750,
          "content": "int columnIndex = findColumn(columnLabel);<br/><br/>        startUpdate(columnIndex);<br/>        preparedStatement.setCharacterStream(columnIndex, reader);"
        },
        {
          "total_lines": 4,
          "line_start": 6558,
          "line_end": 6561,
          "content": "int columnIndex = findColumn(columnLabel);<br/><br/>        startUpdate(columnIndex);<br/>        preparedStatement.setCharacterStream(columnIndex, reader);"
        },
        {
          "total_lines": 4,
          "line_start": 6401,
          "line_end": 6404,
          "content": "int columnIndex = findColumn(columnLabel);<br/><br/>        startUpdate(columnIndex);<br/>        preparedStatement.setClob(columnIndex, reader, length);"
        },
        {
          "total_lines": 4,
          "line_start": 3041,
          "line_end": 3044,
          "content": "Double value = new Double(x);<br/><br/>        startUpdate(columnIndex);<br/>        preparedStatement.setParameter(columnIndex, value);"
        },
        {
          "total_lines": 4,
          "line_start": 6484,
          "line_end": 6487,
          "content": "int columnIndex = findColumn(columnLabel);<br/><br/>        startUpdate(columnIndex);<br/>        preparedStatement.setClob(columnIndex, reader, length);"
        },
        {
          "total_lines": 4,
          "line_start": 6876,
          "line_end": 6879,
          "content": "int columnIndex = findColumn(columnLabel);<br/><br/>        startUpdate(columnIndex);<br/>        preparedStatement.setClob(columnIndex, reader);"
        },
        {
          "total_lines": 3,
          "line_start": 2636,
          "line_end": 2638,
          "content": "checkClosed();<br/><br/>        return ResultProperties.getJDBCScrollability(rsProperties);"
        },
        {
          "total_lines": 3,
          "line_start": 2667,
          "line_end": 2669,
          "content": "checkClosed();<br/><br/>        return ResultProperties.getJDBCConcurrency(rsProperties);"
        },
        {
          "total_lines": 3,
          "line_start": 6237,
          "line_end": 6239,
          "content": "String columnLabel,<br/>                                      java.io.Reader reader,<br/>                                      long length"
        },
        {
          "total_lines": 3,
          "line_start": 6061,
          "line_end": 6063,
          "content": "String columnLabel,<br/>                                       java.io.Reader reader,<br/>                                       long length"
        },
        {
          "total_lines": 2,
          "line_start": 6749,
          "line_end": 6750,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setCharacterStream(columnIndex, reader);"
        },
        {
          "total_lines": 2,
          "line_start": 6950,
          "line_end": 6951,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setClob(columnIndex, reader);"
        },
        {
          "total_lines": 2,
          "line_start": 2909,
          "line_end": 2910,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setIntParameter(columnIndex, x);"
        },
        {
          "total_lines": 2,
          "line_start": 3239,
          "line_end": 3240,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setParameter(columnIndex, x);"
        },
        {
          "total_lines": 2,
          "line_start": 6118,
          "line_end": 6119,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setBinaryStream(columnIndex, x, length);"
        },
        {
          "total_lines": 2,
          "line_start": 5311,
          "line_end": 5312,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setParameter(columnIndex, x);"
        },
        {
          "total_lines": 2,
          "line_start": 3970,
          "line_end": 3971,
          "content": "String columnLabel,<br/>                                      java.io.Reader reader"
        },
        {
          "total_lines": 2,
          "line_start": 6145,
          "line_end": 6146,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setCharacterStream(columnIndex, x, length);"
        },
        {
          "total_lines": 2,
          "line_start": 3424,
          "line_end": 3425,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setParameter(columnIndex, x);"
        },
        {
          "total_lines": 2,
          "line_start": 6913,
          "line_end": 6914,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setClob(columnIndex, reader);"
        },
        {
          "total_lines": 2,
          "line_start": 3077,
          "line_end": 3078,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setParameter(columnIndex, x);"
        },
        {
          "total_lines": 2,
          "line_start": 6089,
          "line_end": 6090,
          "content": "java.io.InputStream x,<br/>                                  long length"
        },
        {
          "total_lines": 2,
          "line_start": 3109,
          "line_end": 3110,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setParameter(columnIndex, x);"
        },
        {
          "total_lines": 2,
          "line_start": 6481,
          "line_end": 6482,
          "content": "String columnLabel, Reader reader,<br/>                            long length"
        },
        {
          "total_lines": 2,
          "line_start": 3274,
          "line_end": 3275,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setAsciiStream(columnIndex, x, length);"
        },
        {
          "total_lines": 2,
          "line_start": 6204,
          "line_end": 6205,
          "content": "String columnLabel, java.io.InputStream x,<br/>                                   long length"
        },
        {
          "total_lines": 2,
          "line_start": 6143,
          "line_end": 6144,
          "content": "java.io.Reader x,<br/>                                      long length"
        },
        {
          "total_lines": 2,
          "line_start": 3346,
          "line_end": 3347,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setCharacterStream(columnIndex, x, length);"
        },
        {
          "total_lines": 2,
          "line_start": 6711,
          "line_end": 6712,
          "content": "String columnLabel,<br/>                                   java.io.InputStream x"
        },
        {
          "total_lines": 2,
          "line_start": 6398,
          "line_end": 6399,
          "content": "String columnLabel, Reader reader,<br/>                           long length"
        },
        {
          "total_lines": 2,
          "line_start": 6091,
          "line_end": 6092,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setAsciiStream(columnIndex, x, length);"
        },
        {
          "total_lines": 2,
          "line_start": 6560,
          "line_end": 6561,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setCharacterStream(columnIndex, reader);"
        },
        {
          "total_lines": 2,
          "line_start": 6486,
          "line_end": 6487,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setClob(columnIndex, reader, length);"
        },
        {
          "total_lines": 2,
          "line_start": 6361,
          "line_end": 6362,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setClob(columnIndex, reader, length);"
        },
        {
          "total_lines": 2,
          "line_start": 3272,
          "line_end": 3273,
          "content": "java.io.InputStream x,<br/>                                  int length"
        },
        {
          "total_lines": 2,
          "line_start": 3173,
          "line_end": 3174,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setParameter(columnIndex, x);"
        },
        {
          "total_lines": 2,
          "line_start": 6172,
          "line_end": 6173,
          "content": "String columnLabel, java.io.InputStream x,<br/>                                  long length"
        },
        {
          "total_lines": 2,
          "line_start": 6843,
          "line_end": 6844,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setClob(columnIndex, reader);"
        },
        {
          "total_lines": 2,
          "line_start": 2877,
          "line_end": 2878,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setIntParameter(columnIndex, x);"
        },
        {
          "total_lines": 2,
          "line_start": 1875,
          "line_end": 1876,
          "content": "ErrorCode.JDBC_COLUMN_NOT_FOUND,<br/>                                    columnLabel"
        },
        {
          "total_lines": 2,
          "line_start": 3310,
          "line_end": 3311,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setBinaryStream(columnIndex, x, length);"
        },
        {
          "total_lines": 2,
          "line_start": 6442,
          "line_end": 6443,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setClob(columnIndex, reader, length);"
        },
        {
          "total_lines": 2,
          "line_start": 3205,
          "line_end": 3206,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setParameter(columnIndex, x);"
        },
        {
          "total_lines": 2,
          "line_start": 6116,
          "line_end": 6117,
          "content": "java.io.InputStream x,<br/>                                   long length"
        },
        {
          "total_lines": 2,
          "line_start": 1600,
          "line_end": 1601,
          "content": "resultMetaData,<br/>                    isUpdatable, isInsertable, connection"
        },
        {
          "total_lines": 2,
          "line_start": 6878,
          "line_end": 6879,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setClob(columnIndex, reader);"
        },
        {
          "total_lines": 2,
          "line_start": 3899,
          "line_end": 3900,
          "content": "String columnLabel, java.io.InputStream x,<br/>                                  int length"
        },
        {
          "total_lines": 2,
          "line_start": 6403,
          "line_end": 6404,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setClob(columnIndex, reader, length);"
        },
        {
          "total_lines": 2,
          "line_start": 6027,
          "line_end": 6028,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setCharacterStream(columnIndex, x, length);"
        },
        {
          "total_lines": 2,
          "line_start": 6025,
          "line_end": 6026,
          "content": "java.io.Reader x,<br/>                                       long length"
        },
        {
          "total_lines": 2,
          "line_start": 3141,
          "line_end": 3142,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setParameter(columnIndex, x);"
        },
        {
          "total_lines": 2,
          "line_start": 6678,
          "line_end": 6679,
          "content": "String columnLabel,<br/>                                  java.io.InputStream x"
        },
        {
          "total_lines": 2,
          "line_start": 1838,
          "line_end": 1839,
          "content": "ErrorCode.JDBC_COLUMN_NOT_FOUND,<br/>                                        columnLabel"
        },
        {
          "total_lines": 2,
          "line_start": 3308,
          "line_end": 3309,
          "content": "java.io.InputStream x,<br/>                                   int length"
        },
        {
          "total_lines": 2,
          "line_start": 3934,
          "line_end": 3935,
          "content": "String columnLabel, java.io.InputStream x,<br/>                                   int length"
        },
        {
          "total_lines": 2,
          "line_start": 2941,
          "line_end": 2942,
          "content": "startUpdate(columnIndex);<br/>        preparedStatement.setIntParameter(columnIndex, x);"
        },
        {
          "total_lines": 2,
          "line_start": 4544,
          "line_end": 4545,
          "content": "data, type.collectionBaseType(), type,<br/>                             connection"
        },
        {
          "total_lines": 1,
          "line_start": 6745,
          "line_end": 6745,
          "content": "String columnLabel, java.io.Reader reader"
        },
        {
          "total_lines": 1,
          "line_start": 3344,
          "line_end": 3344,
          "content": "int columnIndex, java.io.Reader x"
        },
        {
          "total_lines": 1,
          "line_start": 6556,
          "line_end": 6556,
          "content": "String columnLabel, java.io.Reader reader"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestSqlPersistent.java",
      "loc_duplicate": 62,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 507,
          "line_end": 513,
          "content": "value        = rs.getDouble(2);<br/>                wasEqual     = Double.isNaN(value);<br/>                integerValue = rs.getInt(4);<br/><br/>                // tests for conversion<br/>                // getInt on DECIMAL<br/>                integerValue = rs.getInt(1);"
        },
        {
          "total_lines": 5,
          "line_start": 407,
          "line_end": 411,
          "content": "ps = connection.prepareStatement(sqlString);<br/><br/>            ps.setBytes(1, new byte[] {<br/>                1, 2, 3, 4, 5<br/>            });"
        },
        {
          "total_lines": 5,
          "line_start": 416,
          "line_end": 420,
          "content": "ps = connection.prepareStatement(sqlString);<br/><br/>            ps.setBytes(1, new byte[] {<br/>                1, 2, 3, 4, 5<br/>            });"
        },
        {
          "total_lines": 4,
          "line_start": 154,
          "line_end": 157,
          "content": "ps.execute();<br/><br/>            // Array as object<br/>            ps.setInt(1, 3);"
        },
        {
          "total_lines": 4,
          "line_start": 166,
          "line_end": 169,
          "content": "ps.execute();<br/><br/>            // byte arrray as object<br/>            ps.setInt(1, 3);"
        },
        {
          "total_lines": 4,
          "line_start": 473,
          "line_end": 476,
          "content": "ps.execute();<br/><br/>            //<br/>            ps.setInt(1, 0);"
        },
        {
          "total_lines": 3,
          "line_start": 551,
          "line_end": 553,
          "content": "int max = rs.getInt(1);<br/><br/>                    System.out.println(\"Max value for ID: \" + max);"
        },
        {
          "total_lines": 3,
          "line_start": 130,
          "line_end": 132,
          "content": "new Double(1), new Double(Double.NaN),<br/>                new Double(Double.NEGATIVE_INFINITY),<br/>                new Double(Double.POSITIVE_INFINITY)"
        },
        {
          "total_lines": 3,
          "line_start": 536,
          "line_end": 538,
          "content": "// cause errors<br/>                ps.setString(5, \"three\");<br/>                fail(\"update did not fail\");"
        },
        {
          "total_lines": 3,
          "line_start": 529,
          "line_end": 531,
          "content": "int max = rs.getInt(1);<br/><br/>                System.out.println(\"Max value for i: \" + max);"
        },
        {
          "total_lines": 3,
          "line_start": 307,
          "line_end": 309,
          "content": "new Double(1), new Double(Double.NaN),<br/>                new Double(Double.NEGATIVE_INFINITY),<br/>                new Double(Double.POSITIVE_INFINITY)"
        },
        {
          "total_lines": 2,
          "line_start": 517,
          "line_end": 518,
          "content": "value    = rs.getDouble(2);<br/>                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;"
        },
        {
          "total_lines": 2,
          "line_start": 522,
          "line_end": 523,
          "content": "value    = rs.getDouble(2);<br/>                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;"
        },
        {
          "total_lines": 2,
          "line_start": 460,
          "line_end": 461,
          "content": "ps.execute();<br/>            ps.setInt(1, 0);"
        },
        {
          "total_lines": 2,
          "line_start": 585,
          "line_end": 586,
          "content": "e.printStackTrace();<br/>            System.out.println(\"TestSql.tearDown() error: \" + e.getMessage());"
        },
        {
          "total_lines": 2,
          "line_start": 489,
          "line_end": 490,
          "content": "9, new java.sql.Timestamp(System.currentTimeMillis()<br/>                                                   + 2)"
        },
        {
          "total_lines": 1,
          "line_start": 488,
          "line_end": 488,
          "content": "8, new java.sql.Time(System.currentTimeMillis() + 2)"
        },
        {
          "total_lines": 1,
          "line_start": 457,
          "line_end": 457,
          "content": "8, new java.sql.Time(System.currentTimeMillis())"
        },
        {
          "total_lines": 1,
          "line_start": 456,
          "line_end": 456,
          "content": "7, new java.sql.Date(System.currentTimeMillis())"
        },
        {
          "total_lines": 1,
          "line_start": 471,
          "line_end": 471,
          "content": "8, new java.sql.Time(System.currentTimeMillis() + 1)"
        },
        {
          "total_lines": 1,
          "line_start": 487,
          "line_end": 487,
          "content": "7, new java.sql.Date(System.currentTimeMillis() + 2)"
        },
        {
          "total_lines": 1,
          "line_start": 459,
          "line_end": 459,
          "content": "9, new java.sql.Timestamp(System.currentTimeMillis())"
        },
        {
          "total_lines": 1,
          "line_start": 470,
          "line_end": 470,
          "content": "7, new java.sql.Timestamp(System.currentTimeMillis() + 1)"
        },
        {
          "total_lines": 1,
          "line_start": 472,
          "line_end": 472,
          "content": "9, new java.sql.Date(System.currentTimeMillis() + 1)"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/TransferTable.java",
      "loc_duplicate": 55,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 290,
          "line_end": 296,
          "content": "try {<br/>                if (!destDb.getAutoCommit()) {<br/>                    destDb.rollback();<br/>                }<br/>            } catch (Exception e1) {}<br/><br/>            throw (e);"
        },
        {
          "total_lines": 7,
          "line_start": 445,
          "line_end": 451,
          "content": "try {<br/>                if (!destDb.getAutoCommit()) {<br/>                    destDb.rollback();<br/>                }<br/>            } catch (Exception e1) {}<br/><br/>            throw (e);"
        },
        {
          "total_lines": 7,
          "line_start": 344,
          "line_end": 350,
          "content": "try {<br/>                if (!destDb.getAutoCommit()) {<br/>                    destDb.rollback();<br/>                }<br/>            } catch (Exception e1) {}<br/><br/>            throw (e);"
        },
        {
          "total_lines": 5,
          "line_start": 455,
          "line_end": 459,
          "content": "destDb.commit();<br/><br/>            try {<br/>                destDb.setAutoCommit(true);<br/>            } catch (Exception e) {}"
        },
        {
          "total_lines": 5,
          "line_start": 354,
          "line_end": 358,
          "content": "destDb.commit();<br/><br/>            try {<br/>                destDb.setAutoCommit(true);<br/>            } catch (Exception e) {}"
        },
        {
          "total_lines": 5,
          "line_start": 336,
          "line_end": 340,
          "content": "destDb.commit();<br/><br/>                    try {<br/>                        destDb.setAutoCommit(true);<br/>                    } catch (Exception e) {}"
        },
        {
          "total_lines": 5,
          "line_start": 300,
          "line_end": 304,
          "content": "destDb.commit();<br/><br/>            try {<br/>                destDb.setAutoCommit(true);<br/>            } catch (Exception e) {}"
        },
        {
          "total_lines": 3,
          "line_start": 373,
          "line_end": 375,
          "content": "tracer.trace(\"Table \" + Stmts.sSourceTable + \" not transfered\");<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 158,
          "line_end": 160,
          "content": "tracer.trace(\"Table \" + Stmts.sSourceTable + \" not transfered\");<br/><br/>            return;"
        },
        {
          "total_lines": 2,
          "line_start": 185,
          "line_end": 186,
          "content": "tracer.trace(\"Executing \" + Statement);<br/>                        destDb.execute(Statement);"
        },
        {
          "total_lines": 2,
          "line_start": 217,
          "line_end": 218,
          "content": "tracer.trace(\"Executing \" + Statement);<br/>                        destDb.execute(Statement);"
        },
        {
          "total_lines": 2,
          "line_start": 432,
          "line_end": 433,
          "content": "tracer.trace(\"Executing \" + Statement);<br/>                        destDb.execute(Statement);"
        },
        {
          "total_lines": 2,
          "line_start": 249,
          "line_end": 250,
          "content": "tracer.trace(\"Executing \" + Statement);<br/>                        destDb.execute(Statement);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/RowStoreAVLHybridExtended.java",
      "loc_duplicate": 230,
      "clones": [
          {
          "total_lines": 18,
          "line_start": 162,
          "line_end": 179,
          "content": "case RowAction.ACTION_DELETE :<br/>                row = (Row) get(row, true);<br/><br/>                ((RowAVL) row).setNewNodes(this);<br/>                row.keepInMemory(false);<br/>                indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 17,
          "line_start": 137,
          "line_end": 153,
          "content": "case RowAction.ACTION_DELETE :<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_DELETE_FINAL :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 17,
          "line_start": 163,
          "line_end": 179,
          "content": "row = (Row) get(row, true);<br/><br/>                ((RowAVL) row).setNewNodes(this);<br/>                row.keepInMemory(false);<br/>                indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 16,
          "line_start": 137,
          "line_end": 152,
          "content": "case RowAction.ACTION_DELETE :<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_DELETE_FINAL :<br/>                delete(session, row);<br/>                remove(row);"
        },
        {
          "total_lines": 16,
          "line_start": 163,
          "line_end": 178,
          "content": "row = (Row) get(row, true);<br/><br/>                ((RowAVL) row).setNewNodes(this);<br/>                row.keepInMemory(false);<br/>                indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);"
        },
        {
          "total_lines": 15,
          "line_start": 165,
          "line_end": 179,
          "content": "((RowAVL) row).setNewNodes(this);<br/>                row.keepInMemory(false);<br/>                indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 15,
          "line_start": 139,
          "line_end": 153,
          "content": "break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_DELETE_FINAL :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 15,
          "line_start": 138,
          "line_end": 152,
          "content": "remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_DELETE_FINAL :<br/>                delete(session, row);<br/>                remove(row);"
        },
        {
          "total_lines": 14,
          "line_start": 162,
          "line_end": 175,
          "content": "case RowAction.ACTION_DELETE :<br/>                row = (Row) get(row, true);<br/><br/>                ((RowAVL) row).setNewNodes(this);<br/>                row.keepInMemory(false);<br/>                indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :"
        },
        {
          "total_lines": 13,
          "line_start": 166,
          "line_end": 178,
          "content": "row.keepInMemory(false);<br/>                indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);"
        },
        {
          "total_lines": 12,
          "line_start": 167,
          "line_end": 178,
          "content": "indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);"
        },
        {
          "total_lines": 11,
          "line_start": 142,
          "line_end": 152,
          "content": "break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_DELETE_FINAL :<br/>                delete(session, row);<br/>                remove(row);"
        },
        {
          "total_lines": 9,
          "line_start": 139,
          "line_end": 147,
          "content": "break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);"
        },
        {
          "total_lines": 7,
          "line_start": 138,
          "line_end": 144,
          "content": "remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :"
        },
        {
          "total_lines": 7,
          "line_start": 173,
          "line_end": 179,
          "content": "break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 6,
          "line_start": 148,
          "line_end": 153,
          "content": "break;<br/><br/>            case RowAction.ACTION_DELETE_FINAL :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 5,
          "line_start": 137,
          "line_end": 141,
          "content": "case RowAction.ACTION_DELETE :<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :"
        },
        {
          "total_lines": 4,
          "line_start": 222,
          "line_end": 225,
          "content": "indexList    = keys;<br/>            accessorList = new CachedObject[indexList.length];<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 56,
          "line_end": 58,
          "content": "Session session,<br/>                                     PersistentStoreCollection manager,<br/>                                     TableBase table, boolean diskBased"
        },
        {
          "total_lines": 3,
          "line_start": 223,
          "line_end": 225,
          "content": "accessorList = new CachedObject[indexList.length];<br/><br/>            return;"
        },
        {
          "total_lines": 2,
          "line_start": 132,
          "line_end": 133,
          "content": "Session session, Row row, int changeAction,<br/>                          int txModel"
        },
        {
          "total_lines": 2,
          "line_start": 157,
          "line_end": 158,
          "content": "Session session, Row row, int changeAction,<br/>                            int txModel"
        },
        {
          "total_lines": 1,
          "line_start": 132,
          "line_end": 132,
          "content": "Session session, Row row, int changeAction"
        },
        {
          "total_lines": 1,
          "line_start": 157,
          "line_end": 157,
          "content": "Session session, Row row, int changeAction"
        },
        {
          "total_lines": 1,
          "line_start": 77,
          "line_end": 77,
          "content": "CachedObject object, boolean tx"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/FunctionSQLInvoked.java",
      "loc_duplicate": 13,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 190,
          "line_end": 194,
          "content": "Object value =<br/>                session.sessionContext.rangeIterators[rangePosition]<br/>                    .getCurrent(columnIndex);<br/><br/>            return value;"
        },
        {
          "total_lines": 3,
          "line_start": 68,
          "line_end": 70,
          "content": "Session session,<br/>            RangeGroup rangeGroup, int rangeCount,<br/>            RangeGroup[] rangeGroups, HsqlList unresolvedSet, boolean acceptsSequences"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 72,
          "line_end": 73,
          "content": "session,<br/>            rangeGroup, rangeCount, rangeGroups, null, false"
        },
        {
          "total_lines": 1,
          "line_start": 88,
          "line_end": 88,
          "content": "session, rangeGroup, rangeCount, rangeGroups, unresolvedSet"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/TimestampData.java",
      "loc_duplicate": 31,
      "clones": [
          {
          "total_lines": 12,
          "line_start": 101,
          "line_end": 112,
          "content": "long diff = seconds - b.seconds;<br/><br/>        if (diff == 0) {<br/>            diff = nanos - b.nanos;<br/><br/>            if (diff == 0) {<br/>                return 0;<br/>            }<br/>        }<br/><br/>        return diff > 0 ? 1<br/>                        : -1;"
        },
        {
          "total_lines": 10,
          "line_start": 103,
          "line_end": 112,
          "content": "if (diff == 0) {<br/>            diff = nanos - b.nanos;<br/><br/>            if (diff == 0) {<br/>                return 0;<br/>            }<br/>        }<br/><br/>        return diff > 0 ? 1<br/>                        : -1;"
        },
        {
          "total_lines": 9,
          "line_start": 101,
          "line_end": 109,
          "content": "long diff = seconds - b.seconds;<br/><br/>        if (diff == 0) {<br/>            diff = nanos - b.nanos;<br/><br/>            if (diff == 0) {<br/>                return 0;<br/>            }<br/>        }"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestScriptRunner.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import java.sql.Connection;<br/>import java.sql.ResultSet;<br/>import java.sql.SQLException;"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.sql.ResultSet;<br/>import java.sql.SQLException;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/map/BaseHashMap.java",
      "loc_duplicate": 104,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 472,
          "line_end": 480,
          "content": "if (objectKey == null) {<br/>                return null;<br/>            }<br/><br/>            if (comparator == null) {<br/>                hash = objectKey.hashCode();<br/>            } else {<br/>                hash = comparator.hashCode(objectKey);<br/>            }"
        },
        {
          "total_lines": 9,
          "line_start": 313,
          "line_end": 321,
          "content": "if (objectKey == null) {<br/>                return null;<br/>            }<br/><br/>            if (comparator == null) {<br/>                hash = objectKey.hashCode();<br/>            } else {<br/>                hash = comparator.hashCode(objectKey);<br/>            }"
        },
        {
          "total_lines": 8,
          "line_start": 1363,
          "line_end": 1370,
          "content": "if (hashIndex.elementCount == 0) {<br/>            return false;<br/>        }<br/><br/>        int lookup = getLookup(key);<br/><br/>        return lookup == -1 ? false<br/>                            : true;"
        },
        {
          "total_lines": 8,
          "line_start": 1375,
          "line_end": 1382,
          "content": "if (hashIndex.elementCount == 0) {<br/>            return false;<br/>        }<br/><br/>        int lookup = getLookup(key);<br/><br/>        return lookup == -1 ? false<br/>                            : true;"
        },
        {
          "total_lines": 6,
          "line_start": 436,
          "line_end": 441,
          "content": "longKeyTable[lookup] = longKey;<br/><br/>            if (longKey == 0) {<br/>                hasZeroKey   = true;<br/>                zeroKeyIndex = lookup;<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 429,
          "line_end": 434,
          "content": "intKeyTable[lookup] = (int) longKey;<br/><br/>            if (longKey == 0) {<br/>                hasZeroKey   = true;<br/>                zeroKeyIndex = lookup;<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 624,
          "line_end": 629,
          "content": "intKeyTable[lookup] = (int) longKey;<br/><br/>            if (longKey == 0) {<br/>                hasZeroKey   = true;<br/>                zeroKeyIndex = lookup;<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 631,
          "line_end": 636,
          "content": "longKeyTable[lookup] = longKey;<br/><br/>            if (longKey == 0) {<br/>                hasZeroKey   = true;<br/>                zeroKeyIndex = lookup;<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 1375,
          "line_end": 1379,
          "content": "if (hashIndex.elementCount == 0) {<br/>            return false;<br/>        }<br/><br/>        int lookup = getLookup(key);"
        },
        {
          "total_lines": 5,
          "line_start": 1363,
          "line_end": 1367,
          "content": "if (hashIndex.elementCount == 0) {<br/>            return false;<br/>        }<br/><br/>        int lookup = getLookup(key);"
        },
        {
          "total_lines": 2,
          "line_start": 786,
          "line_end": 787,
          "content": "lastLookup = lookup,<br/>                lookup = hashIndex.getNextLookup(lookup)"
        },
        {
          "total_lines": 2,
          "line_start": 825,
          "line_end": 826,
          "content": "lastLookup = lookup,<br/>                lookup = hashIndex.getNextLookup(lookup)"
        },
        {
          "total_lines": 2,
          "line_start": 672,
          "line_end": 673,
          "content": "lastLookup = lookup,<br/>                lookup = hashIndex.getNextLookup(lookup)"
        },
        {
          "total_lines": 2,
          "line_start": 1155,
          "line_end": 1156,
          "content": "array, lookup + 1, array, lookup,<br/>                             lastPointer - lookup"
        },
        {
          "total_lines": 2,
          "line_start": 330,
          "line_end": 331,
          "content": "lastLookup = lookup,<br/>                lookup = hashIndex.getNextLookup(lookup)"
        },
        {
          "total_lines": 2,
          "line_start": 1137,
          "line_end": 1138,
          "content": "array, lookup + 1, array, lookup,<br/>                             lastPointer - lookup"
        },
        {
          "total_lines": 2,
          "line_start": 1164,
          "line_end": 1165,
          "content": "array, lookup + 1, array, lookup,<br/>                             lastPointer - lookup"
        },
        {
          "total_lines": 2,
          "line_start": 394,
          "line_end": 395,
          "content": "returnValue              = objectValueTable[lookup];<br/>                objectValueTable[lookup] = objectValue;"
        },
        {
          "total_lines": 2,
          "line_start": 372,
          "line_end": 373,
          "content": "returnValue              = objectValueTable[lookup];<br/>                    objectValueTable[lookup] = null;"
        },
        {
          "total_lines": 2,
          "line_start": 1146,
          "line_end": 1147,
          "content": "array, lookup + 1, array, lookup,<br/>                             lastPointer - lookup"
        },
        {
          "total_lines": 2,
          "line_start": 490,
          "line_end": 491,
          "content": "lastLookup = lookup,<br/>                lookup = hashIndex.getNextLookup(lookup)"
        },
        {
          "total_lines": 2,
          "line_start": 715,
          "line_end": 716,
          "content": "returnValue              = objectValueTable[lookup];<br/>                objectValueTable[lookup] = objectValue;"
        },
        {
          "total_lines": 2,
          "line_start": 1119,
          "line_end": 1120,
          "content": "array, lookup + 1, array, lookup,<br/>                             lastPointer - lookup"
        },
        {
          "total_lines": 2,
          "line_start": 1128,
          "line_end": 1129,
          "content": "array, lookup + 1, array, lookup,<br/>                             lastPointer - lookup"
        },
        {
          "total_lines": 2,
          "line_start": 795,
          "line_end": 796,
          "content": "returnValue              = objectValueTable[lookup];<br/>                    objectValueTable[lookup] = null;"
        },
        {
          "total_lines": 1,
          "line_start": 1164,
          "line_end": 1164,
          "content": "array, lookup + 1, array, lookup"
        },
        {
          "total_lines": 1,
          "line_start": 1155,
          "line_end": 1155,
          "content": "array, lookup + 1, array, lookup"
        },
        {
          "total_lines": 1,
          "line_start": 1119,
          "line_end": 1119,
          "content": "array, lookup + 1, array, lookup"
        },
        {
          "total_lines": 1,
          "line_start": 1128,
          "line_end": 1128,
          "content": "array, lookup + 1, array, lookup"
        },
        {
          "total_lines": 1,
          "line_start": 1137,
          "line_end": 1137,
          "content": "array, lookup + 1, array, lookup"
        },
        {
          "total_lines": 1,
          "line_start": 1146,
          "line_end": 1146,
          "content": "array, lookup + 1, array, lookup"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/ScriptRunner.java",
      "loc_duplicate": 23,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 292,
          "line_end": 300,
          "content": "// stop processing on bad script line<br/>            String error = \"statement error processing log \" + databaseFile<br/>                           + \"line: \" + scr.getLineNumber();<br/><br/>            database.logger.logSevereEvent(error, e);<br/><br/>            if (fullReplay) {<br/>                throw Error.error(e, ErrorCode.ERROR_IN_SCRIPT_FILE, error);<br/>            }"
        },
        {
          "total_lines": 9,
          "line_start": 273,
          "line_end": 281,
          "content": "// stop processing on bad log line<br/>            String error = \"statement error processing log \" + databaseFile<br/>                           + \"line: \" + scr.getLineNumber();<br/><br/>            database.logger.logSevereEvent(error, e);<br/><br/>            if (fullReplay) {<br/>                throw Error.error(e, ErrorCode.ERROR_IN_SCRIPT_FILE, error);<br/>            }"
        },
        {
          "total_lines": 3,
          "line_start": 133,
          "line_end": 135,
          "content": "StatementTypes.UPDATE_CURSOR,<br/>                                           StatementTypes.X_SQL_DATA_CHANGE,<br/>                                           null"
        },
        {
          "total_lines": 2,
          "line_start": 133,
          "line_end": 134,
          "content": "StatementTypes.UPDATE_CURSOR,<br/>                                           StatementTypes.X_SQL_DATA_CHANGE"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestDateTime.java",
      "loc_duplicate": 26,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 330,
          "line_end": 333,
          "content": "\"The time retrieved from database \"<br/>            + DateFormat.getDateTimeInstance().format(retrievedTime)<br/>            + \" is not the same as the inserted one \"<br/>            + DateFormat.getDateTimeInstance().format(insertTime), result"
        },
        {
          "total_lines": 4,
          "line_start": 230,
          "line_end": 233,
          "content": "\"The time retrieved from database \"<br/>            + DateFormat.getDateTimeInstance().format(retrievedTime)<br/>            + \" is not the same as the inserted one \"<br/>            + DateFormat.getDateTimeInstance().format(insertTime), result"
        },
        {
          "total_lines": 2,
          "line_start": 214,
          "line_end": 215,
          "content": "\"Exactly one record with time data shoud have been deleted.\",<br/>            iDeletedCount"
        },
        {
          "total_lines": 2,
          "line_start": 219,
          "line_end": 220,
          "content": "\"The inserted time shouldn't be retrieved as null from the database\",<br/>            retrievedTime"
        },
        {
          "total_lines": 2,
          "line_start": 319,
          "line_end": 320,
          "content": "\"The inserted time shouldn't be retrieved as null from the database\",<br/>            retrievedTime"
        },
        {
          "total_lines": 2,
          "line_start": 301,
          "line_end": 302,
          "content": "\"The inserted time is not in the database.\",<br/>                          results.next()"
        },
        {
          "total_lines": 2,
          "line_start": 181,
          "line_end": 182,
          "content": "\"Exactly one record with time data shoud have been inserted.\",<br/>            iUpdateCount"
        },
        {
          "total_lines": 2,
          "line_start": 276,
          "line_end": 277,
          "content": "\"Exactly one record with time data shoud have been inserted.\",<br/>            iUpdateCount"
        },
        {
          "total_lines": 2,
          "line_start": 314,
          "line_end": 315,
          "content": "\"Exactly one record with time data shoud have been deleted.\",<br/>            iDeletedCount"
        },
        {
          "total_lines": 2,
          "line_start": 201,
          "line_end": 202,
          "content": "\"The inserted time is not in the database.\",<br/>                          results.next()"
        },
        {
          "total_lines": 1,
          "line_start": 145,
          "line_end": 145,
          "content": "iDeletedCount, 1"
        },
        {
          "total_lines": 1,
          "line_start": 108,
          "line_end": 108,
          "content": "iUpdateCount, 1"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/FileArchiver.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 85,
          "line_end": 87,
          "content": "String outfilename,<br/>                               FileAccess storage,<br/>                               int compressionType"
        },
        {
          "total_lines": 3,
          "line_start": 166,
          "line_end": 168,
          "content": "String outfilename,<br/>                                 FileAccess storage,<br/>                                 int compressionType"
        },
        {
          "total_lines": 2,
          "line_start": 85,
          "line_end": 86,
          "content": "String outfilename,<br/>                               FileAccess storage"
        },
        {
          "total_lines": 2,
          "line_start": 167,
          "line_end": 168,
          "content": "FileAccess storage,<br/>                                 int compressionType"
        },
        {
          "total_lines": 2,
          "line_start": 166,
          "line_end": 167,
          "content": "String outfilename,<br/>                                 FileAccess storage"
        },
        {
          "total_lines": 2,
          "line_start": 86,
          "line_end": 87,
          "content": "FileAccess storage,<br/>                               int compressionType"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/auth/AuthBeanMultiplexer.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 113,
          "line_end": 119,
          "content": "if (rs != null) try {<br/>                rs.close();<br/>            } catch (SQLException se) {<br/>                logger.error(<br/>                        \"Failed to close ResultSet for retrieving db name\");<br/>            }<br/>            rs = null;  // Encourage GC"
        },
        {
          "total_lines": 1,
          "line_start": 236,
          "line_end": 236,
          "content": "String database, String user, String password"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/HsqldbTransferHelper.java",
      "loc_duplicate": 27,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 34,
          "line_end": 37,
          "content": "import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;<br/>import java.sql.Types;"
        },
        {
          "total_lines": 3,
          "line_start": 101,
          "line_end": 103,
          "content": "ResultSetMetaData meta,<br/>                               String columnType, ResultSet columnDesc,<br/>                               int columnIndex"
        },
        {
          "total_lines": 3,
          "line_start": 83,
          "line_end": 85,
          "content": "TransferTable t, ResultSetMetaData meta,<br/>                               String columnType, ResultSet columnDesc,<br/>                               int columnIndex"
        },
        {
          "total_lines": 3,
          "line_start": 68,
          "line_end": 70,
          "content": "TransferTable t, ResultSetMetaData meta,<br/>                              String columnType, ResultSet columnDesc,<br/>                              int columnIndex"
        },
        {
          "total_lines": 3,
          "line_start": 94,
          "line_end": 96,
          "content": "ResultSetMetaData meta,<br/>                              String columnType, ResultSet columnDesc,<br/>                              int columnIndex"
        },
        {
          "total_lines": 2,
          "line_start": 94,
          "line_end": 95,
          "content": "String aTableName, ResultSetMetaData meta,<br/>                              String columnType"
        },
        {
          "total_lines": 2,
          "line_start": 97,
          "line_end": 98,
          "content": "meta, columnType,<br/>                                  columnDesc, columnIndex"
        },
        {
          "total_lines": 2,
          "line_start": 104,
          "line_end": 105,
          "content": "meta, columnType,<br/>                                   columnDesc, columnIndex"
        },
        {
          "total_lines": 2,
          "line_start": 101,
          "line_end": 102,
          "content": "String aTableName, ResultSetMetaData meta,<br/>                               String columnType"
        },
        {
          "total_lines": 1,
          "line_start": 84,
          "line_end": 84,
          "content": "String columnType, ResultSet columnDesc"
        },
        {
          "total_lines": 1,
          "line_start": 69,
          "line_end": 69,
          "content": "String columnType, ResultSet columnDesc"
        },
        {
          "total_lines": 1,
          "line_start": 53,
          "line_end": 53,
          "content": "Traceable t, String q"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/NullType.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 95,
          "line_end": 96,
          "content": "SessionInterface session, Object a,<br/>                                Type otherType"
        },
        {
          "total_lines": 1,
          "line_start": 83,
          "line_end": 83,
          "content": "Session session, Type other, int operation"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/ClobDataID.java",
      "loc_duplicate": 135,
      "clones": [
          {
          "total_lines": 14,
          "line_start": 74,
          "line_end": 87,
          "content": "if (length > -1) {<br/>            return length;<br/>        }<br/><br/>        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);<br/>        Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        length = ((ResultLob) resultIn).getBlockLength();<br/><br/>        return length;"
        },
        {
          "total_lines": 12,
          "line_start": 74,
          "line_end": 85,
          "content": "if (length > -1) {<br/>            return length;<br/>        }<br/><br/>        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);<br/>        Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        length = ((ResultLob) resultIn).getBlockLength();"
        },
        {
          "total_lines": 10,
          "line_start": 78,
          "line_end": 87,
          "content": "ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);<br/>        Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        length = ((ResultLob) resultIn).getBlockLength();<br/><br/>        return length;"
        },
        {
          "total_lines": 8,
          "line_start": 223,
          "line_end": 230,
          "content": "ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);<br/>        Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        return ((ResultLob) resultIn).getBlockLength();"
        },
        {
          "total_lines": 8,
          "line_start": 100,
          "line_end": 107,
          "content": "ResultLob resultOut = ResultLob.newLobDuplicateRequest(id);<br/>        Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        long lobID = ((ResultLob) resultIn).getLobID();"
        },
        {
          "total_lines": 7,
          "line_start": 224,
          "line_end": 230,
          "content": "Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        return ((ResultLob) resultIn).getBlockLength();"
        },
        {
          "total_lines": 7,
          "line_start": 101,
          "line_end": 107,
          "content": "Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        long lobID = ((ResultLob) resultIn).getLobID();"
        },
        {
          "total_lines": 7,
          "line_start": 81,
          "line_end": 87,
          "content": "if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        length = ((ResultLob) resultIn).getBlockLength();<br/><br/>        return length;"
        },
        {
          "total_lines": 6,
          "line_start": 223,
          "line_end": 228,
          "content": "ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);<br/>        Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 224,
          "line_end": 228,
          "content": "Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 226,
          "line_end": 230,
          "content": "if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        return ((ResultLob) resultIn).getBlockLength();"
        },
        {
          "total_lines": 5,
          "line_start": 74,
          "line_end": 78,
          "content": "if (length > -1) {<br/>            return length;<br/>        }<br/><br/>        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);"
        },
        {
          "total_lines": 5,
          "line_start": 258,
          "line_end": 262,
          "content": "if (other instanceof BlobDataID) {<br/>            return id == ((BlobDataID) other).id;<br/>        }<br/><br/>        return false;"
        },
        {
          "total_lines": 5,
          "line_start": 153,
          "line_end": 157,
          "content": "Result resultIn = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 211,
          "line_end": 215,
          "content": "Result resultIn = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }"
        },
        {
          "total_lines": 3,
          "line_start": 85,
          "line_end": 87,
          "content": "length = ((ResultLob) resultIn).getBlockLength();<br/><br/>        return length;"
        },
        {
          "total_lines": 2,
          "line_start": 192,
          "line_end": 193,
          "content": "String searchstr,<br/>                         long start"
        },
        {
          "total_lines": 2,
          "line_start": 90,
          "line_end": 91,
          "content": "SessionInterface session, long pos,<br/>                               int length"
        },
        {
          "total_lines": 2,
          "line_start": 165,
          "line_end": 166,
          "content": "long pos, char[] chars,<br/>                         int offset"
        },
        {
          "total_lines": 2,
          "line_start": 37,
          "line_end": 38,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 146,
          "line_end": 147,
          "content": "long pos,<br/>                                   Reader in"
        },
        {
          "total_lines": 2,
          "line_start": 233,
          "line_end": 234,
          "content": "SessionInterface session, long pos,<br/>                                     long length"
        },
        {
          "total_lines": 2,
          "line_start": 162,
          "line_end": 163,
          "content": "long pos, ClobData clob,<br/>                        long offset"
        },
        {
          "total_lines": 2,
          "line_start": 58,
          "line_end": 59,
          "content": "long position,<br/>                           int length"
        },
        {
          "total_lines": 2,
          "line_start": 206,
          "line_end": 207,
          "content": "ClobData searchstr,<br/>                         long start"
        },
        {
          "total_lines": 1,
          "line_start": 233,
          "line_end": 233,
          "content": "SessionInterface session, long pos"
        },
        {
          "total_lines": 1,
          "line_start": 112,
          "line_end": 112,
          "content": "SessionInterface session, long position"
        },
        {
          "total_lines": 1,
          "line_start": 90,
          "line_end": 90,
          "content": "SessionInterface session, long pos"
        },
        {
          "total_lines": 1,
          "line_start": 166,
          "line_end": 166,
          "content": "int offset, int len"
        },
        {
          "total_lines": 1,
          "line_start": 149,
          "line_end": 149,
          "content": "long pos, String str"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCClob.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 883,
          "line_end": 887,
          "content": "if (data == null) {<br/>            throw JDBCUtil.nullArgument();<br/>        }<br/>        m_data                = data;<br/>        m_createdByConnection = false;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/Tree.java",
      "loc_duplicate": 62,
      "clones": [
          {
          "total_lines": 16,
          "line_start": 292,
          "line_end": 307,
          "content": "switch (e.id) {<br/><br/>            case Event.SCROLL_LINE_UP :<br/>            case Event.SCROLL_LINE_DOWN :<br/>            case Event.SCROLL_PAGE_UP :<br/>            case Event.SCROLL_PAGE_DOWN :<br/>            case Event.SCROLL_ABSOLUTE :<br/>                iX = sbHoriz.getValue();<br/>                iY = iRowHeight * sbVert.getValue();<br/><br/>                repaint();<br/><br/>                return true;<br/>        }<br/><br/>        return super.handleEvent(e);"
        },
        {
          "total_lines": 14,
          "line_start": 173,
          "line_end": 186,
          "content": "super.setBounds(x, y, w, h);<br/><br/>        iSbHeight = sbHoriz.getPreferredSize().height;<br/>        iSbWidth  = sbVert.getPreferredSize().width;<br/>        iHeight   = h - iSbHeight;<br/>        iWidth    = w - iSbWidth;<br/><br/>        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);<br/>        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);<br/>        adjustScroll();<br/><br/>        iImage = null;<br/><br/>        repaint();"
        },
        {
          "total_lines": 12,
          "line_start": 175,
          "line_end": 186,
          "content": "iSbHeight = sbHoriz.getPreferredSize().height;<br/>        iSbWidth  = sbVert.getPreferredSize().width;<br/>        iHeight   = h - iSbHeight;<br/>        iWidth    = w - iSbWidth;<br/><br/>        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);<br/>        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);<br/>        adjustScroll();<br/><br/>        iImage = null;<br/><br/>        repaint();"
        },
        {
          "total_lines": 10,
          "line_start": 173,
          "line_end": 182,
          "content": "super.setBounds(x, y, w, h);<br/><br/>        iSbHeight = sbHoriz.getPreferredSize().height;<br/>        iSbWidth  = sbVert.getPreferredSize().width;<br/>        iHeight   = h - iSbHeight;<br/>        iWidth    = w - iSbWidth;<br/><br/>        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);<br/>        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);<br/>        adjustScroll();"
        },
        {
          "total_lines": 8,
          "line_start": 175,
          "line_end": 182,
          "content": "iSbHeight = sbHoriz.getPreferredSize().height;<br/>        iSbWidth  = sbVert.getPreferredSize().width;<br/>        iHeight   = h - iSbHeight;<br/>        iWidth    = w - iSbWidth;<br/><br/>        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);<br/>        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);<br/>        adjustScroll();"
        },
        {
          "total_lines": 2,
          "line_start": 271,
          "line_end": 272,
          "content": "v = iY / iRowHeight,<br/>            h = iHeight / iRowHeight"
        }
        
      ]
    },
    {
      "path": "hsqldb/integration/hibernate/src/org/hibernate/dialect/HSQLDialect.java",
      "loc_duplicate": 143,
      "clones": [
          {
          "total_lines": 26,
          "line_start": 322,
          "line_end": 347,
          "content": "String constraintName = null;<br/><br/>                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );<br/><br/>                        if ( errorCode == -8 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"Integrity constraint violation \", \" table:\", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -9 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"Violation of unique index: \", \" in statement [\", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -104 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"Unique constraint violation: \", \" in statement [\", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -177 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"Integrity constraint violation - no parent \", \" table:\",<br/>                                                sqle.getMessage()<br/>                                );<br/>                        }<br/>                        return constraintName;"
        },
        {
          "total_lines": 25,
          "line_start": 359,
          "line_end": 383,
          "content": "String constraintName = null;<br/><br/>                        int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );<br/><br/>                        if ( errorCode == -8 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -9 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -104 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -177 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        return constraintName;"
        },
        {
          "total_lines": 24,
          "line_start": 324,
          "line_end": 347,
          "content": "int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );<br/><br/>                        if ( errorCode == -8 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"Integrity constraint violation \", \" table:\", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -9 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"Violation of unique index: \", \" in statement [\", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -104 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"Unique constraint violation: \", \" in statement [\", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -177 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"Integrity constraint violation - no parent \", \" table:\",<br/>                                                sqle.getMessage()<br/>                                );<br/>                        }<br/>                        return constraintName;"
        },
        {
          "total_lines": 23,
          "line_start": 361,
          "line_end": 383,
          "content": "int errorCode = JDBCExceptionHelper.extractErrorCode( sqle );<br/><br/>                        if ( errorCode == -8 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -9 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -104 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -177 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        return constraintName;"
        },
        {
          "total_lines": 21,
          "line_start": 363,
          "line_end": 383,
          "content": "if ( errorCode == -8 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -9 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -104 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        else if ( errorCode == -177 ) {<br/>                                constraintName = extractUsingTemplate(<br/>                                                \"; \", \" table: \", sqle.getMessage()<br/>                                );<br/>                        }<br/>                        return constraintName;"
        },
        {
          "total_lines": 5,
          "line_start": 76,
          "line_end": 80,
          "content": "Class props = ReflectHelper.classForName( \"org.hsqldb.persist.HsqlDatabaseProperties\" );<br/>                        String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );<br/><br/>                        hsqldbVersion = Integer.parseInt( versionString.substring( 0, 1 ) ) * 10;<br/>                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );"
        },
        {
          "total_lines": 4,
          "line_start": 77,
          "line_end": 80,
          "content": "String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );<br/><br/>                        hsqldbVersion = Integer.parseInt( versionString.substring( 0, 1 ) ) * 10;<br/>                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );"
        },
        {
          "total_lines": 2,
          "line_start": 79,
          "line_end": 80,
          "content": "hsqldbVersion = Integer.parseInt( versionString.substring( 0, 1 ) ) * 10;<br/>                        hsqldbVersion += Integer.parseInt( versionString.substring( 2, 3 ) );"
        },
        {
          "total_lines": 2,
          "line_start": 119,
          "line_end": 120,
          "content": "registerColumnType( Types.BLOB, \"blob\" );<br/>                        registerColumnType( Types.CLOB, \"clob\" );"
        },
        {
          "total_lines": 2,
          "line_start": 115,
          "line_end": 116,
          "content": "registerColumnType( Types.BLOB, \"longvarbinary\" );<br/>                        registerColumnType( Types.CLOB, \"longvarchar\" );"
        },
        {
          "total_lines": 2,
          "line_start": 76,
          "line_end": 77,
          "content": "Class props = ReflectHelper.classForName( \"org.hsqldb.persist.HsqlDatabaseProperties\" );<br/>                        String versionString = (String) props.getDeclaredField( \"THIS_VERSION\" ).get( null );"
        },
        {
          "total_lines": 2,
          "line_start": 255,
          "line_end": 256,
          "content": "sql.toLowerCase().indexOf( \"select\" ) + 6,<br/>                                                        hasOffset ? \" limit ? ?\" : \" top ?\""
        },
        {
          "total_lines": 1,
          "line_start": 140,
          "line_end": 140,
          "content": "\"hextoraw\", new StandardSQLFunction( \"hextoraw\" )"
        },
        {
          "total_lines": 1,
          "line_start": 139,
          "line_end": 139,
          "content": "\"rawtohex\", new StandardSQLFunction( \"rawtohex\" )"
        },
        {
          "total_lines": 1,
          "line_start": 195,
          "line_end": 195,
          "content": "\"roundmagic\", new StandardSQLFunction( \"roundmagic\" )"
        },
        {
          "total_lines": 1,
          "line_start": 198,
          "line_end": 198,
          "content": "\"ceiling\", new StandardSQLFunction( \"ceiling\" )"
        },
        {
          "total_lines": 1,
          "line_start": 211,
          "line_end": 211,
          "content": "Environment.STATEMENT_BATCH_SIZE, DEFAULT_BATCH_SIZE"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCPool.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 175,
          "line_end": 179,
          "content": "if (isWrapperFor(iface)) {<br/>            return (T) this;<br/>        }<br/><br/>        throw JDBCUtil.invalidArgument(\"iface: \" + iface);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ColumnSchema.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 36,
          "line_end": 37,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 203,
          "line_end": 204,
          "content": "nullability = other.nullability;<br/>        dataType    = other.dataType;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/IntKeyHashMapConcurrent.java",
      "loc_duplicate": 85,
      "clones": [
          {
          "total_lines": 23,
          "line_start": 177,
          "line_end": 199,
          "content": "public boolean contains(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public Object get(Object key) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean addAll(Collection c) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean remove(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean isEmpty() {<br/>            return size() == 0;<br/>        }"
        },
        {
          "total_lines": 19,
          "line_start": 216,
          "line_end": 234,
          "content": "public boolean contains(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean addAll(Collection c) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean remove(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean isEmpty() {<br/>            return size() == 0;<br/>        }"
        },
        {
          "total_lines": 15,
          "line_start": 185,
          "line_end": 199,
          "content": "public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean addAll(Collection c) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean remove(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean isEmpty() {<br/>            return size() == 0;<br/>        }"
        },
        {
          "total_lines": 11,
          "line_start": 177,
          "line_end": 187,
          "content": "public boolean contains(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public Object get(Object key) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 160,
          "line_end": 164,
          "content": "if (values == null) {<br/>            values = new Values();<br/>        }<br/><br/>        return values;"
        },
        {
          "total_lines": 5,
          "line_start": 151,
          "line_end": 155,
          "content": "if (keySet == null) {<br/>            keySet = new KeySet();<br/>        }<br/><br/>        return keySet;"
        },
        {
          "total_lines": 4,
          "line_start": 34,
          "line_end": 37,
          "content": "import java.util.concurrent.locks.Lock;<br/>import java.util.concurrent.locks.ReentrantReadWriteLock;<br/><br/>import org.hsqldb.map.BaseHashMap;"
        },
        {
          "total_lines": 2,
          "line_start": 61,
          "line_end": 62,
          "content": "BaseHashMap.intKeyOrValue,<br/>              BaseHashMap.objectKeyOrValue, false"
        },
        {
          "total_lines": 1,
          "line_start": 62,
          "line_end": 62,
          "content": "BaseHashMap.objectKeyOrValue, false"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/Like.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 181,
          "line_end": 181,
          "content": "0, 0"
        },
        {
          "total_lines": 1,
          "line_start": 177,
          "line_end": 177,
          "content": "session, 0"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/SessionManager.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 103,
          "line_end": 104,
          "content": "String zoneString,<br/>                                           int timeZoneSeconds"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/JDBCBench.java",
      "loc_duplicate": 496,
      "clones": [
          {
          "total_lines": 45,
          "line_start": 1069,
          "line_end": 1113,
          "content": "long    min          = 0;<br/>        long    max          = 0;<br/>        boolean keep_running = true;<br/><br/>        public MemoryWatcherThread() {<br/><br/>            this.reset();<br/><br/>            keep_running = true;<br/>        }<br/><br/>        public void reset() {<br/><br/>            System.gc();<br/><br/>            long currentFree  = Runtime.getRuntime().freeMemory();<br/>            long currentAlloc = Runtime.getRuntime().totalMemory();<br/><br/>            min = max = (currentAlloc - currentFree);<br/>        }<br/><br/>        public void end() {<br/>            keep_running = false;<br/>        }<br/><br/>        public void run() {<br/><br/>            while (keep_running) {<br/>                long currentFree  = Runtime.getRuntime().freeMemory();<br/>                long currentAlloc = Runtime.getRuntime().totalMemory();<br/>                long used         = currentAlloc - currentFree;<br/><br/>                if (used < min) {<br/>                    min = used;<br/>                }<br/><br/>                if (used > max) {<br/>                    max = used;<br/>                }<br/><br/>                try {<br/>                    sleep(100);<br/>                } catch (InterruptedException E) {}<br/>            }<br/>        }"
        },
        {
          "total_lines": 44,
          "line_start": 1070,
          "line_end": 1113,
          "content": "long    max          = 0;<br/>        boolean keep_running = true;<br/><br/>        public MemoryWatcherThread() {<br/><br/>            this.reset();<br/><br/>            keep_running = true;<br/>        }<br/><br/>        public void reset() {<br/><br/>            System.gc();<br/><br/>            long currentFree  = Runtime.getRuntime().freeMemory();<br/>            long currentAlloc = Runtime.getRuntime().totalMemory();<br/><br/>            min = max = (currentAlloc - currentFree);<br/>        }<br/><br/>        public void end() {<br/>            keep_running = false;<br/>        }<br/><br/>        public void run() {<br/><br/>            while (keep_running) {<br/>                long currentFree  = Runtime.getRuntime().freeMemory();<br/>                long currentAlloc = Runtime.getRuntime().totalMemory();<br/>                long used         = currentAlloc - currentFree;<br/><br/>                if (used < min) {<br/>                    min = used;<br/>                }<br/><br/>                if (used > max) {<br/>                    max = used;<br/>                }<br/><br/>                try {<br/>                    sleep(100);<br/>                } catch (InterruptedException E) {}<br/>            }<br/>        }"
        },
        {
          "total_lines": 43,
          "line_start": 1071,
          "line_end": 1113,
          "content": "boolean keep_running = true;<br/><br/>        public MemoryWatcherThread() {<br/><br/>            this.reset();<br/><br/>            keep_running = true;<br/>        }<br/><br/>        public void reset() {<br/><br/>            System.gc();<br/><br/>            long currentFree  = Runtime.getRuntime().freeMemory();<br/>            long currentAlloc = Runtime.getRuntime().totalMemory();<br/><br/>            min = max = (currentAlloc - currentFree);<br/>        }<br/><br/>        public void end() {<br/>            keep_running = false;<br/>        }<br/><br/>        public void run() {<br/><br/>            while (keep_running) {<br/>                long currentFree  = Runtime.getRuntime().freeMemory();<br/>                long currentAlloc = Runtime.getRuntime().totalMemory();<br/>                long used         = currentAlloc - currentFree;<br/><br/>                if (used < min) {<br/>                    min = used;<br/>                }<br/><br/>                if (used > max) {<br/>                    max = used;<br/>                }<br/><br/>                try {<br/>                    sleep(100);<br/>                } catch (InterruptedException E) {}<br/>            }<br/>        }"
        },
        {
          "total_lines": 20,
          "line_start": 1073,
          "line_end": 1092,
          "content": "public MemoryWatcherThread() {<br/><br/>            this.reset();<br/><br/>            keep_running = true;<br/>        }<br/><br/>        public void reset() {<br/><br/>            System.gc();<br/><br/>            long currentFree  = Runtime.getRuntime().freeMemory();<br/>            long currentAlloc = Runtime.getRuntime().totalMemory();<br/><br/>            min = max = (currentAlloc - currentFree);<br/>        }<br/><br/>        public void end() {<br/>            keep_running = false;<br/>        }"
        },
        {
          "total_lines": 19,
          "line_start": 920,
          "line_end": 938,
          "content": "if (pstmt1 != null) {<br/>                        pstmt1.close();<br/>                    }<br/><br/>                    if (pstmt2 != null) {<br/>                        pstmt2.close();<br/>                    }<br/><br/>                    if (pstmt3 != null) {<br/>                        pstmt3.close();<br/>                    }<br/><br/>                    if (pstmt4 != null) {<br/>                        pstmt4.close();<br/>                    }<br/><br/>                    if (pstmt5 != null) {<br/>                        pstmt5.close();<br/>                    }"
        },
        {
          "total_lines": 19,
          "line_start": 732,
          "line_end": 750,
          "content": "int min = 0,<br/>            max = 0;<br/><br/>        switch (type) {<br/><br/>            case TELLER :<br/>                max = ntellers * tps - 1;<br/>                break;<br/><br/>            case BRANCH :<br/>                max = nbranches * tps - 1;<br/>                break;<br/><br/>            case ACCOUNT :<br/>                max = naccounts * tps - 1;<br/>                break;<br/>        }<br/><br/>        return (getRandomInt(min, max));"
        },
        {
          "total_lines": 16,
          "line_start": 735,
          "line_end": 750,
          "content": "switch (type) {<br/><br/>            case TELLER :<br/>                max = ntellers * tps - 1;<br/>                break;<br/><br/>            case BRANCH :<br/>                max = nbranches * tps - 1;<br/>                break;<br/><br/>            case ACCOUNT :<br/>                max = naccounts * tps - 1;<br/>                break;<br/>        }<br/><br/>        return (getRandomInt(min, max));"
        },
        {
          "total_lines": 15,
          "line_start": 924,
          "line_end": 938,
          "content": "if (pstmt2 != null) {<br/>                        pstmt2.close();<br/>                    }<br/><br/>                    if (pstmt3 != null) {<br/>                        pstmt3.close();<br/>                    }<br/><br/>                    if (pstmt4 != null) {<br/>                        pstmt4.close();<br/>                    }<br/><br/>                    if (pstmt5 != null) {<br/>                        pstmt5.close();<br/>                    }"
        },
        {
          "total_lines": 15,
          "line_start": 920,
          "line_end": 934,
          "content": "if (pstmt1 != null) {<br/>                        pstmt1.close();<br/>                    }<br/><br/>                    if (pstmt2 != null) {<br/>                        pstmt2.close();<br/>                    }<br/><br/>                    if (pstmt3 != null) {<br/>                        pstmt3.close();<br/>                    }<br/><br/>                    if (pstmt4 != null) {<br/>                        pstmt4.close();<br/>                    }"
        },
        {
          "total_lines": 14,
          "line_start": 210,
          "line_end": 223,
          "content": "oneRound(url, user, password, transactions, true);<br/>            oneRound(url, user, password, transactions, true);<br/>/*<br/>            oneRound(url, user, password, transactions, true);<br/>            oneRound(url, user, password, transactions, true);<br/><br/>            oneRound(url, user, password, transactions, true);<br/>            oneRound(url, user, password, transactions, true);<br/>            oneRound(url, user, password, transactions, true);<br/>            oneRound(url, user, password, transactions, true);<br/>            oneRound(url, user, password, transactions, true);<br/>            oneRound(url, user, password, transactions, true);<br/>            oneRound(url, user, password, transactions, true);<br/>*/"
        },
        {
          "total_lines": 11,
          "line_start": 928,
          "line_end": 938,
          "content": "if (pstmt3 != null) {<br/>                        pstmt3.close();<br/>                    }<br/><br/>                    if (pstmt4 != null) {<br/>                        pstmt4.close();<br/>                    }<br/><br/>                    if (pstmt5 != null) {<br/>                        pstmt5.close();<br/>                    }"
        },
        {
          "total_lines": 11,
          "line_start": 924,
          "line_end": 934,
          "content": "if (pstmt2 != null) {<br/>                        pstmt2.close();<br/>                    }<br/><br/>                    if (pstmt3 != null) {<br/>                        pstmt3.close();<br/>                    }<br/><br/>                    if (pstmt4 != null) {<br/>                        pstmt4.close();<br/>                    }"
        },
        {
          "total_lines": 11,
          "line_start": 920,
          "line_end": 930,
          "content": "if (pstmt1 != null) {<br/>                        pstmt1.close();<br/>                    }<br/><br/>                    if (pstmt2 != null) {<br/>                        pstmt2.close();<br/>                    }<br/><br/>                    if (pstmt3 != null) {<br/>                        pstmt3.close();<br/>                    }"
        },
        {
          "total_lines": 10,
          "line_start": 192,
          "line_end": 201,
          "content": "System.out.println(\"Start: \" + start.toString());<br/>                System.out.print(\"Initializing dataset...\");<br/>                createDatabase(url, user, password);<br/><br/>                double seconds = (System.currentTimeMillis() - start.getTime())<br/>                                 / 1000D;<br/><br/>                System.out.println(\"done. in \" + seconds + \" seconds\\n\");<br/>                System.out.println(\"Complete: \"<br/>                                   + (new java.util.Date()).toString());"
        },
        {
          "total_lines": 9,
          "line_start": 193,
          "line_end": 201,
          "content": "System.out.print(\"Initializing dataset...\");<br/>                createDatabase(url, user, password);<br/><br/>                double seconds = (System.currentTimeMillis() - start.getTime())<br/>                                 / 1000D;<br/><br/>                System.out.println(\"done. in \" + seconds + \" seconds\\n\");<br/>                System.out.println(\"Complete: \"<br/>                                   + (new java.util.Date()).toString());"
        },
        {
          "total_lines": 8,
          "line_start": 508,
          "line_end": 515,
          "content": "Query += \"filler      CHAR(84))\";    /* pad to 100 bytes */<br/><br/>            if (createExtension.length() > 0) {<br/>                Query += createExtension;<br/>            }<br/><br/>            Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 8,
          "line_start": 490,
          "line_end": 497,
          "content": "Query += \"filler      CHAR(84))\";    /* pad to 100 bytes */<br/><br/>            if (createExtension.length() > 0) {<br/>                Query += createExtension;<br/>            }<br/><br/>            Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 8,
          "line_start": 192,
          "line_end": 199,
          "content": "System.out.println(\"Start: \" + start.toString());<br/>                System.out.print(\"Initializing dataset...\");<br/>                createDatabase(url, user, password);<br/><br/>                double seconds = (System.currentTimeMillis() - start.getTime())<br/>                                 / 1000D;<br/><br/>                System.out.println(\"done. in \" + seconds + \" seconds\\n\");"
        },
        {
          "total_lines": 7,
          "line_start": 920,
          "line_end": 926,
          "content": "if (pstmt1 != null) {<br/>                        pstmt1.close();<br/>                    }<br/><br/>                    if (pstmt2 != null) {<br/>                        pstmt2.close();<br/>                    }"
        },
        {
          "total_lines": 7,
          "line_start": 624,
          "line_end": 630,
          "content": "if (prepared_stmt) {<br/>                pstmt.close();<br/>            }<br/><br/>            if (transactions) {<br/>                Conn.commit();<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 932,
          "line_end": 938,
          "content": "if (pstmt4 != null) {<br/>                        pstmt4.close();<br/>                    }<br/><br/>                    if (pstmt5 != null) {<br/>                        pstmt5.close();<br/>                    }"
        },
        {
          "total_lines": 7,
          "line_start": 657,
          "line_end": 663,
          "content": "if (prepared_stmt) {<br/>                pstmt.close();<br/>            }<br/><br/>            if (transactions) {<br/>                Conn.commit();<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 924,
          "line_end": 930,
          "content": "if (pstmt2 != null) {<br/>                        pstmt2.close();<br/>                    }<br/><br/>                    if (pstmt3 != null) {<br/>                        pstmt3.close();<br/>                    }"
        },
        {
          "total_lines": 7,
          "line_start": 695,
          "line_end": 701,
          "content": "if (prepared_stmt) {<br/>                pstmt.close();<br/>            }<br/><br/>            if (transactions) {<br/>                Conn.commit();<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 928,
          "line_end": 934,
          "content": "if (pstmt3 != null) {<br/>                        pstmt3.close();<br/>                    }<br/><br/>                    if (pstmt4 != null) {<br/>                        pstmt4.close();<br/>                    }"
        },
        {
          "total_lines": 6,
          "line_start": 530,
          "line_end": 535,
          "content": "if (createExtension.length() > 0) {<br/>                Query += createExtension;<br/>            }<br/><br/>            Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 6,
          "line_start": 722,
          "line_end": 727,
          "content": "int ret = 0;<br/><br/>        ret = (int) (Math.random() * (hi - lo + 1));<br/>        ret += lo;<br/><br/>        return ret;"
        },
        {
          "total_lines": 6,
          "line_start": 474,
          "line_end": 479,
          "content": "if (createExtension.length() > 0) {<br/>                Query += createExtension;<br/>            }<br/><br/>            Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 6,
          "line_start": 146,
          "line_end": 151,
          "content": "System.out.println();<br/>            System.out.println(\"-v          verbose error messages\");<br/>            System.out.println(\"-init       initialize the tables\");<br/>            System.out.println(\"-tpc        transactions per client\");<br/>            System.out.println(\"-clients    number of simultaneous clients\");<br/>            System.exit(-1);"
        },
        {
          "total_lines": 5,
          "line_start": 146,
          "line_end": 150,
          "content": "System.out.println();<br/>            System.out.println(\"-v          verbose error messages\");<br/>            System.out.println(\"-init       initialize the tables\");<br/>            System.out.println(\"-tpc        transactions per client\");<br/>            System.out.println(\"-clients    number of simultaneous clients\");"
        },
        {
          "total_lines": 4,
          "line_start": 418,
          "line_end": 421,
          "content": "System.out.println(\"Already initialized\");<br/>                connectClose(Conn);<br/><br/>                return;"
        },
        {
          "total_lines": 4,
          "line_start": 757,
          "line_end": 760,
          "content": "Connection conn = DriverManager.getConnection(DBUrl, DBUser,<br/>                DBPassword);<br/><br/>            return conn;"
        },
        {
          "total_lines": 4,
          "line_start": 148,
          "line_end": 151,
          "content": "System.out.println(\"-init       initialize the tables\");<br/>            System.out.println(\"-tpc        transactions per client\");<br/>            System.out.println(\"-clients    number of simultaneous clients\");<br/>            System.exit(-1);"
        },
        {
          "total_lines": 3,
          "line_start": 126,
          "line_end": 128,
          "content": "i++;<br/><br/>                    n_txn_per_client = Integer.parseInt(Args[i]);"
        },
        {
          "total_lines": 3,
          "line_start": 146,
          "line_end": 148,
          "content": "System.out.println();<br/>            System.out.println(\"-v          verbose error messages\");<br/>            System.out.println(\"-init       initialize the tables\");"
        },
        {
          "total_lines": 3,
          "line_start": 419,
          "line_end": 421,
          "content": "connectClose(Conn);<br/><br/>                return;"
        },
        {
          "total_lines": 3,
          "line_start": 65,
          "line_end": 67,
          "content": "i++;<br/><br/>                    n_clients = Integer.parseInt(Args[i]);"
        },
        {
          "total_lines": 3,
          "line_start": 725,
          "line_end": 727,
          "content": "ret += lo;<br/><br/>        return ret;"
        },
        {
          "total_lines": 3,
          "line_start": 280,
          "line_end": 282,
          "content": "Client = (Thread) e.nextElement();<br/><br/>            Client.join();"
        },
        {
          "total_lines": 2,
          "line_start": 383,
          "line_end": 384,
          "content": "Conn.setAutoCommit(false);<br/>                System.out.println(\"In transaction mode\");"
        },
        {
          "total_lines": 2,
          "line_start": 443,
          "line_end": 444,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 577,
          "line_end": 578,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 643,
          "line_end": 644,
          "content": "pstmt.executeUpdate();<br/>                    pstmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 1069,
          "line_end": 1070,
          "content": "long    min          = 0;<br/>        long    max          = 0;"
        },
        {
          "total_lines": 2,
          "line_start": 762,
          "line_end": 763,
          "content": "System.out.println(E.toString());<br/>            E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 148,
          "line_end": 149,
          "content": "System.out.println(\"-init       initialize the tables\");<br/>            System.out.println(\"-tpc        transactions per client\");"
        },
        {
          "total_lines": 2,
          "line_start": 572,
          "line_end": 573,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 567,
          "line_end": 568,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 901,
          "line_end": 902,
          "content": "System.out.println(E.toString());<br/>                E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 438,
          "line_end": 439,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 1037,
          "line_end": 1038,
          "content": "Stmt.executeUpdate(Query);<br/>                    Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 267,
          "line_end": 268,
          "content": "password,<br/>                                      Connection.TRANSACTION_READ_COMMITTED"
        },
        {
          "total_lines": 2,
          "line_start": 433,
          "line_end": 434,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 713,
          "line_end": 714,
          "content": "System.out.println(E.toString());<br/>            E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 225,
          "line_end": 226,
          "content": "System.out.println(E.toString());<br/>            E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 753,
          "line_end": 754,
          "content": "String DBUrl, String DBUser,<br/>                                     String DBPassword"
        },
        {
          "total_lines": 2,
          "line_start": 778,
          "line_end": 779,
          "content": "System.out.println(E.toString());<br/>            E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 209,
          "line_end": 210,
          "content": "oneRound(url, user, password, transactions, true);<br/>            oneRound(url, user, password, transactions, true);"
        },
        {
          "total_lines": 2,
          "line_start": 1027,
          "line_end": 1028,
          "content": "Stmt.executeUpdate(Query);<br/>                    Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 1020,
          "line_end": 1021,
          "content": "Stmt.executeUpdate(Query);<br/>                    Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 940,
          "line_end": 941,
          "content": "System.out.println(E.toString());<br/>                    E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 858,
          "line_end": 859,
          "content": "int number_of_txns, String url, String user,<br/>                            String password, int transactionMode"
        },
        {
          "total_lines": 2,
          "line_start": 150,
          "line_end": 151,
          "content": "System.out.println(\"-clients    number of simultaneous clients\");<br/>            System.exit(-1);"
        },
        {
          "total_lines": 2,
          "line_start": 149,
          "line_end": 150,
          "content": "System.out.println(\"-tpc        transactions per client\");<br/>            System.out.println(\"-clients    number of simultaneous clients\");"
        },
        {
          "total_lines": 2,
          "line_start": 448,
          "line_end": 449,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 562,
          "line_end": 563,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 173,
          "line_end": 174,
          "content": "DBUser, DBPassword,<br/>                                         initialize_dataset"
        },
        {
          "total_lines": 2,
          "line_start": 176,
          "line_end": 177,
          "content": "System.out.println(E.toString());<br/>            E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 371,
          "line_end": 372,
          "content": "String url, String user,<br/>                        String password"
        },
        {
          "total_lines": 1,
          "line_start": 181,
          "line_end": 181,
          "content": "String password, boolean init"
        },
        {
          "total_lines": 1,
          "line_start": 753,
          "line_end": 753,
          "content": "String DBUrl, String DBUser"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/RAFileSimple.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 39,
          "line_end": 40,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 1,
          "line_start": 56,
          "line_end": 56,
          "content": "Database database, String name"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/TransactionManagerMVCC.java",
      "loc_duplicate": 238,
      "clones": [
          {
          "total_lines": 15,
          "line_start": 619,
          "line_end": 633,
          "content": "rowActionMap.getWriteLock().lock();<br/><br/>        try {<br/>            RowAction action = (RowAction) rowActionMap.get(id);<br/><br/>            synchronized (action) {<br/><br/>                // remove only if not changed<br/>                if (action.type == RowActionBase.ACTION_NONE) {<br/>                    rowActionMap.remove(id);<br/>                }<br/>            }<br/>        } finally {<br/>            rowActionMap.getWriteLock().unlock();<br/>        }"
        },
        {
          "total_lines": 13,
          "line_start": 668,
          "line_end": 680,
          "content": "if (committedTransactionTimestamps.isEmpty()) {<br/>                    break;<br/>                }<br/><br/>                commitTimestamp = committedTransactionTimestamps.getFirst();<br/><br/>                if (commitTimestamp < timestamp) {<br/>                    committedTransactionTimestamps.removeFirst();<br/><br/>                    actions = (Object[]) committedTransactions.removeFirst();<br/>                } else {<br/>                    break;<br/>                }"
        },
        {
          "total_lines": 11,
          "line_start": 544,
          "line_end": 554,
          "content": "if (store.getTable().tableType == TableBase.TEMP_TABLE) {<br/>            return true;<br/>        }<br/><br/>        RowAction action = (RowAction) rowActionMap.get(id);<br/><br/>        if (action == null) {<br/>            return true;<br/>        }<br/><br/>        return action.canRead(session, mode);"
        },
        {
          "total_lines": 11,
          "line_start": 588,
          "line_end": 598,
          "content": "if (object.isMemory()) {<br/>            return;<br/>        }<br/><br/>        Row row = (Row) object;<br/><br/>        if (row.getTable().tableType == TableBase.CACHED_TABLE) {<br/>            RowAction rowact = (RowAction) rowActionMap.get(row.getPos());<br/><br/>            row.rowAction = rowact;<br/>        }"
        },
        {
          "total_lines": 11,
          "line_start": 253,
          "line_end": 263,
          "content": "long timestamp = session.sessionContext.savepointTimestamps.get(index);<br/>        Integer oi = (Integer) session.sessionContext.savepoints.get(index);<br/>        int     start  = oi.intValue();<br/><br/>        while (session.sessionContext.savepoints.size() > index + 1) {<br/>            session.sessionContext.savepoints.remove(<br/>                session.sessionContext.savepoints.size() - 1);<br/>            session.sessionContext.savepointTimestamps.removeLast();<br/>        }<br/><br/>        rollbackPartial(session, start, timestamp);"
        },
        {
          "total_lines": 10,
          "line_start": 643,
          "line_end": 652,
          "content": "// add the txList according to commit timestamp<br/>            committedTransactions.addLast(list);<br/><br/>            // get session commit timestamp<br/>            committedTransactionTimestamps.addLast(session.actionTimestamp);<br/>/* debug 190<br/>            if (committedTransactions.size() > 64) {<br/>                System.out.println(\"******* excessive transaction queue\");<br/>            }<br/>// debug 190 */"
        },
        {
          "total_lines": 9,
          "line_start": 253,
          "line_end": 261,
          "content": "long timestamp = session.sessionContext.savepointTimestamps.get(index);<br/>        Integer oi = (Integer) session.sessionContext.savepoints.get(index);<br/>        int     start  = oi.intValue();<br/><br/>        while (session.sessionContext.savepoints.size() > index + 1) {<br/>            session.sessionContext.savepoints.remove(<br/>                session.sessionContext.savepoints.size() - 1);<br/>            session.sessionContext.savepointTimestamps.removeLast();<br/>        }"
        },
        {
          "total_lines": 9,
          "line_start": 544,
          "line_end": 552,
          "content": "if (store.getTable().tableType == TableBase.TEMP_TABLE) {<br/>            return true;<br/>        }<br/><br/>        RowAction action = (RowAction) rowActionMap.get(id);<br/><br/>        if (action == null) {<br/>            return true;<br/>        }"
        },
        {
          "total_lines": 9,
          "line_start": 672,
          "line_end": 680,
          "content": "commitTimestamp = committedTransactionTimestamps.getFirst();<br/><br/>                if (commitTimestamp < timestamp) {<br/>                    committedTransactionTimestamps.removeFirst();<br/><br/>                    actions = (Object[]) committedTransactions.removeFirst();<br/>                } else {<br/>                    break;<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 115,
          "line_end": 121,
          "content": "RowAction action = (RowAction) session.rowActionList.get(i);<br/><br/>                if (!action.canCommit(session, session.tempSet)) {<br/><br/>//                System.out.println(\"commit conflicts \" + session + \" \" + session.actionTimestamp);<br/>                    return false;<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 158,
          "line_end": 164,
          "content": "RowAction action = (RowAction) session.rowActionList.get(i);<br/><br/>                if (!action.canCommit(session, session.tempSet)) {<br/><br/>//                  System.out.println(\"commit conflicts \" + session + \" \" + session.actionTimestamp);<br/>                    return false;<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 759,
          "line_end": 765,
          "content": "session.transactionTimestamp = session.actionTimestamp;<br/>                session.isTransaction        = true;<br/><br/>                liveTransactionTimestamps.addLast(<br/>                    session.transactionTimestamp);<br/><br/>                transactionCount++;"
        },
        {
          "total_lines": 6,
          "line_start": 192,
          "line_end": 197,
          "content": "Object[] list = session.rowActionList.getArray();<br/><br/>                mergeTransaction(list, limit, newLimit,<br/>                                 session.actionTimestamp);<br/>                finaliseRows(session, list, limit, newLimit);<br/>                session.rowActionList.setSize(limit);"
        },
        {
          "total_lines": 6,
          "line_start": 727,
          "line_end": 732,
          "content": "cs = session.statementManager.getStatement(session, cs);<br/>                session.sessionContext.currentStatement = cs;<br/><br/>                if (cs == null) {<br/>                    return;<br/>                }"
        },
        {
          "total_lines": 5,
          "line_start": 192,
          "line_end": 196,
          "content": "Object[] list = session.rowActionList.getArray();<br/><br/>                mergeTransaction(list, limit, newLimit,<br/>                                 session.actionTimestamp);<br/>                finaliseRows(session, list, limit, newLimit);"
        },
        {
          "total_lines": 5,
          "line_start": 759,
          "line_end": 763,
          "content": "session.transactionTimestamp = session.actionTimestamp;<br/>                session.isTransaction        = true;<br/><br/>                liveTransactionTimestamps.addLast(<br/>                    session.transactionTimestamp);"
        },
        {
          "total_lines": 5,
          "line_start": 668,
          "line_end": 672,
          "content": "if (committedTransactionTimestamps.isEmpty()) {<br/>                    break;<br/>                }<br/><br/>                commitTimestamp = committedTransactionTimestamps.getFirst();"
        },
        {
          "total_lines": 4,
          "line_start": 133,
          "line_end": 136,
          "content": "Session current =<br/>                    ((RowActionBase) session.tempSet.get(i)).session;<br/><br/>                current.abortTransaction = true;"
        },
        {
          "total_lines": 4,
          "line_start": 841,
          "line_end": 844,
          "content": "transactionCount--;<br/><br/>            liveTransactionTimestamps.remove(index);<br/>            mergeExpiredTransactions(session);"
        },
        {
          "total_lines": 4,
          "line_start": 194,
          "line_end": 197,
          "content": "mergeTransaction(list, limit, newLimit,<br/>                                 session.actionTimestamp);<br/>                finaliseRows(session, list, limit, newLimit);<br/>                session.rowActionList.setSize(limit);"
        },
        {
          "total_lines": 4,
          "line_start": 180,
          "line_end": 183,
          "content": "Session current =<br/>                    ((RowActionBase) session.tempSet.get(i)).session;<br/><br/>                current.abortTransaction = true;"
        },
        {
          "total_lines": 4,
          "line_start": 204,
          "line_end": 207,
          "content": "Object[] list = session.rowActionList.getArray();<br/><br/>                mergeTransaction(list, 0, limit, session.actionTimestamp);<br/>                finaliseRows(session, list, 0, limit);"
        },
        {
          "total_lines": 3,
          "line_start": 774,
          "line_end": 776,
          "content": "Session session, Table table,<br/>                                   PersistentStore store, Row row,<br/>                                   int[] colMap"
        },
        {
          "total_lines": 3,
          "line_start": 174,
          "line_end": 176,
          "content": "RowAction action = (RowAction) session.rowActionList.get(i);<br/><br/>                action.commit(session);"
        },
        {
          "total_lines": 3,
          "line_start": 363,
          "line_end": 365,
          "content": "actionSession.waitingSessions.add(session);<br/>                        session.waitedSessions.add(actionSession);<br/>                        session.latch.countUp();"
        },
        {
          "total_lines": 3,
          "line_start": 385,
          "line_end": 387,
          "content": "Session session, Table table,<br/>                                PersistentStore store, Row row,<br/>                                int[] changedColumns"
        },
        {
          "total_lines": 3,
          "line_start": 694,
          "line_end": 696,
          "content": "session.actionTimestamp      = getNextGlobalChangeTimestamp();<br/>                session.transactionTimestamp = session.actionTimestamp;<br/>                session.isTransaction        = true;"
        },
        {
          "total_lines": 3,
          "line_start": 194,
          "line_end": 196,
          "content": "mergeTransaction(list, limit, newLimit,<br/>                                 session.actionTimestamp);<br/>                finaliseRows(session, list, limit, newLimit);"
        },
        {
          "total_lines": 3,
          "line_start": 437,
          "line_end": 439,
          "content": "break;<br/><br/>                default :"
        },
        {
          "total_lines": 3,
          "line_start": 447,
          "line_end": 449,
          "content": "actionSession.waitingSessions.add(session);<br/>                    session.waitedSessions.add(actionSession);<br/>                    session.latch.countUp();"
        },
        {
          "total_lines": 3,
          "line_start": 210,
          "line_end": 212,
          "content": "Object[] list = session.rowActionList.toArray();<br/><br/>                    addToCommittedQueue(session, list);"
        },
        {
          "total_lines": 3,
          "line_start": 127,
          "line_end": 129,
          "content": "RowAction action = (RowAction) session.rowActionList.get(i);<br/><br/>                action.prepareCommit(session);"
        },
        {
          "total_lines": 3,
          "line_start": 299,
          "line_end": 301,
          "content": "Object[] list = session.rowActionList.getArray();<br/><br/>            mergeRolledBackTransaction(session, timestamp, list, start, limit);"
        },
        {
          "total_lines": 3,
          "line_start": 841,
          "line_end": 843,
          "content": "transactionCount--;<br/><br/>            liveTransactionTimestamps.remove(index);"
        },
        {
          "total_lines": 3,
          "line_start": 309,
          "line_end": 311,
          "content": "Session session, Table table,<br/>                                     PersistentStore store, Row row,<br/>                                     int[] colMap"
        },
        {
          "total_lines": 3,
          "line_start": 253,
          "line_end": 255,
          "content": "long timestamp = session.sessionContext.savepointTimestamps.get(index);<br/>        Integer oi = (Integer) session.sessionContext.savepoints.get(index);<br/>        int     start  = oi.intValue();"
        },
        {
          "total_lines": 2,
          "line_start": 465,
          "line_end": 466,
          "content": "Row row,<br/>                           int mode"
        },
        {
          "total_lines": 2,
          "line_start": 310,
          "line_end": 311,
          "content": "Row row,<br/>                                     int[] colMap"
        },
        {
          "total_lines": 2,
          "line_start": 206,
          "line_end": 207,
          "content": "mergeTransaction(list, 0, limit, session.actionTimestamp);<br/>                finaliseRows(session, list, 0, limit);"
        },
        {
          "total_lines": 2,
          "line_start": 585,
          "line_end": 586,
          "content": "PersistentStore store,<br/>                                   CachedObject object"
        },
        {
          "total_lines": 2,
          "line_start": 843,
          "line_end": 844,
          "content": "liveTransactionTimestamps.remove(index);<br/>            mergeExpiredTransactions(session);"
        },
        {
          "total_lines": 2,
          "line_start": 267,
          "line_end": 268,
          "content": "session.actionIndex,<br/>                        session.actionStartTimestamp"
        },
        {
          "total_lines": 2,
          "line_start": 774,
          "line_end": 775,
          "content": "Session session, Table table,<br/>                                   PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 775,
          "line_end": 776,
          "content": "Row row,<br/>                                   int[] colMap"
        },
        {
          "total_lines": 2,
          "line_start": 196,
          "line_end": 197,
          "content": "finaliseRows(session, list, limit, newLimit);<br/>                session.rowActionList.setSize(limit);"
        },
        {
          "total_lines": 2,
          "line_start": 727,
          "line_end": 728,
          "content": "cs = session.statementManager.getStatement(session, cs);<br/>                session.sessionContext.currentStatement = cs;"
        },
        {
          "total_lines": 2,
          "line_start": 141,
          "line_end": 142,
          "content": "writeLock.unlock();<br/>            session.tempSet.clear();"
        },
        {
          "total_lines": 2,
          "line_start": 223,
          "line_end": 224,
          "content": "writeLock.unlock();<br/>            session.tempSet.clear();"
        },
        {
          "total_lines": 2,
          "line_start": 541,
          "line_end": 542,
          "content": "Session session, PersistentStore store, long id,<br/>                           int mode"
        },
        {
          "total_lines": 2,
          "line_start": 309,
          "line_end": 310,
          "content": "Session session, Table table,<br/>                                     PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 683,
          "line_end": 683,
          "content": "actions, 0, actions.length"
        },
        {
          "total_lines": 1,
          "line_start": 541,
          "line_end": 541,
          "content": "PersistentStore store, long id"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCBlob.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 752,
          "line_end": 756,
          "content": "if (data == null) {<br/>            throw JDBCUtil.nullArgument();<br/>        }<br/>        m_data                = data;<br/>        m_createdByConnection = false;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ParserCommand.java",
      "loc_duplicate": 251,
      "clones": [
          {
          "total_lines": 16,
          "line_start": 594,
          "line_end": 609,
          "content": "charsets = new HsqlArrayList();<br/><br/>                    while (true) {<br/>                        SchemaObject charset =<br/>                            readSchemaObjectName(SchemaObject.CHARSET);<br/><br/>                        charsets.add(charset);<br/><br/>                        if (token.tokenType == Tokens.COMMA) {<br/>                            read();<br/><br/>                            continue;<br/>                        }<br/><br/>                        break;<br/>                    }"
        },
        {
          "total_lines": 16,
          "line_start": 631,
          "line_end": 646,
          "content": "charsets = new HsqlArrayList();<br/><br/>                    while (true) {<br/>                        SchemaObject charset =<br/>                            readSchemaObjectName(SchemaObject.CHARSET);<br/><br/>                        charsets.add(charset);<br/><br/>                        if (token.tokenType == Tokens.COMMA) {<br/>                            read();<br/><br/>                            continue;<br/>                        }<br/><br/>                        break;<br/>                    }"
        },
        {
          "total_lines": 11,
          "line_start": 767,
          "line_end": 777,
          "content": "delay = this.readInteger();<br/><br/>                    if (delay < 0) {<br/>                        delay = 0;<br/>                    }<br/><br/>                    if (token.tokenType == Tokens.MILLIS) {<br/>                        read();<br/>                    } else {<br/>                        delay *= 1000;<br/>                    }"
        },
        {
          "total_lines": 11,
          "line_start": 1525,
          "line_end": 1535,
          "content": "delay = this.readInteger();<br/><br/>                    if (delay < 0) {<br/>                        delay = 0;<br/>                    }<br/><br/>                    if (token.tokenType == Tokens.MILLIS) {<br/>                        read();<br/>                    } else {<br/>                        delay *= 1000;<br/>                    }"
        },
        {
          "total_lines": 9,
          "line_start": 437,
          "line_end": 445,
          "content": "case Tokens.MEMORY :<br/>                        break;<br/><br/>                    case Tokens.CACHED :<br/>                        type = TableBase.CACHED_TABLE;<br/>                        break;<br/><br/>                    default :<br/>                        throw unexpectedToken();"
        },
        {
          "total_lines": 9,
          "line_start": 1801,
          "line_end": 1809,
          "content": "read();<br/><br/>                if (token.tokenType == Tokens.NO) {<br/>                    read();<br/>                } else {<br/>                    chain = true;<br/>                }<br/><br/>                readThis(Tokens.CHAIN);"
        },
        {
          "total_lines": 9,
          "line_start": 769,
          "line_end": 777,
          "content": "if (delay < 0) {<br/>                        delay = 0;<br/>                    }<br/><br/>                    if (token.tokenType == Tokens.MILLIS) {<br/>                        read();<br/>                    } else {<br/>                        delay *= 1000;<br/>                    }"
        },
        {
          "total_lines": 9,
          "line_start": 732,
          "line_end": 740,
          "content": "case Tokens.MEMORY :<br/>                        break;<br/><br/>                    case Tokens.CACHED :<br/>                        type = TableBase.CACHED_TABLE;<br/>                        break;<br/><br/>                    default :<br/>                        throw unexpectedToken();"
        },
        {
          "total_lines": 9,
          "line_start": 1686,
          "line_end": 1694,
          "content": "read();<br/><br/>            if (token.tokenType == Tokens.NO) {<br/>                read();<br/>            } else {<br/>                chain = true;<br/>            }<br/><br/>            readThis(Tokens.CHAIN);"
        },
        {
          "total_lines": 9,
          "line_start": 1527,
          "line_end": 1535,
          "content": "if (delay < 0) {<br/>                        delay = 0;<br/>                    }<br/><br/>                    if (token.tokenType == Tokens.MILLIS) {<br/>                        read();<br/>                    } else {<br/>                        delay *= 1000;<br/>                    }"
        },
        {
          "total_lines": 8,
          "line_start": 438,
          "line_end": 445,
          "content": "break;<br/><br/>                    case Tokens.CACHED :<br/>                        type = TableBase.CACHED_TABLE;<br/>                        break;<br/><br/>                    default :<br/>                        throw unexpectedToken();"
        },
        {
          "total_lines": 8,
          "line_start": 733,
          "line_end": 740,
          "content": "break;<br/><br/>                    case Tokens.CACHED :<br/>                        type = TableBase.CACHED_TABLE;<br/>                        break;<br/><br/>                    default :<br/>                        throw unexpectedToken();"
        },
        {
          "total_lines": 5,
          "line_start": 1525,
          "line_end": 1529,
          "content": "delay = this.readInteger();<br/><br/>                    if (delay < 0) {<br/>                        delay = 0;<br/>                    }"
        },
        {
          "total_lines": 5,
          "line_start": 767,
          "line_end": 771,
          "content": "delay = this.readInteger();<br/><br/>                    if (delay < 0) {<br/>                        delay = 0;<br/>                    }"
        },
        {
          "total_lines": 4,
          "line_start": 736,
          "line_end": 739,
          "content": "type = TableBase.CACHED_TABLE;<br/>                        break;<br/><br/>                    default :"
        },
        {
          "total_lines": 4,
          "line_start": 1195,
          "line_end": 1198,
          "content": "read();<br/>                        readThis(Tokens.NULLS);<br/><br/>                        flag     = processTrueOrFalseObject();"
        },
        {
          "total_lines": 4,
          "line_start": 1173,
          "line_end": 1176,
          "content": "read();<br/>                        readThis(Tokens.NULLS);<br/><br/>                        flag     = processTrueOrFalseObject();"
        },
        {
          "total_lines": 4,
          "line_start": 441,
          "line_end": 444,
          "content": "type = TableBase.CACHED_TABLE;<br/>                        break;<br/><br/>                    default :"
        },
        {
          "total_lines": 3,
          "line_start": 759,
          "line_end": 761,
          "content": "delay = database.getProperties().getDefaultWriteDelay();<br/><br/>                    read();"
        },
        {
          "total_lines": 3,
          "line_start": 1142,
          "line_end": 1144,
          "content": "read();<br/><br/>                        flag     = processTrueOrFalseObject();"
        },
        {
          "total_lines": 3,
          "line_start": 1028,
          "line_end": 1030,
          "content": "readThis(Tokens.SPACE);<br/><br/>                    padSpace = Boolean.TRUE;"
        },
        {
          "total_lines": 3,
          "line_start": 886,
          "line_end": 888,
          "content": "StatementTypes.SET_TABLE_READONLY,<br/>                                            args, null,<br/>                                            new HsqlName[]{ table.getName() }"
        },
        {
          "total_lines": 3,
          "line_start": 1135,
          "line_end": 1137,
          "content": "read();<br/><br/>                        flag     = processTrueOrFalseObject();"
        },
        {
          "total_lines": 3,
          "line_start": 1128,
          "line_end": 1130,
          "content": "read();<br/><br/>                        flag     = processTrueOrFalseObject();"
        },
        {
          "total_lines": 3,
          "line_start": 1656,
          "line_end": 1658,
          "content": "read();<br/><br/>                    break;"
        },
        {
          "total_lines": 3,
          "line_start": 1517,
          "line_end": 1519,
          "content": "delay = database.getProperties().getDefaultWriteDelay();<br/><br/>                    read();"
        },
        {
          "total_lines": 3,
          "line_start": 899,
          "line_end": 901,
          "content": "StatementTypes.SET_TABLE_READONLY,<br/>                                            args, null,<br/>                                            new HsqlName[]{ table.getName() }"
        },
        {
          "total_lines": 3,
          "line_start": 1024,
          "line_end": 1026,
          "content": "readThis(Tokens.PAD);<br/><br/>                    padSpace = Boolean.FALSE;"
        },
        {
          "total_lines": 3,
          "line_start": 1236,
          "line_end": 1238,
          "content": "read();<br/><br/>                        flag     = processTrueOrFalseObject();"
        },
        {
          "total_lines": 2,
          "line_start": 783,
          "line_end": 784,
          "content": "null,<br/>                    null"
        },
        {
          "total_lines": 2,
          "line_start": 1999,
          "line_end": 2000,
          "content": "read();<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 2057,
          "line_end": 2058,
          "content": "read();<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 1010,
          "line_end": 1011,
          "content": "args, null,<br/>                    null"
        },
        {
          "total_lines": 2,
          "line_start": 1269,
          "line_end": 1270,
          "content": "flag = processTrueOrFalseObject();<br/>                        break;"
        },
        {
          "total_lines": 2,
          "line_start": 2077,
          "line_end": 2078,
          "content": "read();<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 2067,
          "line_end": 2068,
          "content": "read();<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 1124,
          "line_end": 1125,
          "content": "flag     = processTrueOrFalseObject();<br/>                        break;"
        },
        {
          "total_lines": 2,
          "line_start": 969,
          "line_end": 970,
          "content": "null,<br/>                    writeLockNames"
        },
        {
          "total_lines": 2,
          "line_start": 2254,
          "line_end": 2255,
          "content": "StatementTypes.SET_TABLE_SOURCE, args,<br/>                                        null"
        },
        {
          "total_lines": 2,
          "line_start": 1116,
          "line_end": 1117,
          "content": "flag     = processTrueOrFalseObject();<br/>                        break;"
        },
        {
          "total_lines": 2,
          "line_start": 1067,
          "line_end": 1068,
          "content": "null,<br/>                    null"
        },
        {
          "total_lines": 2,
          "line_start": 1047,
          "line_end": 1048,
          "content": "null,<br/>                    null"
        },
        {
          "total_lines": 2,
          "line_start": 2005,
          "line_end": 2006,
          "content": "read();<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 2177,
          "line_end": 2178,
          "content": "StatementTypes.DATABASE_CHECKPOINT,<br/>                                            args, null"
        },
        {
          "total_lines": 2,
          "line_start": 1159,
          "line_end": 1160,
          "content": "flag = processTrueOrFalseObject();<br/>                        break;"
        },
        {
          "total_lines": 2,
          "line_start": 2245,
          "line_end": 2246,
          "content": "StatementTypes.SET_TABLE_SOURCE, args,<br/>                                        null"
        },
        {
          "total_lines": 2,
          "line_start": 1191,
          "line_end": 1192,
          "content": "flag = processTrueOrFalseObject();<br/>                        break;"
        },
        {
          "total_lines": 2,
          "line_start": 2188,
          "line_end": 2189,
          "content": "StatementTypes.DATABASE_CHECKPOINT,<br/>                                            args, null"
        },
        {
          "total_lines": 2,
          "line_start": 899,
          "line_end": 900,
          "content": "StatementTypes.SET_TABLE_READONLY,<br/>                                            args, null"
        },
        {
          "total_lines": 2,
          "line_start": 1993,
          "line_end": 1994,
          "content": "read();<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 886,
          "line_end": 887,
          "content": "StatementTypes.SET_TABLE_READONLY,<br/>                                            args, null"
        },
        {
          "total_lines": 2,
          "line_start": 392,
          "line_end": 393,
          "content": "StatementTypes.SET_SESSION_AUTHORIZATION,<br/>                                 args"
        },
        {
          "total_lines": 2,
          "line_start": 1088,
          "line_end": 1089,
          "content": "args, null,<br/>                    null"
        },
        {
          "total_lines": 2,
          "line_start": 364,
          "line_end": 365,
          "content": "args,<br/>                                    null"
        },
        {
          "total_lines": 2,
          "line_start": 986,
          "line_end": 987,
          "content": "null,<br/>                    writeLockNames"
        },
        {
          "total_lines": 1,
          "line_start": 2022,
          "line_end": 2022,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 1894,
          "line_end": 1894,
          "content": "StatementTypes.SET_SESSION_AUTHORIZATION, args"
        },
        {
          "total_lines": 1,
          "line_start": 453,
          "line_end": 453,
          "content": "StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args"
        },
        {
          "total_lines": 1,
          "line_start": 1100,
          "line_end": 1100,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 969,
          "line_end": 969,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 1367,
          "line_end": 1367,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 783,
          "line_end": 783,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 986,
          "line_end": 986,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 1088,
          "line_end": 1088,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 748,
          "line_end": 748,
          "content": "StatementTypes.SET_DATABASE_DEFAULT_TABLE_TYPE, args"
        },
        {
          "total_lines": 1,
          "line_start": 1291,
          "line_end": 1291,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 701,
          "line_end": 701,
          "content": "StatementTypes.SET_SESSION_CHARACTERISTICS, args"
        },
        {
          "total_lines": 1,
          "line_start": 2149,
          "line_end": 2149,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 1010,
          "line_end": 1010,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 831,
          "line_end": 831,
          "content": "StatementTypes.SET_USER_INITIAL_SCHEMA, args"
        },
        {
          "total_lines": 1,
          "line_start": 1868,
          "line_end": 1868,
          "content": "StatementTypes.SET_SESSION_CHARACTERISTICS, args"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/SchemaManager.java",
      "loc_duplicate": 288,
      "clones": [
          {
          "total_lines": 21,
          "line_start": 1202,
          "line_end": 1222,
          "content": "readLock.lock();<br/><br/>        try {<br/>            Schema schema = (Schema) schemaMap.get(schemaName);<br/><br/>            if (schema != null) {<br/>                SchemaObject object = schema.typeLookup.getObject(name);<br/><br/>                if (object != null) {<br/>                    return (Type) object;<br/>                }<br/>            }<br/><br/>            if (raise) {<br/>                throw Error.error(ErrorCode.X_42501, name);<br/>            }<br/><br/>            return null;<br/>        } finally {<br/>            readLock.unlock();<br/>        }"
        },
        {
          "total_lines": 21,
          "line_start": 1227,
          "line_end": 1247,
          "content": "readLock.lock();<br/><br/>        try {<br/>            Schema schema = (Schema) schemaMap.get(schemaName);<br/><br/>            if (schema != null) {<br/>                SchemaObject object = schema.typeLookup.getObject(name);<br/><br/>                if (object != null) {<br/>                    return (Type) object;<br/>                }<br/>            }<br/><br/>            if (raise) {<br/>                throw Error.error(ErrorCode.X_42501, name);<br/>            }<br/><br/>            return null;<br/>        } finally {<br/>            readLock.unlock();<br/>        }"
        },
        {
          "total_lines": 16,
          "line_start": 1071,
          "line_end": 1086,
          "content": "HsqlName name = (HsqlName) set.get(i);<br/><br/>                switch (name.type) {<br/><br/>                    case SchemaObject.VIEW :<br/>                    case SchemaObject.CONSTRAINT :<br/>                    case SchemaObject.ASSERTION :<br/>                    case SchemaObject.ROUTINE :<br/>                    case SchemaObject.PROCEDURE :<br/>                    case SchemaObject.FUNCTION :<br/>                    case SchemaObject.SPECIFIC_ROUTINE :<br/>                        SchemaObject object = getSchemaObject(name);<br/><br/>                        object.compile(session, null);<br/>                        break;<br/>                }"
        },
        {
          "total_lines": 16,
          "line_start": 1119,
          "line_end": 1134,
          "content": "HsqlName name = (HsqlName) set.get(i);<br/><br/>                switch (name.type) {<br/><br/>                    case SchemaObject.VIEW :<br/>                    case SchemaObject.CONSTRAINT :<br/>                    case SchemaObject.ASSERTION :<br/>                    case SchemaObject.ROUTINE :<br/>                    case SchemaObject.PROCEDURE :<br/>                    case SchemaObject.FUNCTION :<br/>                    case SchemaObject.SPECIFIC_ROUTINE :<br/>                        SchemaObject object = getSchemaObject(name);<br/><br/>                        object.compile(session, null);<br/>                        break;<br/>                }"
        },
        {
          "total_lines": 15,
          "line_start": 2481,
          "line_end": 2495,
          "content": "Iterator it = unresolved.iterator();<br/><br/>                if (!it.hasNext()) {<br/>                    break;<br/>                }<br/><br/>                OrderedHashSet newResolved = new OrderedHashSet();<br/><br/>                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,<br/>                                          newResolved);<br/>                unresolved.removeAll(newResolved);<br/><br/>                if (newResolved.size() == 0) {<br/>                    break;<br/>                }"
        },
        {
          "total_lines": 15,
          "line_start": 2515,
          "line_end": 2529,
          "content": "Iterator it = unresolved.iterator();<br/><br/>                if (!it.hasNext()) {<br/>                    break;<br/>                }<br/><br/>                OrderedHashSet newResolved = new OrderedHashSet();<br/><br/>                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,<br/>                                          newResolved);<br/>                unresolved.removeAll(newResolved);<br/><br/>                if (newResolved.size() == 0) {<br/>                    break;<br/>                }"
        },
        {
          "total_lines": 9,
          "line_start": 1403,
          "line_end": 1411,
          "content": "set        = schema.indexLookup;<br/>                    objectName = set.getName(name);<br/><br/>                    if (objectName == null) {<br/>                        return null;<br/>                    }<br/><br/>                    table =<br/>                        (Table) schema.tableList.get(objectName.parent.name);"
        },
        {
          "total_lines": 9,
          "line_start": 1433,
          "line_end": 1441,
          "content": "set        = schema.indexLookup;<br/>                    objectName = set.getName(name);<br/><br/>                    if (objectName == null) {<br/>                        return null;<br/>                    }<br/><br/>                    table =<br/>                        (Table) schema.tableList.get(objectName.parent.name);"
        },
        {
          "total_lines": 8,
          "line_start": 1417,
          "line_end": 1424,
          "content": "objectName = set.getName(name);<br/><br/>                    if (objectName == null) {<br/>                        return null;<br/>                    }<br/><br/>                    table =<br/>                        (Table) schema.tableList.get(objectName.parent.name);"
        },
        {
          "total_lines": 8,
          "line_start": 1434,
          "line_end": 1441,
          "content": "objectName = set.getName(name);<br/><br/>                    if (objectName == null) {<br/>                        return null;<br/>                    }<br/><br/>                    table =<br/>                        (Table) schema.tableList.get(objectName.parent.name);"
        },
        {
          "total_lines": 8,
          "line_start": 1404,
          "line_end": 1411,
          "content": "objectName = set.getName(name);<br/><br/>                    if (objectName == null) {<br/>                        return null;<br/>                    }<br/><br/>                    table =<br/>                        (Table) schema.tableList.get(objectName.parent.name);"
        },
        {
          "total_lines": 7,
          "line_start": 1138,
          "line_end": 1144,
          "content": "HsqlArrayList list = getAllTables(false);<br/><br/>                for (int i = 0; i < list.size(); i++) {<br/>                    Table t = (Table) list.get(i);<br/><br/>                    t.verifyConstraintsIntegrity();<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 1090,
          "line_end": 1096,
          "content": "HsqlArrayList list = getAllTables(false);<br/><br/>                for (int i = 0; i < list.size(); i++) {<br/>                    Table t = (Table) list.get(i);<br/><br/>                    t.verifyConstraintsIntegrity();<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 1612,
          "line_end": 1618,
          "content": "values = new Object[set.map.size()];<br/><br/>                        set.map.valuesToArray(values);<br/><br/>                        objects =<br/>                            new WrapperIterator(objects,<br/>                                                new WrapperIterator(values));"
        },
        {
          "total_lines": 6,
          "line_start": 1406,
          "line_end": 1411,
          "content": "if (objectName == null) {<br/>                        return null;<br/>                    }<br/><br/>                    table =<br/>                        (Table) schema.tableList.get(objectName.parent.name);"
        },
        {
          "total_lines": 6,
          "line_start": 1600,
          "line_end": 1605,
          "content": "values = new Object[set.map.size()];<br/><br/>                    set.map.valuesToArray(values);<br/><br/>                    objects = new WrapperIterator(objects,<br/>                                                  new WrapperIterator(values));"
        },
        {
          "total_lines": 6,
          "line_start": 1436,
          "line_end": 1441,
          "content": "if (objectName == null) {<br/>                        return null;<br/>                    }<br/><br/>                    table =<br/>                        (Table) schema.tableList.get(objectName.parent.name);"
        },
        {
          "total_lines": 6,
          "line_start": 1419,
          "line_end": 1424,
          "content": "if (objectName == null) {<br/>                        return null;<br/>                    }<br/><br/>                    table =<br/>                        (Table) schema.tableList.get(objectName.parent.name);"
        },
        {
          "total_lines": 5,
          "line_start": 2210,
          "line_end": 2214,
          "content": "HsqlName objectName = (HsqlName) set.get(0);<br/><br/>                        throw Error.error(<br/>                            ErrorCode.X_42502,<br/>                            objectName.getSchemaQualifiedStatementName());"
        },
        {
          "total_lines": 5,
          "line_start": 1614,
          "line_end": 1618,
          "content": "set.map.valuesToArray(values);<br/><br/>                        objects =<br/>                            new WrapperIterator(objects,<br/>                                                new WrapperIterator(values));"
        },
        {
          "total_lines": 5,
          "line_start": 2666,
          "line_end": 2670,
          "content": "String[] array = new String[list.size()];<br/><br/>            list.toArray(array);<br/><br/>            return array;"
        },
        {
          "total_lines": 4,
          "line_start": 1987,
          "line_end": 1990,
          "content": "HsqlName objectName = (HsqlName) set.get(0);<br/><br/>            throw Error.error(ErrorCode.X_42502,<br/>                              objectName.getSchemaQualifiedStatementName());"
        },
        {
          "total_lines": 4,
          "line_start": 2487,
          "line_end": 2490,
          "content": "OrderedHashSet newResolved = new OrderedHashSet();<br/><br/>                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,<br/>                                          newResolved);"
        },
        {
          "total_lines": 4,
          "line_start": 1602,
          "line_end": 1605,
          "content": "set.map.valuesToArray(values);<br/><br/>                    objects = new WrapperIterator(objects,<br/>                                                  new WrapperIterator(values));"
        },
        {
          "total_lines": 4,
          "line_start": 2521,
          "line_end": 2524,
          "content": "OrderedHashSet newResolved = new OrderedHashSet();<br/><br/>                SchemaObjectSet.addAllSQL(resolved, unresolved, list, it,<br/>                                          newResolved);"
        },
        {
          "total_lines": 3,
          "line_start": 1612,
          "line_end": 1614,
          "content": "values = new Object[set.map.size()];<br/><br/>                        set.map.valuesToArray(values);"
        },
        {
          "total_lines": 3,
          "line_start": 2666,
          "line_end": 2668,
          "content": "String[] array = new String[list.size()];<br/><br/>            list.toArray(array);"
        },
        {
          "total_lines": 3,
          "line_start": 1600,
          "line_end": 1602,
          "content": "values = new Object[set.map.size()];<br/><br/>                    set.map.valuesToArray(values);"
        },
        {
          "total_lines": 3,
          "line_start": 612,
          "line_end": 614,
          "content": "name.name,<br/>                                                   name.schema.name,<br/>                                                   name.type"
        },
        {
          "total_lines": 2,
          "line_start": 1275,
          "line_end": 1276,
          "content": "String schemaName,<br/>                                boolean raise"
        },
        {
          "total_lines": 2,
          "line_start": 1151,
          "line_end": 1152,
          "content": "Session session, String name,<br/>                                  String schemaName"
        },
        {
          "total_lines": 2,
          "line_start": 1433,
          "line_end": 1434,
          "content": "set        = schema.indexLookup;<br/>                    objectName = set.getName(name);"
        },
        {
          "total_lines": 2,
          "line_start": 1348,
          "line_end": 1349,
          "content": "String schemaName,<br/>                                         int type"
        },
        {
          "total_lines": 2,
          "line_start": 2290,
          "line_end": 2291,
          "content": "object = set.getObject(name.name);<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 2349,
          "line_end": 2350,
          "content": "object = set.getObject(name.name);<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 1403,
          "line_end": 1404,
          "content": "set        = schema.indexLookup;<br/>                    objectName = set.getName(name);"
        },
        {
          "total_lines": 2,
          "line_start": 1486,
          "line_end": 1487,
          "content": "name.parent.name,<br/>                               name.parent.schema.name"
        },
        {
          "total_lines": 2,
          "line_start": 1172,
          "line_end": 1173,
          "content": "String schemaName,<br/>                                      boolean raise"
        },
        {
          "total_lines": 2,
          "line_start": 2268,
          "line_end": 2269,
          "content": "object = set.getObject(name.name);<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 1301,
          "line_end": 1302,
          "content": "String schemaName,<br/>                                        int type"
        },
        {
          "total_lines": 2,
          "line_start": 2229,
          "line_end": 2230,
          "content": "ErrorCode.X_42502,<br/>                    objectName.getSchemaQualifiedStatementName()"
        },
        {
          "total_lines": 2,
          "line_start": 1459,
          "line_end": 1460,
          "content": "Session session, String name,<br/>                                String schemaName"
        },
        {
          "total_lines": 2,
          "line_start": 881,
          "line_end": 882,
          "content": "Session session, Table table,<br/>                                boolean cascade"
        },
        {
          "total_lines": 2,
          "line_start": 938,
          "line_end": 939,
          "content": "ErrorCode.X_42502,<br/>                                      name.getSchemaQualifiedStatementName()"
        },
        {
          "total_lines": 2,
          "line_start": 1199,
          "line_end": 1200,
          "content": "String schemaName,<br/>                                   boolean raise"
        },
        {
          "total_lines": 2,
          "line_start": 1319,
          "line_end": 1320,
          "content": "Session session, String name,<br/>                                        String schemaName"
        },
        {
          "total_lines": 2,
          "line_start": 2295,
          "line_end": 2296,
          "content": "object = set.getObject(name.name);<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 1504,
          "line_end": 1505,
          "content": "name.parent.name,<br/>                               name.parent.schema.name"
        },
        {
          "total_lines": 2,
          "line_start": 824,
          "line_end": 825,
          "content": "Session session, String name,<br/>                               String schemaName"
        },
        {
          "total_lines": 1,
          "line_start": 824,
          "line_end": 824,
          "content": "Session session, String name"
        },
        {
          "total_lines": 1,
          "line_start": 2881,
          "line_end": 2881,
          "content": "Type.SQL_BIGINT, Type.SQL_BIGINT"
        },
        {
          "total_lines": 1,
          "line_start": 1499,
          "line_end": 1499,
          "content": "Session session, HsqlName name"
        },
        {
          "total_lines": 1,
          "line_start": 609,
          "line_end": 609,
          "content": "name.name, name.schema.name, name.type"
        },
        {
          "total_lines": 1,
          "line_start": 1225,
          "line_end": 1225,
          "content": "String schemaName, boolean raise"
        },
        {
          "total_lines": 1,
          "line_start": 744,
          "line_end": 744,
          "content": "Session session, String name, String schema"
        },
        {
          "total_lines": 1,
          "line_start": 905,
          "line_end": 905,
          "content": "Session session, Table table"
        },
        {
          "total_lines": 1,
          "line_start": 881,
          "line_end": 881,
          "content": "Session session, Table table"
        },
        {
          "total_lines": 1,
          "line_start": 1459,
          "line_end": 1459,
          "content": "Session session, String name"
        },
        {
          "total_lines": 1,
          "line_start": 805,
          "line_end": 805,
          "content": "Session session, String name, String schema"
        },
        {
          "total_lines": 1,
          "line_start": 1151,
          "line_end": 1151,
          "content": "Session session, String name"
        },
        {
          "total_lines": 1,
          "line_start": 2881,
          "line_end": 2881,
          "content": "Type.SQL_BIGINT, Type.SQL_BIGINT"
        },
        {
          "total_lines": 1,
          "line_start": 1250,
          "line_end": 1250,
          "content": "String schemaName, boolean raise"
        },
        {
          "total_lines": 1,
          "line_start": 1319,
          "line_end": 1319,
          "content": "Session session, String name"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/MultiValueHashMap.java",
      "loc_duplicate": 15,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 110,
          "line_end": 114,
          "content": "if (keySet == null) {<br/>            keySet = new KeySet();<br/>        }<br/><br/>        return keySet;"
        },
        {
          "total_lines": 5,
          "line_start": 119,
          "line_end": 123,
          "content": "if (values == null) {<br/>            values = new Values();<br/>        }<br/><br/>        return values;"
        },
        {
          "total_lines": 3,
          "line_start": 102,
          "line_end": 104,
          "content": "Object key = it.next();<br/><br/>            put(key, t.get(key));"
        },
        {
          "total_lines": 2,
          "line_start": 57,
          "line_end": 58,
          "content": "initialCapacity, BaseHashMap.objectKeyOrValue,<br/>              BaseHashMap.objectKeyOrValue"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/Expression.java",
      "loc_duplicate": 107,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 1048,
          "line_end": 1054,
          "content": "if (nodes[i] == null) {<br/>                        continue;<br/>                    }<br/><br/>                    unresolvedSet = nodes[i].resolveColumnReferences(session,<br/>                            rangeGroup, rangeCount, rangeGroups,<br/>                            unresolvedSet, acceptsSequences);"
        },
        {
          "total_lines": 7,
          "line_start": 1062,
          "line_end": 1068,
          "content": "if (nodes[i] == null) {<br/>                continue;<br/>            }<br/><br/>            unresolvedSet = nodes[i].resolveColumnReferences(session,<br/>                    rangeGroup, rangeCount, rangeGroups, unresolvedSet,<br/>                    acceptsSequences);"
        },
        {
          "total_lines": 6,
          "line_start": 900,
          "line_end": 905,
          "content": "if (nodes[i] == null) {<br/>                continue;<br/>            }<br/><br/>            nodes[i] = nodes[i].replaceAliasInOrderBy(session, columns,<br/>                    length);"
        },
        {
          "total_lines": 5,
          "line_start": 352,
          "line_end": 356,
          "content": "if (i > 0) {<br/>                        sb.append(',');<br/>                    }<br/><br/>                    sb.append(nodes[i].getSQL());"
        },
        {
          "total_lines": 5,
          "line_start": 418,
          "line_end": 422,
          "content": "for (int i = 0; i < nodes.length; i++) {<br/>                    sb.append(nodes[i].describe(session, blanks + 1));<br/>                    sb.append(' ');<br/>                }<br/>                break;"
        },
        {
          "total_lines": 5,
          "line_start": 726,
          "line_end": 730,
          "content": "if (nodes[i] == null) {<br/>                continue;<br/>            }<br/><br/>            nodes[i] = nodes[i].replaceColumnReferences(range, list);"
        },
        {
          "total_lines": 5,
          "line_start": 1145,
          "line_end": 1149,
          "content": "if (unresolvedSet == null) {<br/>                        unresolvedSet = new OrderedHashSet();<br/>                    }<br/><br/>                    unresolvedSet.add(this);"
        },
        {
          "total_lines": 5,
          "line_start": 427,
          "line_end": 431,
          "content": "for (int i = 0; i < nodes.length; i++) {<br/>                    sb.append(nodes[i].describe(session, blanks + 1));<br/>                    sb.append(' ');<br/>                }<br/>                break;"
        },
        {
          "total_lines": 5,
          "line_start": 1131,
          "line_end": 1135,
          "content": "if (nodes[i] == null) {<br/>                continue;<br/>            }<br/><br/>            unresolvedSet = nodes[i].getUnkeyedColumns(unresolvedSet);"
        },
        {
          "total_lines": 5,
          "line_start": 336,
          "line_end": 340,
          "content": "if (i > 0) {<br/>                        sb.append(',');<br/>                    }<br/><br/>                    sb.append(nodes[i].getSQL());"
        },
        {
          "total_lines": 5,
          "line_start": 1532,
          "line_end": 1536,
          "content": "Object value =<br/>                    session.sessionContext.rangeIterators[rangePosition]<br/>                        .getCurrent(columnIndex);<br/><br/>                return value;"
        },
        {
          "total_lines": 5,
          "line_start": 322,
          "line_end": 326,
          "content": "if (i > 0) {<br/>                        sb.append(',');<br/>                    }<br/><br/>                    sb.append(nodes[i].getSQL());"
        },
        {
          "total_lines": 3,
          "line_start": 1941,
          "line_end": 1943,
          "content": "OrderedHashSet set,<br/>                                         OrderedIntHashSet typeSet,<br/>                                         OrderedIntHashSet stopAtTypeSet"
        },
        {
          "total_lines": 3,
          "line_start": 1111,
          "line_end": 1113,
          "content": "session,<br/>                            rangeGroup, rangeCount, rangeGroups,<br/>                            unresolvedSet"
        },
        {
          "total_lines": 3,
          "line_start": 2027,
          "line_end": 2029,
          "content": "set,<br/>                                    Expression.subqueryAggregateExpressionSet,<br/>                                    Expression.emptyExpressionSet"
        },
        {
          "total_lines": 3,
          "line_start": 1018,
          "line_end": 1020,
          "content": "Session session,<br/>            RangeGroup rangeGroup, int rangeCount, RangeGroup[] rangeGroups,<br/>            HsqlList unresolvedSet, boolean acceptsSequences"
        },
        {
          "total_lines": 3,
          "line_start": 803,
          "line_end": 805,
          "content": "set,<br/>                        Expression.columnExpressionSet,<br/>                        Expression.emptyExpressionSet"
        },
        {
          "total_lines": 2,
          "line_start": 1717,
          "line_end": 1718,
          "content": "Expression.subqueryAggregateExpressionSet,<br/>                              Expression.emptyExpressionSet"
        },
        {
          "total_lines": 2,
          "line_start": 1089,
          "line_end": 1090,
          "content": "rangeGroups,<br/>                        rangeGroup, rangeGroups.length"
        },
        {
          "total_lines": 2,
          "line_start": 896,
          "line_end": 897,
          "content": "Expression[] columns,<br/>                                     int length"
        },
        {
          "total_lines": 2,
          "line_start": 804,
          "line_end": 805,
          "content": "Expression.columnExpressionSet,<br/>                        Expression.emptyExpressionSet"
        },
        {
          "total_lines": 2,
          "line_start": 1942,
          "line_end": 1943,
          "content": "OrderedIntHashSet typeSet,<br/>                                         OrderedIntHashSet stopAtTypeSet"
        },
        {
          "total_lines": 2,
          "line_start": 2028,
          "line_end": 2029,
          "content": "Expression.subqueryAggregateExpressionSet,<br/>                                    Expression.emptyExpressionSet"
        },
        {
          "total_lines": 2,
          "line_start": 803,
          "line_end": 804,
          "content": "set,<br/>                        Expression.columnExpressionSet"
        },
        {
          "total_lines": 2,
          "line_start": 1371,
          "line_end": 1372,
          "content": "Session session,<br/>                                       PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 722,
          "line_end": 723,
          "content": "RangeVariable range,<br/>                                       Expression[] list"
        },
        {
          "total_lines": 2,
          "line_start": 2027,
          "line_end": 2028,
          "content": "set,<br/>                                    Expression.subqueryAggregateExpressionSet"
        },
        {
          "total_lines": 2,
          "line_start": 929,
          "line_end": 930,
          "content": "RangeVariable[] rangeVariables,<br/>                                         OrderedHashSet set"
        },
        {
          "total_lines": 2,
          "line_start": 740,
          "line_end": 741,
          "content": "RangeVariable[] ranges,<br/>                               RangeVariable[] newRanges"
        },
        {
          "total_lines": 2,
          "line_start": 1041,
          "line_end": 1042,
          "content": "rangeGroups,<br/>                            rangeGroup, rangeGroups.length"
        },
        {
          "total_lines": 1,
          "line_start": 2075,
          "line_end": 2075,
          "content": "Session session, RangeVariable range, int operation"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/BooleanType.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 210,
          "line_end": 211,
          "content": "SessionInterface session, Object a,<br/>                                    Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 145,
          "line_end": 146,
          "content": "SessionInterface session, Object a,<br/>                                Type otherType"
        },
        {
          "total_lines": 1,
          "line_start": 106,
          "line_end": 106,
          "content": "Session session, Type other, int operation"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/TableSpaceManagerSimple.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 94,
          "line_end": 95,
          "content": "DoubleIntIndex lookup, long blockFreePos,<br/>                                    long blockLimit"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/BlobDataID.java",
      "loc_duplicate": 129,
      "clones": [
          {
          "total_lines": 14,
          "line_start": 133,
          "line_end": 146,
          "content": "if (length > -1) {<br/>            return length;<br/>        }<br/><br/>        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);<br/>        Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        length = ((ResultLob) resultIn).getBlockLength();<br/><br/>        return length;"
        },
        {
          "total_lines": 12,
          "line_start": 133,
          "line_end": 144,
          "content": "if (length > -1) {<br/>            return length;<br/>        }<br/><br/>        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);<br/>        Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        length = ((ResultLob) resultIn).getBlockLength();"
        },
        {
          "total_lines": 10,
          "line_start": 137,
          "line_end": 146,
          "content": "ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);<br/>        Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        length = ((ResultLob) resultIn).getBlockLength();<br/><br/>        return length;"
        },
        {
          "total_lines": 8,
          "line_start": 59,
          "line_end": 66,
          "content": "ResultLob resultOut = ResultLob.newLobDuplicateRequest(id);<br/>        Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        long lobID = ((ResultLob) resultIn).getLobID();"
        },
        {
          "total_lines": 8,
          "line_start": 188,
          "line_end": 195,
          "content": "ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);<br/>        Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        return ((ResultLob) resultIn).getBlockLength();"
        },
        {
          "total_lines": 7,
          "line_start": 189,
          "line_end": 195,
          "content": "Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        return ((ResultLob) resultIn).getBlockLength();"
        },
        {
          "total_lines": 7,
          "line_start": 60,
          "line_end": 66,
          "content": "Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        long lobID = ((ResultLob) resultIn).getLobID();"
        },
        {
          "total_lines": 7,
          "line_start": 140,
          "line_end": 146,
          "content": "if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        length = ((ResultLob) resultIn).getBlockLength();<br/><br/>        return length;"
        },
        {
          "total_lines": 7,
          "line_start": 230,
          "line_end": 236,
          "content": "if (length > Integer.MAX_VALUE) {<br/>            throw new IndexOutOfBoundsException();<br/>        }<br/><br/>        byte[] bytes = b.getBytes(session, offset, (int) length);<br/><br/>        setBytes(session, pos, bytes, 0, bytes.length);"
        },
        {
          "total_lines": 6,
          "line_start": 188,
          "line_end": 193,
          "content": "ResultLob resultOut = ResultLob.newLobGetTruncateLength(id);<br/>        Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 191,
          "line_end": 195,
          "content": "if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }<br/><br/>        return ((ResultLob) resultIn).getBlockLength();"
        },
        {
          "total_lines": 5,
          "line_start": 133,
          "line_end": 137,
          "content": "if (length > -1) {<br/>            return length;<br/>        }<br/><br/>        ResultLob resultOut = ResultLob.newLobGetLengthRequest(id);"
        },
        {
          "total_lines": 5,
          "line_start": 263,
          "line_end": 267,
          "content": "if (other instanceof BlobDataID) {<br/>            return id == ((BlobDataID) other).id;<br/>        }<br/><br/>        return false;"
        },
        {
          "total_lines": 5,
          "line_start": 189,
          "line_end": 193,
          "content": "Result    resultIn  = session.execute(resultOut);<br/><br/>        if (resultIn.isError()) {<br/>            throw resultIn.getException();<br/>        }"
        },
        {
          "total_lines": 3,
          "line_start": 144,
          "line_end": 146,
          "content": "length = ((ResultLob) resultIn).getBlockLength();<br/><br/>        return length;"
        },
        {
          "total_lines": 3,
          "line_start": 234,
          "line_end": 236,
          "content": "byte[] bytes = b.getBytes(session, offset, (int) length);<br/><br/>        setBytes(session, pos, bytes, 0, bytes.length);"
        },
        {
          "total_lines": 2,
          "line_start": 198,
          "line_end": 199,
          "content": "long pos, byte[] bytes,<br/>                         int offset"
        },
        {
          "total_lines": 2,
          "line_start": 157,
          "line_end": 158,
          "content": "BlobData pattern,<br/>                         long start"
        },
        {
          "total_lines": 2,
          "line_start": 227,
          "line_end": 228,
          "content": "long pos, BlobData b,<br/>                         long offset, long length"
        },
        {
          "total_lines": 2,
          "line_start": 171,
          "line_end": 172,
          "content": "byte[] pattern,<br/>                         long start"
        },
        {
          "total_lines": 2,
          "line_start": 80,
          "line_end": 81,
          "content": "SessionInterface session, long pos,<br/>                                       long length"
        },
        {
          "total_lines": 2,
          "line_start": 239,
          "line_end": 240,
          "content": "long pos,<br/>                                InputStream in"
        },
        {
          "total_lines": 1,
          "line_start": 89,
          "line_end": 89,
          "content": "SessionInterface session, long pos"
        },
        {
          "total_lines": 1,
          "line_start": 223,
          "line_end": 223,
          "content": "SessionInterface session, long pos"
        },
        {
          "total_lines": 1,
          "line_start": 199,
          "line_end": 199,
          "content": "int offset, int len"
        },
        {
          "total_lines": 1,
          "line_start": 101,
          "line_end": 101,
          "content": "SessionInterface session, long pos"
        },
        {
          "total_lines": 1,
          "line_start": 80,
          "line_end": 80,
          "content": "SessionInterface session, long pos"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestScripts.java",
      "loc_duplicate": 12,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 95,
          "line_end": 96,
          "content": "System.err.println(SYNTAX_MSG);<br/>                    System.exit(2);"
        },
        {
          "total_lines": 2,
          "line_start": 87,
          "line_end": 88,
          "content": "System.err.println(SYNTAX_MSG);<br/>                    System.exit(2);"
        },
        {
          "total_lines": 2,
          "line_start": 59,
          "line_end": 60,
          "content": "System.err.println(SYNTAX_MSG);<br/>            System.exit(2);"
        },
        {
          "total_lines": 2,
          "line_start": 104,
          "line_end": 105,
          "content": "System.err.println(SYNTAX_MSG);<br/>                System.exit(2);"
        },
        {
          "total_lines": 2,
          "line_start": 100,
          "line_end": 101,
          "content": "System.err.println(SYNTAX_MSG);<br/>                    System.exit(2);"
        },
        {
          "total_lines": 2,
          "line_start": 82,
          "line_end": 83,
          "content": "System.err.println(SYNTAX_MSG);<br/>                    System.exit(2);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/scriptio/ScriptWriterBase.java",
      "loc_duplicate": 55,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 272,
          "line_end": 278,
          "content": "FileAccess   fa  = isDump ? FileUtil.getFileUtil()<br/>                                      : database.logger.getFileAccess();<br/>            OutputStream fos = fa.openOutputStreamElement(outFile);<br/><br/>            outDescriptor = fa.getFileSync(fos);<br/>            fileStreamOut = fos;<br/>            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);"
        },
        {
          "total_lines": 6,
          "line_start": 272,
          "line_end": 277,
          "content": "FileAccess   fa  = isDump ? FileUtil.getFileUtil()<br/>                                      : database.logger.getFileAccess();<br/>            OutputStream fos = fa.openOutputStreamElement(outFile);<br/><br/>            outDescriptor = fa.getFileSync(fos);<br/>            fileStreamOut = fos;"
        },
        {
          "total_lines": 5,
          "line_start": 272,
          "line_end": 276,
          "content": "FileAccess   fa  = isDump ? FileUtil.getFileUtil()<br/>                                      : database.logger.getFileAccess();<br/>            OutputStream fos = fa.openOutputStreamElement(outFile);<br/><br/>            outDescriptor = fa.getFileSync(fos);"
        },
        {
          "total_lines": 5,
          "line_start": 274,
          "line_end": 278,
          "content": "OutputStream fos = fa.openOutputStreamElement(outFile);<br/><br/>            outDescriptor = fa.getFileSync(fos);<br/>            fileStreamOut = fos;<br/>            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);"
        },
        {
          "total_lines": 4,
          "line_start": 280,
          "line_end": 283,
          "content": "e, ErrorCode.FILE_IO_ERROR,<br/>                              ErrorCode.M_Message_Pair, new Object[] {<br/>                e.toString(), outFile<br/>            }"
        },
        {
          "total_lines": 4,
          "line_start": 274,
          "line_end": 277,
          "content": "OutputStream fos = fa.openOutputStreamElement(outFile);<br/><br/>            outDescriptor = fa.getFileSync(fos);<br/>            fileStreamOut = fos;"
        },
        {
          "total_lines": 3,
          "line_start": 272,
          "line_end": 274,
          "content": "FileAccess   fa  = isDump ? FileUtil.getFileUtil()<br/>                                      : database.logger.getFileAccess();<br/>            OutputStream fos = fa.openOutputStreamElement(outFile);"
        },
        {
          "total_lines": 3,
          "line_start": 436,
          "line_end": 438,
          "content": "HsqlTimer.cancel(timerTask);<br/><br/>            timerTask = null;"
        },
        {
          "total_lines": 3,
          "line_start": 126,
          "line_end": 128,
          "content": "Database db, OutputStream outputStream,<br/>                     FileAccess.FileSync descriptor,<br/>                     boolean includeCachedData"
        },
        {
          "total_lines": 3,
          "line_start": 274,
          "line_end": 276,
          "content": "OutputStream fos = fa.openOutputStreamElement(outFile);<br/><br/>            outDescriptor = fa.getFileSync(fos);"
        },
        {
          "total_lines": 2,
          "line_start": 391,
          "line_end": 392,
          "content": "Session session, Table table,<br/>            Object[] data"
        },
        {
          "total_lines": 2,
          "line_start": 126,
          "line_end": 127,
          "content": "Database db, OutputStream outputStream,<br/>                     FileAccess.FileSync descriptor"
        },
        {
          "total_lines": 2,
          "line_start": 277,
          "line_end": 278,
          "content": "fileStreamOut = fos;<br/>            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);"
        },
        {
          "total_lines": 2,
          "line_start": 388,
          "line_end": 389,
          "content": "Session session, Row row,<br/>            Table table"
        },
        {
          "total_lines": 2,
          "line_start": 127,
          "line_end": 128,
          "content": "FileAccess.FileSync descriptor,<br/>                     boolean includeCachedData"
        },
        {
          "total_lines": 2,
          "line_start": 374,
          "line_end": 375,
          "content": "Session session, Row row,<br/>                                  Table table"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestBatchExecution.java",
      "loc_duplicate": 159,
      "clones": [
          {
          "total_lines": 16,
          "line_start": 152,
          "line_end": 167,
          "content": "preparedTestOne(runs);<br/><br/>        // drop the test table and shut down database<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);<br/>        println(\"---------------------------------------\");<br/>        println(\"shutting down database\");<br/>        stmnt.execute(shutdown_sql);<br/>        println(\"---------------------------------------\");<br/><br/>        // get the connection and statement<br/>        conn  = DriverManager.getConnection(url, \"SA\", \"\");<br/>        stmnt = conn.createStatement();<br/><br/>        println(\"\");<br/>        println(\"***************************************\");"
        },
        {
          "total_lines": 16,
          "line_start": 176,
          "line_end": 191,
          "content": "preparedTestOne(runs);<br/><br/>        // drop the test table and shut down database<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);<br/>        println(\"---------------------------------------\");<br/>        println(\"shutting down database\");<br/>        stmnt.execute(shutdown_sql);<br/>        println(\"---------------------------------------\");<br/><br/>        // get the connection and statement<br/>        conn  = DriverManager.getConnection(url, \"SA\", \"\");<br/>        stmnt = conn.createStatement();<br/><br/>        println(\"\");<br/>        println(\"***************************************\");"
        },
        {
          "total_lines": 15,
          "line_start": 176,
          "line_end": 190,
          "content": "preparedTestOne(runs);<br/><br/>        // drop the test table and shut down database<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);<br/>        println(\"---------------------------------------\");<br/>        println(\"shutting down database\");<br/>        stmnt.execute(shutdown_sql);<br/>        println(\"---------------------------------------\");<br/><br/>        // get the connection and statement<br/>        conn  = DriverManager.getConnection(url, \"SA\", \"\");<br/>        stmnt = conn.createStatement();<br/><br/>        println(\"\");"
        },
        {
          "total_lines": 15,
          "line_start": 152,
          "line_end": 166,
          "content": "preparedTestOne(runs);<br/><br/>        // drop the test table and shut down database<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);<br/>        println(\"---------------------------------------\");<br/>        println(\"shutting down database\");<br/>        stmnt.execute(shutdown_sql);<br/>        println(\"---------------------------------------\");<br/><br/>        // get the connection and statement<br/>        conn  = DriverManager.getConnection(url, \"SA\", \"\");<br/>        stmnt = conn.createStatement();<br/><br/>        println(\"\");"
        },
        {
          "total_lines": 9,
          "line_start": 200,
          "line_end": 208,
          "content": "preparedTestOne(runs);<br/><br/>        // drop the test table<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);<br/>        println(\"---------------------------------------\");<br/>        println(\"shutting down database\");<br/>        stmnt.execute(shutdown_sql);<br/>        println(\"---------------------------------------\");"
        },
        {
          "total_lines": 8,
          "line_start": 200,
          "line_end": 207,
          "content": "preparedTestOne(runs);<br/><br/>        // drop the test table<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);<br/>        println(\"---------------------------------------\");<br/>        println(\"shutting down database\");<br/>        stmnt.execute(shutdown_sql);"
        },
        {
          "total_lines": 7,
          "line_start": 154,
          "line_end": 160,
          "content": "// drop the test table and shut down database<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);<br/>        println(\"---------------------------------------\");<br/>        println(\"shutting down database\");<br/>        stmnt.execute(shutdown_sql);<br/>        println(\"---------------------------------------\");"
        },
        {
          "total_lines": 7,
          "line_start": 200,
          "line_end": 206,
          "content": "preparedTestOne(runs);<br/><br/>        // drop the test table<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);<br/>        println(\"---------------------------------------\");<br/>        println(\"shutting down database\");"
        },
        {
          "total_lines": 7,
          "line_start": 178,
          "line_end": 184,
          "content": "// drop the test table and shut down database<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);<br/>        println(\"---------------------------------------\");<br/>        println(\"shutting down database\");<br/>        stmnt.execute(shutdown_sql);<br/>        println(\"---------------------------------------\");"
        },
        {
          "total_lines": 7,
          "line_start": 202,
          "line_end": 208,
          "content": "// drop the test table<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);<br/>        println(\"---------------------------------------\");<br/>        println(\"shutting down database\");<br/>        stmnt.execute(shutdown_sql);<br/>        println(\"---------------------------------------\");"
        },
        {
          "total_lines": 5,
          "line_start": 193,
          "line_end": 197,
          "content": "println(\"***************************************\");<br/><br/>        // drop and recreate the test table<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);"
        },
        {
          "total_lines": 5,
          "line_start": 169,
          "line_end": 173,
          "content": "println(\"***************************************\");<br/><br/>        // drop and recreate the test table<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);"
        },
        {
          "total_lines": 5,
          "line_start": 145,
          "line_end": 149,
          "content": "println(\"***************************************\");<br/><br/>        // drop and recreate the test table<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);"
        },
        {
          "total_lines": 5,
          "line_start": 371,
          "line_end": 375,
          "content": "catch (SQLException e) {<br/>            e.printStackTrace();<br/>        } catch (ClassNotFoundException e) {<br/>            e.printStackTrace();<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 438,
          "line_end": 442,
          "content": "catch (SQLException e) {<br/>            e.printStackTrace();<br/>        } catch (ClassNotFoundException e) {<br/>            e.printStackTrace();<br/>        }"
        },
        {
          "total_lines": 4,
          "line_start": 145,
          "line_end": 148,
          "content": "println(\"***************************************\");<br/><br/>        // drop and recreate the test table<br/>        println(drop_table_sql);"
        },
        {
          "total_lines": 4,
          "line_start": 169,
          "line_end": 172,
          "content": "println(\"***************************************\");<br/><br/>        // drop and recreate the test table<br/>        println(drop_table_sql);"
        },
        {
          "total_lines": 4,
          "line_start": 37,
          "line_end": 40,
          "content": "import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.SQLException;<br/>import java.sql.Statement;"
        },
        {
          "total_lines": 4,
          "line_start": 193,
          "line_end": 196,
          "content": "println(\"***************************************\");<br/><br/>        // drop and recreate the test table<br/>        println(drop_table_sql);"
        },
        {
          "total_lines": 3,
          "line_start": 195,
          "line_end": 197,
          "content": "// drop and recreate the test table<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);"
        },
        {
          "total_lines": 3,
          "line_start": 147,
          "line_end": 149,
          "content": "// drop and recreate the test table<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);"
        },
        {
          "total_lines": 3,
          "line_start": 171,
          "line_end": 173,
          "content": "// drop and recreate the test table<br/>        println(drop_table_sql);<br/>        stmnt.execute(drop_table_sql);"
        },
        {
          "total_lines": 2,
          "line_start": 142,
          "line_end": 143,
          "content": "println(\"\");<br/>        println(\"***************************************\");"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ExpressionOrderBy.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/ArraySort.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 81,
          "line_end": 82,
          "content": "int limit,<br/>                                  Comparator comparator"
        },
        {
          "total_lines": 2,
          "line_start": 107,
          "line_end": 108,
          "content": "int limit,<br/>                            Comparator comparator"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/server/ServerConnection.java",
      "loc_duplicate": 85,
      "clones": [
          {
          "total_lines": 12,
          "line_start": 852,
          "line_end": 863,
          "content": "dataString =<br/>                                        pgTypes[i].valueString(rowData[i]);<br/><br/>                                    outPacket.writeSized(dataString);<br/><br/>                                    if (server.isTrace()) {<br/>                                        server.printWithThread(<br/>                                            \"R\" + rowNum + \"C\" + (i + 1)<br/>                                            + \" => (\"<br/>                                            + rowData[i].getClass().getName()<br/>                                            + \") [\" + dataString + ']');<br/>                                    }"
        },
        {
          "total_lines": 11,
          "line_start": 1368,
          "line_end": 1378,
          "content": "dataString =<br/>                                    pgTypes[i].valueString(rowData[i]);<br/><br/>                                outPacket.writeSized(dataString);<br/><br/>                                if (server.isTrace()) {<br/>                                    server.printWithThread(<br/>                                        \"R\" + rowNum + \"C\" + (i + 1) + \" => (\"<br/>                                        + rowData[i].getClass().getName()<br/>                                        + \") [\" + dataString + ']');<br/>                                }"
        },
        {
          "total_lines": 4,
          "line_start": 710,
          "line_end": 713,
          "content": "outPacket.writeInt(26);               // Datatype ID  [adtid]<br/>                        outPacket.writeShort(4);              // Datatype size  [adtsize]<br/>                        outPacket.writeInt(-1);               // Var size [atttypmod]<br/>                        outPacket.writeShort(0);              // text \"format code\""
        },
        {
          "total_lines": 4,
          "line_start": 1038,
          "line_end": 1041,
          "content": "c      = inPacket.readByteChar();<br/>                    handle = inPacket.readString();<br/>                    odbcPs = null;<br/>                    portal = null;"
        },
        {
          "total_lines": 4,
          "line_start": 1400,
          "line_end": 1403,
          "content": "c      = inPacket.readByteChar();<br/>                    handle = inPacket.readString();<br/>                    odbcPs = null;<br/>                    portal = null;"
        },
        {
          "total_lines": 4,
          "line_start": 1368,
          "line_end": 1371,
          "content": "dataString =<br/>                                    pgTypes[i].valueString(rowData[i]);<br/><br/>                                outPacket.writeSized(dataString);"
        },
        {
          "total_lines": 4,
          "line_start": 703,
          "line_end": 706,
          "content": "outPacket.writeInt(26);               // Datatype ID  [adtid]<br/>                        outPacket.writeShort(4);              // Datatype size  [adtsize]<br/>                        outPacket.writeInt(-1);               // Var size [atttypmod]<br/>                        outPacket.writeShort(0);              // text \"format code\""
        },
        {
          "total_lines": 4,
          "line_start": 852,
          "line_end": 855,
          "content": "dataString =<br/>                                        pgTypes[i].valueString(rowData[i]);<br/><br/>                                    outPacket.writeSized(dataString);"
        },
        {
          "total_lines": 3,
          "line_start": 1039,
          "line_end": 1041,
          "content": "handle = inPacket.readString();<br/>                    odbcPs = null;<br/>                    portal = null;"
        },
        {
          "total_lines": 3,
          "line_start": 1421,
          "line_end": 1423,
          "content": "null,<br/>                            \"Description packet request type invalid: \" + c,<br/>                            \"08P01\""
        },
        {
          "total_lines": 3,
          "line_start": 1401,
          "line_end": 1403,
          "content": "handle = inPacket.readString();<br/>                    odbcPs = null;<br/>                    portal = null;"
        },
        {
          "total_lines": 3,
          "line_start": 1051,
          "line_end": 1053,
          "content": "null,<br/>                            \"Description packet request type invalid: \" + c,<br/>                            \"08P01\""
        },
        {
          "total_lines": 3,
          "line_start": 1400,
          "line_end": 1402,
          "content": "c      = inPacket.readByteChar();<br/>                    handle = inPacket.readString();<br/>                    odbcPs = null;"
        },
        {
          "total_lines": 3,
          "line_start": 1038,
          "line_end": 1040,
          "content": "c      = inPacket.readByteChar();<br/>                    handle = inPacket.readString();<br/>                    odbcPs = null;"
        },
        {
          "total_lines": 2,
          "line_start": 1422,
          "line_end": 1423,
          "content": "\"Description packet request type invalid: \" + c,<br/>                            \"08P01\""
        },
        {
          "total_lines": 2,
          "line_start": 998,
          "line_end": 999,
          "content": "sendReadyForQuery = true;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 1421,
          "line_end": 1422,
          "content": "null,<br/>                            \"Description packet request type invalid: \" + c"
        },
        {
          "total_lines": 2,
          "line_start": 597,
          "line_end": 598,
          "content": "\"Failed to change transaction state: \"<br/>                                + he.getMessage(), he.getSQLState()"
        },
        {
          "total_lines": 2,
          "line_start": 1051,
          "line_end": 1052,
          "content": "null,<br/>                            \"Description packet request type invalid: \" + c"
        },
        {
          "total_lines": 2,
          "line_start": 1588,
          "line_end": 1589,
          "content": "session.getId(),<br/>                session.getDatabase().getDatabaseID()"
        },
        {
          "total_lines": 2,
          "line_start": 1306,
          "line_end": 1307,
          "content": "\"Failed to change transaction state: \"<br/>                                        + he.getMessage(), he.getSQLState()"
        },
        {
          "total_lines": 2,
          "line_start": 1052,
          "line_end": 1053,
          "content": "\"Description packet request type invalid: \" + c,<br/>                            \"08P01\""
        },
        {
          "total_lines": 2,
          "line_start": 1977,
          "line_end": 1978,
          "content": "\"Failed to change transaction state: \" + he.getMessage(),<br/>                    he.getSQLState()"
        },
        {
          "total_lines": 2,
          "line_start": 943,
          "line_end": 944,
          "content": "sendReadyForQuery = true;<br/>                    break;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rowio/RowOutputBinary.java",
      "loc_duplicate": 26,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 413,
          "line_end": 415,
          "content": "s += INT_STORE_SIZE;<br/>                s += ((BinaryData) o).length(null);<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 407,
          "line_end": 409,
          "content": "s += INT_STORE_SIZE;<br/>                s += ((BinaryData) o).length(null);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 367,
          "line_end": 368,
          "content": "s += 8;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 375,
          "line_end": 376,
          "content": "s += 12;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 402,
          "line_end": 403,
          "content": "s += 12;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 379,
          "line_end": 380,
          "content": "s += 12;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 389,
          "line_end": 390,
          "content": "s += 8;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 371,
          "line_end": 372,
          "content": "s += 8;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 349,
          "line_end": 350,
          "content": "s += 8;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 419,
          "line_end": 420,
          "content": "s += 8;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 413,
          "line_end": 414,
          "content": "s += INT_STORE_SIZE;<br/>                s += ((BinaryData) o).length(null);"
        },
        {
          "total_lines": 2,
          "line_start": 407,
          "line_end": 408,
          "content": "s += INT_STORE_SIZE;<br/>                s += ((BinaryData) o).length(null);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/IntervalSecondData.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 121,
          "line_end": 123,
          "content": "nanos += DTIType.limitNanoseconds;<br/><br/>            seconds--;"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ParserDDL.java",
      "loc_duplicate": 995,
      "clones": [
          {
          "total_lines": 18,
          "line_start": 5187,
          "line_end": 5204,
          "content": "if (session.isProcessingLog()) {<br/>            return;<br/>        }<br/><br/>        if (SqlInvariants.isSystemSchemaName(schema.name)) {<br/>            throw Error.error(ErrorCode.X_42503);<br/>        }<br/><br/>        if (session.parser.isSchemaDefinition) {<br/>            if (schema == session.getCurrentSchemaHsqlName()) {<br/>                return;<br/>            }<br/><br/>            Error.error(ErrorCode.X_42505, schema.name);<br/>        }<br/><br/>        session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);<br/>        session.checkDDLWrite();"
        },
        {
          "total_lines": 16,
          "line_start": 4945,
          "line_end": 4960,
          "content": "read();<br/>            readThis(Tokens.BY);<br/><br/>            if (token.tokenType == Tokens.CURRENT_USER) {<br/>                read();<br/><br/>                //<br/>            } else {<br/>                readThis(Tokens.CURRENT_ROLE);<br/><br/>                if (session.getRole() == null) {<br/>                    throw Error.error(ErrorCode.X_0P000);<br/>                }<br/><br/>                grantor = session.getRole();<br/>            }"
        },
        {
          "total_lines": 16,
          "line_start": 4843,
          "line_end": 4858,
          "content": "read();<br/>                readThis(Tokens.BY);<br/><br/>                if (token.tokenType == Tokens.CURRENT_USER) {<br/>                    read();<br/><br/>                    //<br/>                } else {<br/>                    readThis(Tokens.CURRENT_ROLE);<br/><br/>                    if (session.getRole() == null) {<br/>                        throw Error.error(ErrorCode.X_0P000);<br/>                    }<br/><br/>                    grantor = session.getRole();<br/>                }"
        },
        {
          "total_lines": 14,
          "line_start": 1060,
          "line_end": 1073,
          "content": "if (!table.isTemp()) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            read();<br/>            readThis(Tokens.COMMIT);<br/><br/>            if (token.tokenType == Tokens.DELETE) {}<br/>            else if (token.tokenType == Tokens.PRESERVE) {<br/>                table.persistenceScope = TableBase.SCOPE_SESSION;<br/>            }<br/><br/>            read();<br/>            readThis(Tokens.ROWS);"
        },
        {
          "total_lines": 14,
          "line_start": 1226,
          "line_end": 1239,
          "content": "if (!table.isTemp()) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            read();<br/>            readThis(Tokens.COMMIT);<br/><br/>            if (token.tokenType == Tokens.DELETE) {}<br/>            else if (token.tokenType == Tokens.PRESERVE) {<br/>                table.persistenceScope = TableBase.SCOPE_SESSION;<br/>            }<br/><br/>            read();<br/>            readThis(Tokens.ROWS);"
        },
        {
          "total_lines": 12,
          "line_start": 1707,
          "line_end": 1718,
          "content": "int position = getPosition();<br/><br/>            read();<br/><br/>            if (token.tokenType == Tokens.NOT) {<br/>                read();<br/>                readThis(Tokens.EXISTS);<br/><br/>                ifNot = true;<br/>            } else {<br/>                rewind(position);<br/>            }"
        },
        {
          "total_lines": 12,
          "line_start": 917,
          "line_end": 928,
          "content": "int position = getPosition();<br/><br/>            read();<br/><br/>            if (token.tokenType == Tokens.NOT) {<br/>                read();<br/>                readThis(Tokens.EXISTS);<br/><br/>                ifNot = true;<br/>            } else {<br/>                rewind(position);<br/>            }"
        },
        {
          "total_lines": 11,
          "line_start": 1226,
          "line_end": 1236,
          "content": "if (!table.isTemp()) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            read();<br/>            readThis(Tokens.COMMIT);<br/><br/>            if (token.tokenType == Tokens.DELETE) {}<br/>            else if (token.tokenType == Tokens.PRESERVE) {<br/>                table.persistenceScope = TableBase.SCOPE_SESSION;<br/>            }"
        },
        {
          "total_lines": 11,
          "line_start": 1060,
          "line_end": 1070,
          "content": "if (!table.isTemp()) {<br/>                throw unexpectedToken();<br/>            }<br/><br/>            read();<br/>            readThis(Tokens.COMMIT);<br/><br/>            if (token.tokenType == Tokens.DELETE) {}<br/>            else if (token.tokenType == Tokens.PRESERVE) {<br/>                table.persistenceScope = TableBase.SCOPE_SESSION;<br/>            }"
        },
        {
          "total_lines": 10,
          "line_start": 1230,
          "line_end": 1239,
          "content": "read();<br/>            readThis(Tokens.COMMIT);<br/><br/>            if (token.tokenType == Tokens.DELETE) {}<br/>            else if (token.tokenType == Tokens.PRESERVE) {<br/>                table.persistenceScope = TableBase.SCOPE_SESSION;<br/>            }<br/><br/>            read();<br/>            readThis(Tokens.ROWS);"
        },
        {
          "total_lines": 10,
          "line_start": 919,
          "line_end": 928,
          "content": "read();<br/><br/>            if (token.tokenType == Tokens.NOT) {<br/>                read();<br/>                readThis(Tokens.EXISTS);<br/><br/>                ifNot = true;<br/>            } else {<br/>                rewind(position);<br/>            }"
        },
        {
          "total_lines": 10,
          "line_start": 1064,
          "line_end": 1073,
          "content": "read();<br/>            readThis(Tokens.COMMIT);<br/><br/>            if (token.tokenType == Tokens.DELETE) {}<br/>            else if (token.tokenType == Tokens.PRESERVE) {<br/>                table.persistenceScope = TableBase.SCOPE_SESSION;<br/>            }<br/><br/>            read();<br/>            readThis(Tokens.ROWS);"
        },
        {
          "total_lines": 10,
          "line_start": 1709,
          "line_end": 1718,
          "content": "read();<br/><br/>            if (token.tokenType == Tokens.NOT) {<br/>                read();<br/>                readThis(Tokens.EXISTS);<br/><br/>                ifNot = true;<br/>            } else {<br/>                rewind(position);<br/>            }"
        },
        {
          "total_lines": 9,
          "line_start": 1065,
          "line_end": 1073,
          "content": "readThis(Tokens.COMMIT);<br/><br/>            if (token.tokenType == Tokens.DELETE) {}<br/>            else if (token.tokenType == Tokens.PRESERVE) {<br/>                table.persistenceScope = TableBase.SCOPE_SESSION;<br/>            }<br/><br/>            read();<br/>            readThis(Tokens.ROWS);"
        },
        {
          "total_lines": 9,
          "line_start": 2504,
          "line_end": 2512,
          "content": "read();<br/><br/>                            isIdentity   = true;<br/>                            isPKIdentity = true;<br/>                            typeObject   = Type.SQL_BIGINT;<br/>                            sequence = new NumberSequence(null, 1, 1,<br/>                                                          typeObject);<br/><br/>                            break;"
        },
        {
          "total_lines": 9,
          "line_start": 1231,
          "line_end": 1239,
          "content": "readThis(Tokens.COMMIT);<br/><br/>            if (token.tokenType == Tokens.DELETE) {}<br/>            else if (token.tokenType == Tokens.PRESERVE) {<br/>                table.persistenceScope = TableBase.SCOPE_SESSION;<br/>            }<br/><br/>            read();<br/>            readThis(Tokens.ROWS);"
        },
        {
          "total_lines": 9,
          "line_start": 2483,
          "line_end": 2491,
          "content": "read();<br/><br/>                            isIdentity   = true;<br/>                            isPKIdentity = true;<br/>                            typeObject   = Type.SQL_BIGINT;<br/>                            sequence = new NumberSequence(null, 1, 1,<br/>                                                          typeObject);<br/><br/>                            break;"
        },
        {
          "total_lines": 9,
          "line_start": 4821,
          "line_end": 4829,
          "content": "checkIsSimpleName();<br/>            granteeList.add(token.tokenString);<br/>            read();<br/><br/>            if (token.tokenType == Tokens.COMMA) {<br/>                read();<br/>            } else {<br/>                break;<br/>            }"
        },
        {
          "total_lines": 9,
          "line_start": 4922,
          "line_end": 4930,
          "content": "checkIsSimpleName();<br/>            granteeList.add(token.tokenString);<br/>            read();<br/><br/>            if (token.tokenType == Tokens.COMMA) {<br/>                read();<br/>            } else {<br/>                break;<br/>            }"
        },
        {
          "total_lines": 8,
          "line_start": 388,
          "line_end": 395,
          "content": "case Tokens.ROUTINE :<br/>                    case Tokens.PROCEDURE :<br/>                    case Tokens.FUNCTION :<br/>                        read();<br/>                        break;<br/><br/>                    default :<br/>                        throw unexpectedToken();"
        },
        {
          "total_lines": 8,
          "line_start": 4716,
          "line_end": 4723,
          "content": "case Tokens.ROUTINE :<br/>                    case Tokens.PROCEDURE :<br/>                    case Tokens.FUNCTION :<br/>                        read();<br/>                        break;<br/><br/>                    default :<br/>                        throw unexpectedToken();"
        },
        {
          "total_lines": 7,
          "line_start": 389,
          "line_end": 395,
          "content": "case Tokens.PROCEDURE :<br/>                    case Tokens.FUNCTION :<br/>                        read();<br/>                        break;<br/><br/>                    default :<br/>                        throw unexpectedToken();"
        },
        {
          "total_lines": 7,
          "line_start": 4924,
          "line_end": 4930,
          "content": "read();<br/><br/>            if (token.tokenType == Tokens.COMMA) {<br/>                read();<br/>            } else {<br/>                break;<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 4223,
          "line_end": 4229,
          "content": "if (!set.add(token.tokenType)) {<br/>                                throw unexpectedToken();<br/>                            }<br/><br/>                            read();<br/><br/>                            long value = readBigint();"
        },
        {
          "total_lines": 7,
          "line_start": 4823,
          "line_end": 4829,
          "content": "read();<br/><br/>            if (token.tokenType == Tokens.COMMA) {<br/>                read();<br/>            } else {<br/>                break;<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 4717,
          "line_end": 4723,
          "content": "case Tokens.PROCEDURE :<br/>                    case Tokens.FUNCTION :<br/>                        read();<br/>                        break;<br/><br/>                    default :<br/>                        throw unexpectedToken();"
        },
        {
          "total_lines": 7,
          "line_start": 4236,
          "line_end": 4242,
          "content": "if (!set.add(token.tokenType)) {<br/>                                throw unexpectedToken();<br/>                            }<br/><br/>                            read();<br/><br/>                            long value = readBigint();"
        },
        {
          "total_lines": 6,
          "line_start": 105,
          "line_end": 110,
          "content": "read();<br/>                readThis(Tokens.TABLE);<br/><br/>                isTable   = true;<br/>                tableType = TableBase.TEMP_TABLE;<br/>                break;"
        },
        {
          "total_lines": 6,
          "line_start": 4718,
          "line_end": 4723,
          "content": "case Tokens.FUNCTION :<br/>                        read();<br/>                        break;<br/><br/>                    default :<br/>                        throw unexpectedToken();"
        },
        {
          "total_lines": 6,
          "line_start": 2206,
          "line_end": 2211,
          "content": "HsqlName hsqlName = database.nameManager.newHsqlName(<br/>                            table.getSchemaName(), n, isDelimitedIdentifier(),<br/>                            SchemaObject.TRANSITION);<br/>                        Table transition = new Table(table, hsqlName);<br/>                        RangeVariable range = new RangeVariable(transition,<br/>                            null, null, null, compileContext);"
        },
        {
          "total_lines": 6,
          "line_start": 113,
          "line_end": 118,
          "content": "read();<br/>                readThis(Tokens.TABLE);<br/><br/>                isTable   = true;<br/>                tableType = TableBase.TEMP_TABLE;<br/>                break;"
        },
        {
          "total_lines": 6,
          "line_start": 2133,
          "line_end": 2138,
          "content": "HsqlName hsqlName = database.nameManager.newHsqlName(<br/>                            table.getSchemaName(), n, isDelimitedIdentifier(),<br/>                            SchemaObject.TRANSITION);<br/>                        Table transition = new Table(table, hsqlName);<br/>                        RangeVariable range = new RangeVariable(transition,<br/>                            null, null, null, compileContext);"
        },
        {
          "total_lines": 6,
          "line_start": 390,
          "line_end": 395,
          "content": "case Tokens.FUNCTION :<br/>                        read();<br/>                        break;<br/><br/>                    default :<br/>                        throw unexpectedToken();"
        },
        {
          "total_lines": 5,
          "line_start": 4716,
          "line_end": 4720,
          "content": "case Tokens.ROUTINE :<br/>                    case Tokens.PROCEDURE :<br/>                    case Tokens.FUNCTION :<br/>                        read();<br/>                        break;"
        },
        {
          "total_lines": 5,
          "line_start": 2664,
          "line_end": 2668,
          "content": "read();<br/><br/>            isIdentity   = true;<br/>            isPKIdentity = true;<br/>            sequence     = new NumberSequence(null, 0, 1, typeObject);"
        },
        {
          "total_lines": 5,
          "line_start": 4741,
          "line_end": 4745,
          "content": "if (!isExec && !isAll) {<br/>                    throw unexpectedToken();<br/>                }<br/><br/>                read();"
        },
        {
          "total_lines": 5,
          "line_start": 2487,
          "line_end": 2491,
          "content": "typeObject   = Type.SQL_BIGINT;<br/>                            sequence = new NumberSequence(null, 1, 1,<br/>                                                          typeObject);<br/><br/>                            break;"
        },
        {
          "total_lines": 5,
          "line_start": 98,
          "line_end": 102,
          "content": "readThis(Tokens.TABLE);<br/><br/>                isTable   = true;<br/>                tableType = TableBase.TEMP_TABLE;<br/>                break;"
        },
        {
          "total_lines": 5,
          "line_start": 4249,
          "line_end": 4253,
          "content": "if (!set.add(token.tokenType)) {<br/>                                throw unexpectedToken();<br/>                            }<br/><br/>                            read();"
        },
        {
          "total_lines": 5,
          "line_start": 3483,
          "line_end": 3487,
          "content": "statementType = StatementTypes.CREATE_ROUTINE;<br/>                            sql = getStatementForRoutine(<br/>                                position, startStatementTokensSchema);<br/>                            cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 5,
          "line_start": 4215,
          "line_end": 4219,
          "content": "if (!set.add(token.tokenType)) {<br/>                                throw unexpectedToken();<br/>                            }<br/><br/>                            read();"
        },
        {
          "total_lines": 5,
          "line_start": 4654,
          "line_end": 4658,
          "content": "if (isTable) {<br/>                            throw unexpectedToken();<br/>                        }<br/><br/>                        right   = Right.fullRights;"
        },
        {
          "total_lines": 5,
          "line_start": 4731,
          "line_end": 4735,
          "content": "if (!isExec && !isAll) {<br/>                    throw unexpectedToken();<br/>                }<br/><br/>                read();"
        },
        {
          "total_lines": 5,
          "line_start": 4751,
          "line_end": 4755,
          "content": "if (!isExec && !isAll) {<br/>                    throw unexpectedToken();<br/>                }<br/><br/>                read();"
        },
        {
          "total_lines": 5,
          "line_start": 388,
          "line_end": 392,
          "content": "case Tokens.ROUTINE :<br/>                    case Tokens.PROCEDURE :<br/>                    case Tokens.FUNCTION :<br/>                        read();<br/>                        break;"
        },
        {
          "total_lines": 5,
          "line_start": 2508,
          "line_end": 2512,
          "content": "typeObject   = Type.SQL_BIGINT;<br/>                            sequence = new NumberSequence(null, 1, 1,<br/>                                                          typeObject);<br/><br/>                            break;"
        },
        {
          "total_lines": 5,
          "line_start": 4791,
          "line_end": 4795,
          "content": "if (!isUsage && !isAll) {<br/>                    throw unexpectedToken();<br/>                }<br/><br/>                read();"
        },
        {
          "total_lines": 5,
          "line_start": 4761,
          "line_end": 4765,
          "content": "if (!isUsage && !isAll) {<br/>                    throw unexpectedToken();<br/>                }<br/><br/>                read();"
        },
        {
          "total_lines": 5,
          "line_start": 4771,
          "line_end": 4775,
          "content": "if (!isUsage && !isAll) {<br/>                    throw unexpectedToken();<br/>                }<br/><br/>                read();"
        },
        {
          "total_lines": 5,
          "line_start": 2627,
          "line_end": 2631,
          "content": "read();<br/><br/>                    isIdentity   = true;<br/>                    isPKIdentity = true;<br/>                    sequence     = new NumberSequence(null, 0, 1, typeObject);"
        },
        {
          "total_lines": 5,
          "line_start": 3490,
          "line_end": 3494,
          "content": "statementType = StatementTypes.CREATE_ROUTINE;<br/>                            sql = getStatementForRoutine(<br/>                                position, startStatementTokensSchema);<br/>                            cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 5,
          "line_start": 1356,
          "line_end": 1360,
          "content": "ColumnSchema column =<br/>                            table.getColumn(c.notNullColumnIndex);<br/><br/>                        column.setNullable(false);<br/>                        table.setColumnTypeVars(c.notNullColumnIndex);"
        },
        {
          "total_lines": 5,
          "line_start": 4664,
          "line_end": 4668,
          "content": "if (isTable) {<br/>                            throw unexpectedToken();<br/>                        }<br/><br/>                        right  = Right.fullRights;"
        },
        {
          "total_lines": 5,
          "line_start": 4692,
          "line_end": 4696,
          "content": "if (!isExec && !isAll) {<br/>                    throw unexpectedToken();<br/>                }<br/><br/>                read();"
        },
        {
          "total_lines": 5,
          "line_start": 4781,
          "line_end": 4785,
          "content": "if (!isUsage && !isAll) {<br/>                    throw unexpectedToken();<br/>                }<br/><br/>                read();"
        },
        {
          "total_lines": 4,
          "line_start": 136,
          "line_end": 139,
          "content": "read();<br/>                readThis(Tokens.TABLE);<br/><br/>                isTable   = true;"
        },
        {
          "total_lines": 4,
          "line_start": 2841,
          "line_end": 2844,
          "content": "set.add(token.tokenType);<br/>                    read();<br/><br/>                    long value = readBigint();"
        },
        {
          "total_lines": 4,
          "line_start": 1573,
          "line_end": 1576,
          "content": "break;<br/><br/>                        default :<br/>                            throw unexpectedToken();"
        },
        {
          "total_lines": 4,
          "line_start": 3437,
          "line_end": 3440,
          "content": "sql = getStatement(position,<br/>                                               startStatementTokensSchema);<br/>                            cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 4,
          "line_start": 113,
          "line_end": 116,
          "content": "read();<br/>                readThis(Tokens.TABLE);<br/><br/>                isTable   = true;"
        },
        {
          "total_lines": 4,
          "line_start": 410,
          "line_end": 413,
          "content": "canCascade    = true;<br/>                useIfExists   = true;<br/><br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 468,
          "line_end": 471,
          "content": "objectType    = SchemaObject.GRANTEE;<br/>                canCascade    = true;<br/><br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 3463,
          "line_end": 3466,
          "content": "sql = getStatement(position,<br/>                                               startStatementTokensSchema);<br/>                            cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 4,
          "line_start": 3420,
          "line_end": 3423,
          "content": "sql = getStatement(position,<br/>                                               startStatementTokensSchema);<br/>                            cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 4,
          "line_start": 3484,
          "line_end": 3487,
          "content": "sql = getStatementForRoutine(<br/>                                position, startStatementTokensSchema);<br/>                            cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 4,
          "line_start": 589,
          "line_end": 592,
          "content": "read();<br/>                        readThis(Tokens.EXISTS);<br/><br/>                        ifExists = true;"
        },
        {
          "total_lines": 4,
          "line_start": 105,
          "line_end": 108,
          "content": "read();<br/>                readThis(Tokens.TABLE);<br/><br/>                isTable   = true;"
        },
        {
          "total_lines": 4,
          "line_start": 121,
          "line_end": 124,
          "content": "read();<br/>                readThis(Tokens.TABLE);<br/><br/>                isTable = true;"
        },
        {
          "total_lines": 4,
          "line_start": 3491,
          "line_end": 3494,
          "content": "sql = getStatementForRoutine(<br/>                                position, startStatementTokensSchema);<br/>                            cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 4,
          "line_start": 615,
          "line_end": 618,
          "content": "read();<br/>            readThis(Tokens.EXISTS);<br/><br/>            ifExists = true;"
        },
        {
          "total_lines": 4,
          "line_start": 128,
          "line_end": 131,
          "content": "read();<br/>                readThis(Tokens.TABLE);<br/><br/>                isTable   = true;"
        },
        {
          "total_lines": 4,
          "line_start": 440,
          "line_end": 443,
          "content": "canCascade    = true;<br/>                useIfExists   = true;<br/><br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 2851,
          "line_end": 2854,
          "content": "set.add(token.tokenType);<br/>                    read();<br/><br/>                    long value = readBigint();"
        },
        {
          "total_lines": 4,
          "line_start": 1537,
          "line_end": 1540,
          "content": "break;<br/><br/>                        default :<br/>                            throw unexpectedToken();"
        },
        {
          "total_lines": 4,
          "line_start": 459,
          "line_end": 462,
          "content": "objectType    = SchemaObject.GRANTEE;<br/>                canCascade    = true;<br/><br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 3470,
          "line_end": 3473,
          "content": "sql = getStatement(position,<br/>                                               startStatementTokensSchema);<br/>                            cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 4,
          "line_start": 3477,
          "line_end": 3480,
          "content": "sql = getStatement(position,<br/>                                               startStatementTokensSchema);<br/>                            cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 4,
          "line_start": 2133,
          "line_end": 2136,
          "content": "HsqlName hsqlName = database.nameManager.newHsqlName(<br/>                            table.getSchemaName(), n, isDelimitedIdentifier(),<br/>                            SchemaObject.TRANSITION);<br/>                        Table transition = new Table(table, hsqlName);"
        },
        {
          "total_lines": 4,
          "line_start": 2206,
          "line_end": 2209,
          "content": "HsqlName hsqlName = database.nameManager.newHsqlName(<br/>                            table.getSchemaName(), n, isDelimitedIdentifier(),<br/>                            SchemaObject.TRANSITION);<br/>                        Table transition = new Table(table, hsqlName);"
        },
        {
          "total_lines": 3,
          "line_start": 2148,
          "line_end": 2150,
          "content": "readIfThis(Tokens.ROW);<br/>                        readIfThis(Tokens.AS);<br/>                        checkIsSimpleName();"
        },
        {
          "total_lines": 3,
          "line_start": 4135,
          "line_end": 4137,
          "content": "readThis(Tokens.ALWAYS);<br/><br/>            generatedAlways = true;"
        },
        {
          "total_lines": 3,
          "line_start": 388,
          "line_end": 390,
          "content": "case Tokens.ROUTINE :<br/>                    case Tokens.PROCEDURE :<br/>                    case Tokens.FUNCTION :"
        },
        {
          "total_lines": 3,
          "line_start": 2852,
          "line_end": 2854,
          "content": "read();<br/><br/>                    long value = readBigint();"
        },
        {
          "total_lines": 3,
          "line_start": 917,
          "line_end": 919,
          "content": "int position = getPosition();<br/><br/>            read();"
        },
        {
          "total_lines": 3,
          "line_start": 3858,
          "line_end": 3860,
          "content": "sql,<br/>                                               StatementTypes.ALTER_TABLE,<br/>                                               args"
        },
        {
          "total_lines": 3,
          "line_start": 2964,
          "line_end": 2966,
          "content": "\"CT\",<br/>                            schemaObject.getSchemaName(),<br/>                            schemaObject.getName()"
        },
        {
          "total_lines": 3,
          "line_start": 3087,
          "line_end": 3089,
          "content": "\"CT\",<br/>                                table.getSchemaName(), table.getName(),<br/>                                SchemaObject.CONSTRAINT"
        },
        {
          "total_lines": 3,
          "line_start": 3651,
          "line_end": 3653,
          "content": "\"IDX\",<br/>            name.name, table.getSchemaName(), table.getName(),<br/>            SchemaObject.INDEX"
        },
        {
          "total_lines": 3,
          "line_start": 2020,
          "line_end": 2022,
          "content": "operationType = TriggerDef.getOperationType(token.tokenType);<br/><br/>                read();"
        },
        {
          "total_lines": 3,
          "line_start": 2710,
          "line_end": 2712,
          "content": "\"PK\",<br/>                table.getSchemaName(), table.getName(),<br/>                SchemaObject.CONSTRAINT"
        },
        {
          "total_lines": 3,
          "line_start": 1707,
          "line_end": 1709,
          "content": "int position = getPosition();<br/><br/>            read();"
        },
        {
          "total_lines": 3,
          "line_start": 1318,
          "line_end": 1320,
          "content": "\"IDX\",<br/>                            c.getName().name, table.getSchemaName(),<br/>                            table.getName()"
        },
        {
          "total_lines": 3,
          "line_start": 3063,
          "line_end": 3065,
          "content": "\"PK\",<br/>                                table.getSchemaName(), table.getName(),<br/>                                SchemaObject.CONSTRAINT"
        },
        {
          "total_lines": 3,
          "line_start": 506,
          "line_end": 508,
          "content": "canCascade    = false;<br/>                useIfExists   = true;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 3624,
          "line_end": 3626,
          "content": "break;<br/><br/>            default :"
        },
        {
          "total_lines": 3,
          "line_start": 2136,
          "line_end": 2138,
          "content": "Table transition = new Table(table, hsqlName);<br/>                        RangeVariable range = new RangeVariable(transition,<br/>                            null, null, null, compileContext);"
        },
        {
          "total_lines": 3,
          "line_start": 616,
          "line_end": 618,
          "content": "readThis(Tokens.EXISTS);<br/><br/>            ifExists = true;"
        },
        {
          "total_lines": 3,
          "line_start": 2629,
          "line_end": 2631,
          "content": "isIdentity   = true;<br/>                    isPKIdentity = true;<br/>                    sequence     = new NumberSequence(null, 0, 1, typeObject);"
        },
        {
          "total_lines": 3,
          "line_start": 2117,
          "line_end": 2119,
          "content": "read();<br/>                        readIfThis(Tokens.AS);<br/>                        checkIsSimpleName();"
        },
        {
          "total_lines": 3,
          "line_start": 524,
          "line_end": 526,
          "content": "canCascade    = true;<br/>                useIfExists   = true;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 2693,
          "line_end": 2695,
          "content": "read();<br/>                readSequenceOptions(sequence, false, false, true);<br/>                readThis(Tokens.CLOSEBRACKET);"
        },
        {
          "total_lines": 3,
          "line_start": 4520,
          "line_end": 4522,
          "content": "sql,<br/>                                               StatementTypes.ALTER_DOMAIN,<br/>                                               args, null, writeLockNames"
        },
        {
          "total_lines": 3,
          "line_start": 3783,
          "line_end": 3785,
          "content": "\"PK\",<br/>                    table.getSchemaName(), table.getName(),<br/>                    SchemaObject.CONSTRAINT"
        },
        {
          "total_lines": 3,
          "line_start": 1887,
          "line_end": 1889,
          "content": "readThis(Tokens.PAD);<br/><br/>            padSpace = Boolean.FALSE;"
        },
        {
          "total_lines": 3,
          "line_start": 724,
          "line_end": 726,
          "content": "checkIsSimpleName();<br/><br/>                        return compileAlterTableAddColumn(t);"
        },
        {
          "total_lines": 3,
          "line_start": 2627,
          "line_end": 2629,
          "content": "read();<br/><br/>                    isIdentity   = true;"
        },
        {
          "total_lines": 3,
          "line_start": 1494,
          "line_end": 1496,
          "content": "break;<br/><br/>                default :"
        },
        {
          "total_lines": 3,
          "line_start": 2680,
          "line_end": 2682,
          "content": "readThis(Tokens.ALWAYS);<br/><br/>                generatedAlways = true;"
        },
        {
          "total_lines": 3,
          "line_start": 2483,
          "line_end": 2485,
          "content": "read();<br/><br/>                            isIdentity   = true;"
        },
        {
          "total_lines": 3,
          "line_start": 2666,
          "line_end": 2668,
          "content": "isIdentity   = true;<br/>            isPKIdentity = true;<br/>            sequence     = new NumberSequence(null, 0, 1, typeObject);"
        },
        {
          "total_lines": 3,
          "line_start": 4174,
          "line_end": 4176,
          "content": "long value = readBigint();<br/><br/>                        sequence.setCurrentValueNoCheck(value);"
        },
        {
          "total_lines": 3,
          "line_start": 3645,
          "line_end": 3647,
          "content": "\"CT\",<br/>                    table.getSchemaName(), table.getName(),<br/>                    SchemaObject.CONSTRAINT"
        },
        {
          "total_lines": 3,
          "line_start": 3900,
          "line_end": 3902,
          "content": "sql,<br/>                                                   StatementTypes.ALTER_TABLE,<br/>                                                   args"
        },
        {
          "total_lines": 3,
          "line_start": 4670,
          "line_end": 4672,
          "content": "loop   = false;<br/><br/>                        continue;"
        },
        {
          "total_lines": 3,
          "line_start": 2997,
          "line_end": 2999,
          "content": "\"CT\",<br/>                            schemaObject.getSchemaName(),<br/>                            schemaObject.getName()"
        },
        {
          "total_lines": 3,
          "line_start": 497,
          "line_end": 499,
          "content": "canCascade    = false;<br/>                useIfExists   = true;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 2798,
          "line_end": 2800,
          "content": "long value = readBigint();<br/><br/>                        sequence.setCurrentValueNoCheck(value);"
        },
        {
          "total_lines": 3,
          "line_start": 460,
          "line_end": 462,
          "content": "canCascade    = true;<br/><br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 4716,
          "line_end": 4718,
          "content": "case Tokens.ROUTINE :<br/>                    case Tokens.PROCEDURE :<br/>                    case Tokens.FUNCTION :"
        },
        {
          "total_lines": 3,
          "line_start": 3870,
          "line_end": 3872,
          "content": "sql,<br/>                                               StatementTypes.ALTER_TABLE,<br/>                                               args"
        },
        {
          "total_lines": 3,
          "line_start": 2221,
          "line_end": 2223,
          "content": "readIfThis(Tokens.ROW);<br/>                        readIfThis(Tokens.AS);<br/>                        checkIsSimpleName();"
        },
        {
          "total_lines": 3,
          "line_start": 715,
          "line_end": 717,
          "content": "checkIsSimpleName();<br/><br/>                        return compileAlterTableAddColumn(t);"
        },
        {
          "total_lines": 3,
          "line_start": 2014,
          "line_end": 2016,
          "content": "operationType = TriggerDef.getOperationType(token.tokenType);<br/><br/>                read();"
        },
        {
          "total_lines": 3,
          "line_start": 590,
          "line_end": 592,
          "content": "readThis(Tokens.EXISTS);<br/><br/>                        ifExists = true;"
        },
        {
          "total_lines": 3,
          "line_start": 1779,
          "line_end": 1781,
          "content": "break;<br/><br/>                default :"
        },
        {
          "total_lines": 3,
          "line_start": 3121,
          "line_end": 3123,
          "content": "\"CT\",<br/>                                table.getSchemaName(), table.getName(),<br/>                                SchemaObject.CONSTRAINT"
        },
        {
          "total_lines": 3,
          "line_start": 100,
          "line_end": 102,
          "content": "isTable   = true;<br/>                tableType = TableBase.TEMP_TABLE;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 853,
          "line_end": 855,
          "content": "sql,<br/>                                           StatementTypes.DROP_CONSTRAINT,<br/>                                           args, null, writeLockNames"
        },
        {
          "total_lines": 3,
          "line_start": 3161,
          "line_end": 3163,
          "content": "\"CT\",<br/>                                table.getSchemaName(), table.getName(),<br/>                                SchemaObject.CONSTRAINT"
        },
        {
          "total_lines": 3,
          "line_start": 2664,
          "line_end": 2666,
          "content": "read();<br/><br/>            isIdentity   = true;"
        },
        {
          "total_lines": 3,
          "line_start": 3715,
          "line_end": 3717,
          "content": "\"CT\",<br/>                    table.getSchemaName(), table.getName(),<br/>                    SchemaObject.CONSTRAINT"
        },
        {
          "total_lines": 3,
          "line_start": 4660,
          "line_end": 4662,
          "content": "loop    = false;<br/><br/>                        continue;"
        },
        {
          "total_lines": 3,
          "line_start": 487,
          "line_end": 489,
          "content": "canCascade    = true;<br/>                useIfExists   = true;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 469,
          "line_end": 471,
          "content": "canCascade    = true;<br/><br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 1429,
          "line_end": 1431,
          "content": "\"REF\",<br/>            c.getName().name, table.getSchemaName(), table.getName(),<br/>            SchemaObject.INDEX"
        },
        {
          "total_lines": 3,
          "line_start": 2842,
          "line_end": 2844,
          "content": "read();<br/><br/>                    long value = readBigint();"
        },
        {
          "total_lines": 3,
          "line_start": 4454,
          "line_end": 4456,
          "content": "sql,<br/>                                               StatementTypes.ALTER_DOMAIN,<br/>                                               args, null, writeLockNames"
        },
        {
          "total_lines": 3,
          "line_start": 4475,
          "line_end": 4477,
          "content": "sql,<br/>                                               StatementTypes.ALTER_DOMAIN,<br/>                                               args, null, writeLockNames"
        },
        {
          "total_lines": 3,
          "line_start": 478,
          "line_end": 480,
          "content": "canCascade    = true;<br/>                useIfExists   = true;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 515,
          "line_end": 517,
          "content": "canCascade    = true;<br/>                useIfExists   = true;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 2504,
          "line_end": 2506,
          "content": "read();<br/><br/>                            isIdentity   = true;"
        },
        {
          "total_lines": 3,
          "line_start": 2574,
          "line_end": 2576,
          "content": "readThis(Tokens.ALWAYS);<br/><br/>                        generatedAlways = true;"
        },
        {
          "total_lines": 3,
          "line_start": 411,
          "line_end": 413,
          "content": "useIfExists   = true;<br/><br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 2589,
          "line_end": 2591,
          "content": "read();<br/>                            readSequenceOptions(sequence, false, false, true);<br/>                            readThis(Tokens.CLOSEBRACKET);"
        },
        {
          "total_lines": 3,
          "line_start": 1891,
          "line_end": 1893,
          "content": "readThis(Tokens.SPACE);<br/><br/>            padSpace = Boolean.TRUE;"
        },
        {
          "total_lines": 3,
          "line_start": 5111,
          "line_end": 5113,
          "content": "break;<br/><br/>                default :"
        },
        {
          "total_lines": 3,
          "line_start": 2209,
          "line_end": 2211,
          "content": "Table transition = new Table(table, hsqlName);<br/>                        RangeVariable range = new RangeVariable(transition,<br/>                            null, null, null, compileContext);"
        },
        {
          "total_lines": 3,
          "line_start": 2189,
          "line_end": 2191,
          "content": "read();<br/>                        readIfThis(Tokens.AS);<br/>                        checkIsSimpleName();"
        },
        {
          "total_lines": 3,
          "line_start": 821,
          "line_end": 823,
          "content": "sql,<br/>                                           StatementTypes.DROP_CONSTRAINT,<br/>                                           args, null, writeLockNames"
        },
        {
          "total_lines": 3,
          "line_start": 441,
          "line_end": 443,
          "content": "useIfExists   = true;<br/><br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1429,
          "line_end": 1430,
          "content": "\"REF\",<br/>            c.getName().name, table.getSchemaName()"
        },
        {
          "total_lines": 2,
          "line_start": 1319,
          "line_end": 1320,
          "content": "c.getName().name, table.getSchemaName(),<br/>                            table.getName()"
        },
        {
          "total_lines": 2,
          "line_start": 3803,
          "line_end": 3804,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 507,
          "line_end": 508,
          "content": "useIfExists   = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1585,
          "line_end": 1586,
          "content": "readThis(Tokens.NO);<br/>                    readThis(Tokens.ACTION);"
        },
        {
          "total_lines": 2,
          "line_start": 4650,
          "line_end": 4651,
          "content": "isTable = true;<br/>                        break;"
        },
        {
          "total_lines": 2,
          "line_start": 3830,
          "line_end": 3831,
          "content": "Table table, ColumnSchema column,<br/>                                 int columnIndex"
        },
        {
          "total_lines": 2,
          "line_start": 4014,
          "line_end": 4015,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 1030,
          "line_end": 1031,
          "content": "table.getName(),<br/>                            token.tokenString, isDelimitedIdentifier()"
        },
        {
          "total_lines": 2,
          "line_start": 3472,
          "line_end": 3473,
          "content": "cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 3167,
          "line_end": 3168,
          "content": "constName, null,<br/>                                       SchemaObject.ConstraintTypes.CHECK"
        },
        {
          "total_lines": 2,
          "line_start": 1318,
          "line_end": 1319,
          "content": "\"IDX\",<br/>                            c.getName().name, table.getSchemaName()"
        },
        {
          "total_lines": 2,
          "line_start": 5142,
          "line_end": 5143,
          "content": "read();<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 391,
          "line_end": 392,
          "content": "read();<br/>                        break;"
        },
        {
          "total_lines": 2,
          "line_start": 615,
          "line_end": 616,
          "content": "read();<br/>            readThis(Tokens.EXISTS);"
        },
        {
          "total_lines": 2,
          "line_start": 479,
          "line_end": 480,
          "content": "useIfExists   = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 101,
          "line_end": 102,
          "content": "tableType = TableBase.TEMP_TABLE;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1804,
          "line_end": 1805,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 4495,
          "line_end": 4496,
          "content": "sql, StatementTypes.ALTER_DOMAIN,<br/>                                           args, null, writeLockNames"
        },
        {
          "total_lines": 2,
          "line_start": 515,
          "line_end": 516,
          "content": "canCascade    = true;<br/>                useIfExists   = true;"
        },
        {
          "total_lines": 2,
          "line_start": 3439,
          "line_end": 3440,
          "content": "cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 3513,
          "line_end": 3514,
          "content": "end = true;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 440,
          "line_end": 441,
          "content": "canCascade    = true;<br/>                useIfExists   = true;"
        },
        {
          "total_lines": 2,
          "line_start": 3127,
          "line_end": 3128,
          "content": "constName, null,<br/>                                       SchemaObject.ConstraintTypes.CHECK"
        },
        {
          "total_lines": 2,
          "line_start": 610,
          "line_end": 611,
          "content": "name.name,<br/>                        name.schema.name, name.type"
        },
        {
          "total_lines": 2,
          "line_start": 853,
          "line_end": 854,
          "content": "sql,<br/>                                           StatementTypes.DROP_CONSTRAINT"
        },
        {
          "total_lines": 2,
          "line_start": 3493,
          "line_end": 3494,
          "content": "cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 3093,
          "line_end": 3094,
          "content": "constName, set,<br/>                                       SchemaObject.ConstraintTypes.UNIQUE"
        },
        {
          "total_lines": 2,
          "line_start": 3732,
          "line_end": 3733,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 1430,
          "line_end": 1431,
          "content": "c.getName().name, table.getSchemaName(), table.getName(),<br/>            SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 516,
          "line_end": 517,
          "content": "useIfExists   = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1425,
          "line_end": 1426,
          "content": "\"IDX\",<br/>            table.getSchemaName(), table.getName()"
        },
        {
          "total_lines": 2,
          "line_start": 478,
          "line_end": 479,
          "content": "canCascade    = true;<br/>                useIfExists   = true;"
        },
        {
          "total_lines": 2,
          "line_start": 4056,
          "line_end": 4057,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 3675,
          "line_end": 3676,
          "content": "table.getName(),<br/>                    SchemaObject.CONSTRAINT"
        },
        {
          "total_lines": 2,
          "line_start": 1064,
          "line_end": 1065,
          "content": "read();<br/>            readThis(Tokens.COMMIT);"
        },
        {
          "total_lines": 2,
          "line_start": 687,
          "line_end": 688,
          "content": "read();<br/>                        readThis(Tokens.KEY);"
        },
        {
          "total_lines": 2,
          "line_start": 1072,
          "line_end": 1073,
          "content": "read();<br/>            readThis(Tokens.ROWS);"
        },
        {
          "total_lines": 2,
          "line_start": 1532,
          "line_end": 1533,
          "content": "case Tokens.NULL :<br/>                            read();"
        },
        {
          "total_lines": 2,
          "line_start": 2189,
          "line_end": 2190,
          "content": "read();<br/>                        readIfThis(Tokens.AS);"
        },
        {
          "total_lines": 2,
          "line_start": 854,
          "line_end": 855,
          "content": "StatementTypes.DROP_CONSTRAINT,<br/>                                           args, null, writeLockNames"
        },
        {
          "total_lines": 2,
          "line_start": 704,
          "line_end": 705,
          "content": "read();<br/>                        readThis(Tokens.KEY);"
        },
        {
          "total_lines": 2,
          "line_start": 4155,
          "line_end": 4156,
          "content": "Table table,<br/>            ColumnSchema column, int columnIndex"
        },
        {
          "total_lines": 2,
          "line_start": 1575,
          "line_end": 1576,
          "content": "default :<br/>                            throw unexpectedToken();"
        },
        {
          "total_lines": 2,
          "line_start": 3826,
          "line_end": 3827,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 821,
          "line_end": 822,
          "content": "sql,<br/>                                           StatementTypes.DROP_CONSTRAINT"
        },
        {
          "total_lines": 2,
          "line_start": 1359,
          "line_end": 1360,
          "content": "column.setNullable(false);<br/>                        table.setColumnTypeVars(c.notNullColumnIndex);"
        },
        {
          "total_lines": 2,
          "line_start": 3444,
          "line_end": 3445,
          "content": "cs.sql = getLastPart(position);<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 2148,
          "line_end": 2149,
          "content": "readIfThis(Tokens.ROW);<br/>                        readIfThis(Tokens.AS);"
        },
        {
          "total_lines": 2,
          "line_start": 3422,
          "line_end": 3423,
          "content": "cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 410,
          "line_end": 411,
          "content": "canCascade    = true;<br/>                useIfExists   = true;"
        },
        {
          "total_lines": 2,
          "line_start": 2221,
          "line_end": 2222,
          "content": "readIfThis(Tokens.ROW);<br/>                        readIfThis(Tokens.AS);"
        },
        {
          "total_lines": 2,
          "line_start": 1738,
          "line_end": 1739,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 2117,
          "line_end": 2118,
          "content": "read();<br/>                        readIfThis(Tokens.AS);"
        },
        {
          "total_lines": 2,
          "line_start": 847,
          "line_end": 848,
          "content": "object.getName(), ValuePool.getInt(SchemaObject.CONSTRAINT),<br/>            Boolean.valueOf(cascade)"
        },
        {
          "total_lines": 2,
          "line_start": 4041,
          "line_end": 4042,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 3747,
          "line_end": 3748,
          "content": "table.getName(),<br/>                token.tokenString, isDelimitedIdentifier()"
        },
        {
          "total_lines": 2,
          "line_start": 3866,
          "line_end": 3867,
          "content": "table,<br/>                        column"
        },
        {
          "total_lines": 2,
          "line_start": 3651,
          "line_end": 3652,
          "content": "\"IDX\",<br/>            name.name, table.getSchemaName(), table.getName()"
        },
        {
          "total_lines": 2,
          "line_start": 3637,
          "line_end": 3638,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 4945,
          "line_end": 4946,
          "content": "read();<br/>            readThis(Tokens.BY);"
        },
        {
          "total_lines": 2,
          "line_start": 3465,
          "line_end": 3466,
          "content": "cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 3069,
          "line_end": 3070,
          "content": "constName, set,<br/>                        SchemaObject.ConstraintTypes.PRIMARY_KEY"
        },
        {
          "total_lines": 2,
          "line_start": 487,
          "line_end": 488,
          "content": "canCascade    = true;<br/>                useIfExists   = true;"
        },
        {
          "total_lines": 2,
          "line_start": 4719,
          "line_end": 4720,
          "content": "read();<br/>                        break;"
        },
        {
          "total_lines": 2,
          "line_start": 589,
          "line_end": 590,
          "content": "read();<br/>                        readThis(Tokens.EXISTS);"
        },
        {
          "total_lines": 2,
          "line_start": 3683,
          "line_end": 3684,
          "content": "session,<br/>                mainTableName.name, mainTableName.schema.name"
        },
        {
          "total_lines": 2,
          "line_start": 2241,
          "line_end": 2242,
          "content": "false,<br/>                                              RangeVariable.TRANSITION_RANGE"
        },
        {
          "total_lines": 2,
          "line_start": 3706,
          "line_end": 3707,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 1102,
          "line_end": 1103,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 2168,
          "line_end": 2169,
          "content": "false,<br/>                                              RangeVariable.TRANSITION_RANGE"
        },
        {
          "total_lines": 2,
          "line_start": 3656,
          "line_end": 3657,
          "content": "index,<br/>                                      SchemaObject.ConstraintTypes.UNIQUE"
        },
        {
          "total_lines": 2,
          "line_start": 807,
          "line_end": 808,
          "content": "object.getName(), ValuePool.getInt(SchemaObject.CONSTRAINT),<br/>            Boolean.valueOf(cascade)"
        },
        {
          "total_lines": 2,
          "line_start": 1050,
          "line_end": 1051,
          "content": "start     = false;<br/>                    startPart = false;"
        },
        {
          "total_lines": 2,
          "line_start": 3575,
          "line_end": 3576,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 1568,
          "line_end": 1569,
          "content": "case Tokens.NULL :<br/>                            read();"
        },
        {
          "total_lines": 2,
          "line_start": 817,
          "line_end": 818,
          "content": "writeLockNames,<br/>                    mainTableName, writeLockNames.length, 1"
        },
        {
          "total_lines": 2,
          "line_start": 4843,
          "line_end": 4844,
          "content": "read();<br/>                readThis(Tokens.BY);"
        },
        {
          "total_lines": 2,
          "line_start": 4313,
          "line_end": 4314,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 5138,
          "line_end": 5139,
          "content": "read();<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 525,
          "line_end": 526,
          "content": "useIfExists   = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 4117,
          "line_end": 4118,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 524,
          "line_end": 525,
          "content": "canCascade    = true;<br/>                useIfExists   = true;"
        },
        {
          "total_lines": 2,
          "line_start": 1384,
          "line_end": 1385,
          "content": "session,<br/>                    mainTableName.name, mainTableName.schema.name"
        },
        {
          "total_lines": 2,
          "line_start": 497,
          "line_end": 498,
          "content": "canCascade    = false;<br/>                useIfExists   = true;"
        },
        {
          "total_lines": 2,
          "line_start": 2947,
          "line_end": 2948,
          "content": "constName, set,<br/>                                   SchemaObject.ConstraintTypes.PRIMARY_KEY"
        },
        {
          "total_lines": 2,
          "line_start": 1238,
          "line_end": 1239,
          "content": "read();<br/>            readThis(Tokens.ROWS);"
        },
        {
          "total_lines": 2,
          "line_start": 2714,
          "line_end": 2715,
          "content": "constName, set,<br/>                               SchemaObject.ConstraintTypes.PRIMARY_KEY"
        },
        {
          "total_lines": 2,
          "line_start": 3537,
          "line_end": 3538,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 3486,
          "line_end": 3487,
          "content": "cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 3702,
          "line_end": 3703,
          "content": "writeLockNames,<br/>                    mainTableName, writeLockNames.length, 1"
        },
        {
          "total_lines": 2,
          "line_start": 3003,
          "line_end": 3004,
          "content": "constName, null,<br/>                                   SchemaObject.ConstraintTypes.CHECK"
        },
        {
          "total_lines": 2,
          "line_start": 822,
          "line_end": 823,
          "content": "StatementTypes.DROP_CONSTRAINT,<br/>                                           args, null, writeLockNames"
        },
        {
          "total_lines": 2,
          "line_start": 3854,
          "line_end": 3855,
          "content": "table,<br/>                        column, columnIndex"
        },
        {
          "total_lines": 2,
          "line_start": 1230,
          "line_end": 1231,
          "content": "read();<br/>            readThis(Tokens.COMMIT);"
        },
        {
          "total_lines": 2,
          "line_start": 4092,
          "line_end": 4093,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 4333,
          "line_end": 4334,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 4640,
          "line_end": 4641,
          "content": "isTable = true;<br/>                        break;"
        },
        {
          "total_lines": 2,
          "line_start": 3427,
          "line_end": 3428,
          "content": "cs.sql = getLastPart(position);<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 2970,
          "line_end": 2971,
          "content": "constName, set,<br/>                                   SchemaObject.ConstraintTypes.UNIQUE"
        },
        {
          "total_lines": 2,
          "line_start": 1539,
          "line_end": 1540,
          "content": "default :<br/>                            throw unexpectedToken();"
        },
        {
          "total_lines": 2,
          "line_start": 488,
          "line_end": 489,
          "content": "useIfExists   = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 4284,
          "line_end": 4285,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 1966,
          "line_end": 1967,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 2941,
          "line_end": 2942,
          "content": "schemaObject.getSchemaName(),<br/>                            schemaObject.getName(), SchemaObject.CONSTRAINT"
        },
        {
          "total_lines": 2,
          "line_start": 1549,
          "line_end": 1550,
          "content": "readThis(Tokens.NO);<br/>                    readThis(Tokens.ACTION);"
        },
        {
          "total_lines": 2,
          "line_start": 3479,
          "line_end": 3480,
          "content": "cs = new StatementSchema(sql, statementType);<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 506,
          "line_end": 507,
          "content": "canCascade    = false;<br/>                useIfExists   = true;"
        },
        {
          "total_lines": 2,
          "line_start": 1829,
          "line_end": 1830,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 1002,
          "line_end": 1003,
          "content": "start     = false;<br/>                    startPart = false;"
        },
        {
          "total_lines": 2,
          "line_start": 3432,
          "line_end": 3433,
          "content": "cs.sql = getLastPart(position);<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 3896,
          "line_end": 3897,
          "content": "column,<br/>                            columnIndex"
        },
        {
          "total_lines": 2,
          "line_start": 3509,
          "line_end": 3510,
          "content": "end = true;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 498,
          "line_end": 499,
          "content": "useIfExists   = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 3776,
          "line_end": 3777,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 3666,
          "line_end": 3667,
          "content": "args,<br/>                                   null"
        },
        {
          "total_lines": 2,
          "line_start": 3449,
          "line_end": 3450,
          "content": "cs.sql = getLastPart(position);<br/>                            break;"
        },
        {
          "total_lines": 1,
          "line_start": 4310,
          "line_end": 4310,
          "content": "database.getCatalogName(), table.getName()"
        },
        {
          "total_lines": 1,
          "line_start": 1865,
          "line_end": 1865,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 818,
          "line_end": 818,
          "content": "writeLockNames.length, 1"
        },
        {
          "total_lines": 1,
          "line_start": 3273,
          "line_end": 3273,
          "content": "database.getCatalogName(), table.getName()"
        },
        {
          "total_lines": 1,
          "line_start": 4477,
          "line_end": 4477,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 3855,
          "line_end": 3855,
          "content": "column, columnIndex"
        },
        {
          "total_lines": 1,
          "line_start": 3703,
          "line_end": 3703,
          "content": "writeLockNames.length, 1"
        },
        {
          "total_lines": 1,
          "line_start": 1428,
          "line_end": 1428,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 2226,
          "line_end": 2226,
          "content": "token.tokenString, token.isDelimitedIdentifier"
        },
        {
          "total_lines": 1,
          "line_start": 4410,
          "line_end": 4410,
          "content": "StatementTypes.SET_USER_INITIAL_SCHEMA, args"
        },
        {
          "total_lines": 1,
          "line_start": 4281,
          "line_end": 4281,
          "content": "database.getCatalogName(), table.getName()"
        },
        {
          "total_lines": 1,
          "line_start": 1375,
          "line_end": 1375,
          "content": "Session session, Table table"
        },
        {
          "total_lines": 1,
          "line_start": 4496,
          "line_end": 4496,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 3729,
          "line_end": 3729,
          "content": "database.getCatalogName(), table.getName()"
        },
        {
          "total_lines": 1,
          "line_start": 4456,
          "line_end": 4456,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 278,
          "line_end": 278,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 2153,
          "line_end": 2153,
          "content": "token.tokenString, token.isDelimitedIdentifier"
        },
        {
          "total_lines": 1,
          "line_start": 2714,
          "line_end": 2714,
          "content": "constName, set"
        },
        {
          "total_lines": 1,
          "line_start": 274,
          "line_end": 274,
          "content": "database.getCatalogName(), table.getName()"
        },
        {
          "total_lines": 1,
          "line_start": 4110,
          "line_end": 4110,
          "content": "table, column"
        },
        {
          "total_lines": 1,
          "line_start": 2947,
          "line_end": 2947,
          "content": "constName, set"
        },
        {
          "total_lines": 1,
          "line_start": 2362,
          "line_end": 2362,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 3902,
          "line_end": 3902,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 2392,
          "line_end": 2392,
          "content": "database.getCatalogName(), table.getName()"
        },
        {
          "total_lines": 1,
          "line_start": 3872,
          "line_end": 3872,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 2358,
          "line_end": 2358,
          "content": "database.getCatalogName(), table.getName()"
        },
        {
          "total_lines": 1,
          "line_start": 3860,
          "line_end": 3860,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 3069,
          "line_end": 3069,
          "content": "constName, set"
        },
        {
          "total_lines": 1,
          "line_start": 3363,
          "line_end": 3363,
          "content": "args, null"
        },
        {
          "total_lines": 1,
          "line_start": 4522,
          "line_end": 4522,
          "content": "args, null"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/CharacterType.java",
      "loc_duplicate": 93,
      "clones": [
          {
          "total_lines": 12,
          "line_start": 167,
          "line_end": 178,
          "content": "if (precision == 0) {<br/>            return getNameString();<br/>        }<br/><br/>        StringBuffer sb = new StringBuffer(16);<br/><br/>        sb.append(getNameString());<br/>        sb.append('(');<br/>        sb.append(precision);<br/>        sb.append(')');<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 6,
          "line_start": 520,
          "line_end": 525,
          "content": "// todo nonSpaceLength() not yet implemented for CLOB<br/>                    if (!cast) {<br/>                        throw Error.error(ErrorCode.X_22001);<br/>                    }<br/><br/>                    session.addWarning(Error.error(ErrorCode.W_01004));"
        },
        {
          "total_lines": 6,
          "line_start": 173,
          "line_end": 178,
          "content": "sb.append(getNameString());<br/>        sb.append('(');<br/>        sb.append(precision);<br/>        sb.append(')');<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 6,
          "line_start": 503,
          "line_end": 508,
          "content": "ClobData clob =<br/>                            session.createClob(((String) a).length());<br/><br/>                        clob.setString(session, 0, (String) a);<br/><br/>                        return clob;"
        },
        {
          "total_lines": 5,
          "line_start": 167,
          "line_end": 171,
          "content": "if (precision == 0) {<br/>            return getNameString();<br/>        }<br/><br/>        StringBuffer sb = new StringBuffer(16);"
        },
        {
          "total_lines": 5,
          "line_start": 894,
          "line_end": 898,
          "content": "ClobData clob = session.createClob(result.length());<br/><br/>            clob.setString(session, 0, result);<br/><br/>            return clob;"
        },
        {
          "total_lines": 5,
          "line_start": 484,
          "line_end": 488,
          "content": "if (!cast) {<br/>                            throw Error.error(ErrorCode.X_22001);<br/>                        }<br/><br/>                        session.addWarning(Error.error(ErrorCode.W_01004));"
        },
        {
          "total_lines": 5,
          "line_start": 872,
          "line_end": 876,
          "content": "ClobData clob = session.createClob(result.length());<br/><br/>            clob.setString(session, 0, result);<br/><br/>            return clob;"
        },
        {
          "total_lines": 3,
          "line_start": 259,
          "line_end": 261,
          "content": "other.typeCode,<br/>                                                        precision,<br/>                                                        other.getCollation()"
        },
        {
          "total_lines": 3,
          "line_start": 874,
          "line_end": 876,
          "content": "clob.setString(session, 0, result);<br/><br/>            return clob;"
        },
        {
          "total_lines": 3,
          "line_start": 41,
          "line_end": 43,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.lib.ArrayUtil;"
        },
        {
          "total_lines": 3,
          "line_start": 253,
          "line_end": 255,
          "content": "typeCode,<br/>                                                        other.precision,<br/>                                                        other.getCollation()"
        },
        {
          "total_lines": 3,
          "line_start": 896,
          "line_end": 898,
          "content": "clob.setString(session, 0, result);<br/><br/>            return clob;"
        },
        {
          "total_lines": 2,
          "line_start": 889,
          "line_end": 890,
          "content": "session, 0,<br/>                (int) ((ClobData) data).length(session)"
        },
        {
          "total_lines": 2,
          "line_start": 463,
          "line_end": 464,
          "content": "SessionInterface session, Object a,<br/>                             Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 867,
          "line_end": 868,
          "content": "session, 0,<br/>                (int) ((ClobData) data).length(session)"
        },
        {
          "total_lines": 2,
          "line_start": 246,
          "line_end": 247,
          "content": "typeCode, other.precision,<br/>                                                    other.getCollation()"
        },
        {
          "total_lines": 2,
          "line_start": 260,
          "line_end": 261,
          "content": "precision,<br/>                                                        other.getCollation()"
        },
        {
          "total_lines": 2,
          "line_start": 473,
          "line_end": 474,
          "content": "Object a,<br/>                                      Type otherType, boolean cast"
        },
        {
          "total_lines": 2,
          "line_start": 591,
          "line_end": 592,
          "content": "SessionInterface session, Object a,<br/>                                Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 266,
          "line_end": 267,
          "content": "precision,<br/>                                                    other.getCollation()"
        },
        {
          "total_lines": 2,
          "line_start": 253,
          "line_end": 254,
          "content": "typeCode,<br/>                                                        other.precision"
        },
        {
          "total_lines": 2,
          "line_start": 259,
          "line_end": 260,
          "content": "other.typeCode,<br/>                                                        precision"
        },
        {
          "total_lines": 2,
          "line_start": 601,
          "line_end": 602,
          "content": "SessionInterface session, Object a,<br/>                                    Type otherType"
        },
        {
          "total_lines": 1,
          "line_start": 1000,
          "line_end": 1000,
          "content": "session, 0"
        },
        {
          "total_lines": 1,
          "line_start": 474,
          "line_end": 474,
          "content": "Type otherType, boolean cast"
        },
        {
          "total_lines": 1,
          "line_start": 246,
          "line_end": 246,
          "content": "typeCode, other.precision"
        },
        {
          "total_lines": 1,
          "line_start": 993,
          "line_end": 993,
          "content": "session, 0"
        },
        {
          "total_lines": 1,
          "line_start": 347,
          "line_end": 347,
          "content": "Object a, Object b, int opType"
        },
        {
          "total_lines": 1,
          "line_start": 296,
          "line_end": 296,
          "content": "Session session, Type other, int operation"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/NumberType.java",
      "loc_duplicate": 67,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 1254,
          "line_end": 1258,
          "content": "if (a == null) {<br/>            return Tokens.T_NULL;<br/>        }<br/><br/>        return convertToString(a);"
        },
        {
          "total_lines": 4,
          "line_start": 416,
          "line_end": 419,
          "content": "return true;<br/><br/>            default :<br/>                return false;"
        },
        {
          "total_lines": 4,
          "line_start": 474,
          "line_end": 477,
          "content": "return true;<br/><br/>            default :<br/>                return false;"
        },
        {
          "total_lines": 3,
          "line_start": 416,
          "line_end": 418,
          "content": "return true;<br/><br/>            default :"
        },
        {
          "total_lines": 3,
          "line_start": 127,
          "line_end": 129,
          "content": "break;<br/><br/>            default :"
        },
        {
          "total_lines": 3,
          "line_start": 252,
          "line_end": 254,
          "content": "case Types.SQL_REAL :<br/>            case Types.SQL_FLOAT :<br/>            case Types.SQL_DOUBLE :"
        },
        {
          "total_lines": 3,
          "line_start": 181,
          "line_end": 183,
          "content": "case Types.SQL_REAL :<br/>            case Types.SQL_FLOAT :<br/>            case Types.SQL_DOUBLE :"
        },
        {
          "total_lines": 3,
          "line_start": 474,
          "line_end": 476,
          "content": "return true;<br/><br/>            default :"
        },
        {
          "total_lines": 2,
          "line_start": 1559,
          "line_end": 1560,
          "content": "long longa = ((Number) a).longValue();<br/>                long longb = ((Number) b).longValue();"
        },
        {
          "total_lines": 2,
          "line_start": 1553,
          "line_end": 1554,
          "content": "int ai = ((Number) a).intValue();<br/>                int bi = ((Number) b).intValue();"
        },
        {
          "total_lines": 2,
          "line_start": 1431,
          "line_end": 1432,
          "content": "double ad = ((Number) a).doubleValue();<br/>                double bd = ((Number) b).doubleValue();"
        },
        {
          "total_lines": 2,
          "line_start": 724,
          "line_end": 725,
          "content": "BigDecimal ad = convertToDecimal(a);<br/>                    return ad.compareTo((BigDecimal) b);"
        },
        {
          "total_lines": 2,
          "line_start": 704,
          "line_end": 705,
          "content": "BigDecimal ad = convertToDecimal(a);<br/>                    return ad.compareTo((BigDecimal) b);"
        },
        {
          "total_lines": 2,
          "line_start": 1469,
          "line_end": 1470,
          "content": "Session session, Object a, Object b,<br/>                           Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 1529,
          "line_end": 1530,
          "content": "double ad = ((Number) a).doubleValue();<br/>                double bd = ((Number) b).doubleValue();"
        },
        {
          "total_lines": 2,
          "line_start": 1481,
          "line_end": 1482,
          "content": "double ad = ((Number) a).doubleValue();<br/>                double bd = ((Number) b).doubleValue();"
        },
        {
          "total_lines": 2,
          "line_start": 257,
          "line_end": 258,
          "content": "case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :"
        },
        {
          "total_lines": 2,
          "line_start": 261,
          "line_end": 262,
          "content": "default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");"
        },
        {
          "total_lines": 2,
          "line_start": 1501,
          "line_end": 1502,
          "content": "int ai = ((Number) a).intValue();<br/>                int bi = ((Number) b).intValue();"
        },
        {
          "total_lines": 2,
          "line_start": 936,
          "line_end": 937,
          "content": "SessionInterface session, Object a,<br/>                                    Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 800,
          "line_end": 801,
          "content": "SessionInterface session, Object a,<br/>                                Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 188,
          "line_end": 189,
          "content": "default :<br/>                throw Error.runtimeError(ErrorCode.U_S0500, \"NumberType\");"
        },
        {
          "total_lines": 2,
          "line_start": 1507,
          "line_end": 1508,
          "content": "long longa = ((Number) a).longValue();<br/>                long longb = ((Number) b).longValue();"
        },
        {
          "total_lines": 2,
          "line_start": 1453,
          "line_end": 1454,
          "content": "int ai = ((Number) a).intValue();<br/>                int bi = ((Number) b).intValue();"
        },
        {
          "total_lines": 2,
          "line_start": 1459,
          "line_end": 1460,
          "content": "long longa = ((Number) a).longValue();<br/>                long longb = ((Number) b).longValue();"
        },
        {
          "total_lines": 2,
          "line_start": 184,
          "line_end": 185,
          "content": "case Types.SQL_NUMERIC :<br/>            case Types.SQL_DECIMAL :"
        },
        {
          "total_lines": 1,
          "line_start": 584,
          "line_end": 584,
          "content": "Session session, Type other, int operation"
        },
        {
          "total_lines": 1,
          "line_start": 1639,
          "line_end": 1639,
          "content": "Session session, Object a, Object b, Type otherType"
        },
        {
          "total_lines": 1,
          "line_start": 1420,
          "line_end": 1420,
          "content": "Session session, Object a, Object b, Type otherType"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/server/Servlet.java",
      "loc_duplicate": 6,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 243,
          "line_end": 244,
          "content": "HttpServletRequest request,<br/>                       HttpServletResponse response"
        },
        {
          "total_lines": 2,
          "line_start": 209,
          "line_end": 210,
          "content": "HttpServletRequest request,<br/>                      HttpServletResponse response"
        },
        {
          "total_lines": 2,
          "line_start": 283,
          "line_end": 284,
          "content": "session.getId(),<br/>                            session.getDatabase().getDatabaseID()"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/SortAndSlice.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 326,
          "line_end": 326,
          "content": "Session session, QuerySpecification select"
        },
        {
          "total_lines": 1,
          "line_start": 476,
          "line_end": 476,
          "content": "false, false"
        },
        {
          "total_lines": 1,
          "line_start": 476,
          "line_end": 476,
          "content": "false, false"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ExpressionOp.java",
      "loc_duplicate": 161,
      "clones": [
          {
          "total_lines": 37,
          "line_start": 732,
          "line_end": 768,
          "content": "if (array[i] == escapeChar) {<br/>                            if (wasEscape) {<br/>                                escapeCount++;<br/><br/>                                newArray[j++] = array[i];<br/>                                wasEscape     = false;<br/><br/>                                continue;<br/>                            }<br/><br/>                            wasEscape = true;<br/><br/>                            if (i == array.length - 1) {<br/>                                throw Error.error(ErrorCode.X_22025);<br/>                            }<br/><br/>                            continue;<br/>                        }<br/><br/>                        if (array[i] == '_' || array[i] == '%') {<br/>                            if (wasEscape) {<br/>                                escapeCount++;<br/><br/>                                newArray[j++] = array[i];<br/>                                wasEscape     = false;<br/><br/>                                continue;<br/>                            }<br/><br/>                            break;<br/>                        }<br/><br/>                        if (wasEscape) {<br/>                            throw Error.error(ErrorCode.X_22025);<br/>                        }<br/><br/>                        newArray[j++] = array[i];"
        },
        {
          "total_lines": 37,
          "line_start": 654,
          "line_end": 690,
          "content": "if (array[i] == escapeChar) {<br/>                            if (wasEscape) {<br/>                                escapeCount++;<br/><br/>                                newArray[j++] = array[i];<br/>                                wasEscape     = false;<br/><br/>                                continue;<br/>                            }<br/><br/>                            wasEscape = true;<br/><br/>                            if (i == array.length - 1) {<br/>                                throw Error.error(ErrorCode.X_22025);<br/>                            }<br/><br/>                            continue;<br/>                        }<br/><br/>                        if (array[i] == '_' || array[i] == '%') {<br/>                            if (wasEscape) {<br/>                                escapeCount++;<br/><br/>                                newArray[j++] = array[i];<br/>                                wasEscape     = false;<br/><br/>                                continue;<br/>                            }<br/><br/>                            break;<br/>                        }<br/><br/>                        if (wasEscape) {<br/>                            throw Error.error(ErrorCode.X_22025);<br/>                        }<br/><br/>                        newArray[j++] = array[i];"
        },
        {
          "total_lines": 18,
          "line_start": 751,
          "line_end": 768,
          "content": "if (array[i] == '_' || array[i] == '%') {<br/>                            if (wasEscape) {<br/>                                escapeCount++;<br/><br/>                                newArray[j++] = array[i];<br/>                                wasEscape     = false;<br/><br/>                                continue;<br/>                            }<br/><br/>                            break;<br/>                        }<br/><br/>                        if (wasEscape) {<br/>                            throw Error.error(ErrorCode.X_22025);<br/>                        }<br/><br/>                        newArray[j++] = array[i];"
        },
        {
          "total_lines": 18,
          "line_start": 673,
          "line_end": 690,
          "content": "if (array[i] == '_' || array[i] == '%') {<br/>                            if (wasEscape) {<br/>                                escapeCount++;<br/><br/>                                newArray[j++] = array[i];<br/>                                wasEscape     = false;<br/><br/>                                continue;<br/>                            }<br/><br/>                            break;<br/>                        }<br/><br/>                        if (wasEscape) {<br/>                            throw Error.error(ErrorCode.X_22025);<br/>                        }<br/><br/>                        newArray[j++] = array[i];"
        },
        {
          "total_lines": 7,
          "line_start": 359,
          "line_end": 365,
          "content": "if (nodes[i] == null) {<br/>                continue;<br/>            }<br/><br/>            unresolvedSet = nodes[i].resolveColumnReferences(session,<br/>                    rangeGroup, rangeCount, rangeGroups, unresolvedSet,<br/>                    acceptsSequences);"
        },
        {
          "total_lines": 5,
          "line_start": 775,
          "line_end": 779,
          "content": "Object value =<br/>                    session.sessionContext.rangeIterators[rangePosition]<br/>                        .getCurrent(columnIndex);<br/><br/>                return value;"
        },
        {
          "total_lines": 3,
          "line_start": 329,
          "line_end": 331,
          "content": "sb.append(\" arg_left=[\");<br/>            sb.append(nodes[LEFT].describe(session, blanks + 1));<br/>            sb.append(']');"
        },
        {
          "total_lines": 3,
          "line_start": 160,
          "line_end": 162,
          "content": "nodes                = new Expression[BINARY];<br/>                nodes[LEFT]          = e;<br/>                nodes[LEFT].dataType = e.dataType;"
        },
        {
          "total_lines": 3,
          "line_start": 335,
          "line_end": 337,
          "content": "sb.append(\" arg_right=[\");<br/>            sb.append(nodes[RIGHT].describe(session, blanks + 1));<br/>            sb.append(']');"
        },
        {
          "total_lines": 3,
          "line_start": 151,
          "line_end": 153,
          "content": "nodes                = new Expression[BINARY];<br/>                nodes[LEFT]          = e;<br/>                nodes[LEFT].dataType = e.dataType;"
        },
        {
          "total_lines": 3,
          "line_start": 315,
          "line_end": 317,
          "content": "sb.append(dataType.getTypeDefinition());<br/>                sb.append(' ');<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 343,
          "line_end": 345,
          "content": "Session session,<br/>            RangeGroup rangeGroup, int rangeCount, RangeGroup[] rangeGroups,<br/>            HsqlList unresolvedSet, boolean acceptsSequences"
        },
        {
          "total_lines": 3,
          "line_start": 143,
          "line_end": 145,
          "content": "nodes                = new Expression[UNARY];<br/>                nodes[LEFT] = new ExpressionOp(OpTypes.ZONE_MODIFIER, e, null);<br/>                nodes[LEFT].dataType = e.dataType;"
        },
        {
          "total_lines": 3,
          "line_start": 299,
          "line_end": 301,
          "content": "sb.append(dataType.getTypeDefinition());<br/>                sb.append(' ');<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.lib.ArrayUtil;"
        },
        {
          "total_lines": 3,
          "line_start": 135,
          "line_end": 137,
          "content": "nodes                = new Expression[UNARY];<br/>                nodes[LEFT] = new ExpressionOp(OpTypes.ZONE_MODIFIER, e, null);<br/>                nodes[LEFT].dataType = e.dataType;"
        },
        {
          "total_lines": 2,
          "line_start": 44,
          "line_end": 45,
          "content": "import org.hsqldb.types.Type;<br/>import org.hsqldb.types.Types;"
        },
        {
          "total_lines": 2,
          "line_start": 152,
          "line_end": 153,
          "content": "nodes[LEFT]          = e;<br/>                nodes[LEFT].dataType = e.dataType;"
        },
        {
          "total_lines": 2,
          "line_start": 161,
          "line_end": 162,
          "content": "nodes[LEFT]          = e;<br/>                nodes[LEFT].dataType = e.dataType;"
        },
        {
          "total_lines": 2,
          "line_start": 307,
          "line_end": 308,
          "content": "sb.append(nodes[i].describe(session, blanks + 1));<br/>                    sb.append(' ');"
        },
        {
          "total_lines": 1,
          "line_start": 84,
          "line_end": 84,
          "content": "int type, Expression left"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCConnection.java",
      "loc_duplicate": 61,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 2150,
          "line_end": 2153,
          "content": "sp.name       = null;<br/>            sp.connection = null;<br/><br/>            throw JDBCUtil.sqlException(ErrorCode.X_3B001);"
        },
        {
          "total_lines": 4,
          "line_start": 3614,
          "line_end": 3617,
          "content": "isCloseResultSet = connProperties.isPropertyTrue(<br/>                    HsqlDatabaseProperties.url_close_result, false);<br/>                isUseColumnName = connProperties.isPropertyTrue(<br/>                    HsqlDatabaseProperties.url_get_column_name, true);"
        },
        {
          "total_lines": 4,
          "line_start": 3686,
          "line_end": 3689,
          "content": "isCloseResultSet = connProperties.isPropertyTrue(<br/>                HsqlDatabaseProperties.url_close_result, false);<br/>            isUseColumnName = connProperties.isPropertyTrue(<br/>                HsqlDatabaseProperties.url_get_column_name, true);"
        },
        {
          "total_lines": 4,
          "line_start": 2239,
          "line_end": 2242,
          "content": "sp.name       = null;<br/>            sp.connection = null;<br/><br/>            throw JDBCUtil.sqlException(ErrorCode.X_3B001);"
        },
        {
          "total_lines": 3,
          "line_start": 2131,
          "line_end": 2133,
          "content": "String msg = Error.getMessage(ErrorCode.X_3B001);<br/><br/>            throw JDBCUtil.invalidArgument(msg);"
        },
        {
          "total_lines": 3,
          "line_start": 2477,
          "line_end": 2479,
          "content": "String sql,<br/>            int resultSetType, int resultSetConcurrency,<br/>            int resultSetHoldability"
        },
        {
          "total_lines": 3,
          "line_start": 2233,
          "line_end": 2235,
          "content": "String msg = Error.getMessage(ErrorCode.X_3B001);<br/><br/>            throw JDBCUtil.invalidArgument(msg);"
        },
        {
          "total_lines": 3,
          "line_start": 2138,
          "line_end": 2140,
          "content": "String msg = Error.getMessage(ErrorCode.X_3B001);<br/><br/>            throw JDBCUtil.invalidArgument(msg);"
        },
        {
          "total_lines": 3,
          "line_start": 2227,
          "line_end": 2229,
          "content": "String msg = Error.getMessage(ErrorCode.X_3B001);<br/><br/>            throw JDBCUtil.invalidArgument(msg);"
        },
        {
          "total_lines": 3,
          "line_start": 2399,
          "line_end": 2401,
          "content": "String sql,<br/>            int resultSetType, int resultSetConcurrency,<br/>            int resultSetHoldability"
        },
        {
          "total_lines": 3,
          "line_start": 2144,
          "line_end": 2146,
          "content": "String msg = Error.getMessage(ErrorCode.X_3B001);<br/><br/>            throw JDBCUtil.invalidArgument(msg);"
        },
        {
          "total_lines": 3,
          "line_start": 2220,
          "line_end": 2222,
          "content": "String msg = Error.getMessage(ErrorCode.X_3B001);<br/><br/>            throw JDBCUtil.invalidArgument(msg);"
        },
        {
          "total_lines": 2,
          "line_start": 2239,
          "line_end": 2240,
          "content": "sp.name       = null;<br/>            sp.connection = null;"
        },
        {
          "total_lines": 2,
          "line_start": 1660,
          "line_end": 1661,
          "content": "String sql,<br/>            int resultSetType, int resultSetConcurrency"
        },
        {
          "total_lines": 2,
          "line_start": 3597,
          "line_end": 3598,
          "content": "port, path,<br/>                        database, isTLS, isTLSWrapper"
        },
        {
          "total_lines": 2,
          "line_start": 2324,
          "line_end": 2325,
          "content": "resultSetType,<br/>            resultSetConcurrency"
        },
        {
          "total_lines": 2,
          "line_start": 1730,
          "line_end": 1731,
          "content": "String sql,<br/>            int resultSetType, int resultSetConcurrency"
        },
        {
          "total_lines": 2,
          "line_start": 1410,
          "line_end": 1411,
          "content": "break;<br/>            default :"
        },
        {
          "total_lines": 2,
          "line_start": 1910,
          "line_end": 1911,
          "content": "break;<br/>            default :"
        },
        {
          "total_lines": 2,
          "line_start": 3602,
          "line_end": 3603,
          "content": "port, path,<br/>                        database, isTLS, isTLSWrapper"
        },
        {
          "total_lines": 2,
          "line_start": 2150,
          "line_end": 2151,
          "content": "sp.name       = null;<br/>            sp.connection = null;"
        },
        {
          "total_lines": 1,
          "line_start": 2325,
          "line_end": 2325,
          "content": "resultSetConcurrency, resultSetHoldability"
        },
        {
          "total_lines": 1,
          "line_start": 3598,
          "line_end": 3598,
          "content": "database, isTLS, isTLSWrapper"
        },
        {
          "total_lines": 1,
          "line_start": 3603,
          "line_end": 3603,
          "content": "database, isTLS, isTLSWrapper"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/RowAVLDisk.java",
      "loc_duplicate": 10,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 274,
          "line_end": 277,
          "content": "NodeAVL last = n;<br/><br/>            n          = n.nNext;<br/>            last.nNext = null;"
        },
        {
          "total_lines": 2,
          "line_start": 75,
          "line_end": 76,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 276,
          "line_end": 277,
          "content": "n          = n.nNext;<br/>            last.nNext = null;"
        },
        {
          "total_lines": 1,
          "line_start": 129,
          "line_end": 129,
          "content": "TableBase t, Object[] o, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 362,
          "line_end": 362,
          "content": "RowOutputInterface out, LongLookup lookup"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestCollation.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 69,
          "line_end": 70,
          "content": "connection = super.newConnection();<br/>            statement  = connection.createStatement();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/pool/JDBCPooledDataSource.java",
      "loc_duplicate": 29,
      "clones": [
          {
          "total_lines": 10,
          "line_start": 102,
          "line_end": 111,
          "content": "String    cname = \"org.hsqldb.jdbc.JDBCDataSourceFactory\";<br/>        Reference ref   = new Reference(getClass().getName(), cname, null);<br/><br/>        ref.add(new StringRefAddr(\"database\", getDatabase()));<br/>        ref.add(new StringRefAddr(\"user\", getUser()));<br/>        ref.add(new StringRefAddr(\"password\", password));<br/>        ref.add(new StringRefAddr(\"loginTimeout\",<br/>                                  Integer.toString(loginTimeout)));<br/><br/>        return ref;"
        },
        {
          "total_lines": 9,
          "line_start": 103,
          "line_end": 111,
          "content": "Reference ref   = new Reference(getClass().getName(), cname, null);<br/><br/>        ref.add(new StringRefAddr(\"database\", getDatabase()));<br/>        ref.add(new StringRefAddr(\"user\", getUser()));<br/>        ref.add(new StringRefAddr(\"password\", password));<br/>        ref.add(new StringRefAddr(\"loginTimeout\",<br/>                                  Integer.toString(loginTimeout)));<br/><br/>        return ref;"
        },
        {
          "total_lines": 8,
          "line_start": 102,
          "line_end": 109,
          "content": "String    cname = \"org.hsqldb.jdbc.JDBCDataSourceFactory\";<br/>        Reference ref   = new Reference(getClass().getName(), cname, null);<br/><br/>        ref.add(new StringRefAddr(\"database\", getDatabase()));<br/>        ref.add(new StringRefAddr(\"user\", getUser()));<br/>        ref.add(new StringRefAddr(\"password\", password));<br/>        ref.add(new StringRefAddr(\"loginTimeout\",<br/>                                  Integer.toString(loginTimeout)));"
        },
        {
          "total_lines": 2,
          "line_start": 105,
          "line_end": 106,
          "content": "ref.add(new StringRefAddr(\"database\", getDatabase()));<br/>        ref.add(new StringRefAddr(\"user\", getUser()));"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/tar/TarFileOutputStream.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 171,
          "line_end": 173,
          "content": "break;<br/><br/>            default :"
        },
        {
          "total_lines": 2,
          "line_start": 118,
          "line_end": 119,
          "content": "compressionType,<br/>             TarFileOutputStream.Compression.DEFAULT_BLOCKS_PER_RECORD"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/RAFileNIO.java",
      "loc_duplicate": 147,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 193,
          "line_end": 201,
          "content": "database.logger.logWarningEvent(JVM_ERROR, e);<br/><br/>            IOException io = new IOException(e.toString());<br/><br/>            try {<br/>                io.initCause(e);<br/>            } catch (Throwable e1) {}<br/><br/>            throw io;"
        },
        {
          "total_lines": 9,
          "line_start": 172,
          "line_end": 180,
          "content": "database.logger.logWarningEvent(JVM_ERROR, e);<br/><br/>            IOException io = new IOException(e.toString());<br/><br/>            try {<br/>                io.initCause(e);<br/>            } catch (Throwable e1) {}<br/><br/>            throw io;"
        },
        {
          "total_lines": 9,
          "line_start": 135,
          "line_end": 143,
          "content": "database.logger.logWarningEvent(JVM_ERROR, e);<br/><br/>            IOException io = new IOException(e.toString());<br/><br/>            try {<br/>                io.initCause(e);<br/>            } catch (Throwable e1) {}<br/><br/>            throw io;"
        },
        {
          "total_lines": 8,
          "line_start": 283,
          "line_end": 290,
          "content": "positionBufferMove((int) transferLength);<br/><br/>                length -= transferLength;<br/>                offset += transferLength;<br/><br/>                if (length == 0) {<br/>                    break;<br/>                }"
        },
        {
          "total_lines": 8,
          "line_start": 217,
          "line_end": 224,
          "content": "positionBufferMove((int) transferLength);<br/><br/>                length -= transferLength;<br/>                offset += transferLength;<br/><br/>                if (length == 0) {<br/>                    break;<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 195,
          "line_end": 201,
          "content": "IOException io = new IOException(e.toString());<br/><br/>            try {<br/>                io.initCause(e);<br/>            } catch (Throwable e1) {}<br/><br/>            throw io;"
        },
        {
          "total_lines": 7,
          "line_start": 137,
          "line_end": 143,
          "content": "IOException io = new IOException(e.toString());<br/><br/>            try {<br/>                io.initCause(e);<br/>            } catch (Throwable e1) {}<br/><br/>            throw io;"
        },
        {
          "total_lines": 7,
          "line_start": 174,
          "line_end": 180,
          "content": "IOException io = new IOException(e.toString());<br/><br/>            try {<br/>                io.initCause(e);<br/>            } catch (Throwable e1) {}<br/><br/>            throw io;"
        },
        {
          "total_lines": 6,
          "line_start": 275,
          "line_end": 280,
          "content": "long transferLength = bufferPosition + bufferLength<br/>                                      - currentPosition;<br/><br/>                if (transferLength > length) {<br/>                    transferLength = length;<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 209,
          "line_end": 214,
          "content": "long transferLength = bufferPosition + bufferLength<br/>                                      - currentPosition;<br/><br/>                if (transferLength > length) {<br/>                    transferLength = length;<br/>                }"
        },
        {
          "total_lines": 5,
          "line_start": 176,
          "line_end": 180,
          "content": "try {<br/>                io.initCause(e);<br/>            } catch (Throwable e1) {}<br/><br/>            throw io;"
        },
        {
          "total_lines": 5,
          "line_start": 197,
          "line_end": 201,
          "content": "try {<br/>                io.initCause(e);<br/>            } catch (Throwable e1) {}<br/><br/>            throw io;"
        },
        {
          "total_lines": 5,
          "line_start": 227,
          "line_end": 231,
          "content": "database.logger.logWarningEvent(JVM_ERROR, t);<br/><br/>            IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        },
        {
          "total_lines": 5,
          "line_start": 244,
          "line_end": 248,
          "content": "database.logger.logWarningEvent(JVM_ERROR, t);<br/><br/>            IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        },
        {
          "total_lines": 5,
          "line_start": 293,
          "line_end": 297,
          "content": "database.logger.logWarningEvent(JVM_ERROR, t);<br/><br/>            IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        },
        {
          "total_lines": 5,
          "line_start": 309,
          "line_end": 313,
          "content": "database.logger.logWarningEvent(JVM_ERROR, t);<br/><br/>            IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        },
        {
          "total_lines": 5,
          "line_start": 139,
          "line_end": 143,
          "content": "try {<br/>                io.initCause(e);<br/>            } catch (Throwable e1) {}<br/><br/>            throw io;"
        },
        {
          "total_lines": 5,
          "line_start": 261,
          "line_end": 265,
          "content": "database.logger.logWarningEvent(JVM_ERROR, t);<br/><br/>            IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        },
        {
          "total_lines": 5,
          "line_start": 159,
          "line_end": 163,
          "content": "database.logger.logWarningEvent(JVM_ERROR, t);<br/><br/>            IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        },
        {
          "total_lines": 5,
          "line_start": 325,
          "line_end": 329,
          "content": "database.logger.logWarningEvent(JVM_ERROR, t);<br/><br/>            IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        },
        {
          "total_lines": 3,
          "line_start": 327,
          "line_end": 329,
          "content": "IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        },
        {
          "total_lines": 3,
          "line_start": 311,
          "line_end": 313,
          "content": "IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        },
        {
          "total_lines": 3,
          "line_start": 295,
          "line_end": 297,
          "content": "IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        },
        {
          "total_lines": 3,
          "line_start": 229,
          "line_end": 231,
          "content": "IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        },
        {
          "total_lines": 3,
          "line_start": 161,
          "line_end": 163,
          "content": "IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        },
        {
          "total_lines": 3,
          "line_start": 246,
          "line_end": 248,
          "content": "IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        },
        {
          "total_lines": 3,
          "line_start": 263,
          "line_end": 265,
          "content": "IOException io = JavaSystem.toIOException(t);<br/><br/>            throw io;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/TransactionManagerCommon.java",
      "loc_duplicate": 16,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 712,
          "line_end": 716,
          "content": "Session s = (Session) it.next();<br/><br/>            if (s == session) {<br/>                it.remove();<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 702,
          "line_end": 706,
          "content": "Session s = (Session) it.next();<br/><br/>            if (s == session) {<br/>                it.remove();<br/>            }"
        },
        {
          "total_lines": 2,
          "line_start": 518,
          "line_end": 519,
          "content": "current,<br/>                                     current.sessionContext.currentStatement"
        },
        {
          "total_lines": 2,
          "line_start": 492,
          "line_end": 493,
          "content": "current,<br/>                    current.sessionContext.currentStatement"
        },
        {
          "total_lines": 2,
          "line_start": 497,
          "line_end": 498,
          "content": "current,<br/>                                      current.sessionContext.currentStatement"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/Table.java",
      "loc_duplicate": 139,
      "clones": [
          {
          "total_lines": 17,
          "line_start": 2223,
          "line_end": 2239,
          "content": "if (!database.isReferentialIntegrity()) {<br/>            return;<br/>        }<br/><br/>        TriggerDef[] trigVec = triggerLists[trigVecIndex];<br/><br/>        for (int i = 0, size = trigVec.length; i < size; i++) {<br/>            TriggerDef td         = trigVec[i];<br/>            boolean    sqlTrigger = td instanceof TriggerDefSQL;<br/><br/>            if (td.hasOldTable()) {<br/><br/>                //<br/>            }<br/><br/>            td.pushPair(session, null, null);<br/>        }"
        },
        {
          "total_lines": 17,
          "line_start": 2201,
          "line_end": 2217,
          "content": "if (!database.isReferentialIntegrity()) {<br/>            return;<br/>        }<br/><br/>        TriggerDef[] trigVec = triggerLists[trigVecIndex];<br/><br/>        for (int i = 0, size = trigVec.length; i < size; i++) {<br/>            TriggerDef td         = trigVec[i];<br/>            boolean    sqlTrigger = td instanceof TriggerDefSQL;<br/><br/>            if (td.hasOldTable()) {<br/><br/>                //<br/>            }<br/><br/>            td.pushPair(session, null, null);<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 2663,
          "line_end": 2667,
          "content": "Object[] data = (Object[]) nav.getNext();<br/>            Object[] newData =<br/>                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);<br/><br/>            insertData(session, store, newData);"
        },
        {
          "total_lines": 5,
          "line_start": 2711,
          "line_end": 2715,
          "content": "Object[] data = (Object[]) nav.getNext();<br/>            Object[] newData =<br/>                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);<br/><br/>            insertData(session, store, newData);"
        },
        {
          "total_lines": 5,
          "line_start": 2223,
          "line_end": 2227,
          "content": "if (!database.isReferentialIntegrity()) {<br/>            return;<br/>        }<br/><br/>        TriggerDef[] trigVec = triggerLists[trigVecIndex];"
        },
        {
          "total_lines": 5,
          "line_start": 2201,
          "line_end": 2205,
          "content": "if (!database.isReferentialIntegrity()) {<br/>            return;<br/>        }<br/><br/>        TriggerDef[] trigVec = triggerLists[trigVecIndex];"
        },
        {
          "total_lines": 4,
          "line_start": 2712,
          "line_end": 2715,
          "content": "Object[] newData =<br/>                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);<br/><br/>            insertData(session, store, newData);"
        },
        {
          "total_lines": 4,
          "line_start": 1471,
          "line_end": 1474,
          "content": "HsqlName name = c.getName();<br/><br/>                throw Error.error(ErrorCode.X_42533,<br/>                                  name.getSchemaQualifiedStatementName());"
        },
        {
          "total_lines": 4,
          "line_start": 2664,
          "line_end": 2667,
          "content": "Object[] newData =<br/>                (Object[]) ArrayUtil.resizeArrayIfDifferent(data, columnCount);<br/><br/>            insertData(session, store, newData);"
        },
        {
          "total_lines": 4,
          "line_start": 1341,
          "line_end": 1344,
          "content": "HsqlName name = c.getName();<br/><br/>                throw Error.error(ErrorCode.X_42533,<br/>                                  name.getSchemaQualifiedStatementName());"
        },
        {
          "total_lines": 3,
          "line_start": 899,
          "line_end": 901,
          "content": "ErrorCode.U_S0500,<br/>                                             \"FK mismatch : \"<br/>                                             + c.getName().name"
        },
        {
          "total_lines": 3,
          "line_start": 116,
          "line_end": 118,
          "content": "persistenceScope = SCOPE_STATEMENT;<br/>                isSessionBased   = true;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 2783,
          "line_end": 2785,
          "content": "Row row = (Row) store.getNewCachedObject(session, data, false);<br/><br/>        store.indexRow(session, row);"
        },
        {
          "total_lines": 3,
          "line_start": 111,
          "line_end": 113,
          "content": "persistenceScope = SCOPE_STATEMENT;<br/>                isSessionBased   = true;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 908,
          "line_end": 910,
          "content": "ErrorCode.U_S0500,<br/>                                             \"FK mismatch : \"<br/>                                             + c.getName().name"
        },
        {
          "total_lines": 3,
          "line_start": 2772,
          "line_end": 2774,
          "content": "Row row = (Row) store.getNewCachedObject(session, data, false);<br/><br/>        store.indexRow(session, row);"
        },
        {
          "total_lines": 3,
          "line_start": 197,
          "line_end": 199,
          "content": "persistenceScope = SCOPE_STATEMENT;<br/>                isSessionBased   = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 198,
          "line_end": 199,
          "content": "isSessionBased   = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 2451,
          "line_end": 2452,
          "content": "cols,<br/>                                        cols.length"
        },
        {
          "total_lines": 2,
          "line_start": 2799,
          "line_end": 2800,
          "content": "id = (Number) identitySequence.getValueObject();<br/>                    data[identityColumn] = id;"
        },
        {
          "total_lines": 2,
          "line_start": 162,
          "line_end": 163,
          "content": "isSchemaBased  = true;<br/>                isSessionBased = true;"
        },
        {
          "total_lines": 2,
          "line_start": 143,
          "line_end": 144,
          "content": "persistenceScope = SCOPE_FULL;<br/>                isSchemaBased    = true;"
        },
        {
          "total_lines": 2,
          "line_start": 117,
          "line_end": 118,
          "content": "isSessionBased   = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 2780,
          "line_end": 2781,
          "content": "Session session, PersistentStore store,<br/>                          Object[] data"
        },
        {
          "total_lines": 2,
          "line_start": 2769,
          "line_end": 2770,
          "content": "Session session, PersistentStore store,<br/>                           Object[] data"
        },
        {
          "total_lines": 2,
          "line_start": 1628,
          "line_end": 1629,
          "content": "int[] columns,<br/>                                 boolean columnsNotNull"
        },
        {
          "total_lines": 2,
          "line_start": 2436,
          "line_end": 2437,
          "content": "cols,<br/>                                          cols.length"
        },
        {
          "total_lines": 2,
          "line_start": 2724,
          "line_end": 2725,
          "content": "Session session, PersistentStore store,<br/>                                 Object[] data"
        },
        {
          "total_lines": 2,
          "line_start": 186,
          "line_end": 187,
          "content": "isSchemaBased    = true;<br/>                isSessionBased   = true;"
        },
        {
          "total_lines": 2,
          "line_start": 152,
          "line_end": 153,
          "content": "isSessionBased   = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1666,
          "line_end": 1667,
          "content": "int[] columns,<br/>                                           boolean columnsNotNull"
        },
        {
          "total_lines": 2,
          "line_start": 1321,
          "line_end": 1322,
          "content": "ErrorCode.X_42502,<br/>                                  name.getSchemaQualifiedStatementName()"
        },
        {
          "total_lines": 2,
          "line_start": 112,
          "line_end": 113,
          "content": "isSessionBased   = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 193,
          "line_end": 194,
          "content": "isSessionBased   = true;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 151,
          "line_end": 152,
          "content": "isSchemaBased    = true;<br/>                isSessionBased   = true;"
        },
        {
          "total_lines": 2,
          "line_start": 2841,
          "line_end": 2842,
          "content": "id = (Number) identitySequence.getValueObject();<br/>                data[identityColumn] = id;"
        },
        {
          "total_lines": 2,
          "line_start": 125,
          "line_end": 126,
          "content": "persistenceScope = SCOPE_FULL;<br/>                isSchemaBased    = true;"
        },
        {
          "total_lines": 1,
          "line_start": 2688,
          "line_end": 2688,
          "content": "Session session, PersistentStore store, Result ins"
        },
        {
          "total_lines": 1,
          "line_start": 2346,
          "line_end": 2346,
          "content": "ErrorCode.COLUMN_CONSTRAINT, info"
        },
        {
          "total_lines": 1,
          "line_start": 102,
          "line_end": 102,
          "content": "Database database, HsqlName name, int type"
        },
        {
          "total_lines": 1,
          "line_start": 335,
          "line_end": 335,
          "content": "Session session, SchemaObject parentObject"
        },
        {
          "total_lines": 1,
          "line_start": 1666,
          "line_end": 1666,
          "content": "HsqlName indexName, int[] columns"
        },
        {
          "total_lines": 1,
          "line_start": 2706,
          "line_end": 2706,
          "content": "Session session, PersistentStore store, Result ins"
        },
        {
          "total_lines": 1,
          "line_start": 1628,
          "line_end": 1628,
          "content": "HsqlName indexName, int[] columns"
        },
        {
          "total_lines": 1,
          "line_start": 465,
          "line_end": 465,
          "content": "OrderedHashSet resolved, OrderedHashSet unresolved"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/OrderedLongKeyHashMap.java",
      "loc_duplicate": 96,
      "clones": [
          {
          "total_lines": 23,
          "line_start": 181,
          "line_end": 203,
          "content": "public boolean contains(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public Object get(Object key) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean addAll(Collection c) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean remove(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean isEmpty() {<br/>            return size() == 0;<br/>        }"
        },
        {
          "total_lines": 19,
          "line_start": 220,
          "line_end": 238,
          "content": "public boolean contains(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean addAll(Collection c) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean remove(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean isEmpty() {<br/>            return size() == 0;<br/>        }"
        },
        {
          "total_lines": 15,
          "line_start": 189,
          "line_end": 203,
          "content": "public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean addAll(Collection c) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean remove(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean isEmpty() {<br/>            return size() == 0;<br/>        }"
        },
        {
          "total_lines": 11,
          "line_start": 181,
          "line_end": 191,
          "content": "public boolean contains(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public Object get(Object key) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 80,
          "line_end": 86,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            return objectValueTable[lookup];<br/>        }<br/><br/>        return null;"
        },
        {
          "total_lines": 5,
          "line_start": 155,
          "line_end": 159,
          "content": "if (keySet == null) {<br/>            keySet = new KeySet();<br/>        }<br/><br/>        return keySet;"
        },
        {
          "total_lines": 5,
          "line_start": 164,
          "line_end": 168,
          "content": "if (values == null) {<br/>            values = new Values();<br/>        }<br/><br/>        return values;"
        },
        {
          "total_lines": 5,
          "line_start": 82,
          "line_end": 86,
          "content": "if (lookup != -1) {<br/>            return objectValueTable[lookup];<br/>        }<br/><br/>        return null;"
        },
        {
          "total_lines": 2,
          "line_start": 54,
          "line_end": 55,
          "content": "BaseHashMap.longKeyOrValue,<br/>              BaseHashMap.objectKeyOrValue, false"
        },
        {
          "total_lines": 2,
          "line_start": 64,
          "line_end": 65,
          "content": "BaseHashMap.longKeyOrValue,<br/>              BaseHashMap.objectKeyOrValue, false"
        },
        {
          "total_lines": 1,
          "line_start": 65,
          "line_end": 65,
          "content": "BaseHashMap.objectKeyOrValue, false"
        },
        {
          "total_lines": 1,
          "line_start": 55,
          "line_end": 55,
          "content": "BaseHashMap.objectKeyOrValue, false"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/server/Server.java",
      "loc_duplicate": 30,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 2516,
          "line_end": 2519,
          "content": "server.printError(\"Failed to set properties\");<br/>            server.printStackTrace(e);<br/><br/>            return;"
        },
        {
          "total_lines": 4,
          "line_start": 398,
          "line_end": 401,
          "content": "// snapshot<br/>            array = new ServerConnection[serverConnSet.size()];<br/><br/>            serverConnSet.toArray(array);"
        },
        {
          "total_lines": 3,
          "line_start": 2517,
          "line_end": 2519,
          "content": "server.printStackTrace(e);<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 906,
          "line_end": 908,
          "content": "e, ErrorCode.GENERAL_ERROR,<br/>                              ErrorCode.M_Message_Pair,<br/>                              new String[]{ \"Failed to set properties\" }"
        },
        {
          "total_lines": 3,
          "line_start": 951,
          "line_end": 953,
          "content": "e, ErrorCode.GENERAL_ERROR,<br/>                              ErrorCode.M_Message_Pair,<br/>                              new String[]{ \"Failed to set properties\" }"
        },
        {
          "total_lines": 3,
          "line_start": 1445,
          "line_end": 1447,
          "content": "array = new ServerConnection[serverConnSet.size()];<br/><br/>            serverConnSet.toArray(array);"
        },
        {
          "total_lines": 2,
          "line_start": 2516,
          "line_end": 2517,
          "content": "server.printError(\"Failed to set properties\");<br/>            server.printStackTrace(e);"
        },
        {
          "total_lines": 2,
          "line_start": 1669,
          "line_end": 1670,
          "content": "sb.append(r.getMainString());<br/>                        break;"
        },
        {
          "total_lines": 2,
          "line_start": 2529,
          "line_end": 2530,
          "content": "server.print(\"Could not load properties from file\");<br/>            server.print(\"Using cli/default properties only\");"
        },
        {
          "total_lines": 2,
          "line_start": 1674,
          "line_end": 1675,
          "content": "sb.append(r.getMainString());<br/>                        break;"
        },
        {
          "total_lines": 1,
          "line_start": 1224,
          "line_end": 1224,
          "content": "IOException, ServerAcl.AclFormatException"
        },
        {
          "total_lines": 1,
          "line_start": 2494,
          "line_end": 2494,
          "content": "propsPath, propsExtension"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/server/ServerAcl.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 98,
          "line_end": 98,
          "content": "-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1"
        },
        {
          "total_lines": 1,
          "line_start": 98,
          "line_end": 98,
          "content": "-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/IntervalMonthData.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/QuerySpecification.java",
      "loc_duplicate": 39,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 1918,
          "line_end": 1922,
          "content": "sb.append(exprColumns[i].getSQL());<br/><br/>                if (i < limit - 1) {<br/>                    sb.append(',');<br/>                }"
        },
        {
          "total_lines": 5,
          "line_start": 1938,
          "line_end": 1942,
          "content": "sb.append(exprColumns[i].getSQL());<br/><br/>                if (i < limit - 1) {<br/>                    sb.append(',');<br/>                }"
        },
        {
          "total_lines": 2,
          "line_start": 463,
          "line_end": 464,
          "content": "rangeGroups,<br/>                                           false"
        },
        {
          "total_lines": 2,
          "line_start": 503,
          "line_end": 504,
          "content": "rangeVariables.length,<br/>                                               rangeGroups, false"
        },
        {
          "total_lines": 2,
          "line_start": 2392,
          "line_end": 2393,
          "content": "OrderedHashSet set,<br/>            OrderedIntHashSet typeSet, OrderedIntHashSet stopAtTypeSet"
        },
        {
          "total_lines": 2,
          "line_start": 878,
          "line_end": 879,
          "content": "RangeVariable[] rangeVars,<br/>                                         OrderedHashSet set"
        },
        {
          "total_lines": 2,
          "line_start": 2462,
          "line_end": 2463,
          "content": "RangeVariable[] ranges,<br/>                                      RangeVariable[] newRanges"
        },
        {
          "total_lines": 2,
          "line_start": 536,
          "line_end": 537,
          "content": "rangeVariables.length,<br/>                                               RangeGroup.emptyArray"
        },
        {
          "total_lines": 2,
          "line_start": 1231,
          "line_end": 1232,
          "content": "ErrorCode.X_42574,<br/>                                      ((Expression) tempSet.get(0)).getSQL()"
        },
        {
          "total_lines": 2,
          "line_start": 2439,
          "line_end": 2440,
          "content": "RangeVariable range,<br/>                                        Expression[] list"
        },
        {
          "total_lines": 2,
          "line_start": 205,
          "line_end": 206,
          "content": "Session session,<br/>                                       RangeGroup[] rangeGroups"
        },
        {
          "total_lines": 2,
          "line_start": 1221,
          "line_end": 1222,
          "content": "ErrorCode.X_42574,<br/>                                  ((Expression) tempSet.get(0)).getSQL()"
        },
        {
          "total_lines": 2,
          "line_start": 444,
          "line_end": 445,
          "content": "Session session,<br/>                                         RangeGroup[] rangeGroups"
        },
        {
          "total_lines": 1,
          "line_start": 290,
          "line_end": 290,
          "content": "Session session, RangeGroup[] rangeGroups"
        },
        {
          "total_lines": 1,
          "line_start": 705,
          "line_end": 705,
          "content": "rangeVariables.length, RangeGroup.emptyArray"
        },
        {
          "total_lines": 1,
          "line_start": 166,
          "line_end": 166,
          "content": "Session session, RangeVariable rangeVar"
        },
        {
          "total_lines": 1,
          "line_start": 303,
          "line_end": 303,
          "content": "session, RangeVariable.emptyArray"
        },
        {
          "total_lines": 1,
          "line_start": 2393,
          "line_end": 2393,
          "content": "OrderedIntHashSet typeSet, OrderedIntHashSet stopAtTypeSet"
        },
        {
          "total_lines": 1,
          "line_start": 132,
          "line_end": 132,
          "content": "Session session, Table table"
        },
        {
          "total_lines": 1,
          "line_start": 504,
          "line_end": 504,
          "content": "rangeGroups, false"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestAcl.java",
      "loc_duplicate": 55,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 134,
          "line_end": 138,
          "content": "file.deleteOnExit();<br/><br/>        pw = new PrintWriter(new FileWriter(file));<br/><br/>        pw.println(\"# Permit Localhost test ACL\\n\");"
        },
        {
          "total_lines": 5,
          "line_start": 123,
          "line_end": 127,
          "content": "file.deleteOnExit();<br/><br/>        pw = new PrintWriter(new FileWriter(file));<br/><br/>        pw.println(\"# Permit Localhost test ACL\\n\");"
        },
        {
          "total_lines": 3,
          "line_start": 207,
          "line_end": 209,
          "content": "pw.println(\"allow 0.0.0.0/0\");<br/>        pw.close();<br/>        acls.add(new ServerAcl(file));"
        },
        {
          "total_lines": 3,
          "line_start": 201,
          "line_end": 203,
          "content": "file.deleteOnExit();<br/><br/>        pw = new PrintWriter(new FileWriter(file));"
        },
        {
          "total_lines": 3,
          "line_start": 184,
          "line_end": 186,
          "content": "pw.println(\"allow 0.0.0.0/0\");<br/>        pw.close();<br/>        acls.add(new ServerAcl(file));"
        },
        {
          "total_lines": 3,
          "line_start": 125,
          "line_end": 127,
          "content": "pw = new PrintWriter(new FileWriter(file));<br/><br/>        pw.println(\"# Permit Localhost test ACL\\n\");"
        },
        {
          "total_lines": 3,
          "line_start": 156,
          "line_end": 158,
          "content": "file.deleteOnExit();<br/><br/>        pw = new PrintWriter(new FileWriter(file));"
        },
        {
          "total_lines": 3,
          "line_start": 102,
          "line_end": 104,
          "content": "file.deleteOnExit();<br/><br/>        pw = new PrintWriter(new FileWriter(file));"
        },
        {
          "total_lines": 3,
          "line_start": 136,
          "line_end": 138,
          "content": "pw = new PrintWriter(new FileWriter(file));<br/><br/>        pw.println(\"# Permit Localhost test ACL\\n\");"
        },
        {
          "total_lines": 3,
          "line_start": 178,
          "line_end": 180,
          "content": "file.deleteOnExit();<br/><br/>        pw = new PrintWriter(new FileWriter(file));"
        },
        {
          "total_lines": 3,
          "line_start": 224,
          "line_end": 226,
          "content": "file.deleteOnExit();<br/><br/>        pw = new PrintWriter(new FileWriter(file));"
        },
        {
          "total_lines": 2,
          "line_start": 185,
          "line_end": 186,
          "content": "pw.close();<br/>        acls.add(new ServerAcl(file));"
        },
        {
          "total_lines": 2,
          "line_start": 129,
          "line_end": 130,
          "content": "pw.close();<br/>        acls.add(new ServerAcl(file));"
        },
        {
          "total_lines": 2,
          "line_start": 140,
          "line_end": 141,
          "content": "pw.close();<br/>        acls.add(new ServerAcl(file));"
        },
        {
          "total_lines": 2,
          "line_start": 208,
          "line_end": 209,
          "content": "pw.close();<br/>        acls.add(new ServerAcl(file));"
        },
        {
          "total_lines": 2,
          "line_start": 230,
          "line_end": 231,
          "content": "pw.close();<br/>        acls.add(new ServerAcl(file));"
        },
        {
          "total_lines": 2,
          "line_start": 108,
          "line_end": 109,
          "content": "pw.close();<br/>        acls.add(new ServerAcl(file));"
        },
        {
          "total_lines": 2,
          "line_start": 162,
          "line_end": 163,
          "content": "pw.close();<br/>        acls.add(new ServerAcl(file));"
        },
        {
          "total_lines": 1,
          "line_start": 68,
          "line_end": 68,
          "content": "IOException, ServerAcl.AclFormatException"
        },
        {
          "total_lines": 1,
          "line_start": 72,
          "line_end": 72,
          "content": "IOException, ServerAcl.AclFormatException"
        },
        {
          "total_lines": 1,
          "line_start": 80,
          "line_end": 80,
          "content": "IOException, ServerAcl.AclFormatException"
        },
        {
          "total_lines": 1,
          "line_start": 407,
          "line_end": 407,
          "content": "IOException, ServerAcl.AclFormatException"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/OrderedIntKeyHashMap.java",
      "loc_duplicate": 40,
      "clones": [
          {
          "total_lines": 8,
          "line_start": 100,
          "line_end": 107,
          "content": "Iterator it = values().iterator();<br/>        int      i  = 0;<br/><br/>        while (it.hasNext()) {<br/>            array[i] = it.next();<br/><br/>            i++;<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 62,
          "line_end": 68,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            return objectValueTable[lookup];<br/>        }<br/><br/>        return null;"
        },
        {
          "total_lines": 7,
          "line_start": 101,
          "line_end": 107,
          "content": "int      i  = 0;<br/><br/>        while (it.hasNext()) {<br/>            array[i] = it.next();<br/><br/>            i++;<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 112,
          "line_end": 116,
          "content": "if (keySet == null) {<br/>            keySet = new KeySet();<br/>        }<br/><br/>        return keySet;"
        },
        {
          "total_lines": 5,
          "line_start": 64,
          "line_end": 68,
          "content": "if (lookup != -1) {<br/>            return objectValueTable[lookup];<br/>        }<br/><br/>        return null;"
        },
        {
          "total_lines": 5,
          "line_start": 121,
          "line_end": 125,
          "content": "if (values == null) {<br/>            values = new Values();<br/>        }<br/><br/>        return values;"
        },
        {
          "total_lines": 2,
          "line_start": 54,
          "line_end": 55,
          "content": "BaseHashMap.intKeyOrValue,<br/>              BaseHashMap.objectKeyOrValue, false"
        },
        {
          "total_lines": 1,
          "line_start": 55,
          "line_end": 55,
          "content": "BaseHashMap.objectKeyOrValue, false"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/Database.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 36,
          "line_end": 37,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/McKoiTransferHelper.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 69,
          "line_end": 71,
          "content": "TransferTable t, ResultSetMetaData meta,<br/>                               String columnType, ResultSet columnDesc,<br/>                               int columnIndex"
        },
        {
          "total_lines": 3,
          "line_start": 50,
          "line_end": 52,
          "content": "TransferTable t, ResultSetMetaData meta,<br/>                              String columnType, ResultSet columnDesc,<br/>                              int columnIndex"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;"
        },
        {
          "total_lines": 1,
          "line_start": 65,
          "line_end": 65,
          "content": "Traceable t, String q"
        },
        {
          "total_lines": 1,
          "line_start": 51,
          "line_end": 51,
          "content": "String columnType, ResultSet columnDesc"
        },
        {
          "total_lines": 1,
          "line_start": 70,
          "line_end": 70,
          "content": "String columnType, ResultSet columnDesc"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestUpdatableResults.java",
      "loc_duplicate": 7,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 34,
          "line_end": 37,
          "content": "import java.sql.Connection;<br/>import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.Statement;"
        },
        {
          "total_lines": 3,
          "line_start": 35,
          "line_end": 37,
          "content": "import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.Statement;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestDbBackup.java",
      "loc_duplicate": 18,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 620,
          "line_end": 621,
          "content": "suffixPos,<br/>                    suffixPos + autoMiddlingString.length()"
        },
        {
          "total_lines": 2,
          "line_start": 310,
          "line_end": 311,
          "content": "\"--extract\", baseDir.getAbsolutePath() + '/' + baseTarName,<br/>            destDir.getAbsolutePath()"
        },
        {
          "total_lines": 2,
          "line_start": 604,
          "line_end": 605,
          "content": "suffixPos,<br/>                    suffixPos + autoMiddlingString.length()"
        },
        {
          "total_lines": 2,
          "line_start": 345,
          "line_end": 346,
          "content": "\"--extract\", baseDir.getAbsolutePath() + '/' + baseTarName,<br/>            destDir.getAbsolutePath()"
        },
        {
          "total_lines": 1,
          "line_start": 262,
          "line_end": 262,
          "content": "SQLException, IOException"
        },
        {
          "total_lines": 1,
          "line_start": 242,
          "line_end": 242,
          "content": "34, rs.getInt(\"i\")"
        },
        {
          "total_lines": 1,
          "line_start": 254,
          "line_end": 254,
          "content": "SQLException, IOException"
        },
        {
          "total_lines": 1,
          "line_start": 355,
          "line_end": 355,
          "content": "34, rs.getInt(\"i\")"
        },
        {
          "total_lines": 1,
          "line_start": 362,
          "line_end": 362,
          "content": "SQLException, IOException"
        },
        {
          "total_lines": 1,
          "line_start": 270,
          "line_end": 270,
          "content": "SQLException, IOException"
        },
        {
          "total_lines": 1,
          "line_start": 386,
          "line_end": 386,
          "content": "SQLException, IOException"
        },
        {
          "total_lines": 1,
          "line_start": 249,
          "line_end": 249,
          "content": "SQLException, IOException"
        },
        {
          "total_lines": 1,
          "line_start": 330,
          "line_end": 330,
          "content": "SQLException, IOException"
        },
        {
          "total_lines": 1,
          "line_start": 519,
          "line_end": 519,
          "content": "SQLException, IOException"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/result/Result.java",
      "loc_duplicate": 242,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 361,
          "line_end": 369,
          "content": "result.generateKeys = in.readByte();<br/><br/>                if (result.generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_NAMES || result<br/>                        .generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_INDEXES) {<br/>                    result.generatedMetaData = new ResultMetaData(in);<br/>                }<br/>                break;"
        },
        {
          "total_lines": 9,
          "line_start": 386,
          "line_end": 394,
          "content": "result.generateKeys        = in.readByte();<br/><br/>                if (result.generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_NAMES || result<br/>                        .generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_INDEXES) {<br/>                    result.generatedMetaData = new ResultMetaData(in);<br/>                }<br/>                break;"
        },
        {
          "total_lines": 8,
          "line_start": 361,
          "line_end": 368,
          "content": "result.generateKeys = in.readByte();<br/><br/>                if (result.generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_NAMES || result<br/>                        .generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_INDEXES) {<br/>                    result.generatedMetaData = new ResultMetaData(in);<br/>                }"
        },
        {
          "total_lines": 8,
          "line_start": 386,
          "line_end": 393,
          "content": "result.generateKeys        = in.readByte();<br/><br/>                if (result.generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_NAMES || result<br/>                        .generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_INDEXES) {<br/>                    result.generatedMetaData = new ResultMetaData(in);<br/>                }"
        },
        {
          "total_lines": 8,
          "line_start": 1092,
          "line_end": 1099,
          "content": "rowOut.writeByte(generateKeys);<br/><br/>                if (generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_NAMES || generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_INDEXES) {<br/>                    generatedMetaData.write(rowOut);<br/>                }<br/>                break;"
        },
        {
          "total_lines": 8,
          "line_start": 1116,
          "line_end": 1123,
          "content": "rowOut.writeByte(generateKeys);<br/><br/>                if (generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_NAMES || generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_INDEXES) {<br/>                    generatedMetaData.write(rowOut);<br/>                }<br/>                break;"
        },
        {
          "total_lines": 7,
          "line_start": 1092,
          "line_end": 1098,
          "content": "rowOut.writeByte(generateKeys);<br/><br/>                if (generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_NAMES || generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_INDEXES) {<br/>                    generatedMetaData.write(rowOut);<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 388,
          "line_end": 394,
          "content": "if (result.generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_NAMES || result<br/>                        .generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_INDEXES) {<br/>                    result.generatedMetaData = new ResultMetaData(in);<br/>                }<br/>                break;"
        },
        {
          "total_lines": 7,
          "line_start": 363,
          "line_end": 369,
          "content": "if (result.generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_NAMES || result<br/>                        .generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_INDEXES) {<br/>                    result.generatedMetaData = new ResultMetaData(in);<br/>                }<br/>                break;"
        },
        {
          "total_lines": 7,
          "line_start": 1116,
          "line_end": 1122,
          "content": "rowOut.writeByte(generateKeys);<br/><br/>                if (generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_NAMES || generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_INDEXES) {<br/>                    generatedMetaData.write(rowOut);<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 1118,
          "line_end": 1123,
          "content": "if (generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_NAMES || generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_INDEXES) {<br/>                    generatedMetaData.write(rowOut);<br/>                }<br/>                break;"
        },
        {
          "total_lines": 6,
          "line_start": 1094,
          "line_end": 1099,
          "content": "if (generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_NAMES || generateKeys == ResultConstants<br/>                        .RETURN_GENERATED_KEYS_COL_INDEXES) {<br/>                    generatedMetaData.write(rowOut);<br/>                }<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 270,
          "line_end": 272,
          "content": "SessionInterface session,<br/>                                      DataInputStream inputStream,<br/>                                      RowInputBinary in"
        },
        {
          "total_lines": 3,
          "line_start": 1205,
          "line_end": 1207,
          "content": "metaData.write(rowOut);<br/>                writeSimple(rowOut, metaData, (Object[]) valueData);<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 1112,
          "line_end": 1114,
          "content": "rowOut.writeByte(statementReturnType);<br/>                rowOut.writeString(mainString);<br/>                rowOut.writeByte(rsProperties);"
        },
        {
          "total_lines": 3,
          "line_start": 1189,
          "line_end": 1191,
          "content": "metaData.write(rowOut);<br/>                writeSimple(rowOut, metaData, (Object[]) valueData);<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 1184,
          "line_end": 1186,
          "content": "rowOut.writeInt(updateCount);<br/>                rowOut.writeInt(fetchSize);<br/>                rowOut.writeLong(statementID);"
        },
        {
          "total_lines": 3,
          "line_start": 1194,
          "line_end": 1196,
          "content": "rowOut.writeInt(updateCount);<br/>                rowOut.writeInt(fetchSize);<br/>                rowOut.writeLong(statementID);"
        },
        {
          "total_lines": 3,
          "line_start": 475,
          "line_end": 477,
          "content": "result.updateCount         = in.readInt();<br/>                result.fetchSize           = in.readInt();<br/>                result.statementID         = in.readLong();"
        },
        {
          "total_lines": 3,
          "line_start": 1255,
          "line_end": 1257,
          "content": "metaData.write(rowOut);<br/>                navigator.write(rowOut, metaData);<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 1266,
          "line_end": 1268,
          "content": "metaData.write(rowOut);<br/>                navigator.write(rowOut, metaData);<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 485,
          "line_end": 487,
          "content": "result.updateCount  = in.readInt();<br/>                result.fetchSize    = in.readInt();<br/>                result.statementID  = in.readLong();"
        },
        {
          "total_lines": 3,
          "line_start": 292,
          "line_end": 294,
          "content": "SessionInterface session,<br/>                               DataInputStream inputStream,<br/>                               RowInputBinary in"
        },
        {
          "total_lines": 3,
          "line_start": 438,
          "line_end": 440,
          "content": "break;<br/><br/>                    default :"
        },
        {
          "total_lines": 3,
          "line_start": 1089,
          "line_end": 1091,
          "content": "rowOut.writeByte(statementReturnType);<br/>                rowOut.writeString(mainString);<br/>                rowOut.writeByte(rsProperties);"
        },
        {
          "total_lines": 2,
          "line_start": 1110,
          "line_end": 1111,
          "content": "rowOut.writeInt(updateCount);<br/>                rowOut.writeInt(fetchSize);"
        },
        {
          "total_lines": 2,
          "line_start": 1185,
          "line_end": 1186,
          "content": "rowOut.writeInt(fetchSize);<br/>                rowOut.writeLong(statementID);"
        },
        {
          "total_lines": 2,
          "line_start": 1196,
          "line_end": 1197,
          "content": "rowOut.writeLong(statementID);<br/>                rowOut.writeByte(rsProperties);"
        },
        {
          "total_lines": 2,
          "line_start": 401,
          "line_end": 402,
          "content": "result.updateCount  = in.readInt();<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1197,
          "line_end": 1198,
          "content": "rowOut.writeByte(rsProperties);<br/>                rowOut.writeShort(queryTimeout);"
        },
        {
          "total_lines": 2,
          "line_start": 481,
          "line_end": 482,
          "content": "result.valueData           = readSimple(in, result.metaData);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 479,
          "line_end": 480,
          "content": "result.rsProperties        = in.readByte();<br/>                result.metaData            = new ResultMetaData(in);"
        },
        {
          "total_lines": 2,
          "line_start": 380,
          "line_end": 381,
          "content": "result.updateCount         = in.readInt();<br/>                result.fetchSize           = in.readInt();"
        },
        {
          "total_lines": 2,
          "line_start": 383,
          "line_end": 384,
          "content": "result.mainString          = in.readString();<br/>                result.rsProperties        = in.readByte();"
        },
        {
          "total_lines": 2,
          "line_start": 293,
          "line_end": 294,
          "content": "DataInputStream inputStream,<br/>                               RowInputBinary in"
        },
        {
          "total_lines": 2,
          "line_start": 292,
          "line_end": 293,
          "content": "SessionInterface session,<br/>                               DataInputStream inputStream"
        },
        {
          "total_lines": 2,
          "line_start": 1178,
          "line_end": 1179,
          "content": "rowOut.writeByte(rsProperties);<br/>                metaData.write(rowOut);"
        },
        {
          "total_lines": 2,
          "line_start": 468,
          "line_end": 469,
          "content": "result.statementID         = in.readLong();<br/>                result.rsProperties        = in.readByte();"
        },
        {
          "total_lines": 2,
          "line_start": 406,
          "line_end": 407,
          "content": "result.mainString = in.readString();<br/>                result.subString  = in.readString();"
        },
        {
          "total_lines": 2,
          "line_start": 330,
          "line_end": 331,
          "content": "DataInput dataInput,<br/>                                    RowInputBinary in"
        },
        {
          "total_lines": 2,
          "line_start": 271,
          "line_end": 272,
          "content": "DataInputStream inputStream,<br/>                                      RowInputBinary in"
        },
        {
          "total_lines": 2,
          "line_start": 1206,
          "line_end": 1207,
          "content": "writeSimple(rowOut, metaData, (Object[]) valueData);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 226,
          "line_end": 227,
          "content": "navigator = new RowSetNavigatorClient(4);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 488,
          "line_end": 489,
          "content": "result.rsProperties = in.readByte();<br/>                result.queryTimeout = in.readShort();"
        },
        {
          "total_lines": 2,
          "line_start": 1135,
          "line_end": 1136,
          "content": "rowOut.writeString(mainString);<br/>                rowOut.writeString(subString);"
        },
        {
          "total_lines": 2,
          "line_start": 1265,
          "line_end": 1266,
          "content": "rowOut.writeByte(rsProperties);<br/>                metaData.write(rowOut);"
        },
        {
          "total_lines": 2,
          "line_start": 1112,
          "line_end": 1113,
          "content": "rowOut.writeByte(statementReturnType);<br/>                rowOut.writeString(mainString);"
        },
        {
          "total_lines": 2,
          "line_start": 1066,
          "line_end": 1067,
          "content": "SessionInterface session, DataOutputStream dataOut,<br/>                      RowOutputInterface rowOut"
        },
        {
          "total_lines": 2,
          "line_start": 1126,
          "line_end": 1127,
          "content": "rowOut.writeString(databaseName);<br/>                rowOut.writeString(mainString);"
        },
        {
          "total_lines": 2,
          "line_start": 1190,
          "line_end": 1191,
          "content": "writeSimple(rowOut, metaData, (Object[]) valueData);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 751,
          "line_end": 752,
          "content": "String zoneString,<br/>            int timeZoneSeconds"
        },
        {
          "total_lines": 2,
          "line_start": 419,
          "line_end": 420,
          "content": "result.updateCount = in.readInt();<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 469,
          "line_end": 470,
          "content": "result.rsProperties        = in.readByte();<br/>                result.metaData            = new ResultMetaData(in);"
        },
        {
          "total_lines": 2,
          "line_start": 414,
          "line_end": 415,
          "content": "result.databaseName = in.readString();<br/>                result.mainString   = in.readString();"
        },
        {
          "total_lines": 2,
          "line_start": 270,
          "line_end": 271,
          "content": "SessionInterface session,<br/>                                      DataInputStream inputStream"
        },
        {
          "total_lines": 2,
          "line_start": 384,
          "line_end": 385,
          "content": "result.rsProperties        = in.readByte();<br/>                result.queryTimeout        = in.readShort();"
        },
        {
          "total_lines": 2,
          "line_start": 487,
          "line_end": 488,
          "content": "result.statementID  = in.readLong();<br/>                result.rsProperties = in.readByte();"
        },
        {
          "total_lines": 2,
          "line_start": 1195,
          "line_end": 1196,
          "content": "rowOut.writeInt(fetchSize);<br/>                rowOut.writeLong(statementID);"
        },
        {
          "total_lines": 2,
          "line_start": 1263,
          "line_end": 1264,
          "content": "rowOut.writeInt(updateCount);<br/>                rowOut.writeInt(fetchSize);"
        },
        {
          "total_lines": 2,
          "line_start": 1127,
          "line_end": 1128,
          "content": "rowOut.writeString(mainString);<br/>                rowOut.writeString(subString);"
        },
        {
          "total_lines": 2,
          "line_start": 1205,
          "line_end": 1206,
          "content": "metaData.write(rowOut);<br/>                writeSimple(rowOut, metaData, (Object[]) valueData);"
        },
        {
          "total_lines": 2,
          "line_start": 1130,
          "line_end": 1131,
          "content": "rowOut.writeInt(updateCount);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1267,
          "line_end": 1268,
          "content": "navigator.write(rowOut, metaData);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1189,
          "line_end": 1190,
          "content": "metaData.write(rowOut);<br/>                writeSimple(rowOut, metaData, (Object[]) valueData);"
        },
        {
          "total_lines": 2,
          "line_start": 253,
          "line_end": 254,
          "content": "DataInput dataInput,<br/>                                   RowInputBinary in"
        },
        {
          "total_lines": 2,
          "line_start": 1188,
          "line_end": 1189,
          "content": "rowOut.writeByte(rsProperties);<br/>                metaData.write(rowOut);"
        },
        {
          "total_lines": 2,
          "line_start": 1194,
          "line_end": 1195,
          "content": "rowOut.writeInt(updateCount);<br/>                rowOut.writeInt(fetchSize);"
        },
        {
          "total_lines": 2,
          "line_start": 1114,
          "line_end": 1115,
          "content": "rowOut.writeByte(rsProperties);<br/>                rowOut.writeShort(queryTimeout);"
        },
        {
          "total_lines": 2,
          "line_start": 1177,
          "line_end": 1178,
          "content": "rowOut.writeLong(statementID);<br/>                rowOut.writeByte(rsProperties);"
        },
        {
          "total_lines": 2,
          "line_start": 1089,
          "line_end": 1090,
          "content": "rowOut.writeByte(statementReturnType);<br/>                rowOut.writeString(mainString);"
        },
        {
          "total_lines": 2,
          "line_start": 506,
          "line_end": 507,
          "content": "result.valueData = readSimple(in, result.metaData);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1184,
          "line_end": 1185,
          "content": "rowOut.writeInt(updateCount);<br/>                rowOut.writeInt(fetchSize);"
        },
        {
          "total_lines": 2,
          "line_start": 398,
          "line_end": 399,
          "content": "result.mainString   = in.readString();<br/>                result.subString    = in.readString();"
        },
        {
          "total_lines": 2,
          "line_start": 1143,
          "line_end": 1144,
          "content": "rowOut.writeString(databaseName);<br/>                rowOut.writeString(mainString);"
        },
        {
          "total_lines": 2,
          "line_start": 217,
          "line_end": 218,
          "content": "navigator = new RowSetNavigatorClient(4);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1569,
          "line_end": 1570,
          "content": "data, null,<br/>                      null"
        },
        {
          "total_lines": 2,
          "line_start": 1256,
          "line_end": 1257,
          "content": "navigator.write(rowOut, metaData);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1199,
          "line_end": 1200,
          "content": "writeSimple(rowOut, metaData, (Object[]) valueData);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 359,
          "line_end": 360,
          "content": "result.mainString   = in.readString();<br/>                result.rsProperties = in.readByte();"
        },
        {
          "total_lines": 2,
          "line_start": 397,
          "line_end": 398,
          "content": "result.databaseName = in.readString();<br/>                result.mainString   = in.readString();"
        },
        {
          "total_lines": 2,
          "line_start": 1148,
          "line_end": 1149,
          "content": "rowOut.writeInt(updateCount);<br/>                break;"
        },
        {
          "total_lines": 1,
          "line_start": 1569,
          "line_end": 1569,
          "content": "data, null"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/PersistentStore.java",
      "loc_duplicate": 13,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 159,
          "line_end": 160,
          "content": "int colindex,<br/>                  int adjust"
        },
        {
          "total_lines": 2,
          "line_start": 140,
          "line_end": 141,
          "content": "Session session, Index idx, int count,<br/>                             int opType"
        },
        {
          "total_lines": 2,
          "line_start": 83,
          "line_end": 84,
          "content": "CachedObject object, int mode,<br/>                    int[] colMap"
        },
        {
          "total_lines": 1,
          "line_start": 112,
          "line_end": 112,
          "content": "Session session, Row row, int changeAction"
        },
        {
          "total_lines": 1,
          "line_start": 83,
          "line_end": 83,
          "content": "CachedObject object, int mode"
        },
        {
          "total_lines": 1,
          "line_start": 140,
          "line_end": 140,
          "content": "Index idx, int count"
        },
        {
          "total_lines": 1,
          "line_start": 88,
          "line_end": 88,
          "content": "CachedObject object, RowInputInterface in"
        },
        {
          "total_lines": 1,
          "line_start": 79,
          "line_end": 79,
          "content": "CachedObject object, boolean tx"
        },
        {
          "total_lines": 1,
          "line_start": 110,
          "line_end": 110,
          "content": "Session session, Row row, int changeAction"
        },
        {
          "total_lines": 1,
          "line_start": 81,
          "line_end": 81,
          "content": "int mode, int[] colMap"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestPreparedStatements.java",
      "loc_duplicate": 26,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 207,
          "line_end": 213,
          "content": "System.out.println(\" -- executing directly\\n<<<\\n\"<br/>                                       + stmtArray[i].command + \"\\n>>>\\n\");<br/><br/>                    Statement s = con.createStatement();<br/>                    boolean   b = s.execute(stmtArray[i].command);<br/><br/>                    System.out.println(\" ***** st.execute gave me \" + b);"
        },
        {
          "total_lines": 4,
          "line_start": 179,
          "line_end": 182,
          "content": "int r = ps.executeUpdate();<br/><br/>                        System.out.println(\" ***** ps.executeUpdate gave me \"<br/>                                           + r);"
        },
        {
          "total_lines": 4,
          "line_start": 207,
          "line_end": 210,
          "content": "System.out.println(\" -- executing directly\\n<<<\\n\"<br/>                                       + stmtArray[i].command + \"\\n>>>\\n\");<br/><br/>                    Statement s = con.createStatement();"
        },
        {
          "total_lines": 3,
          "line_start": 138,
          "line_end": 140,
          "content": "Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");<br/><br/>            con = java.sql.DriverManager.getConnection(url, \"sa\", \"\");"
        },
        {
          "total_lines": 3,
          "line_start": 211,
          "line_end": 213,
          "content": "boolean   b = s.execute(stmtArray[i].command);<br/><br/>                    System.out.println(\" ***** st.execute gave me \" + b);"
        },
        {
          "total_lines": 1,
          "line_start": 98,
          "line_end": 98,
          "content": "true, null"
        },
        {
          "total_lines": 1,
          "line_start": 95,
          "line_end": 95,
          "content": "true, null"
        },
        {
          "total_lines": 1,
          "line_start": 92,
          "line_end": 92,
          "content": "true, null"
        },
        {
          "total_lines": 1,
          "line_start": 104,
          "line_end": 104,
          "content": "true, null"
        },
        {
          "total_lines": 1,
          "line_start": 103,
          "line_end": 103,
          "content": "true, null"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/RAFileInJar.java",
      "loc_duplicate": 10,
      "clones": [
          {
          "total_lines": 10,
          "line_start": 227,
          "line_end": 236,
          "content": "fis = getClass().getResourceAsStream(fileName);<br/><br/>            if (fis == null) {<br/>                ClassLoader cl =<br/>                    Thread.currentThread().getContextClassLoader();<br/><br/>                if (cl != null) {<br/>                    fis = cl.getResourceAsStream(fileName);<br/>                }<br/>            }"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/Crypto.java",
      "loc_duplicate": 68,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 173,
          "line_end": 181,
          "content": "catch (java.security.InvalidKeyException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (BadPaddingException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (IllegalBlockSizeException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (ShortBufferException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        }"
        },
        {
          "total_lines": 9,
          "line_start": 150,
          "line_end": 158,
          "content": "catch (java.security.InvalidKeyException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (BadPaddingException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (IllegalBlockSizeException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (ShortBufferException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 152,
          "line_end": 158,
          "content": "catch (BadPaddingException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (IllegalBlockSizeException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (ShortBufferException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 150,
          "line_end": 156,
          "content": "catch (java.security.InvalidKeyException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (BadPaddingException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (IllegalBlockSizeException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 175,
          "line_end": 181,
          "content": "catch (BadPaddingException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (IllegalBlockSizeException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (ShortBufferException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 173,
          "line_end": 179,
          "content": "catch (java.security.InvalidKeyException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (BadPaddingException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (IllegalBlockSizeException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 173,
          "line_end": 177,
          "content": "catch (java.security.InvalidKeyException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (BadPaddingException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 150,
          "line_end": 154,
          "content": "catch (java.security.InvalidKeyException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        } catch (BadPaddingException e) {<br/>            throw Error.error(ErrorCode.X_S0531, e);<br/>        }"
        },
        {
          "total_lines": 2,
          "line_start": 161,
          "line_end": 162,
          "content": "byte[] source, int sourceOffset,<br/>                                   int length"
        },
        {
          "total_lines": 2,
          "line_start": 171,
          "line_end": 172,
          "content": "length, dest,<br/>                                     destOffset"
        },
        {
          "total_lines": 2,
          "line_start": 148,
          "line_end": 149,
          "content": "length, dest,<br/>                                    destOffset"
        },
        {
          "total_lines": 2,
          "line_start": 138,
          "line_end": 139,
          "content": "byte[] source, int sourceOffset,<br/>                                   int length"
        },
        {
          "total_lines": 2,
          "line_start": 51,
          "line_end": 52,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 1,
          "line_start": 139,
          "line_end": 139,
          "content": "int length, byte[] dest"
        },
        {
          "total_lines": 1,
          "line_start": 162,
          "line_end": 162,
          "content": "int length, byte[] dest"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/DirectoryBlockCachedObject.java",
      "loc_duplicate": 16,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 34,
          "line_end": 40,
          "content": "import java.io.IOException;<br/><br/>import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.lib.LongLookup;<br/>import org.hsqldb.rowio.RowInputInterface;<br/>import org.hsqldb.rowio.RowOutputInterface;"
        },
        {
          "total_lines": 5,
          "line_start": 36,
          "line_end": 40,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.lib.LongLookup;<br/>import org.hsqldb.rowio.RowInputInterface;<br/>import org.hsqldb.rowio.RowOutputInterface;"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import java.io.IOException;<br/><br/>import org.hsqldb.error.Error;"
        },
        {
          "total_lines": 1,
          "line_start": 132,
          "line_end": 132,
          "content": "RowOutputInterface out, LongLookup lookup"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/RowStoreDataChange.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 79,
          "line_end": 83,
          "content": "catch (HsqlException e) {<br/>            return null;<br/>        } catch (IOException e1) {<br/>            return null;<br/>        }"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/RowAction.java",
      "loc_duplicate": 32,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 853,
          "line_end": 856,
          "content": "actionType = ACTION_INSERT;<br/><br/>                        session.tempSet.clear();<br/>                        session.tempSet.add(action);"
        },
        {
          "total_lines": 4,
          "line_start": 821,
          "line_end": 824,
          "content": "actionType = ACTION_INSERT;<br/><br/>                        session.tempSet.clear();<br/>                        session.tempSet.add(action);"
        },
        {
          "total_lines": 3,
          "line_start": 658,
          "line_end": 660,
          "content": "case ACTION_INSERT_DELETE :<br/>                    setAsDeleteFinal(timestamp);<br/>                    break;"
        },
        {
          "total_lines": 3,
          "line_start": 821,
          "line_end": 823,
          "content": "actionType = ACTION_INSERT;<br/><br/>                        session.tempSet.clear();"
        },
        {
          "total_lines": 3,
          "line_start": 664,
          "line_end": 666,
          "content": "default :<br/>                    setAsNoOp();<br/>                    break;"
        },
        {
          "total_lines": 3,
          "line_start": 853,
          "line_end": 855,
          "content": "actionType = ACTION_INSERT;<br/><br/>                        session.tempSet.clear();"
        },
        {
          "total_lines": 3,
          "line_start": 740,
          "line_end": 742,
          "content": "default :<br/>                    setAsNoOp();<br/>                    break;"
        },
        {
          "total_lines": 3,
          "line_start": 734,
          "line_end": 736,
          "content": "case ACTION_INSERT_DELETE :<br/>                    setAsDeleteFinal(timestamp);<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 658,
          "line_end": 659,
          "content": "case ACTION_INSERT_DELETE :<br/>                    setAsDeleteFinal(timestamp);"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 734,
          "line_end": 735,
          "content": "case ACTION_INSERT_DELETE :<br/>                    setAsDeleteFinal(timestamp);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/CachedObject.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 89,
          "line_end": 89,
          "content": "RowOutputInterface out, LongLookup lookup"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementCommand.java",
      "loc_duplicate": 156,
      "clones": [
          {
          "total_lines": 23,
          "line_start": 214,
          "line_end": 236,
          "content": "Result result;<br/><br/>        try {<br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/><br/>            return result;<br/>        }<br/><br/>        try {<br/>            if (isLogged) {<br/>                session.database.logger.writeOtherStatement(session, sql);<br/>            }<br/>        } catch (Throwable e) {<br/>            return Result.newErrorResult(e, sql);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 21,
          "line_start": 214,
          "line_end": 234,
          "content": "Result result;<br/><br/>        try {<br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/><br/>            return result;<br/>        }<br/><br/>        try {<br/>            if (isLogged) {<br/>                session.database.logger.writeOtherStatement(session, sql);<br/>            }<br/>        } catch (Throwable e) {<br/>            return Result.newErrorResult(e, sql);<br/>        }"
        },
        {
          "total_lines": 21,
          "line_start": 216,
          "line_end": 236,
          "content": "try {<br/>            result = getResult(session);<br/>        } catch (Throwable t) {<br/>            result = Result.newErrorResult(t, null);<br/>        }<br/><br/>        if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/><br/>            return result;<br/>        }<br/><br/>        try {<br/>            if (isLogged) {<br/>                session.database.logger.writeOtherStatement(session, sql);<br/>            }<br/>        } catch (Throwable e) {<br/>            return Result.newErrorResult(e, sql);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 15,
          "line_start": 222,
          "line_end": 236,
          "content": "if (result.isError()) {<br/>            result.getException().setStatementType(group, type);<br/><br/>            return result;<br/>        }<br/><br/>        try {<br/>            if (isLogged) {<br/>                session.database.logger.writeOtherStatement(session, sql);<br/>            }<br/>        } catch (Throwable e) {<br/>            return Result.newErrorResult(e, sql);<br/>        }<br/><br/>        return result;"
        },
        {
          "total_lines": 4,
          "line_start": 561,
          "line_end": 564,
          "content": "int value = ((Integer) parameters[0]).intValue();<br/><br/>                    session.checkAdmin();<br/>                    session.checkDDLWrite();"
        },
        {
          "total_lines": 4,
          "line_start": 548,
          "line_end": 551,
          "content": "int value = ((Integer) parameters[0]).intValue();<br/><br/>                    session.checkAdmin();<br/>                    session.checkDDLWrite();"
        },
        {
          "total_lines": 4,
          "line_start": 362,
          "line_end": 365,
          "content": "int value = ((Integer) parameters[0]).intValue();<br/><br/>                    session.checkAdmin();<br/>                    session.checkDDLWrite();"
        },
        {
          "total_lines": 3,
          "line_start": 114,
          "line_end": 116,
          "content": "group    = StatementTypes.X_HSQLDB_DATABASE_OPERATION;<br/>                isLogged = false;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 189,
          "line_end": 191,
          "content": "isTransactionStatement = false;<br/>                isLogged               = false;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 202,
          "line_end": 204,
          "content": "isTransactionStatement = false;<br/>                isLogged               = false;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 98,
          "line_end": 100,
          "content": "group    = StatementTypes.X_HSQLDB_DATABASE_OPERATION;<br/>                isLogged = false;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 1213,
          "line_end": 1215,
          "content": "targetSession.abortTransaction = true;<br/><br/>                            targetSession.latch.setCount(0);"
        },
        {
          "total_lines": 3,
          "line_start": 93,
          "line_end": 95,
          "content": "isTransactionStatement = false;<br/>                isLogged               = false;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 1206,
          "line_end": 1208,
          "content": "targetSession.abortTransaction = true;<br/><br/>                            targetSession.latch.setCount(0);"
        },
        {
          "total_lines": 3,
          "line_start": 179,
          "line_end": 181,
          "content": "isTransactionStatement = false;<br/>                isLogged               = false;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 189,
          "line_end": 190,
          "content": "isTransactionStatement = false;<br/>                isLogged               = false;"
        },
        {
          "total_lines": 2,
          "line_start": 180,
          "line_end": 181,
          "content": "isLogged               = false;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 203,
          "line_end": 204,
          "content": "isLogged               = false;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1255,
          "line_end": 1256,
          "content": "ErrorCode.X_23504,<br/>                                                  refTable.getName().name"
        },
        {
          "total_lines": 2,
          "line_start": 620,
          "line_end": 621,
          "content": "session.checkAdmin();<br/>                session.checkDDLWrite();"
        },
        {
          "total_lines": 2,
          "line_start": 123,
          "line_end": 124,
          "content": "group                  = StatementTypes.X_HSQLDB_SETTING;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 156,
          "line_end": 157,
          "content": "group = StatementTypes.X_HSQLDB_SETTING;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 93,
          "line_end": 94,
          "content": "isTransactionStatement = false;<br/>                isLogged               = false;"
        },
        {
          "total_lines": 2,
          "line_start": 170,
          "line_end": 171,
          "content": "group = StatementTypes.X_HSQLDB_SCHEMA_MANIPULATION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 190,
          "line_end": 191,
          "content": "isLogged               = false;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 196,
          "line_end": 197,
          "content": "group                  = StatementTypes.X_HSQLDB_SETTING;<br/>                isTransactionStatement = false;"
        },
        {
          "total_lines": 2,
          "line_start": 174,
          "line_end": 175,
          "content": "group = StatementTypes.X_HSQLDB_SCHEMA_MANIPULATION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 94,
          "line_end": 95,
          "content": "isLogged               = false;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 188,
          "line_end": 189,
          "content": "group                  = StatementTypes.X_HSQLDB_SETTING;<br/>                isTransactionStatement = false;"
        },
        {
          "total_lines": 2,
          "line_start": 1291,
          "line_end": 1292,
          "content": "ErrorCode.X_23504,<br/>                                                      refTable.getName().name"
        },
        {
          "total_lines": 2,
          "line_start": 179,
          "line_end": 180,
          "content": "isTransactionStatement = false;<br/>                isLogged               = false;"
        },
        {
          "total_lines": 2,
          "line_start": 202,
          "line_end": 203,
          "content": "isTransactionStatement = false;<br/>                isLogged               = false;"
        },
        {
          "total_lines": 2,
          "line_start": 162,
          "line_end": 163,
          "content": "group = StatementTypes.X_HSQLDB_SCHEMA_MANIPULATION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 184,
          "line_end": 185,
          "content": "group = StatementTypes.X_HSQLDB_SCHEMA_MANIPULATION;<br/>                break;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/HsqlHeap.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 81,
          "line_end": 81,
          "content": "IllegalArgumentException, RuntimeException"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementSchema.java",
      "loc_duplicate": 180,
      "clones": [
          {
          "total_lines": 18,
          "line_start": 1485,
          "line_end": 1502,
          "content": "if (session.isProcessingLog()) {<br/>            return;<br/>        }<br/><br/>        if (SqlInvariants.isSystemSchemaName(schema.name)) {<br/>            throw Error.error(ErrorCode.X_42503);<br/>        }<br/><br/>        if (session.parser.isSchemaDefinition) {<br/>            if (schema == session.getCurrentSchemaHsqlName()) {<br/>                return;<br/>            }<br/><br/>            Error.error(ErrorCode.X_42505, schema.name);<br/>        }<br/><br/>        session.getGrantee().checkSchemaUpdateOrGrantRights(schema.name);<br/>        session.checkDDLWrite();"
        },
        {
          "total_lines": 9,
          "line_start": 1513,
          "line_end": 1521,
          "content": "name.schema = session.getSchemaHsqlName(name.schema.name);<br/><br/>            if (name.schema == null) {<br/>                throw Error.error(ErrorCode.X_42505);<br/>            }<br/><br/>            if (isSchemaDefinition && schemaName != name.schema) {<br/>                throw Error.error(ErrorCode.X_42505);<br/>            }"
        },
        {
          "total_lines": 9,
          "line_start": 1542,
          "line_end": 1550,
          "content": "name.schema = session.getSchemaHsqlName(name.schema.name);<br/><br/>            if (name.schema == null) {<br/>                throw Error.error(ErrorCode.X_42505);<br/>            }<br/><br/>            if (isSchemaDefinition && schemaName != name.schema) {<br/>                throw Error.error(ErrorCode.X_42505);<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 1544,
          "line_end": 1550,
          "content": "if (name.schema == null) {<br/>                throw Error.error(ErrorCode.X_42505);<br/>            }<br/><br/>            if (isSchemaDefinition && schemaName != name.schema) {<br/>                throw Error.error(ErrorCode.X_42505);<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 1515,
          "line_end": 1521,
          "content": "if (name.schema == null) {<br/>                throw Error.error(ErrorCode.X_42505);<br/>            }<br/><br/>            if (isSchemaDefinition && schemaName != name.schema) {<br/>                throw Error.error(ErrorCode.X_42505);<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 1542,
          "line_end": 1546,
          "content": "name.schema = session.getSchemaHsqlName(name.schema.name);<br/><br/>            if (name.schema == null) {<br/>                throw Error.error(ErrorCode.X_42505);<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 1513,
          "line_end": 1517,
          "content": "name.schema = session.getSchemaHsqlName(name.schema.name);<br/><br/>            if (name.schema == null) {<br/>                throw Error.error(ErrorCode.X_42505);<br/>            }"
        },
        {
          "total_lines": 4,
          "line_start": 1390,
          "line_end": 1393,
          "content": "HsqlName objectName = (HsqlName) set.get(0);<br/><br/>            throw Error.error(ErrorCode.X_42502,<br/>                              objectName.getSchemaQualifiedStatementName());"
        },
        {
          "total_lines": 3,
          "line_start": 175,
          "line_end": 177,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 1;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 141,
          "line_end": 143,
          "content": "group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;<br/>                order = 10;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 195,
          "line_end": 197,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 1;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 165,
          "line_end": 167,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 1;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 170,
          "line_end": 172,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 2;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 1172,
          "line_end": 1174,
          "content": "Result result = statement.execute(session);<br/><br/>                        table.insertIntoTable(session, result);"
        },
        {
          "total_lines": 3,
          "line_start": 220,
          "line_end": 222,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 1;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 200,
          "line_end": 202,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 1;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 155,
          "line_end": 157,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 1;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 274,
          "line_end": 276,
          "content": "result.getException().setStatementType(group, type);<br/><br/>            return result;"
        },
        {
          "total_lines": 3,
          "line_start": 190,
          "line_end": 192,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 2;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 185,
          "line_end": 187,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 7;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 136,
          "line_end": 138,
          "content": "group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;<br/>                order = 10;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 180,
          "line_end": 182,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 1;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 210,
          "line_end": 212,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 1;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 160,
          "line_end": 162,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 7;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 230,
          "line_end": 232,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 1;<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 225,
          "line_end": 227,
          "content": "group = StatementTypes.X_SQL_SCHEMA_DEFINITION;<br/>                order = 1;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 141,
          "line_end": 142,
          "content": "group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;<br/>                order = 10;"
        },
        {
          "total_lines": 2,
          "line_start": 221,
          "line_end": 222,
          "content": "order = 1;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 156,
          "line_end": 157,
          "content": "order = 1;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 181,
          "line_end": 182,
          "content": "order = 1;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 231,
          "line_end": 232,
          "content": "order = 1;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 109,
          "line_end": 110,
          "content": "group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1082,
          "line_end": 1083,
          "content": "session.checkAdmin();<br/>                    session.checkDDLWrite();"
        },
        {
          "total_lines": 2,
          "line_start": 1443,
          "line_end": 1444,
          "content": "ErrorCode.X_42502,<br/>                              schema.getName().statementName"
        },
        {
          "total_lines": 2,
          "line_start": 1381,
          "line_end": 1382,
          "content": "Session session, HsqlName name,<br/>                                   boolean cascade"
        },
        {
          "total_lines": 2,
          "line_start": 98,
          "line_end": 99,
          "content": "group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 161,
          "line_end": 162,
          "content": "order = 7;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 196,
          "line_end": 197,
          "content": "order = 1;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 136,
          "line_end": 137,
          "content": "group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;<br/>                order = 10;"
        },
        {
          "total_lines": 2,
          "line_start": 191,
          "line_end": 192,
          "content": "order = 2;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 166,
          "line_end": 167,
          "content": "order = 1;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1429,
          "line_end": 1430,
          "content": "Session session, HsqlName name,<br/>                                 boolean cascade"
        },
        {
          "total_lines": 2,
          "line_start": 226,
          "line_end": 227,
          "content": "order = 1;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 147,
          "line_end": 148,
          "content": "group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 171,
          "line_end": 172,
          "content": "order = 2;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 201,
          "line_end": 202,
          "content": "order = 1;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 176,
          "line_end": 177,
          "content": "order = 1;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 186,
          "line_end": 187,
          "content": "order = 7;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 132,
          "line_end": 133,
          "content": "group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 211,
          "line_end": 212,
          "content": "order = 1;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1411,
          "line_end": 1412,
          "content": "Session session, HsqlName name,<br/>                                 boolean cascade"
        },
        {
          "total_lines": 2,
          "line_start": 255,
          "line_end": 256,
          "content": "group = StatementTypes.X_SQL_SCHEMA_MANIPULATION;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 1421,
          "line_end": 1422,
          "content": "ErrorCode.X_42502,<br/>                              schema.getName().statementName"
        },
        {
          "total_lines": 1,
          "line_start": 1451,
          "line_end": 1451,
          "content": "Session session, HsqlName name"
        },
        {
          "total_lines": 1,
          "line_start": 1473,
          "line_end": 1473,
          "content": "Session session, HsqlName name"
        },
        {
          "total_lines": 1,
          "line_start": 1465,
          "line_end": 1465,
          "content": "Session session, HsqlName name"
        },
        {
          "total_lines": 1,
          "line_start": 1429,
          "line_end": 1429,
          "content": "Session session, HsqlName name"
        },
        {
          "total_lines": 1,
          "line_start": 1411,
          "line_end": 1411,
          "content": "Session session, HsqlName name"
        },
        {
          "total_lines": 1,
          "line_start": 1369,
          "line_end": 1369,
          "content": "Session session, HsqlName name"
        },
        {
          "total_lines": 1,
          "line_start": 1460,
          "line_end": 1460,
          "content": "Session session, HsqlName name"
        },
        {
          "total_lines": 1,
          "line_start": 1381,
          "line_end": 1381,
          "content": "Session session, HsqlName name"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/ClobData.java",
      "loc_duplicate": 18,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 65,
          "line_end": 66,
          "content": "long offset,<br/>                  long len"
        },
        {
          "total_lines": 2,
          "line_start": 68,
          "line_end": 69,
          "content": "int offset,<br/>                 int len"
        },
        {
          "total_lines": 2,
          "line_start": 71,
          "line_end": 72,
          "content": "long pos,<br/>                                   Reader in"
        },
        {
          "total_lines": 2,
          "line_start": 51,
          "line_end": 52,
          "content": "SessionInterface session, final long pos,<br/>                        final int length"
        },
        {
          "total_lines": 2,
          "line_start": 54,
          "line_end": 55,
          "content": "SessionInterface session, final long pos,<br/>                     final long length"
        },
        {
          "total_lines": 1,
          "line_start": 74,
          "line_end": 74,
          "content": "String searchstr, long start"
        },
        {
          "total_lines": 1,
          "line_start": 80,
          "line_end": 80,
          "content": "SessionInterface session, long pos"
        },
        {
          "total_lines": 1,
          "line_start": 76,
          "line_end": 76,
          "content": "ClobData searchstr, long start"
        },
        {
          "total_lines": 1,
          "line_start": 47,
          "line_end": 47,
          "content": "final long position, int length"
        },
        {
          "total_lines": 1,
          "line_start": 63,
          "line_end": 63,
          "content": "long pos, String str"
        },
        {
          "total_lines": 1,
          "line_start": 51,
          "line_end": 51,
          "content": "SessionInterface session, final long pos"
        },
        {
          "total_lines": 1,
          "line_start": 65,
          "line_end": 65,
          "content": "long pos, ClobData clob, long offset"
        },
        {
          "total_lines": 1,
          "line_start": 54,
          "line_end": 54,
          "content": "SessionInterface session, final long pos"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/HsqlDeque.java",
      "loc_duplicate": 44,
      "clones": [
          {
          "total_lines": 11,
          "line_start": 311,
          "line_end": 321,
          "content": "if (i < 0 || i >= elementCount) {<br/>            throw new IndexOutOfBoundsException();<br/>        }<br/><br/>        int index = firstindex + i;<br/><br/>        if (index >= list.length) {<br/>            index -= list.length;<br/>        }<br/><br/>        return index;"
        },
        {
          "total_lines": 5,
          "line_start": 311,
          "line_end": 315,
          "content": "if (i < 0 || i >= elementCount) {<br/>            throw new IndexOutOfBoundsException();<br/>        }<br/><br/>        int index = firstindex + i;"
        },
        {
          "total_lines": 5,
          "line_start": 81,
          "line_end": 85,
          "content": "if (elementCount == 0) {<br/>            throw new NoSuchElementException();<br/>        }<br/><br/>        return list[endindex - 1];"
        },
        {
          "total_lines": 5,
          "line_start": 72,
          "line_end": 76,
          "content": "if (elementCount == 0) {<br/>            throw new NoSuchElementException();<br/>        }<br/><br/>        return list[firstindex];"
        },
        {
          "total_lines": 5,
          "line_start": 215,
          "line_end": 219,
          "content": "firstindex = list.length - 1;<br/><br/>            if (endindex == 0) {<br/>                endindex = list.length;<br/>            }"
        },
        {
          "total_lines": 3,
          "line_start": 90,
          "line_end": 92,
          "content": "int index = getInternalIndex(i);<br/><br/>        return list[index];"
        },
        {
          "total_lines": 3,
          "line_start": 336,
          "line_end": 338,
          "content": "System.arraycopy(list, 0, newList, list.length, endindex);<br/><br/>            endindex = list.length + endindex;"
        },
        {
          "total_lines": 2,
          "line_start": 277,
          "line_end": 278,
          "content": "list, firstindex + 1,<br/>                             target - firstindex"
        },
        {
          "total_lines": 2,
          "line_start": 288,
          "line_end": 289,
          "content": "list, target + 1, list, target,<br/>                             endindex - target - 1"
        },
        {
          "total_lines": 2,
          "line_start": 332,
          "line_end": 333,
          "content": "firstindex, newList, firstindex,<br/>                         list.length - firstindex"
        },
        {
          "total_lines": 1,
          "line_start": 277,
          "line_end": 277,
          "content": "firstindex, list, firstindex + 1"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/server/HsqlSocketFactorySecure.java",
      "loc_duplicate": 18,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 127,
          "line_end": 131,
          "content": "Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");<br/>            Error.printSystemOut(\"capabilities for \" + ss + \":\");<br/>            Error.printSystemOut(\"----------------------------\");<br/>            dump(\"supported cipher suites\", ss.getSupportedCipherSuites());<br/>            dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());"
        },
        {
          "total_lines": 5,
          "line_start": 157,
          "line_end": 161,
          "content": "Error.printSystemOut(\"[\" + this + \"]: createServerSocket()\");<br/>            Error.printSystemOut(\"capabilities for \" + ss + \":\");<br/>            Error.printSystemOut(\"----------------------------\");<br/>            dump(\"supported cipher suites\", ss.getSupportedCipherSuites());<br/>            dump(\"enabled cipher suites\", ss.getEnabledCipherSuites());"
        },
        {
          "total_lines": 3,
          "line_start": 158,
          "line_end": 160,
          "content": "Error.printSystemOut(\"capabilities for \" + ss + \":\");<br/>            Error.printSystemOut(\"----------------------------\");<br/>            dump(\"supported cipher suites\", ss.getSupportedCipherSuites());"
        },
        {
          "total_lines": 3,
          "line_start": 128,
          "line_end": 130,
          "content": "Error.printSystemOut(\"capabilities for \" + ss + \":\");<br/>            Error.printSystemOut(\"----------------------------\");<br/>            dump(\"supported cipher suites\", ss.getSupportedCipherSuites());"
        },
        {
          "total_lines": 2,
          "line_start": 52,
          "line_end": 53,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rowio/RowOutputBinary180.java",
      "loc_duplicate": 18,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 68,
          "line_end": 73,
          "content": "long millis = o.getSeconds() * 1000L;<br/><br/>            millis = HsqlDateTime.convertMillisToCalendar(tempCalDefault,<br/>                    millis);<br/><br/>            writeLong(millis);"
        },
        {
          "total_lines": 5,
          "line_start": 58,
          "line_end": 62,
          "content": "long millis = o.getSeconds() * 1000L;<br/><br/>        millis = HsqlDateTime.convertMillisToCalendar(tempCalDefault, millis);<br/><br/>        writeLong(millis);"
        },
        {
          "total_lines": 4,
          "line_start": 68,
          "line_end": 71,
          "content": "long millis = o.getSeconds() * 1000L;<br/><br/>            millis = HsqlDateTime.convertMillisToCalendar(tempCalDefault,<br/>                    millis);"
        },
        {
          "total_lines": 3,
          "line_start": 58,
          "line_end": 60,
          "content": "long millis = o.getSeconds() * 1000L;<br/><br/>        millis = HsqlDateTime.convertMillisToCalendar(tempCalDefault, millis);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/sample/TriggerSample.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 43,
          "line_end": 44,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 435,
          "line_end": 436,
          "content": "conn.commit();<br/>        dumpTable(\"trig_test\");"
        },
        {
          "total_lines": 2,
          "line_start": 422,
          "line_end": 423,
          "content": "conn.commit();<br/>        dumpTable(\"trig_test\");"
        },
        {
          "total_lines": 2,
          "line_start": 419,
          "line_end": 420,
          "content": "conn.commit();<br/>        dumpTable(\"trig_test\");"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataChange.java",
      "loc_duplicate": 6,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 76,
          "line_end": 77,
          "content": "Session session, Row row, Object[] data,<br/>                           Type[] types, int[] columnMap"
        },
        {
          "total_lines": 2,
          "line_start": 69,
          "line_end": 70,
          "content": "RowInputInterface in,<br/>                     ResultMetaData meta"
        },
        {
          "total_lines": 2,
          "line_start": 66,
          "line_end": 67,
          "content": "RowOutputInterface out,<br/>                      ResultMetaData meta"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/BitType.java",
      "loc_duplicate": 52,
      "clones": [
          {
          "total_lines": 12,
          "line_start": 95,
          "line_end": 106,
          "content": "if (precision == 0) {<br/>            return getNameString();<br/>        }<br/><br/>        StringBuffer sb = new StringBuffer(16);<br/><br/>        sb.append(getNameString());<br/>        sb.append('(');<br/>        sb.append(precision);<br/>        sb.append(')');<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 6,
          "line_start": 101,
          "line_end": 106,
          "content": "sb.append(getNameString());<br/>        sb.append('(');<br/>        sb.append(precision);<br/>        sb.append(')');<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 95,
          "line_end": 99,
          "content": "if (precision == 0) {<br/>            return getNameString();<br/>        }<br/><br/>        StringBuffer sb = new StringBuffer(16);"
        },
        {
          "total_lines": 5,
          "line_start": 300,
          "line_end": 304,
          "content": "if (!cast) {<br/>                throw Error.error(ErrorCode.X_22001);<br/>            }<br/><br/>            session.addWarning(Error.error(ErrorCode.W_01004));"
        },
        {
          "total_lines": 3,
          "line_start": 341,
          "line_end": 343,
          "content": "byte[] data = b.getBytes(session, 0, bytePrecision);<br/><br/>                    b = new BinaryData(data, precision);"
        },
        {
          "total_lines": 3,
          "line_start": 323,
          "line_end": 325,
          "content": "byte[] data = b.getBytes(session, 0, bytePrecision);<br/><br/>                    b = new BinaryData(data, precision);"
        },
        {
          "total_lines": 2,
          "line_start": 408,
          "line_end": 409,
          "content": "((BinaryData) a).getBytes(),<br/>            (int) ((BinaryData) a).bitLength(null)"
        },
        {
          "total_lines": 2,
          "line_start": 422,
          "line_end": 423,
          "content": "SessionInterface session, BlobData data,<br/>                         BlobData otherData, Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 397,
          "line_end": 398,
          "content": "((BinaryData) a).getBytes(),<br/>            (int) ((BinaryData) a).bitLength(null)"
        },
        {
          "total_lines": 2,
          "line_start": 232,
          "line_end": 233,
          "content": "SessionInterface session, Object a,<br/>                                Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 237,
          "line_end": 238,
          "content": "Object a,<br/>                               Type otherType, boolean cast"
        },
        {
          "total_lines": 2,
          "line_start": 227,
          "line_end": 228,
          "content": "SessionInterface session, Object a,<br/>                             Type otherType"
        },
        {
          "total_lines": 2,
          "line_start": 438,
          "line_end": 439,
          "content": "BlobData data,<br/>                              long offset"
        },
        {
          "total_lines": 1,
          "line_start": 161,
          "line_end": 161,
          "content": "Session session, Type other, int operation"
        },
        {
          "total_lines": 1,
          "line_start": 238,
          "line_end": 238,
          "content": "Type otherType, boolean cast"
        },
        {
          "total_lines": 1,
          "line_start": 439,
          "line_end": 439,
          "content": "long length, boolean hasLength"
        },
        {
          "total_lines": 1,
          "line_start": 423,
          "line_end": 423,
          "content": "BlobData otherData, Type otherType, long offset"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCUtil.java",
      "loc_duplicate": 10,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 92,
          "line_end": 93,
          "content": "r.getMainString(), r.getSubString(),<br/>                           r.getErrorCode(), r.getException()"
        },
        {
          "total_lines": 2,
          "line_start": 247,
          "line_end": 248,
          "content": "r.getMainString(), r.getSubString(),<br/>                            r.getErrorCode(), r.getException()"
        },
        {
          "total_lines": 2,
          "line_start": 113,
          "line_end": 114,
          "content": "e.getErrorCode(),<br/>                            e"
        },
        {
          "total_lines": 2,
          "line_start": 73,
          "line_end": 74,
          "content": "e.getErrorCode(),<br/>                           e"
        },
        {
          "total_lines": 1,
          "line_start": 113,
          "line_end": 113,
          "content": "e.getMessage(), e.getSQLState(), e.getErrorCode()"
        },
        {
          "total_lines": 1,
          "line_start": 73,
          "line_end": 73,
          "content": "e.getMessage(), e.getSQLState(), e.getErrorCode()"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/ArrayUtil.java",
      "loc_duplicate": 180,
      "clones": [
          {
          "total_lines": 16,
          "line_start": 566,
          "line_end": 581,
          "content": "int k     = 0;<br/>        int limit = arra.length - start;<br/><br/>        if (limit > arrb.length) {<br/>            limit = arrb.length;<br/>        }<br/><br/>        for (int i = 0; i < limit; i++) {<br/>            if (arra[i + start] == arrb[i]) {<br/>                k++;<br/>            } else {<br/>                break;<br/>            }<br/>        }<br/><br/>        return k;"
        },
        {
          "total_lines": 16,
          "line_start": 542,
          "line_end": 557,
          "content": "int k     = 0;<br/>        int limit = arra.length - start;<br/><br/>        if (limit > arrb.length) {<br/>            limit = arrb.length;<br/>        }<br/><br/>        for (int i = 0; i < limit; i++) {<br/>            if (arra[i + start] == arrb[i]) {<br/>                k++;<br/>            } else {<br/>                break;<br/>            }<br/>        }<br/><br/>        return k;"
        },
        {
          "total_lines": 14,
          "line_start": 542,
          "line_end": 555,
          "content": "int k     = 0;<br/>        int limit = arra.length - start;<br/><br/>        if (limit > arrb.length) {<br/>            limit = arrb.length;<br/>        }<br/><br/>        for (int i = 0; i < limit; i++) {<br/>            if (arra[i + start] == arrb[i]) {<br/>                k++;<br/>            } else {<br/>                break;<br/>            }<br/>        }"
        },
        {
          "total_lines": 14,
          "line_start": 566,
          "line_end": 579,
          "content": "int k     = 0;<br/>        int limit = arra.length - start;<br/><br/>        if (limit > arrb.length) {<br/>            limit = arrb.length;<br/>        }<br/><br/>        for (int i = 0; i < limit; i++) {<br/>            if (arra[i + start] == arrb[i]) {<br/>                k++;<br/>            } else {<br/>                break;<br/>            }<br/>        }"
        },
        {
          "total_lines": 8,
          "line_start": 1676,
          "line_end": 1683,
          "content": "long mask    = 0xffffffffffffffffl << scale;<br/>        long newSize = value & mask;<br/><br/>        if (newSize != value) {<br/>            newSize += 1 << scale;<br/>        }<br/><br/>        return newSize;"
        },
        {
          "total_lines": 7,
          "line_start": 270,
          "line_end": 276,
          "content": "for (int i = 0; i < array.length; i++) {<br/>            if (array[i] == value) {<br/>                return i;<br/>            }<br/>        }<br/><br/>        return -1;"
        },
        {
          "total_lines": 7,
          "line_start": 97,
          "line_end": 103,
          "content": "byte[] array = (byte[]) data;<br/><br/>                while (--to >= from) {<br/>                    array[to] = 0;<br/>                }<br/><br/>                return;"
        },
        {
          "total_lines": 7,
          "line_start": 259,
          "line_end": 265,
          "content": "for (int i = 0; i < array.length; i++) {<br/>            if (array[i] == value) {<br/>                return i;<br/>            }<br/>        }<br/><br/>        return -1;"
        },
        {
          "total_lines": 7,
          "line_start": 88,
          "line_end": 94,
          "content": "byte[] array = (byte[]) data;<br/><br/>                while (--to >= from) {<br/>                    array[to] = 0;<br/>                }<br/><br/>                return;"
        },
        {
          "total_lines": 7,
          "line_start": 1677,
          "line_end": 1683,
          "content": "long newSize = value & mask;<br/><br/>        if (newSize != value) {<br/>            newSize += 1 << scale;<br/>        }<br/><br/>        return newSize;"
        },
        {
          "total_lines": 5,
          "line_start": 1060,
          "line_end": 1064,
          "content": "int to = array.length;<br/><br/>        while (--to >= offset) {<br/>            array[to] = value;<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 144,
          "line_end": 148,
          "content": "while (--to >= from) {<br/>                    array[to] = 0;<br/>                }<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1679,
          "line_end": 1683,
          "content": "if (newSize != value) {<br/>            newSize += 1 << scale;<br/>        }<br/><br/>        return newSize;"
        },
        {
          "total_lines": 5,
          "line_start": 135,
          "line_end": 139,
          "content": "while (--to >= from) {<br/>                    array[to] = 0;<br/>                }<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1108,
          "line_end": 1112,
          "content": "int to = array.length;<br/><br/>        while (--to >= 0) {<br/>            array[to] = value;<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 88,
          "line_end": 92,
          "content": "byte[] array = (byte[]) data;<br/><br/>                while (--to >= from) {<br/>                    array[to] = 0;<br/>                }"
        },
        {
          "total_lines": 5,
          "line_start": 1072,
          "line_end": 1076,
          "content": "int to = array.length;<br/><br/>        while (--to >= offset) {<br/>            array[to] = value;<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 126,
          "line_end": 130,
          "content": "while (--to >= from) {<br/>                    array[to] = 0;<br/>                }<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1096,
          "line_end": 1100,
          "content": "int to = array.length;<br/><br/>        while (--to >= 0) {<br/>            array[to] = value;<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 97,
          "line_end": 101,
          "content": "byte[] array = (byte[]) data;<br/><br/>                while (--to >= from) {<br/>                    array[to] = 0;<br/>                }"
        },
        {
          "total_lines": 5,
          "line_start": 108,
          "line_end": 112,
          "content": "while (--to >= from) {<br/>                    array[to] = 0;<br/>                }<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1120,
          "line_end": 1124,
          "content": "int to = array.length;<br/><br/>        while (--to >= 0) {<br/>            array[to] = value;<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 117,
          "line_end": 121,
          "content": "while (--to >= from) {<br/>                    array[to] = 0;<br/>                }<br/><br/>                return;"
        },
        {
          "total_lines": 5,
          "line_start": 1084,
          "line_end": 1088,
          "content": "int to = array.length;<br/><br/>        while (--to >= 0) {<br/>            array[to] = value;<br/>        }"
        },
        {
          "total_lines": 2,
          "line_start": 1356,
          "line_end": 1357,
          "content": "Object[] row, int[] columnMap,<br/>                                         Object[] newRow"
        },
        {
          "total_lines": 2,
          "line_start": 1334,
          "line_end": 1335,
          "content": "Object[] row, int[] columnMap,<br/>                                  Object[] newRow"
        },
        {
          "total_lines": 1,
          "line_start": 1198,
          "line_end": 1198,
          "content": "source.getClass().getComponentType(), newsize"
        },
        {
          "total_lines": 1,
          "line_start": 1155,
          "line_end": 1155,
          "content": "source.getClass().getComponentType(), newsize"
        },
        {
          "total_lines": 1,
          "line_start": 1174,
          "line_end": 1174,
          "content": "source.getClass().getComponentType(), newsize"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/Constraint.java",
      "loc_duplicate": 48,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 525,
          "line_end": 528,
          "content": "case SchemaObject.ReferentialAction.CASCADE :<br/>                case SchemaObject.ReferentialAction.SET_DEFAULT :<br/>                case SchemaObject.ReferentialAction.SET_NULL :<br/>                    return true;"
        },
        {
          "total_lines": 4,
          "line_start": 533,
          "line_end": 536,
          "content": "case SchemaObject.ReferentialAction.CASCADE :<br/>                case SchemaObject.ReferentialAction.SET_DEFAULT :<br/>                case SchemaObject.ReferentialAction.SET_NULL :<br/>                    return true;"
        },
        {
          "total_lines": 3,
          "line_start": 147,
          "line_end": 149,
          "content": "case SchemaObject.ReferentialAction.CASCADE :<br/>            case SchemaObject.ReferentialAction.SET_DEFAULT :<br/>            case SchemaObject.ReferentialAction.SET_NULL :"
        },
        {
          "total_lines": 3,
          "line_start": 337,
          "line_end": 339,
          "content": "sb.append(Tokens.T_CONSTRAINT).append(' ');<br/>                    sb.append(getName().statementName);<br/>                    sb.append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 393,
          "line_end": 395,
          "content": "sb.append(Tokens.T_CONSTRAINT).append(' ');<br/>            sb.append(getName().statementName);<br/>            sb.append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 525,
          "line_end": 527,
          "content": "case SchemaObject.ReferentialAction.CASCADE :<br/>                case SchemaObject.ReferentialAction.SET_DEFAULT :<br/>                case SchemaObject.ReferentialAction.SET_NULL :"
        },
        {
          "total_lines": 3,
          "line_start": 533,
          "line_end": 535,
          "content": "case SchemaObject.ReferentialAction.CASCADE :<br/>                case SchemaObject.ReferentialAction.SET_DEFAULT :<br/>                case SchemaObject.ReferentialAction.SET_NULL :"
        },
        {
          "total_lines": 3,
          "line_start": 155,
          "line_end": 157,
          "content": "case SchemaObject.ReferentialAction.CASCADE :<br/>            case SchemaObject.ReferentialAction.SET_DEFAULT :<br/>            case SchemaObject.ReferentialAction.SET_NULL :"
        },
        {
          "total_lines": 2,
          "line_start": 368,
          "line_end": 369,
          "content": "sb.append(Tokens.T_CONSTRAINT).append(' ');<br/>                    sb.append(getName().statementName).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 36,
          "line_end": 37,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 800,
          "line_end": 801,
          "content": "null, ErrorCode.X_23513, ErrorCode.CONSTRAINT,<br/>                              info"
        },
        {
          "total_lines": 2,
          "line_start": 323,
          "line_end": 324,
          "content": "sb.append(Tokens.T_CONSTRAINT).append(' ');<br/>                        sb.append(getName().statementName).append(' ');"
        },
        {
          "total_lines": 2,
          "line_start": 1010,
          "line_end": 1011,
          "content": "null, ErrorCode.X_23513,<br/>                                  ErrorCode.CONSTRAINT, info"
        },
        {
          "total_lines": 2,
          "line_start": 935,
          "line_end": 936,
          "content": "Expression.columnExpressionSet,<br/>                                    Expression.emptyExpressionSet"
        },
        {
          "total_lines": 2,
          "line_start": 527,
          "line_end": 528,
          "content": "case SchemaObject.ReferentialAction.SET_NULL :<br/>                    return true;"
        },
        {
          "total_lines": 2,
          "line_start": 535,
          "line_end": 536,
          "content": "case SchemaObject.ReferentialAction.SET_NULL :<br/>                    return true;"
        },
        {
          "total_lines": 2,
          "line_start": 835,
          "line_end": 836,
          "content": "null, ErrorCode.X_23513,<br/>                                   ErrorCode.CONSTRAINT, info"
        },
        {
          "total_lines": 1,
          "line_start": 824,
          "line_end": 824,
          "content": "ErrorCode.COLUMN_CONSTRAINT, info"
        },
        {
          "total_lines": 1,
          "line_start": 784,
          "line_end": 784,
          "content": "Session session, Table table, Object[] data"
        },
        {
          "total_lines": 1,
          "line_start": 855,
          "line_end": 855,
          "content": "ErrorCode.CONSTRAINT, info"
        },
        {
          "total_lines": 1,
          "line_start": 310,
          "line_end": 310,
          "content": "Session session, SchemaObject parentObject"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/RowDiskDataChange.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 123,
          "line_end": 123,
          "content": "null, null"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/RowStoreAVLHybrid.java",
      "loc_duplicate": 266,
      "clones": [
          {
          "total_lines": 18,
          "line_start": 285,
          "line_end": 302,
          "content": "case RowAction.ACTION_DELETE :<br/>                row = (Row) get(row, true);<br/><br/>                ((RowAVL) row).setNewNodes(this);<br/>                row.keepInMemory(false);<br/>                indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 17,
          "line_start": 286,
          "line_end": 302,
          "content": "row = (Row) get(row, true);<br/><br/>                ((RowAVL) row).setNewNodes(this);<br/>                row.keepInMemory(false);<br/>                indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 17,
          "line_start": 260,
          "line_end": 276,
          "content": "case RowAction.ACTION_DELETE :<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_DELETE_FINAL :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 16,
          "line_start": 286,
          "line_end": 301,
          "content": "row = (Row) get(row, true);<br/><br/>                ((RowAVL) row).setNewNodes(this);<br/>                row.keepInMemory(false);<br/>                indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);"
        },
        {
          "total_lines": 16,
          "line_start": 260,
          "line_end": 275,
          "content": "case RowAction.ACTION_DELETE :<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_DELETE_FINAL :<br/>                delete(session, row);<br/>                remove(row);"
        },
        {
          "total_lines": 15,
          "line_start": 288,
          "line_end": 302,
          "content": "((RowAVL) row).setNewNodes(this);<br/>                row.keepInMemory(false);<br/>                indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 15,
          "line_start": 261,
          "line_end": 275,
          "content": "remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_DELETE_FINAL :<br/>                delete(session, row);<br/>                remove(row);"
        },
        {
          "total_lines": 15,
          "line_start": 262,
          "line_end": 276,
          "content": "break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_DELETE_FINAL :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 14,
          "line_start": 285,
          "line_end": 298,
          "content": "case RowAction.ACTION_DELETE :<br/>                row = (Row) get(row, true);<br/><br/>                ((RowAVL) row).setNewNodes(this);<br/>                row.keepInMemory(false);<br/>                indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :"
        },
        {
          "total_lines": 13,
          "line_start": 289,
          "line_end": 301,
          "content": "row.keepInMemory(false);<br/>                indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);"
        },
        {
          "total_lines": 12,
          "line_start": 340,
          "line_end": 351,
          "content": "NodeAVL node = (NodeAVL) accessorList[key.getPosition()];<br/><br/>        if (node == null) {<br/>            return null;<br/>        }<br/><br/>        RowAVL row = (RowAVL) get(node.getRow(this), false);<br/><br/>        node                            = row.getNode(key.getPosition());<br/>        accessorList[key.getPosition()] = node;<br/><br/>        return node;"
        },
        {
          "total_lines": 12,
          "line_start": 290,
          "line_end": 301,
          "content": "indexRow(session, row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);"
        },
        {
          "total_lines": 11,
          "line_start": 265,
          "line_end": 275,
          "content": "break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_DELETE_FINAL :<br/>                delete(session, row);<br/>                remove(row);"
        },
        {
          "total_lines": 9,
          "line_start": 262,
          "line_end": 270,
          "content": "break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);"
        },
        {
          "total_lines": 8,
          "line_start": 342,
          "line_end": 349,
          "content": "if (node == null) {<br/>            return null;<br/>        }<br/><br/>        RowAVL row = (RowAVL) get(node.getRow(this), false);<br/><br/>        node                            = row.getNode(key.getPosition());<br/>        accessorList[key.getPosition()] = node;"
        },
        {
          "total_lines": 7,
          "line_start": 296,
          "line_end": 302,
          "content": "break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :<br/><br/>                // INSERT + DELEETE<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 7,
          "line_start": 261,
          "line_end": 267,
          "content": "remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT_DELETE :"
        },
        {
          "total_lines": 6,
          "line_start": 271,
          "line_end": 276,
          "content": "break;<br/><br/>            case RowAction.ACTION_DELETE_FINAL :<br/>                delete(session, row);<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 5,
          "line_start": 187,
          "line_end": 191,
          "content": "catch (HsqlException e) {<br/>            return null;<br/>        } catch (IOException e1) {<br/>            return null;<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 260,
          "line_end": 264,
          "content": "case RowAction.ACTION_DELETE :<br/>                remove(row);<br/>                break;<br/><br/>            case RowAction.ACTION_INSERT :"
        },
        {
          "total_lines": 4,
          "line_start": 357,
          "line_end": 360,
          "content": "indexList    = keys;<br/>            accessorList = new CachedObject[indexList.length];<br/><br/>            return;"
        },
        {
          "total_lines": 4,
          "line_start": 223,
          "line_end": 226,
          "content": "row = (Row) get(row, true);<br/><br/>            super.indexRow(session, row);<br/>            row.keepInMemory(false);"
        },
        {
          "total_lines": 4,
          "line_start": 348,
          "line_end": 351,
          "content": "node                            = row.getNode(key.getPosition());<br/>        accessorList[key.getPosition()] = node;<br/><br/>        return node;"
        },
        {
          "total_lines": 3,
          "line_start": 68,
          "line_end": 70,
          "content": "Session session,<br/>                             PersistentStoreCollection manager,<br/>                             TableBase table, boolean diskBased"
        },
        {
          "total_lines": 3,
          "line_start": 223,
          "line_end": 225,
          "content": "row = (Row) get(row, true);<br/><br/>            super.indexRow(session, row);"
        },
        {
          "total_lines": 3,
          "line_start": 358,
          "line_end": 360,
          "content": "accessorList = new CachedObject[indexList.length];<br/><br/>            return;"
        },
        {
          "total_lines": 2,
          "line_start": 255,
          "line_end": 256,
          "content": "Session session, Row row, int changeAction,<br/>                          int txModel"
        },
        {
          "total_lines": 2,
          "line_start": 280,
          "line_end": 281,
          "content": "Session session, Row row, int changeAction,<br/>                            int txModel"
        },
        {
          "total_lines": 1,
          "line_start": 156,
          "line_end": 156,
          "content": "CachedObject object, boolean tx"
        },
        {
          "total_lines": 1,
          "line_start": 255,
          "line_end": 255,
          "content": "Session session, Row row, int changeAction"
        },
        {
          "total_lines": 1,
          "line_start": 280,
          "line_end": 280,
          "content": "Session session, Row row, int changeAction"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/dbinfo/DatabaseInformationFull.java",
      "loc_duplicate": 1635,
      "clones": [
          {
          "total_lines": 20,
          "line_start": 4395,
          "line_end": 4414,
          "content": "row[character_maximum_length] =<br/>                            ValuePool.getLong(type.precision);<br/>                        row[character_octet_length] =<br/>                            ValuePool.getLong(type.precision * 2);<br/>                        row[character_set_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[character_set_schema] =<br/>                            ((CharacterType) type).getCharacterSet()<br/>                                .getSchemaName().name;<br/>                        row[character_set_name] =<br/>                            ((CharacterType) type).getCharacterSet().getName()<br/>                                .name;<br/>                        row[collation_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[collation_schema] =<br/>                            ((CharacterType) type).getCollation()<br/>                                .getSchemaName().name;<br/>                        row[collation_name] =<br/>                            ((CharacterType) type).getCollation().getName()<br/>                                .name;"
        },
        {
          "total_lines": 18,
          "line_start": 2689,
          "line_end": 2706,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision * 2);<br/>                    row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;<br/>                    row[collation_name] =<br/>                        ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 18,
          "line_start": 5969,
          "line_end": 5986,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision * 2);<br/>                    row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;<br/>                    row[collation_name] =<br/>                        ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 17,
          "line_start": 4395,
          "line_end": 4411,
          "content": "row[character_maximum_length] =<br/>                            ValuePool.getLong(type.precision);<br/>                        row[character_octet_length] =<br/>                            ValuePool.getLong(type.precision * 2);<br/>                        row[character_set_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[character_set_schema] =<br/>                            ((CharacterType) type).getCharacterSet()<br/>                                .getSchemaName().name;<br/>                        row[character_set_name] =<br/>                            ((CharacterType) type).getCharacterSet().getName()<br/>                                .name;<br/>                        row[collation_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[collation_schema] =<br/>                            ((CharacterType) type).getCollation()<br/>                                .getSchemaName().name;"
        },
        {
          "total_lines": 16,
          "line_start": 2689,
          "line_end": 2704,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision * 2);<br/>                    row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;"
        },
        {
          "total_lines": 16,
          "line_start": 5969,
          "line_end": 5984,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision * 2);<br/>                    row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;"
        },
        {
          "total_lines": 16,
          "line_start": 4399,
          "line_end": 4414,
          "content": "row[character_set_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[character_set_schema] =<br/>                            ((CharacterType) type).getCharacterSet()<br/>                                .getSchemaName().name;<br/>                        row[character_set_name] =<br/>                            ((CharacterType) type).getCharacterSet().getName()<br/>                                .name;<br/>                        row[collation_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[collation_schema] =<br/>                            ((CharacterType) type).getCollation()<br/>                                .getSchemaName().name;<br/>                        row[collation_name] =<br/>                            ((CharacterType) type).getCollation().getName()<br/>                                .name;"
        },
        {
          "total_lines": 15,
          "line_start": 7934,
          "line_end": 7948,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] = ValuePool.getLong(type.precision<br/>                        * 2);<br/>                row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;<br/>                row[collation_name] =<br/>                    ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 15,
          "line_start": 3442,
          "line_end": 3456,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] = ValuePool.getLong(type.precision<br/>                        * 2);<br/>                row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;<br/>                row[collation_name] =<br/>                    ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 14,
          "line_start": 2693,
          "line_end": 2706,
          "content": "row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;<br/>                    row[collation_name] =<br/>                        ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 14,
          "line_start": 4395,
          "line_end": 4408,
          "content": "row[character_maximum_length] =<br/>                            ValuePool.getLong(type.precision);<br/>                        row[character_octet_length] =<br/>                            ValuePool.getLong(type.precision * 2);<br/>                        row[character_set_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[character_set_schema] =<br/>                            ((CharacterType) type).getCharacterSet()<br/>                                .getSchemaName().name;<br/>                        row[character_set_name] =<br/>                            ((CharacterType) type).getCharacterSet().getName()<br/>                                .name;<br/>                        row[collation_catalog] =<br/>                            database.getCatalogName().name;"
        },
        {
          "total_lines": 14,
          "line_start": 5973,
          "line_end": 5986,
          "content": "row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;<br/>                    row[collation_name] =<br/>                        ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 14,
          "line_start": 4401,
          "line_end": 4414,
          "content": "row[character_set_schema] =<br/>                            ((CharacterType) type).getCharacterSet()<br/>                                .getSchemaName().name;<br/>                        row[character_set_name] =<br/>                            ((CharacterType) type).getCharacterSet().getName()<br/>                                .name;<br/>                        row[collation_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[collation_schema] =<br/>                            ((CharacterType) type).getCollation()<br/>                                .getSchemaName().name;<br/>                        row[collation_name] =<br/>                            ((CharacterType) type).getCollation().getName()<br/>                                .name;"
        },
        {
          "total_lines": 13,
          "line_start": 2689,
          "line_end": 2701,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision * 2);<br/>                    row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 13,
          "line_start": 3442,
          "line_end": 3454,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] = ValuePool.getLong(type.precision<br/>                        * 2);<br/>                row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 13,
          "line_start": 3786,
          "line_end": 3798,
          "content": "row[character_maximum_length] = ValuePool.getLong(type.precision);<br/>            row[character_octet_length] = ValuePool.getLong(type.precision<br/>                    * 2);<br/>            row[character_set_catalog] = database.getCatalogName().name;<br/>            row[character_set_schema] =<br/>                ((CharacterType) type).getCharacterSet().getSchemaName().name;<br/>            row[character_set_name] =<br/>                ((CharacterType) type).getCharacterSet().getName().name;<br/>            row[collation_catalog] = database.getCatalogName().name;<br/>            row[collation_schema] =<br/>                ((CharacterType) type).getCollation().getSchemaName().name;<br/>            row[collation_name] =<br/>                ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 13,
          "line_start": 7934,
          "line_end": 7946,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] = ValuePool.getLong(type.precision<br/>                        * 2);<br/>                row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 13,
          "line_start": 5969,
          "line_end": 5981,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision * 2);<br/>                    row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 13,
          "line_start": 4399,
          "line_end": 4411,
          "content": "row[character_set_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[character_set_schema] =<br/>                            ((CharacterType) type).getCharacterSet()<br/>                                .getSchemaName().name;<br/>                        row[character_set_name] =<br/>                            ((CharacterType) type).getCharacterSet().getName()<br/>                                .name;<br/>                        row[collation_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[collation_schema] =<br/>                            ((CharacterType) type).getCollation()<br/>                                .getSchemaName().name;"
        },
        {
          "total_lines": 12,
          "line_start": 2693,
          "line_end": 2704,
          "content": "row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;"
        },
        {
          "total_lines": 12,
          "line_start": 5988,
          "line_end": 5999,
          "content": "row[numeric_precision] = ValuePool.getLong(<br/>                        ((NumberType) type).getNumericPrecisionInRadix());<br/>                    row[declared_numeric_precision] = ValuePool.getLong(<br/>                        ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                    if (type.isExactNumberType()) {<br/>                        row[numeric_scale] = row[declared_numeric_scale] =<br/>                            ValuePool.getLong(type.scale);<br/>                    }<br/><br/>                    row[numeric_precision_radix] =<br/>                        ValuePool.getLong(type.getPrecisionRadix());"
        },
        {
          "total_lines": 12,
          "line_start": 7950,
          "line_end": 7961,
          "content": "row[numeric_precision] = ValuePool.getLong(<br/>                    ((NumberType) type).getNumericPrecisionInRadix());<br/>                row[declared_numeric_precision] = ValuePool.getLong(<br/>                    ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                if (type.isExactNumberType()) {<br/>                    row[numeric_scale] = row[declared_numeric_scale] =<br/>                        ValuePool.getLong(type.scale);<br/>                }<br/><br/>                row[numeric_precision_radix] =<br/>                    ValuePool.getLong(type.getPrecisionRadix());"
        },
        {
          "total_lines": 12,
          "line_start": 3458,
          "line_end": 3469,
          "content": "row[numeric_precision] = ValuePool.getLong(<br/>                    ((NumberType) type).getNumericPrecisionInRadix());<br/>                row[declared_numeric_precision] = ValuePool.getLong(<br/>                    ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                if (type.isExactNumberType()) {<br/>                    row[numeric_scale] = row[declared_numeric_scale] =<br/>                        ValuePool.getLong(type.scale);<br/>                }<br/><br/>                row[numeric_precision_radix] =<br/>                    ValuePool.getLong(type.getPrecisionRadix());"
        },
        {
          "total_lines": 12,
          "line_start": 5975,
          "line_end": 5986,
          "content": "row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;<br/>                    row[collation_name] =<br/>                        ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 12,
          "line_start": 5973,
          "line_end": 5984,
          "content": "row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;"
        },
        {
          "total_lines": 12,
          "line_start": 2708,
          "line_end": 2719,
          "content": "row[numeric_precision] = ValuePool.getLong(<br/>                        ((NumberType) type).getNumericPrecisionInRadix());<br/>                    row[declared_numeric_precision] = ValuePool.getLong(<br/>                        ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                    if (type.isExactNumberType()) {<br/>                        row[numeric_scale] = row[declared_numeric_scale] =<br/>                            ValuePool.getLong(type.scale);<br/>                    }<br/><br/>                    row[numeric_precision_radix] =<br/>                        ValuePool.getLong(type.getPrecisionRadix());"
        },
        {
          "total_lines": 12,
          "line_start": 2695,
          "line_end": 2706,
          "content": "row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;<br/>                    row[collation_name] =<br/>                        ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 12,
          "line_start": 3800,
          "line_end": 3811,
          "content": "row[numeric_precision] = ValuePool.getLong(<br/>                ((NumberType) type).getNumericPrecisionInRadix());<br/>            row[declared_numeric_precision] = ValuePool.getLong(<br/>                ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>            if (type.isExactNumberType()) {<br/>                row[numeric_scale] = row[declared_numeric_scale] =<br/>                    ValuePool.getLong(type.scale);<br/>            }<br/><br/>            row[numeric_precision_radix] =<br/>                ValuePool.getLong(type.getPrecisionRadix());"
        },
        {
          "total_lines": 11,
          "line_start": 7934,
          "line_end": 7944,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] = ValuePool.getLong(type.precision<br/>                        * 2);<br/>                row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 11,
          "line_start": 4401,
          "line_end": 4411,
          "content": "row[character_set_schema] =<br/>                            ((CharacterType) type).getCharacterSet()<br/>                                .getSchemaName().name;<br/>                        row[character_set_name] =<br/>                            ((CharacterType) type).getCharacterSet().getName()<br/>                                .name;<br/>                        row[collation_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[collation_schema] =<br/>                            ((CharacterType) type).getCollation()<br/>                                .getSchemaName().name;"
        },
        {
          "total_lines": 11,
          "line_start": 3442,
          "line_end": 3452,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] = ValuePool.getLong(type.precision<br/>                        * 2);<br/>                row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 11,
          "line_start": 3786,
          "line_end": 3796,
          "content": "row[character_maximum_length] = ValuePool.getLong(type.precision);<br/>            row[character_octet_length] = ValuePool.getLong(type.precision<br/>                    * 2);<br/>            row[character_set_catalog] = database.getCatalogName().name;<br/>            row[character_set_schema] =<br/>                ((CharacterType) type).getCharacterSet().getSchemaName().name;<br/>            row[character_set_name] =<br/>                ((CharacterType) type).getCharacterSet().getName().name;<br/>            row[collation_catalog] = database.getCatalogName().name;<br/>            row[collation_schema] =<br/>                ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 11,
          "line_start": 4404,
          "line_end": 4414,
          "content": "row[character_set_name] =<br/>                            ((CharacterType) type).getCharacterSet().getName()<br/>                                .name;<br/>                        row[collation_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[collation_schema] =<br/>                            ((CharacterType) type).getCollation()<br/>                                .getSchemaName().name;<br/>                        row[collation_name] =<br/>                            ((CharacterType) type).getCollation().getName()<br/>                                .name;"
        },
        {
          "total_lines": 11,
          "line_start": 3446,
          "line_end": 3456,
          "content": "row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;<br/>                row[collation_name] =<br/>                    ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 11,
          "line_start": 7938,
          "line_end": 7948,
          "content": "row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;<br/>                row[collation_name] =<br/>                    ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 10,
          "line_start": 3447,
          "line_end": 3456,
          "content": "row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;<br/>                row[collation_name] =<br/>                    ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 10,
          "line_start": 2695,
          "line_end": 2704,
          "content": "row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;"
        },
        {
          "total_lines": 10,
          "line_start": 3789,
          "line_end": 3798,
          "content": "row[character_set_catalog] = database.getCatalogName().name;<br/>            row[character_set_schema] =<br/>                ((CharacterType) type).getCharacterSet().getSchemaName().name;<br/>            row[character_set_name] =<br/>                ((CharacterType) type).getCharacterSet().getName().name;<br/>            row[collation_catalog] = database.getCatalogName().name;<br/>            row[collation_schema] =<br/>                ((CharacterType) type).getCollation().getSchemaName().name;<br/>            row[collation_name] =<br/>                ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 10,
          "line_start": 5975,
          "line_end": 5984,
          "content": "row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;"
        },
        {
          "total_lines": 10,
          "line_start": 7939,
          "line_end": 7948,
          "content": "row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;<br/>                row[collation_name] =<br/>                    ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 10,
          "line_start": 4399,
          "line_end": 4408,
          "content": "row[character_set_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[character_set_schema] =<br/>                            ((CharacterType) type).getCharacterSet()<br/>                                .getSchemaName().name;<br/>                        row[character_set_name] =<br/>                            ((CharacterType) type).getCharacterSet().getName()<br/>                                .name;<br/>                        row[collation_catalog] =<br/>                            database.getCatalogName().name;"
        },
        {
          "total_lines": 10,
          "line_start": 7952,
          "line_end": 7961,
          "content": "row[declared_numeric_precision] = ValuePool.getLong(<br/>                    ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                if (type.isExactNumberType()) {<br/>                    row[numeric_scale] = row[declared_numeric_scale] =<br/>                        ValuePool.getLong(type.scale);<br/>                }<br/><br/>                row[numeric_precision_radix] =<br/>                    ValuePool.getLong(type.getPrecisionRadix());"
        },
        {
          "total_lines": 10,
          "line_start": 3460,
          "line_end": 3469,
          "content": "row[declared_numeric_precision] = ValuePool.getLong(<br/>                    ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                if (type.isExactNumberType()) {<br/>                    row[numeric_scale] = row[declared_numeric_scale] =<br/>                        ValuePool.getLong(type.scale);<br/>                }<br/><br/>                row[numeric_precision_radix] =<br/>                    ValuePool.getLong(type.getPrecisionRadix());"
        },
        {
          "total_lines": 10,
          "line_start": 5990,
          "line_end": 5999,
          "content": "row[declared_numeric_precision] = ValuePool.getLong(<br/>                        ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                    if (type.isExactNumberType()) {<br/>                        row[numeric_scale] = row[declared_numeric_scale] =<br/>                            ValuePool.getLong(type.scale);<br/>                    }<br/><br/>                    row[numeric_precision_radix] =<br/>                        ValuePool.getLong(type.getPrecisionRadix());"
        },
        {
          "total_lines": 10,
          "line_start": 3802,
          "line_end": 3811,
          "content": "row[declared_numeric_precision] = ValuePool.getLong(<br/>                ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>            if (type.isExactNumberType()) {<br/>                row[numeric_scale] = row[declared_numeric_scale] =<br/>                    ValuePool.getLong(type.scale);<br/>            }<br/><br/>            row[numeric_precision_radix] =<br/>                ValuePool.getLong(type.getPrecisionRadix());"
        },
        {
          "total_lines": 10,
          "line_start": 2710,
          "line_end": 2719,
          "content": "row[declared_numeric_precision] = ValuePool.getLong(<br/>                        ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                    if (type.isExactNumberType()) {<br/>                        row[numeric_scale] = row[declared_numeric_scale] =<br/>                            ValuePool.getLong(type.scale);<br/>                    }<br/><br/>                    row[numeric_precision_radix] =<br/>                        ValuePool.getLong(type.getPrecisionRadix());"
        },
        {
          "total_lines": 9,
          "line_start": 3786,
          "line_end": 3794,
          "content": "row[character_maximum_length] = ValuePool.getLong(type.precision);<br/>            row[character_octet_length] = ValuePool.getLong(type.precision<br/>                    * 2);<br/>            row[character_set_catalog] = database.getCatalogName().name;<br/>            row[character_set_schema] =<br/>                ((CharacterType) type).getCharacterSet().getSchemaName().name;<br/>            row[character_set_name] =<br/>                ((CharacterType) type).getCharacterSet().getName().name;<br/>            row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 9,
          "line_start": 5988,
          "line_end": 5996,
          "content": "row[numeric_precision] = ValuePool.getLong(<br/>                        ((NumberType) type).getNumericPrecisionInRadix());<br/>                    row[declared_numeric_precision] = ValuePool.getLong(<br/>                        ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                    if (type.isExactNumberType()) {<br/>                        row[numeric_scale] = row[declared_numeric_scale] =<br/>                            ValuePool.getLong(type.scale);<br/>                    }"
        },
        {
          "total_lines": 9,
          "line_start": 2693,
          "line_end": 2701,
          "content": "row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 9,
          "line_start": 3458,
          "line_end": 3466,
          "content": "row[numeric_precision] = ValuePool.getLong(<br/>                    ((NumberType) type).getNumericPrecisionInRadix());<br/>                row[declared_numeric_precision] = ValuePool.getLong(<br/>                    ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                if (type.isExactNumberType()) {<br/>                    row[numeric_scale] = row[declared_numeric_scale] =<br/>                        ValuePool.getLong(type.scale);<br/>                }"
        },
        {
          "total_lines": 9,
          "line_start": 7950,
          "line_end": 7958,
          "content": "row[numeric_precision] = ValuePool.getLong(<br/>                    ((NumberType) type).getNumericPrecisionInRadix());<br/>                row[declared_numeric_precision] = ValuePool.getLong(<br/>                    ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                if (type.isExactNumberType()) {<br/>                    row[numeric_scale] = row[declared_numeric_scale] =<br/>                        ValuePool.getLong(type.scale);<br/>                }"
        },
        {
          "total_lines": 9,
          "line_start": 5973,
          "line_end": 5981,
          "content": "row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 9,
          "line_start": 7938,
          "line_end": 7946,
          "content": "row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 9,
          "line_start": 5978,
          "line_end": 5986,
          "content": "row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;<br/>                    row[collation_name] =<br/>                        ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 9,
          "line_start": 2708,
          "line_end": 2716,
          "content": "row[numeric_precision] = ValuePool.getLong(<br/>                        ((NumberType) type).getNumericPrecisionInRadix());<br/>                    row[declared_numeric_precision] = ValuePool.getLong(<br/>                        ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                    if (type.isExactNumberType()) {<br/>                        row[numeric_scale] = row[declared_numeric_scale] =<br/>                            ValuePool.getLong(type.scale);<br/>                    }"
        },
        {
          "total_lines": 9,
          "line_start": 3800,
          "line_end": 3808,
          "content": "row[numeric_precision] = ValuePool.getLong(<br/>                ((NumberType) type).getNumericPrecisionInRadix());<br/>            row[declared_numeric_precision] = ValuePool.getLong(<br/>                ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>            if (type.isExactNumberType()) {<br/>                row[numeric_scale] = row[declared_numeric_scale] =<br/>                    ValuePool.getLong(type.scale);<br/>            }"
        },
        {
          "total_lines": 9,
          "line_start": 3446,
          "line_end": 3454,
          "content": "row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 9,
          "line_start": 3790,
          "line_end": 3798,
          "content": "row[character_set_schema] =<br/>                ((CharacterType) type).getCharacterSet().getSchemaName().name;<br/>            row[character_set_name] =<br/>                ((CharacterType) type).getCharacterSet().getName().name;<br/>            row[collation_catalog] = database.getCatalogName().name;<br/>            row[collation_schema] =<br/>                ((CharacterType) type).getCollation().getSchemaName().name;<br/>            row[collation_name] =<br/>                ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 9,
          "line_start": 5969,
          "line_end": 5977,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision * 2);<br/>                    row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;"
        },
        {
          "total_lines": 9,
          "line_start": 2689,
          "line_end": 2697,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision * 2);<br/>                    row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;"
        },
        {
          "total_lines": 9,
          "line_start": 2698,
          "line_end": 2706,
          "content": "row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;<br/>                    row[collation_name] =<br/>                        ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 9,
          "line_start": 4395,
          "line_end": 4403,
          "content": "row[character_maximum_length] =<br/>                            ValuePool.getLong(type.precision);<br/>                        row[character_octet_length] =<br/>                            ValuePool.getLong(type.precision * 2);<br/>                        row[character_set_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[character_set_schema] =<br/>                            ((CharacterType) type).getCharacterSet()<br/>                                .getSchemaName().name;"
        },
        {
          "total_lines": 8,
          "line_start": 3447,
          "line_end": 3454,
          "content": "row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 8,
          "line_start": 4401,
          "line_end": 4408,
          "content": "row[character_set_schema] =<br/>                            ((CharacterType) type).getCharacterSet()<br/>                                .getSchemaName().name;<br/>                        row[character_set_name] =<br/>                            ((CharacterType) type).getCharacterSet().getName()<br/>                                .name;<br/>                        row[collation_catalog] =<br/>                            database.getCatalogName().name;"
        },
        {
          "total_lines": 8,
          "line_start": 7934,
          "line_end": 7941,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] = ValuePool.getLong(type.precision<br/>                        * 2);<br/>                row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;"
        },
        {
          "total_lines": 8,
          "line_start": 4404,
          "line_end": 4411,
          "content": "row[character_set_name] =<br/>                            ((CharacterType) type).getCharacterSet().getName()<br/>                                .name;<br/>                        row[collation_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[collation_schema] =<br/>                            ((CharacterType) type).getCollation()<br/>                                .getSchemaName().name;"
        },
        {
          "total_lines": 8,
          "line_start": 3789,
          "line_end": 3796,
          "content": "row[character_set_catalog] = database.getCatalogName().name;<br/>            row[character_set_schema] =<br/>                ((CharacterType) type).getCharacterSet().getSchemaName().name;<br/>            row[character_set_name] =<br/>                ((CharacterType) type).getCharacterSet().getName().name;<br/>            row[collation_catalog] = database.getCatalogName().name;<br/>            row[collation_schema] =<br/>                ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 8,
          "line_start": 4407,
          "line_end": 4414,
          "content": "row[collation_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[collation_schema] =<br/>                            ((CharacterType) type).getCollation()<br/>                                .getSchemaName().name;<br/>                        row[collation_name] =<br/>                            ((CharacterType) type).getCollation().getName()<br/>                                .name;"
        },
        {
          "total_lines": 8,
          "line_start": 3442,
          "line_end": 3449,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] = ValuePool.getLong(type.precision<br/>                        * 2);<br/>                row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;"
        },
        {
          "total_lines": 8,
          "line_start": 7939,
          "line_end": 7946,
          "content": "row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 7,
          "line_start": 3446,
          "line_end": 3452,
          "content": "row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 7,
          "line_start": 7938,
          "line_end": 7944,
          "content": "row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 7,
          "line_start": 2695,
          "line_end": 2701,
          "content": "row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 7,
          "line_start": 7952,
          "line_end": 7958,
          "content": "row[declared_numeric_precision] = ValuePool.getLong(<br/>                    ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                if (type.isExactNumberType()) {<br/>                    row[numeric_scale] = row[declared_numeric_scale] =<br/>                        ValuePool.getLong(type.scale);<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 3450,
          "line_end": 3456,
          "content": "row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;<br/>                row[collation_name] =<br/>                    ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 7,
          "line_start": 3802,
          "line_end": 3808,
          "content": "row[declared_numeric_precision] = ValuePool.getLong(<br/>                ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>            if (type.isExactNumberType()) {<br/>                row[numeric_scale] = row[declared_numeric_scale] =<br/>                    ValuePool.getLong(type.scale);<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 5975,
          "line_end": 5981,
          "content": "row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;<br/>                    row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 7,
          "line_start": 3460,
          "line_end": 3466,
          "content": "row[declared_numeric_precision] = ValuePool.getLong(<br/>                    ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                if (type.isExactNumberType()) {<br/>                    row[numeric_scale] = row[declared_numeric_scale] =<br/>                        ValuePool.getLong(type.scale);<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 2710,
          "line_end": 2716,
          "content": "row[declared_numeric_precision] = ValuePool.getLong(<br/>                        ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                    if (type.isExactNumberType()) {<br/>                        row[numeric_scale] = row[declared_numeric_scale] =<br/>                            ValuePool.getLong(type.scale);<br/>                    }"
        },
        {
          "total_lines": 7,
          "line_start": 5978,
          "line_end": 5984,
          "content": "row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;"
        },
        {
          "total_lines": 7,
          "line_start": 3792,
          "line_end": 3798,
          "content": "row[character_set_name] =<br/>                ((CharacterType) type).getCharacterSet().getName().name;<br/>            row[collation_catalog] = database.getCatalogName().name;<br/>            row[collation_schema] =<br/>                ((CharacterType) type).getCollation().getSchemaName().name;<br/>            row[collation_name] =<br/>                ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 7,
          "line_start": 2698,
          "line_end": 2704,
          "content": "row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;"
        },
        {
          "total_lines": 7,
          "line_start": 3790,
          "line_end": 3796,
          "content": "row[character_set_schema] =<br/>                ((CharacterType) type).getCharacterSet().getSchemaName().name;<br/>            row[character_set_name] =<br/>                ((CharacterType) type).getCharacterSet().getName().name;<br/>            row[collation_catalog] = database.getCatalogName().name;<br/>            row[collation_schema] =<br/>                ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 7,
          "line_start": 4427,
          "line_end": 4433,
          "content": "row[data_type] = \"INTERVAL\";<br/>                        row[interval_type] =<br/>                            ((IntervalType) type).getQualifier(type.typeCode);<br/>                        row[interval_precision] =<br/>                            ValuePool.getLong(type.precision);<br/>                        row[datetime_precision] =<br/>                            ValuePool.getLong(type.scale);"
        },
        {
          "total_lines": 7,
          "line_start": 7942,
          "line_end": 7948,
          "content": "row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;<br/>                row[collation_name] =<br/>                    ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 7,
          "line_start": 5990,
          "line_end": 5996,
          "content": "row[declared_numeric_precision] = ValuePool.getLong(<br/>                        ((NumberType) type).getNumericPrecisionInRadix());<br/><br/>                    if (type.isExactNumberType()) {<br/>                        row[numeric_scale] = row[declared_numeric_scale] =<br/>                            ValuePool.getLong(type.scale);<br/>                    }"
        },
        {
          "total_lines": 6,
          "line_start": 2701,
          "line_end": 2706,
          "content": "row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;<br/>                    row[collation_name] =<br/>                        ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 6,
          "line_start": 4395,
          "line_end": 4400,
          "content": "row[character_maximum_length] =<br/>                            ValuePool.getLong(type.precision);<br/>                        row[character_octet_length] =<br/>                            ValuePool.getLong(type.precision * 2);<br/>                        row[character_set_catalog] =<br/>                            database.getCatalogName().name;"
        },
        {
          "total_lines": 6,
          "line_start": 2689,
          "line_end": 2694,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision * 2);<br/>                    row[character_set_catalog] =<br/>                        database.getCatalogName().name;"
        },
        {
          "total_lines": 6,
          "line_start": 6006,
          "line_end": 6011,
          "content": "row[data_type] = \"INTERVAL\";<br/>                    row[interval_type] =<br/>                        ((IntervalType) type).getQualifier(type.typeCode);<br/>                    row[interval_precision] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[datetime_precision] = ValuePool.getLong(type.scale);"
        },
        {
          "total_lines": 6,
          "line_start": 4428,
          "line_end": 4433,
          "content": "row[interval_type] =<br/>                            ((IntervalType) type).getQualifier(type.typeCode);<br/>                        row[interval_precision] =<br/>                            ValuePool.getLong(type.precision);<br/>                        row[datetime_precision] =<br/>                            ValuePool.getLong(type.scale);"
        },
        {
          "total_lines": 6,
          "line_start": 3447,
          "line_end": 3452,
          "content": "row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 6,
          "line_start": 5969,
          "line_end": 5974,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision * 2);<br/>                    row[character_set_catalog] =<br/>                        database.getCatalogName().name;"
        },
        {
          "total_lines": 6,
          "line_start": 3786,
          "line_end": 3791,
          "content": "row[character_maximum_length] = ValuePool.getLong(type.precision);<br/>            row[character_octet_length] = ValuePool.getLong(type.precision<br/>                    * 2);<br/>            row[character_set_catalog] = database.getCatalogName().name;<br/>            row[character_set_schema] =<br/>                ((CharacterType) type).getCharacterSet().getSchemaName().name;"
        },
        {
          "total_lines": 6,
          "line_start": 3789,
          "line_end": 3794,
          "content": "row[character_set_catalog] = database.getCatalogName().name;<br/>            row[character_set_schema] =<br/>                ((CharacterType) type).getCharacterSet().getSchemaName().name;<br/>            row[character_set_name] =<br/>                ((CharacterType) type).getCharacterSet().getName().name;<br/>            row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 6,
          "line_start": 7939,
          "line_end": 7944,
          "content": "row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;<br/>                row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 6,
          "line_start": 2726,
          "line_end": 2731,
          "content": "row[data_type] = \"INTERVAL\";<br/>                    row[interval_type] =<br/>                        ((IntervalType) type).getQualifier(type.typeCode);<br/>                    row[interval_precision] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[datetime_precision] = ValuePool.getLong(type.scale);"
        },
        {
          "total_lines": 6,
          "line_start": 5981,
          "line_end": 5986,
          "content": "row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;<br/>                    row[collation_name] =<br/>                        ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 6,
          "line_start": 7034,
          "line_end": 7039,
          "content": "//<br/>        Iterator it;<br/>        Object[] row;<br/><br/>        it = database.schemaManager.databaseObjectIterator(<br/>            SchemaObject.TRIGGER);"
        },
        {
          "total_lines": 6,
          "line_start": 7144,
          "line_end": 7149,
          "content": "//<br/>        Iterator it;<br/>        Object[] row;<br/><br/>        it = database.schemaManager.databaseObjectIterator(<br/>            SchemaObject.TRIGGER);"
        },
        {
          "total_lines": 5,
          "line_start": 3060,
          "line_end": 3064,
          "content": "t.createPrimaryKeyConstraint(name, new int[] {<br/>                0, 1, 2, 3, 4, 5<br/>            }, false);<br/><br/>            return t;"
        },
        {
          "total_lines": 5,
          "line_start": 8304,
          "line_end": 8308,
          "content": "t.createPrimaryKeyConstraint(name, new int[] {<br/>                0, 1, 2, 3, 4, 5<br/>            }, false);<br/><br/>            return t;"
        },
        {
          "total_lines": 5,
          "line_start": 3792,
          "line_end": 3796,
          "content": "row[character_set_name] =<br/>                ((CharacterType) type).getCharacterSet().getName().name;<br/>            row[collation_catalog] = database.getCatalogName().name;<br/>            row[collation_schema] =<br/>                ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 5973,
          "line_end": 5977,
          "content": "row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 2693,
          "line_end": 2697,
          "content": "row[character_set_catalog] =<br/>                        database.getCatalogName().name;<br/>                    row[character_set_schema] =<br/>                        ((CharacterType) type).getCharacterSet()<br/>                            .getSchemaName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 7934,
          "line_end": 7938,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] = ValuePool.getLong(type.precision<br/>                        * 2);<br/>                row[character_set_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 3818,
          "line_end": 3822,
          "content": "row[data_type] = \"INTERVAL\";<br/>            row[interval_type] =<br/>                ((IntervalType) type).getQualifier(type.typeCode);<br/>            row[interval_precision] = ValuePool.getLong(type.precision);<br/>            row[datetime_precision] = ValuePool.getLong(type.scale);"
        },
        {
          "total_lines": 5,
          "line_start": 4404,
          "line_end": 4408,
          "content": "row[character_set_name] =<br/>                            ((CharacterType) type).getCharacterSet().getName()<br/>                                .name;<br/>                        row[collation_catalog] =<br/>                            database.getCatalogName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 3476,
          "line_end": 3480,
          "content": "row[data_type] = \"INTERVAL\";<br/>                row[interval_type] =<br/>                    ((IntervalType) type).getQualifier(type.typeCode);<br/>                row[interval_precision] = ValuePool.getLong(type.precision);<br/>                row[datetime_precision] = ValuePool.getLong(type.scale);"
        },
        {
          "total_lines": 5,
          "line_start": 7019,
          "line_end": 7023,
          "content": "t.createPrimaryKeyConstraint(name, new int[] {<br/>                0, 1, 2, 3, 4, 5<br/>            }, false);<br/><br/>            return t;"
        },
        {
          "total_lines": 5,
          "line_start": 7942,
          "line_end": 7946,
          "content": "row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 3442,
          "line_end": 3446,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] = ValuePool.getLong(type.precision<br/>                        * 2);<br/>                row[character_set_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 2727,
          "line_end": 2731,
          "content": "row[interval_type] =<br/>                        ((IntervalType) type).getQualifier(type.typeCode);<br/>                    row[interval_precision] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[datetime_precision] = ValuePool.getLong(type.scale);"
        },
        {
          "total_lines": 5,
          "line_start": 1147,
          "line_end": 1151,
          "content": "if (j > 0) {<br/>                        sb.append(',');<br/>                    }<br/><br/>                    sb.append(array[j].getId());"
        },
        {
          "total_lines": 5,
          "line_start": 7966,
          "line_end": 7970,
          "content": "row[data_type] = \"INTERVAL\";<br/>                row[interval_type] =<br/>                    ((IntervalType) type).getQualifier(type.typeCode);<br/>                row[interval_precision] = ValuePool.getLong(type.precision);<br/>                row[datetime_precision] = ValuePool.getLong(type.scale);"
        },
        {
          "total_lines": 5,
          "line_start": 4399,
          "line_end": 4403,
          "content": "row[character_set_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[character_set_schema] =<br/>                            ((CharacterType) type).getCharacterSet()<br/>                                .getSchemaName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 7944,
          "line_end": 7948,
          "content": "row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;<br/>                row[collation_name] =<br/>                    ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 3794,
          "line_end": 3798,
          "content": "row[collation_catalog] = database.getCatalogName().name;<br/>            row[collation_schema] =<br/>                ((CharacterType) type).getCollation().getSchemaName().name;<br/>            row[collation_name] =<br/>                ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 6910,
          "line_end": 6914,
          "content": "t.createPrimaryKeyConstraint(name, new int[] {<br/>                0, 1, 2, 3, 4, 5<br/>            }, false);<br/><br/>            return t;"
        },
        {
          "total_lines": 5,
          "line_start": 5439,
          "line_end": 5443,
          "content": "t.createPrimaryKeyConstraint(name, new int[] {<br/>                0, 1, 2, 3, 4, 5<br/>            }, false);<br/><br/>            return t;"
        },
        {
          "total_lines": 5,
          "line_start": 4407,
          "line_end": 4411,
          "content": "row[collation_catalog] =<br/>                            database.getCatalogName().name;<br/>                        row[collation_schema] =<br/>                            ((CharacterType) type).getCollation()<br/>                                .getSchemaName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 3450,
          "line_end": 3454,
          "content": "row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 3790,
          "line_end": 3794,
          "content": "row[character_set_schema] =<br/>                ((CharacterType) type).getCharacterSet().getSchemaName().name;<br/>            row[character_set_name] =<br/>                ((CharacterType) type).getCharacterSet().getName().name;<br/>            row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 3452,
          "line_end": 3456,
          "content": "row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;<br/>                row[collation_name] =<br/>                    ((CharacterType) type).getCollation().getName().name;"
        },
        {
          "total_lines": 5,
          "line_start": 3922,
          "line_end": 3926,
          "content": "t.createPrimaryKeyConstraint(name, new int[] {<br/>                0, 1, 2, 3, 4, 5<br/>            }, false);<br/><br/>            return t;"
        },
        {
          "total_lines": 5,
          "line_start": 1130,
          "line_end": 1134,
          "content": "if (j > 0) {<br/>                        sb.append(',');<br/>                    }<br/><br/>                    sb.append(array[j].getId());"
        },
        {
          "total_lines": 5,
          "line_start": 6007,
          "line_end": 6011,
          "content": "row[interval_type] =<br/>                        ((IntervalType) type).getQualifier(type.typeCode);<br/>                    row[interval_precision] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[datetime_precision] = ValuePool.getLong(type.scale);"
        },
        {
          "total_lines": 4,
          "line_start": 3446,
          "line_end": 3449,
          "content": "row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;"
        },
        {
          "total_lines": 4,
          "line_start": 4395,
          "line_end": 4398,
          "content": "row[character_maximum_length] =<br/>                            ValuePool.getLong(type.precision);<br/>                        row[character_octet_length] =<br/>                            ValuePool.getLong(type.precision * 2);"
        },
        {
          "total_lines": 4,
          "line_start": 6018,
          "line_end": 6021,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision);"
        },
        {
          "total_lines": 4,
          "line_start": 3819,
          "line_end": 3822,
          "content": "row[interval_type] =<br/>                ((IntervalType) type).getQualifier(type.typeCode);<br/>            row[interval_precision] = ValuePool.getLong(type.precision);<br/>            row[datetime_precision] = ValuePool.getLong(type.scale);"
        },
        {
          "total_lines": 4,
          "line_start": 7026,
          "line_end": 7029,
          "content": "// column number mappings<br/>        final int trigger_catalog  = 0;<br/>        final int trigger_schema   = 1;<br/>        final int trigger_name     = 2;"
        },
        {
          "total_lines": 4,
          "line_start": 2738,
          "line_end": 2741,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision);"
        },
        {
          "total_lines": 4,
          "line_start": 3442,
          "line_end": 3445,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] = ValuePool.getLong(type.precision<br/>                        * 2);"
        },
        {
          "total_lines": 4,
          "line_start": 542,
          "line_end": 545,
          "content": "addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);    //0<br/>            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);<br/>            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);<br/>            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);"
        },
        {
          "total_lines": 4,
          "line_start": 2689,
          "line_end": 2692,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision * 2);"
        },
        {
          "total_lines": 4,
          "line_start": 4440,
          "line_end": 4443,
          "content": "row[character_maximum_length] =<br/>                            ValuePool.getLong(type.precision);<br/>                        row[character_octet_length] =<br/>                            ValuePool.getLong(type.precision);"
        },
        {
          "total_lines": 4,
          "line_start": 3482,
          "line_end": 3485,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] =<br/>                    ValuePool.getLong(type.precision);"
        },
        {
          "total_lines": 4,
          "line_start": 7136,
          "line_end": 7139,
          "content": "// column number mappings<br/>        final int trigger_catalog = 0;<br/>        final int trigger_schema  = 1;<br/>        final int trigger_name    = 2;"
        },
        {
          "total_lines": 4,
          "line_start": 7977,
          "line_end": 7980,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] =<br/>                    ValuePool.getLong(type.precision);"
        },
        {
          "total_lines": 4,
          "line_start": 7972,
          "line_end": 7975,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] =<br/>                    ValuePool.getLong(type.precision);"
        },
        {
          "total_lines": 4,
          "line_start": 7938,
          "line_end": 7941,
          "content": "row[character_set_catalog] = database.getCatalogName().name;<br/>                row[character_set_schema] =<br/>                    ((CharacterType) type).getCharacterSet().getSchemaName()<br/>                        .name;"
        },
        {
          "total_lines": 4,
          "line_start": 7967,
          "line_end": 7970,
          "content": "row[interval_type] =<br/>                    ((IntervalType) type).getQualifier(type.typeCode);<br/>                row[interval_precision] = ValuePool.getLong(type.precision);<br/>                row[datetime_precision] = ValuePool.getLong(type.scale);"
        },
        {
          "total_lines": 4,
          "line_start": 6013,
          "line_end": 6016,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision);"
        },
        {
          "total_lines": 4,
          "line_start": 2701,
          "line_end": 2704,
          "content": "row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;"
        },
        {
          "total_lines": 4,
          "line_start": 4435,
          "line_end": 4438,
          "content": "row[character_maximum_length] =<br/>                            ValuePool.getLong(type.precision);<br/>                        row[character_octet_length] =<br/>                            ValuePool.getLong(type.precision);"
        },
        {
          "total_lines": 4,
          "line_start": 3477,
          "line_end": 3480,
          "content": "row[interval_type] =<br/>                    ((IntervalType) type).getQualifier(type.typeCode);<br/>                row[interval_precision] = ValuePool.getLong(type.precision);<br/>                row[datetime_precision] = ValuePool.getLong(type.scale);"
        },
        {
          "total_lines": 4,
          "line_start": 2733,
          "line_end": 2736,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision);"
        },
        {
          "total_lines": 4,
          "line_start": 3487,
          "line_end": 3490,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] =<br/>                    ValuePool.getLong(type.precision);"
        },
        {
          "total_lines": 4,
          "line_start": 3786,
          "line_end": 3789,
          "content": "row[character_maximum_length] = ValuePool.getLong(type.precision);<br/>            row[character_octet_length] = ValuePool.getLong(type.precision<br/>                    * 2);<br/>            row[character_set_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 4,
          "line_start": 5969,
          "line_end": 5972,
          "content": "row[character_maximum_length] =<br/>                        ValuePool.getLong(type.precision);<br/>                    row[character_octet_length] =<br/>                        ValuePool.getLong(type.precision * 2);"
        },
        {
          "total_lines": 4,
          "line_start": 7934,
          "line_end": 7937,
          "content": "row[character_maximum_length] =<br/>                    ValuePool.getLong(type.precision);<br/>                row[character_octet_length] = ValuePool.getLong(type.precision<br/>                        * 2);"
        },
        {
          "total_lines": 4,
          "line_start": 2859,
          "line_end": 2862,
          "content": "addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);<br/>            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);<br/>            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);         // not null<br/>            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);        // not null"
        },
        {
          "total_lines": 4,
          "line_start": 5978,
          "line_end": 5981,
          "content": "row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 4,
          "line_start": 5981,
          "line_end": 5984,
          "content": "row[collation_catalog] = database.getCatalogName().name;<br/>                    row[collation_schema] =<br/>                        ((CharacterType) type).getCollation().getSchemaName()<br/>                            .name;"
        },
        {
          "total_lines": 4,
          "line_start": 2698,
          "line_end": 2701,
          "content": "row[character_set_name] =<br/>                        ((CharacterType) type).getCharacterSet().getName()<br/>                            .name;<br/>                    row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 3,
          "line_start": 948,
          "line_end": 950,
          "content": "t.insertSys(session, store, row);<br/><br/>        row    = t.getEmptyRowData();"
        },
        {
          "total_lines": 3,
          "line_start": 7558,
          "line_end": 7560,
          "content": "grants.addAll(rights);<br/><br/>                    rights = grants;"
        },
        {
          "total_lines": 3,
          "line_start": 935,
          "line_end": 937,
          "content": "t.insertSys(session, store, row);<br/><br/>        row    = t.getEmptyRowData();"
        },
        {
          "total_lines": 3,
          "line_start": 986,
          "line_end": 988,
          "content": "t.insertSys(session, store, row);<br/><br/>        row    = t.getEmptyRowData();"
        },
        {
          "total_lines": 3,
          "line_start": 4445,
          "line_end": 4447,
          "content": "row[maximum_cardinality] =<br/>                            ValuePool.getLong(type.arrayLimitCardinality());<br/>                        row[data_type] = \"ARRAY\";"
        },
        {
          "total_lines": 3,
          "line_start": 7034,
          "line_end": 7036,
          "content": "//<br/>        Iterator it;<br/>        Object[] row;"
        },
        {
          "total_lines": 3,
          "line_start": 979,
          "line_end": 981,
          "content": "t.insertSys(session, store, row);<br/><br/>        row    = t.getEmptyRowData();"
        },
        {
          "total_lines": 3,
          "line_start": 7026,
          "line_end": 7028,
          "content": "// column number mappings<br/>        final int trigger_catalog  = 0;<br/>        final int trigger_schema   = 1;"
        },
        {
          "total_lines": 3,
          "line_start": 2743,
          "line_end": 2745,
          "content": "row[maximum_cardinality] =<br/>                        ValuePool.getLong(type.arrayLimitCardinality());<br/>                    row[data_type] = \"ARRAY\";"
        },
        {
          "total_lines": 3,
          "line_start": 5428,
          "line_end": 5430,
          "content": "addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);<br/>            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);<br/>            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);"
        },
        {
          "total_lines": 3,
          "line_start": 7944,
          "line_end": 7946,
          "content": "row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 3,
          "line_start": 4451,
          "line_end": 4453,
          "content": "row[udt_catalog] = database.getCatalogName().name;<br/>                        row[udt_schema]  = type.getSchemaName().name;<br/>                        row[udt_name]    = type.getName().name;"
        },
        {
          "total_lines": 3,
          "line_start": 967,
          "line_end": 969,
          "content": "t.insertSys(session, store, row);<br/><br/>        row    = t.getEmptyRowData();"
        },
        {
          "total_lines": 3,
          "line_start": 6023,
          "line_end": 6025,
          "content": "row[maximum_cardinality] =<br/>                        ValuePool.getLong(type.arrayLimitCardinality());<br/>                    row[data_type] = \"ARRAY\";"
        },
        {
          "total_lines": 3,
          "line_start": 6902,
          "line_end": 6904,
          "content": "addColumn(t, \"SPECIFIC_CATALOG\", SQL_IDENTIFIER);<br/>            addColumn(t, \"SPECIFIC_SCHEMA\", SQL_IDENTIFIER);<br/>            addColumn(t, \"SPECIFIC_NAME\", SQL_IDENTIFIER);    // not null"
        },
        {
          "total_lines": 3,
          "line_start": 955,
          "line_end": 957,
          "content": "t.insertSys(session, store, row);<br/><br/>        row    = t.getEmptyRowData();"
        },
        {
          "total_lines": 3,
          "line_start": 7752,
          "line_end": 7754,
          "content": "grants.addAll(rights);<br/><br/>                    rights = grants;"
        },
        {
          "total_lines": 3,
          "line_start": 2755,
          "line_end": 2757,
          "content": "row[udt_catalog] = database.getCatalogName().name;<br/>                    row[udt_schema]  = type.getSchemaName().name;<br/>                    row[udt_name]    = type.getName().name;"
        },
        {
          "total_lines": 3,
          "line_start": 7136,
          "line_end": 7138,
          "content": "// column number mappings<br/>        final int trigger_catalog = 0;<br/>        final int trigger_schema  = 1;"
        },
        {
          "total_lines": 3,
          "line_start": 961,
          "line_end": 963,
          "content": "t.insertSys(session, store, row);<br/><br/>        row    = t.getEmptyRowData();"
        },
        {
          "total_lines": 3,
          "line_start": 3794,
          "line_end": 3796,
          "content": "row[collation_catalog] = database.getCatalogName().name;<br/>            row[collation_schema] =<br/>                ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 3,
          "line_start": 973,
          "line_end": 975,
          "content": "t.insertSys(session, store, row);<br/><br/>        row    = t.getEmptyRowData();"
        },
        {
          "total_lines": 3,
          "line_start": 3789,
          "line_end": 3791,
          "content": "row[character_set_catalog] = database.getCatalogName().name;<br/>            row[character_set_schema] =<br/>                ((CharacterType) type).getCharacterSet().getSchemaName().name;"
        },
        {
          "total_lines": 3,
          "line_start": 4821,
          "line_end": 4823,
          "content": "addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);<br/>            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);<br/>            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);        // not null"
        },
        {
          "total_lines": 3,
          "line_start": 542,
          "line_end": 544,
          "content": "addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);    //0<br/>            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);<br/>            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);"
        },
        {
          "total_lines": 3,
          "line_start": 3450,
          "line_end": 3452,
          "content": "row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 3,
          "line_start": 6606,
          "line_end": 6608,
          "content": "// Intermediate holders<br/>        Iterator     tables;<br/>        Table        table;"
        },
        {
          "total_lines": 3,
          "line_start": 928,
          "line_end": 930,
          "content": "t.insertSys(session, store, row);<br/><br/>        row    = t.getEmptyRowData();"
        },
        {
          "total_lines": 3,
          "line_start": 7982,
          "line_end": 7984,
          "content": "row[maximum_cardinality] =<br/>                    ValuePool.getLong(type.arrayLimitCardinality());<br/>                row[data_type] = \"ARRAY\";"
        },
        {
          "total_lines": 3,
          "line_start": 7144,
          "line_end": 7146,
          "content": "//<br/>        Iterator it;<br/>        Object[] row;"
        },
        {
          "total_lines": 3,
          "line_start": 941,
          "line_end": 943,
          "content": "t.insertSys(session, store, row);<br/><br/>        row    = t.getEmptyRowData();"
        },
        {
          "total_lines": 3,
          "line_start": 7942,
          "line_end": 7944,
          "content": "row[character_set_name] =<br/>                    ((CharacterType) type).getCharacterSet().getName().name;<br/>                row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 3,
          "line_start": 3492,
          "line_end": 3494,
          "content": "row[maximum_cardinality] =<br/>                    ValuePool.getLong(type.arrayLimitCardinality());<br/>                row[data_type] = \"ARRAY\";"
        },
        {
          "total_lines": 3,
          "line_start": 5243,
          "line_end": 5245,
          "content": "grants.addAll(rights);<br/><br/>                    rights = grants;"
        },
        {
          "total_lines": 3,
          "line_start": 3452,
          "line_end": 3454,
          "content": "row[collation_catalog] = database.getCatalogName().name;<br/>                row[collation_schema] =<br/>                    ((CharacterType) type).getCollation().getSchemaName().name;"
        },
        {
          "total_lines": 3,
          "line_start": 2859,
          "line_end": 2861,
          "content": "addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);<br/>            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);<br/>            addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);         // not null"
        },
        {
          "total_lines": 3,
          "line_start": 3786,
          "line_end": 3788,
          "content": "row[character_maximum_length] = ValuePool.getLong(type.precision);<br/>            row[character_octet_length] = ValuePool.getLong(type.precision<br/>                    * 2);"
        },
        {
          "total_lines": 3,
          "line_start": 3792,
          "line_end": 3794,
          "content": "row[character_set_name] =<br/>                ((CharacterType) type).getCharacterSet().getName().name;<br/>            row[collation_catalog] = database.getCatalogName().name;"
        },
        {
          "total_lines": 2,
          "line_start": 3285,
          "line_end": 3286,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 4037,
          "line_end": 4038,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 7408,
          "line_end": 7409,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 533,
          "line_end": 534,
          "content": "Session session,<br/>                                       PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 6724,
          "line_end": 6725,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 2861,
          "line_end": 2862,
          "content": "addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);         // not null<br/>            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);        // not null"
        },
        {
          "total_lines": 2,
          "line_start": 8555,
          "line_end": 8556,
          "content": "Session session,<br/>                                         PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 8301,
          "line_end": 8302,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 4150,
          "line_end": 4151,
          "content": "Session session,<br/>                                          PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 6907,
          "line_end": 6908,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 3919,
          "line_end": 3920,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 6789,
          "line_end": 6790,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 2212,
          "line_end": 2213,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 4985,
          "line_end": 4986,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 544,
          "line_end": 545,
          "content": "addColumn(t, \"TABLE_NAME\", SQL_IDENTIFIER);<br/>            addColumn(t, \"COLUMN_NAME\", SQL_IDENTIFIER);"
        },
        {
          "total_lines": 2,
          "line_start": 4832,
          "line_end": 4833,
          "content": "sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 462,
          "line_end": 463,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 7699,
          "line_end": 7700,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1943,
          "line_end": 1944,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1620,
          "line_end": 1621,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 3871,
          "line_end": 3872,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1396,
          "line_end": 1397,
          "content": "Session session,<br/>            PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 3827,
          "line_end": 3828,
          "content": "row[character_maximum_length] = ValuePool.getLong(type.precision);<br/>            row[character_octet_length]   = ValuePool.getLong(type.precision);"
        },
        {
          "total_lines": 2,
          "line_start": 4451,
          "line_end": 4452,
          "content": "row[udt_catalog] = database.getCatalogName().name;<br/>                        row[udt_schema]  = type.getSchemaName().name;"
        },
        {
          "total_lines": 2,
          "line_start": 7016,
          "line_end": 7017,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1667,
          "line_end": 1668,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 166,
          "line_end": 167,
          "content": "Session session, PersistentStore store,<br/>                                  int tableIndex"
        },
        {
          "total_lines": 2,
          "line_start": 645,
          "line_end": 646,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 7519,
          "line_end": 7520,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 6299,
          "line_end": 6300,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 5436,
          "line_end": 5437,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 2756,
          "line_end": 2757,
          "content": "row[udt_schema]  = type.getSchemaName().name;<br/>                    row[udt_name]    = type.getName().name;"
        },
        {
          "total_lines": 2,
          "line_start": 2448,
          "line_end": 2449,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 7866,
          "line_end": 7867,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1317,
          "line_end": 1318,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 8183,
          "line_end": 8184,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 5656,
          "line_end": 5657,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1772,
          "line_end": 1773,
          "content": "Session session,<br/>                                         PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 5335,
          "line_end": 5336,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 2868,
          "line_end": 2869,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 4524,
          "line_end": 4525,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 2755,
          "line_end": 2756,
          "content": "row[udt_catalog] = database.getCatalogName().name;<br/>                    row[udt_schema]  = type.getSchemaName().name;"
        },
        {
          "total_lines": 2,
          "line_start": 8050,
          "line_end": 8051,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 5543,
          "line_end": 5544,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 4452,
          "line_end": 4453,
          "content": "row[udt_schema]  = type.getSchemaName().name;<br/>                        row[udt_name]    = type.getName().name;"
        },
        {
          "total_lines": 2,
          "line_start": 2330,
          "line_end": 2331,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 3824,
          "line_end": 3825,
          "content": "row[character_maximum_length] = ValuePool.getLong(type.precision);<br/>            row[character_octet_length]   = ValuePool.getLong(type.precision);"
        },
        {
          "total_lines": 2,
          "line_start": 1789,
          "line_end": 1790,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 4655,
          "line_end": 4656,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 7028,
          "line_end": 7029,
          "content": "final int trigger_schema   = 1;<br/>        final int trigger_name     = 2;"
        },
        {
          "total_lines": 2,
          "line_start": 5195,
          "line_end": 5196,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1465,
          "line_end": 1466,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1057,
          "line_end": 1058,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 6596,
          "line_end": 6597,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 1221,
          "line_end": 1222,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 542,
          "line_end": 543,
          "content": "addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);    //0<br/>            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);"
        },
        {
          "total_lines": 2,
          "line_start": 914,
          "line_end": 915,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 8571,
          "line_end": 8572,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 2859,
          "line_end": 2860,
          "content": "addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);<br/>            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);"
        },
        {
          "total_lines": 2,
          "line_start": 6452,
          "line_end": 6453,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 815,
          "line_end": 816,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 4736,
          "line_end": 4737,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 7126,
          "line_end": 7127,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 3126,
          "line_end": 3127,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 4908,
          "line_end": 4909,
          "content": "sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 7138,
          "line_end": 7139,
          "content": "final int trigger_schema  = 1;<br/>        final int trigger_name    = 2;"
        },
        {
          "total_lines": 2,
          "line_start": 4821,
          "line_end": 4822,
          "content": "addColumn(t, \"TABLE_CATALOG\", SQL_IDENTIFIER);<br/>            addColumn(t, \"TABLE_SCHEMA\", SQL_IDENTIFIER);"
        },
        {
          "total_lines": 2,
          "line_start": 3563,
          "line_end": 3564,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 5068,
          "line_end": 5069,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 6338,
          "line_end": 6339,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 6258,
          "line_end": 6259,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 2,
          "line_start": 3057,
          "line_end": 3058,
          "content": "false,<br/>                SchemaObject.INDEX"
        },
        {
          "total_lines": 1,
          "line_start": 2579,
          "line_end": 2579,
          "content": "t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 4161,
          "line_end": 4161,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 5817,
          "line_end": 5817,
          "content": "t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 6414,
          "line_end": 6414,
          "content": "false, SchemaObject.INDEX"
        },
        {
          "total_lines": 1,
          "line_start": 2550,
          "line_end": 2550,
          "content": "t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA"
        },
        {
          "total_lines": 1,
          "line_start": 3523,
          "line_end": 3523,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 6773,
          "line_end": 6773,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 7830,
          "line_end": 7830,
          "content": "t, \"USER_DEFINED_TYPE_NAME\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 4191,
          "line_end": 4191,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1657,
          "line_end": 1657,
          "content": "t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 5528,
          "line_end": 5528,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 7859,
          "line_end": 7859,
          "content": "t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 4968,
          "line_end": 4968,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3950,
          "line_end": 3950,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 4265,
          "line_end": 4265,
          "content": "t, \"CHARACTER_SET_CATALOG\", CHARACTER_DATA"
        },
        {
          "total_lines": 1,
          "line_start": 5049,
          "line_end": 5049,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 6377,
          "line_end": 6377,
          "content": "false, SchemaObject.INDEX"
        },
        {
          "total_lines": 1,
          "line_start": 4264,
          "line_end": 4264,
          "content": "t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 2542,
          "line_end": 2542,
          "content": "t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 2586,
          "line_end": 2586,
          "content": "false, SchemaObject.INDEX"
        },
        {
          "total_lines": 1,
          "line_start": 4747,
          "line_end": 4747,
          "content": "SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()"
        },
        {
          "total_lines": 1,
          "line_start": 4832,
          "line_end": 4832,
          "content": "sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false"
        },
        {
          "total_lines": 1,
          "line_start": 5175,
          "line_end": 5175,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 6269,
          "line_end": 6269,
          "content": "SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()"
        },
        {
          "total_lines": 1,
          "line_start": 2543,
          "line_end": 2543,
          "content": "t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 3380,
          "line_end": 3380,
          "content": "t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 4286,
          "line_end": 4286,
          "content": "t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 8034,
          "line_end": 8034,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3112,
          "line_end": 3112,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3268,
          "line_end": 3268,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 4181,
          "line_end": 4181,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 5320,
          "line_end": 5320,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1528,
          "line_end": 1528,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 4287,
          "line_end": 4287,
          "content": "t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 1198,
          "line_end": 1198,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3716,
          "line_end": 3716,
          "content": "row, ((ArrayType) type).collectionBaseType()"
        },
        {
          "total_lines": 1,
          "line_start": 1030,
          "line_end": 1030,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 4272,
          "line_end": 4272,
          "content": "t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 7255,
          "line_end": 7255,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 7841,
          "line_end": 7841,
          "content": "t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 6437,
          "line_end": 6437,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 630,
          "line_end": 630,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3361,
          "line_end": 3361,
          "content": "t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 3370,
          "line_end": 3370,
          "content": "t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 3631,
          "line_end": 3631,
          "content": "row, ((ArrayType) type).collectionBaseType()"
        },
        {
          "total_lines": 1,
          "line_start": 6308,
          "line_end": 6308,
          "content": "SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()"
        },
        {
          "total_lines": 1,
          "line_start": 5421,
          "line_end": 5421,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 4290,
          "line_end": 4290,
          "content": "false, SchemaObject.INDEX"
        },
        {
          "total_lines": 1,
          "line_start": 6347,
          "line_end": 6347,
          "content": "SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()"
        },
        {
          "total_lines": 1,
          "line_start": 6385,
          "line_end": 6385,
          "content": "SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()"
        },
        {
          "total_lines": 1,
          "line_start": 6180,
          "line_end": 6180,
          "content": "false, SchemaObject.INDEX"
        },
        {
          "total_lines": 1,
          "line_start": 3559,
          "line_end": 3559,
          "content": "t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 6363,
          "line_end": 6363,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 799,
          "line_end": 799,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 5826,
          "line_end": 5826,
          "content": "false, SchemaObject.INDEX"
        },
        {
          "total_lines": 1,
          "line_start": 7858,
          "line_end": 7858,
          "content": "t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 7828,
          "line_end": 7828,
          "content": "t, \"USER_DEFINED_TYPE_CATALOG\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 4717,
          "line_end": 4717,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3363,
          "line_end": 3363,
          "content": "t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 1650,
          "line_end": 1650,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 903,
          "line_end": 903,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1542,
          "line_end": 1542,
          "content": "false, SchemaObject.INDEX"
        },
        {
          "total_lines": 1,
          "line_start": 7821,
          "line_end": 7821,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 7392,
          "line_end": 7392,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3860,
          "line_end": 3860,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 7850,
          "line_end": 7850,
          "content": "t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 4892,
          "line_end": 4892,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3747,
          "line_end": 3747,
          "content": "row, ((ArrayType) type).collectionBaseType()"
        },
        {
          "total_lines": 1,
          "line_start": 5638,
          "line_end": 5638,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 5756,
          "line_end": 5756,
          "content": "t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 5748,
          "line_end": 5748,
          "content": "t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 3684,
          "line_end": 3684,
          "content": "row, ((ArrayType) type).collectionBaseType()"
        },
        {
          "total_lines": 1,
          "line_start": 2314,
          "line_end": 2314,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1299,
          "line_end": 1299,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 6162,
          "line_end": 6162,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3383,
          "line_end": 3383,
          "content": "false, SchemaObject.INDEX"
        },
        {
          "total_lines": 1,
          "line_start": 4235,
          "line_end": 4235,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 5726,
          "line_end": 5726,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 4506,
          "line_end": 4506,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3536,
          "line_end": 3536,
          "content": "t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 3350,
          "line_end": 3350,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 8394,
          "line_end": 8394,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 4171,
          "line_end": 4171,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 4019,
          "line_end": 4019,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2852,
          "line_end": 2852,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 6401,
          "line_end": 6401,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 6242,
          "line_end": 6242,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 4843,
          "line_end": 4843,
          "content": "SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()"
        },
        {
          "total_lines": 1,
          "line_start": 3545,
          "line_end": 3545,
          "content": "t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 4635,
          "line_end": 4635,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1453,
          "line_end": 1453,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2104,
          "line_end": 2104,
          "content": "false, SchemaObject.INDEX"
        },
        {
          "total_lines": 1,
          "line_start": 7503,
          "line_end": 7503,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3560,
          "line_end": 3560,
          "content": "t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 6703,
          "line_end": 6703,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1608,
          "line_end": 1608,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 4812,
          "line_end": 4812,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 5784,
          "line_end": 5784,
          "content": "t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 4201,
          "line_end": 4201,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 446,
          "line_end": 446,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 6892,
          "line_end": 6892,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 5783,
          "line_end": 5783,
          "content": "t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 5747,
          "line_end": 5747,
          "content": "t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 3660,
          "line_end": 3660,
          "content": "row, ((ArrayType) type).collectionBaseType()"
        },
        {
          "total_lines": 1,
          "line_start": 3042,
          "line_end": 3042,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2198,
          "line_end": 2198,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3537,
          "line_end": 3537,
          "content": "t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 6285,
          "line_end": 6285,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 8168,
          "line_end": 8168,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 6422,
          "line_end": 6422,
          "content": "SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()"
        },
        {
          "total_lines": 1,
          "line_start": 4258,
          "line_end": 4258,
          "content": "t, \"TO_SQL_SPECIFIC_SCHEMA\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 7111,
          "line_end": 7111,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 7001,
          "line_end": 7001,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2527,
          "line_end": 2527,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2090,
          "line_end": 2090,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 8284,
          "line_end": 8284,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 2432,
          "line_end": 2432,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 5749,
          "line_end": 5749,
          "content": "t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 1930,
          "line_end": 1930,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 6461,
          "line_end": 6461,
          "content": "SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()"
        },
        {
          "total_lines": 1,
          "line_start": 3538,
          "line_end": 3538,
          "content": "t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 4917,
          "line_end": 4917,
          "content": "SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()"
        },
        {
          "total_lines": 1,
          "line_start": 7842,
          "line_end": 7842,
          "content": "t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 4908,
          "line_end": 4908,
          "content": "sysTableHsqlNames[ROLE_TABLE_GRANTS].name, false"
        },
        {
          "total_lines": 1,
          "line_start": 7829,
          "line_end": 7829,
          "content": "t, \"USER_DEFINED_TYPE_SCHEMA\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 6324,
          "line_end": 6324,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 5816,
          "line_end": 5816,
          "content": "t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 3138,
          "line_end": 3138,
          "content": "SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()"
        },
        {
          "total_lines": 1,
          "line_start": 4257,
          "line_end": 4257,
          "content": "t, \"TO_SQL_SPECIFIC_CATALOG\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 6576,
          "line_end": 6576,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 3904,
          "line_end": 3904,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 4263,
          "line_end": 4263,
          "content": "t, \"CHARACTER_MAXIMUM_LENGTH\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 3362,
          "line_end": 3362,
          "content": "t, \"CHARACTER_OCTET_LENGTH\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 4996,
          "line_end": 4996,
          "content": "SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()"
        },
        {
          "total_lines": 1,
          "line_start": 3069,
          "line_end": 3069,
          "content": "SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()"
        },
        {
          "total_lines": 1,
          "line_start": 7679,
          "line_end": 7679,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 4666,
          "line_end": 4666,
          "content": "SqlInvariants.INFORMATION_SCHEMA_HSQLNAME, session.getUser()"
        },
        {
          "total_lines": 1,
          "line_start": 7843,
          "line_end": 7843,
          "content": "t, \"CHARACTER_SET_CATALOG\", SQL_IDENTIFIER"
        },
        {
          "total_lines": 1,
          "line_start": 2545,
          "line_end": 2545,
          "content": "t, \"NUMERIC_PRECISION_RADIX\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 7281,
          "line_end": 7281,
          "content": "false, SchemaObject.INDEX"
        },
        {
          "total_lines": 1,
          "line_start": 3379,
          "line_end": 3379,
          "content": "t, \"DECLARED_NUMERIC_PRECISION\", CARDINAL_NUMBER"
        },
        {
          "total_lines": 1,
          "line_start": 2580,
          "line_end": 2580,
          "content": "t, \"DECLARED_NUMERIC_SCALE\", CARDINAL_NUMBER"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/SqlServerTransferHelper.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 52,
          "line_end": 52,
          "content": "Traceable t, String q"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/RowAVL.java",
      "loc_duplicate": 17,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 163,
          "line_end": 169,
          "content": "NodeAVL backnode = getNode(index - 1);<br/>        NodeAVL newnode  = new NodeAVL(this);<br/><br/>        newnode.nNext  = backnode.nNext;<br/>        backnode.nNext = newnode;<br/><br/>        return newnode;"
        },
        {
          "total_lines": 4,
          "line_start": 209,
          "line_end": 212,
          "content": "NodeAVL last = n;<br/><br/>            n          = n.nNext;<br/>            last.nNext = null;"
        },
        {
          "total_lines": 4,
          "line_start": 163,
          "line_end": 166,
          "content": "NodeAVL backnode = getNode(index - 1);<br/>        NodeAVL newnode  = new NodeAVL(this);<br/><br/>        newnode.nNext  = backnode.nNext;"
        },
        {
          "total_lines": 2,
          "line_start": 211,
          "line_end": 212,
          "content": "n          = n.nNext;<br/>            last.nNext = null;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestUtil.java",
      "loc_duplicate": 189,
      "clones": [
          {
          "total_lines": 17,
          "line_start": 1044,
          "line_end": 1060,
          "content": "StringBuffer sb = new StringBuffer();<br/><br/>        if (lines.length == 1 && lines[0].trim().length() < 1) {<br/>            return null;<br/>        }<br/><br/>        for (int i = 0; i < lines.length; i++) {<br/>            if (i > 0) {<br/>                sb.append(LS);<br/>            }<br/><br/>            sb.append(\"+ \" + lines[i]);<br/>        }<br/><br/>        TestUtil.expandStamps(sb);<br/><br/>        return sb.toString().trim();"
        },
        {
          "total_lines": 17,
          "line_start": 1352,
          "line_end": 1368,
          "content": "StringBuffer sb = new StringBuffer();<br/><br/>        if (lines.length == 1 && lines[0].trim().length() < 1) {<br/>            return null;<br/>        }<br/><br/>        for (int i = 0; i < lines.length; i++) {<br/>            if (i > 0) {<br/>                sb.append(LS);<br/>            }<br/><br/>            sb.append(\"+ \" + lines[i]);<br/>        }<br/><br/>        TestUtil.expandStamps(sb);<br/><br/>        return sb.toString().trim();"
        },
        {
          "total_lines": 15,
          "line_start": 1046,
          "line_end": 1060,
          "content": "if (lines.length == 1 && lines[0].trim().length() < 1) {<br/>            return null;<br/>        }<br/><br/>        for (int i = 0; i < lines.length; i++) {<br/>            if (i > 0) {<br/>                sb.append(LS);<br/>            }<br/><br/>            sb.append(\"+ \" + lines[i]);<br/>        }<br/><br/>        TestUtil.expandStamps(sb);<br/><br/>        return sb.toString().trim();"
        },
        {
          "total_lines": 15,
          "line_start": 1354,
          "line_end": 1368,
          "content": "if (lines.length == 1 && lines[0].trim().length() < 1) {<br/>            return null;<br/>        }<br/><br/>        for (int i = 0; i < lines.length; i++) {<br/>            if (i > 0) {<br/>                sb.append(LS);<br/>            }<br/><br/>            sb.append(\"+ \" + lines[i]);<br/>        }<br/><br/>        TestUtil.expandStamps(sb);<br/><br/>        return sb.toString().trim();"
        },
        {
          "total_lines": 13,
          "line_start": 1044,
          "line_end": 1056,
          "content": "StringBuffer sb = new StringBuffer();<br/><br/>        if (lines.length == 1 && lines[0].trim().length() < 1) {<br/>            return null;<br/>        }<br/><br/>        for (int i = 0; i < lines.length; i++) {<br/>            if (i > 0) {<br/>                sb.append(LS);<br/>            }<br/><br/>            sb.append(\"+ \" + lines[i]);<br/>        }"
        },
        {
          "total_lines": 13,
          "line_start": 1352,
          "line_end": 1364,
          "content": "StringBuffer sb = new StringBuffer();<br/><br/>        if (lines.length == 1 && lines[0].trim().length() < 1) {<br/>            return null;<br/>        }<br/><br/>        for (int i = 0; i < lines.length; i++) {<br/>            if (i > 0) {<br/>                sb.append(LS);<br/>            }<br/><br/>            sb.append(\"+ \" + lines[i]);<br/>        }"
        },
        {
          "total_lines": 12,
          "line_start": 1109,
          "line_end": 1120,
          "content": "// Would like to use String.split(), but don't know if Java 4<br/>            // is allowed here.<br/>            // Until we can use Java 4, prohibit tabs as white space.<br/>            int index = trimmed.indexOf(' ');<br/><br/>            if (index < 0) {<br/>                throw new IllegalArgumentException();<br/>            }<br/><br/>            enforceSequence = Boolean.valueOf(trimmed.substring(0,<br/>                    index)).booleanValue();<br/>            waiter = Waiter.getWaiter(trimmed.substring(index).trim());"
        },
        {
          "total_lines": 12,
          "line_start": 1022,
          "line_end": 1033,
          "content": "// Would like to use String.split(), but don't know if Java 4<br/>                // is allowed here.<br/>                // Until we can use Java 4, prohibit tabs as white space.<br/>                int index = trimmed.indexOf(' ');<br/><br/>                if (index < 0) {<br/>                    throw new IllegalArgumentException();<br/>                }<br/><br/>                enforceSequence = Boolean.valueOf(trimmed.substring(0,<br/>                        index)).booleanValue();<br/>                waiter = Waiter.getWaiter(trimmed.substring(index).trim());"
        },
        {
          "total_lines": 11,
          "line_start": 1109,
          "line_end": 1119,
          "content": "// Would like to use String.split(), but don't know if Java 4<br/>            // is allowed here.<br/>            // Until we can use Java 4, prohibit tabs as white space.<br/>            int index = trimmed.indexOf(' ');<br/><br/>            if (index < 0) {<br/>                throw new IllegalArgumentException();<br/>            }<br/><br/>            enforceSequence = Boolean.valueOf(trimmed.substring(0,<br/>                    index)).booleanValue();"
        },
        {
          "total_lines": 11,
          "line_start": 1022,
          "line_end": 1032,
          "content": "// Would like to use String.split(), but don't know if Java 4<br/>                // is allowed here.<br/>                // Until we can use Java 4, prohibit tabs as white space.<br/>                int index = trimmed.indexOf(' ');<br/><br/>                if (index < 0) {<br/>                    throw new IllegalArgumentException();<br/>                }<br/><br/>                enforceSequence = Boolean.valueOf(trimmed.substring(0,<br/>                        index)).booleanValue();"
        },
        {
          "total_lines": 8,
          "line_start": 1022,
          "line_end": 1029,
          "content": "// Would like to use String.split(), but don't know if Java 4<br/>                // is allowed here.<br/>                // Until we can use Java 4, prohibit tabs as white space.<br/>                int index = trimmed.indexOf(' ');<br/><br/>                if (index < 0) {<br/>                    throw new IllegalArgumentException();<br/>                }"
        },
        {
          "total_lines": 8,
          "line_start": 1109,
          "line_end": 1116,
          "content": "// Would like to use String.split(), but don't know if Java 4<br/>            // is allowed here.<br/>            // Until we can use Java 4, prohibit tabs as white space.<br/>            int index = trimmed.indexOf(' ');<br/><br/>            if (index < 0) {<br/>                throw new IllegalArgumentException();<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 1027,
          "line_end": 1033,
          "content": "if (index < 0) {<br/>                    throw new IllegalArgumentException();<br/>                }<br/><br/>                enforceSequence = Boolean.valueOf(trimmed.substring(0,<br/>                        index)).booleanValue();<br/>                waiter = Waiter.getWaiter(trimmed.substring(index).trim());"
        },
        {
          "total_lines": 7,
          "line_start": 1114,
          "line_end": 1120,
          "content": "if (index < 0) {<br/>                throw new IllegalArgumentException();<br/>            }<br/><br/>            enforceSequence = Boolean.valueOf(trimmed.substring(0,<br/>                    index)).booleanValue();<br/>            waiter = Waiter.getWaiter(trimmed.substring(index).trim());"
        },
        {
          "total_lines": 6,
          "line_start": 1114,
          "line_end": 1119,
          "content": "if (index < 0) {<br/>                throw new IllegalArgumentException();<br/>            }<br/><br/>            enforceSequence = Boolean.valueOf(trimmed.substring(0,<br/>                    index)).booleanValue();"
        },
        {
          "total_lines": 6,
          "line_start": 1027,
          "line_end": 1032,
          "content": "if (index < 0) {<br/>                    throw new IllegalArgumentException();<br/>                }<br/><br/>                enforceSequence = Boolean.valueOf(trimmed.substring(0,<br/>                        index)).booleanValue();"
        },
        {
          "total_lines": 5,
          "line_start": 1137,
          "line_end": 1141,
          "content": "if (i > 0) {<br/>                sb.append(LS);<br/>            }<br/><br/>            sb.append(\"+ \" + lines[i]);"
        },
        {
          "total_lines": 3,
          "line_start": 1031,
          "line_end": 1033,
          "content": "enforceSequence = Boolean.valueOf(trimmed.substring(0,<br/>                        index)).booleanValue();<br/>                waiter = Waiter.getWaiter(trimmed.substring(index).trim());"
        },
        {
          "total_lines": 3,
          "line_start": 1118,
          "line_end": 1120,
          "content": "enforceSequence = Boolean.valueOf(trimmed.substring(0,<br/>                    index)).booleanValue();<br/>            waiter = Waiter.getWaiter(trimmed.substring(index).trim());"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/tar/TarFileInputStream.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 105,
          "line_end": 106,
          "content": "compressionType,<br/>             TarFileOutputStream.Compression.DEFAULT_BLOCKS_PER_RECORD"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/StringUtil.java",
      "loc_duplicate": 83,
      "clones": [
          {
          "total_lines": 14,
          "line_start": 271,
          "line_end": 284,
          "content": "int          len = s.length;<br/>        StringBuffer sb  = new StringBuffer(len * 8);<br/><br/>        for (int i = 0; i < len; i++) {<br/>            sb.append(quote);<br/>            sb.append(s[i]);<br/>            sb.append(quote);<br/><br/>            if (i + 1 < len) {<br/>                sb.append(separator);<br/>            }<br/>        }<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 14,
          "line_start": 253,
          "line_end": 266,
          "content": "int          len = s.length;<br/>        StringBuffer sb  = new StringBuffer(len * 8);<br/><br/>        for (int i = 0; i < len; i++) {<br/>            sb.append(quote);<br/>            sb.append(s[i]);<br/>            sb.append(quote);<br/><br/>            if (i + 1 < len) {<br/>                sb.append(separator);<br/>            }<br/>        }<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 13,
          "line_start": 254,
          "line_end": 266,
          "content": "StringBuffer sb  = new StringBuffer(len * 8);<br/><br/>        for (int i = 0; i < len; i++) {<br/>            sb.append(quote);<br/>            sb.append(s[i]);<br/>            sb.append(quote);<br/><br/>            if (i + 1 < len) {<br/>                sb.append(separator);<br/>            }<br/>        }<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 13,
          "line_start": 272,
          "line_end": 284,
          "content": "StringBuffer sb  = new StringBuffer(len * 8);<br/><br/>        for (int i = 0; i < len; i++) {<br/>            sb.append(quote);<br/>            sb.append(s[i]);<br/>            sb.append(quote);<br/><br/>            if (i + 1 < len) {<br/>                sb.append(separator);<br/>            }<br/>        }<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 11,
          "line_start": 274,
          "line_end": 284,
          "content": "for (int i = 0; i < len; i++) {<br/>            sb.append(quote);<br/>            sb.append(s[i]);<br/>            sb.append(quote);<br/><br/>            if (i + 1 < len) {<br/>                sb.append(separator);<br/>            }<br/>        }<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 11,
          "line_start": 256,
          "line_end": 266,
          "content": "for (int i = 0; i < len; i++) {<br/>            sb.append(quote);<br/>            sb.append(s[i]);<br/>            sb.append(quote);<br/><br/>            if (i + 1 < len) {<br/>                sb.append(separator);<br/>            }<br/>        }<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 7,
          "line_start": 223,
          "line_end": 229,
          "content": "sb.append(quote);<br/>            sb.append(s[i]);<br/>            sb.append(quote);<br/><br/>            if (i + 1 < len) {<br/>                sb.append(separator);<br/>            }"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/BlobData.java",
      "loc_duplicate": 13,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 66,
          "line_end": 67,
          "content": "long pos, byte[] bytes,<br/>                  int offset"
        },
        {
          "total_lines": 2,
          "line_start": 57,
          "line_end": 58,
          "content": "SessionInterface session, long pos,<br/>                                long length"
        },
        {
          "total_lines": 1,
          "line_start": 71,
          "line_end": 71,
          "content": "long pos, BlobData b, long offset, long length"
        },
        {
          "total_lines": 1,
          "line_start": 67,
          "line_end": 67,
          "content": "int offset, int len"
        },
        {
          "total_lines": 1,
          "line_start": 79,
          "line_end": 79,
          "content": "byte[] pattern, long start"
        },
        {
          "total_lines": 1,
          "line_start": 81,
          "line_end": 81,
          "content": "BlobData pattern, long start"
        },
        {
          "total_lines": 1,
          "line_start": 53,
          "line_end": 53,
          "content": "SessionInterface session, long pos"
        },
        {
          "total_lines": 1,
          "line_start": 69,
          "line_end": 69,
          "content": "SessionInterface session, long pos"
        },
        {
          "total_lines": 1,
          "line_start": 73,
          "line_end": 73,
          "content": "long pos, InputStream in"
        },
        {
          "total_lines": 1,
          "line_start": 51,
          "line_end": 51,
          "content": "SessionInterface session, long pos"
        },
        {
          "total_lines": 1,
          "line_start": 57,
          "line_end": 57,
          "content": "SessionInterface session, long pos"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestLibSpeed.java",
      "loc_duplicate": 28,
      "clones": [
          {
          "total_lines": 14,
          "line_start": 218,
          "line_end": 231,
          "content": "sw.zero();<br/><br/>            for (int j = 0; j < count; j++) {<br/>                for (int i = 0; i < sNumeric.length; i++) {<br/>                    int r = randomgen.nextInt(sNumeric.length);<br/><br/>                    doubleIntLookup.findFirstEqualKeyIndex(r);<br/><br/>                    dummy += r;<br/>                }<br/>            }<br/><br/>            System.out.println(\"DoubleIntTable Lookup \" + sw.elapsedTime());<br/>            sw.zero();"
        },
        {
          "total_lines": 14,
          "line_start": 180,
          "line_end": 193,
          "content": "sw.zero();<br/><br/>            for (int j = 0; j < count; j++) {<br/>                for (int i = 0; i < sNumeric.length; i++) {<br/>                    int r = randomgen.nextInt(sNumeric.length);<br/><br/>                    doubleIntLookup.findFirstEqualKeyIndex(r);<br/><br/>                    dummy += r;<br/>                }<br/>            }<br/><br/>            System.out.println(\"DoubleIntTable Lookup \" + sw.elapsedTime());<br/>            sw.zero();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ExpressionLogical.java",
      "loc_duplicate": 69,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 944,
          "line_end": 952,
          "content": "if (session.database.sqlEnforceTypes) {<br/>                        throw Error.error(ErrorCode.X_42562);<br/>                    }<br/><br/>                    if (nodes[RIGHT].dataType.canConvertFrom(<br/>                            nodes[LEFT].dataType)) {<br/>                        nodes[LEFT] = ExpressionOp.getCastExpression(session,<br/>                                nodes[LEFT], nodes[RIGHT].dataType);<br/>                    }"
        },
        {
          "total_lines": 9,
          "line_start": 913,
          "line_end": 921,
          "content": "if (session.database.sqlEnforceTypes) {<br/>                        throw Error.error(ErrorCode.X_42562);<br/>                    }<br/><br/>                    if (nodes[LEFT].dataType.canConvertFrom(<br/>                            nodes[RIGHT].dataType)) {<br/>                        nodes[RIGHT] = ExpressionOp.getCastExpression(session,<br/>                                nodes[RIGHT], nodes[LEFT].dataType);<br/>                    }"
        },
        {
          "total_lines": 9,
          "line_start": 934,
          "line_end": 942,
          "content": "if (session.database.sqlEnforceTypes) {<br/>                        throw Error.error(ErrorCode.X_42562);<br/>                    }<br/><br/>                    if (nodes[LEFT].dataType.canConvertFrom(<br/>                            nodes[RIGHT].dataType)) {<br/>                        nodes[RIGHT] = ExpressionOp.getCastExpression(session,<br/>                                nodes[RIGHT], nodes[LEFT].dataType);<br/>                    }"
        },
        {
          "total_lines": 9,
          "line_start": 924,
          "line_end": 932,
          "content": "if (session.database.sqlEnforceTypes) {<br/>                        throw Error.error(ErrorCode.X_42562);<br/>                    }<br/><br/>                    if (nodes[RIGHT].dataType.canConvertFrom(<br/>                            nodes[LEFT].dataType)) {<br/>                        nodes[LEFT] = ExpressionOp.getCastExpression(session,<br/>                                nodes[LEFT], nodes[RIGHT].dataType);<br/>                    }"
        },
        {
          "total_lines": 5,
          "line_start": 1196,
          "line_end": 1200,
          "content": "Object value =<br/>                    session.sessionContext.rangeIterators[rangePosition]<br/>                        .getCurrent(columnIndex);<br/><br/>                return value;"
        },
        {
          "total_lines": 3,
          "line_start": 2353,
          "line_end": 2355,
          "content": "PersistentStore store = rangeVar.rangeTable.getRowStore(session);<br/><br/>            cost = store.elementCount();"
        },
        {
          "total_lines": 3,
          "line_start": 621,
          "line_end": 623,
          "content": "sb.append(\" arg_right=[\");<br/>            sb.append(nodes[RIGHT].describe(session, blanks + 1));<br/>            sb.append(']');"
        },
        {
          "total_lines": 3,
          "line_start": 615,
          "line_end": 617,
          "content": "sb.append(\" arg_left=[\");<br/>            sb.append(nodes[LEFT].describe(session, blanks + 1));<br/>            sb.append(']');"
        },
        {
          "total_lines": 3,
          "line_start": 2347,
          "line_end": 2349,
          "content": "PersistentStore store = rangeVar.rangeTable.getRowStore(session);<br/><br/>            cost = store.elementCount();"
        },
        {
          "total_lines": 2,
          "line_start": 1834,
          "line_end": 1835,
          "content": "nodes[LEFT].nodeDataTypes,<br/>                              nodes[RIGHT].nodeDataTypes"
        },
        {
          "total_lines": 2,
          "line_start": 1627,
          "line_end": 1628,
          "content": "nodes[LEFT].nodeDataTypes,<br/>                              nodes[RIGHT].nodeDataTypes"
        },
        {
          "total_lines": 2,
          "line_start": 1116,
          "line_end": 1117,
          "content": "nodes[LEFT].nodes[0]<br/>                    .dataType, nodes[LEFT].nodes[1].dataType"
        },
        {
          "total_lines": 2,
          "line_start": 1751,
          "line_end": 1752,
          "content": "nodes[LEFT].nodeDataTypes,<br/>                              nodes[RIGHT].nodeDataTypes"
        },
        {
          "total_lines": 2,
          "line_start": 1123,
          "line_end": 1124,
          "content": "nodes[LEFT].nodes[0].dataType,<br/>                                          nodes[LEFT].nodes[1].dataType"
        },
        {
          "total_lines": 1,
          "line_start": 1751,
          "line_end": 1751,
          "content": "session, data"
        },
        {
          "total_lines": 1,
          "line_start": 2332,
          "line_end": 2332,
          "content": "Session session, RangeVariable rangeVar"
        },
        {
          "total_lines": 1,
          "line_start": 1627,
          "line_end": 1627,
          "content": "session, data"
        },
        {
          "total_lines": 1,
          "line_start": 2318,
          "line_end": 2318,
          "content": "Session session, RangeVariable rangeVar"
        },
        {
          "total_lines": 1,
          "line_start": 1834,
          "line_end": 1834,
          "content": "session, data"
        },
        {
          "total_lines": 1,
          "line_start": 126,
          "line_end": 126,
          "content": "int type, Expression left"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/LobStore.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 45,
          "line_end": 46,
          "content": "byte[] dataBytes, long position, int offset,<br/>                       int length"
        },
        {
          "total_lines": 1,
          "line_start": 43,
          "line_end": 43,
          "content": "byte[] dataBytes, int blockAddress, int blockCount"
        },
        {
          "total_lines": 1,
          "line_start": 45,
          "line_end": 45,
          "content": "long position, int offset"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestPreparedSubQueries.java",
      "loc_duplicate": 89,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 201,
          "line_end": 209,
          "content": "r = s.getGeneratedKeys();<br/><br/>            while (r.next()) {<br/>                r.getInt(1);<br/><br/>                valid = true;<br/>            }<br/><br/>            assertTrue(valid);"
        },
        {
          "total_lines": 9,
          "line_start": 189,
          "line_end": 197,
          "content": "r = s.getGeneratedKeys();<br/><br/>            while (r.next()) {<br/>                r.getInt(1);<br/><br/>                valid = true;<br/>            }<br/><br/>            assertTrue(valid);"
        },
        {
          "total_lines": 7,
          "line_start": 201,
          "line_end": 207,
          "content": "r = s.getGeneratedKeys();<br/><br/>            while (r.next()) {<br/>                r.getInt(1);<br/><br/>                valid = true;<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 148,
          "line_end": 154,
          "content": "System.out.println(\" -- executing directly\\n<<<\\n\"<br/>                                       + stmtArray[i].command + \"\\n>>>\\n\");<br/><br/>                    Statement s = con.createStatement();<br/>                    boolean   b = s.execute(stmtArray[i].command);<br/><br/>                    System.out.println(\" ***** st.execute gave me \" + b);"
        },
        {
          "total_lines": 7,
          "line_start": 189,
          "line_end": 195,
          "content": "r = s.getGeneratedKeys();<br/><br/>            while (r.next()) {<br/>                r.getInt(1);<br/><br/>                valid = true;<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 185,
          "line_end": 189,
          "content": "r.close();<br/>            assertTrue(valid);<br/>            s.execute(\"insert into a(b) values(2)\", new int[]{ 1 });<br/><br/>            r = s.getGeneratedKeys();"
        },
        {
          "total_lines": 5,
          "line_start": 227,
          "line_end": 231,
          "content": "r.close();<br/>            assertTrue(valid);<br/>            s.execute(\"insert into a(b) values(2)\", new int[]{ 1 });<br/><br/>            r = s.getGeneratedKeys();"
        },
        {
          "total_lines": 4,
          "line_start": 186,
          "line_end": 189,
          "content": "assertTrue(valid);<br/>            s.execute(\"insert into a(b) values(2)\", new int[]{ 1 });<br/><br/>            r = s.getGeneratedKeys();"
        },
        {
          "total_lines": 4,
          "line_start": 148,
          "line_end": 151,
          "content": "System.out.println(\" -- executing directly\\n<<<\\n\"<br/>                                       + stmtArray[i].command + \"\\n>>>\\n\");<br/><br/>                    Statement s = con.createStatement();"
        },
        {
          "total_lines": 4,
          "line_start": 228,
          "line_end": 231,
          "content": "assertTrue(valid);<br/>            s.execute(\"insert into a(b) values(2)\", new int[]{ 1 });<br/><br/>            r = s.getGeneratedKeys();"
        },
        {
          "total_lines": 4,
          "line_start": 138,
          "line_end": 141,
          "content": "int r = ps.executeUpdate();<br/><br/>                        System.out.println(\" ***** ps.executeUpdate gave me \"<br/>                                           + r);"
        },
        {
          "total_lines": 3,
          "line_start": 152,
          "line_end": 154,
          "content": "boolean   b = s.execute(stmtArray[i].command);<br/><br/>                    System.out.println(\" ***** st.execute gave me \" + b);"
        },
        {
          "total_lines": 3,
          "line_start": 187,
          "line_end": 189,
          "content": "s.execute(\"insert into a(b) values(2)\", new int[]{ 1 });<br/><br/>            r = s.getGeneratedKeys();"
        },
        {
          "total_lines": 3,
          "line_start": 229,
          "line_end": 231,
          "content": "s.execute(\"insert into a(b) values(2)\", new int[]{ 1 });<br/><br/>            r = s.getGeneratedKeys();"
        },
        {
          "total_lines": 3,
          "line_start": 99,
          "line_end": 101,
          "content": "Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");<br/><br/>            con = java.sql.DriverManager.getConnection(url, \"sa\", \"\");"
        },
        {
          "total_lines": 2,
          "line_start": 213,
          "line_end": 214,
          "content": "\"insert into a(b) values(1)\",<br/>                      Statement.RETURN_GENERATED_KEYS"
        },
        {
          "total_lines": 2,
          "line_start": 174,
          "line_end": 175,
          "content": "\"insert into a(b) values(1)\",<br/>                      Statement.RETURN_GENERATED_KEYS"
        },
        {
          "total_lines": 2,
          "line_start": 185,
          "line_end": 186,
          "content": "r.close();<br/>            assertTrue(valid);"
        },
        {
          "total_lines": 2,
          "line_start": 227,
          "line_end": 228,
          "content": "r.close();<br/>            assertTrue(valid);"
        },
        {
          "total_lines": 1,
          "line_start": 78,
          "line_end": 78,
          "content": "true, true"
        },
        {
          "total_lines": 1,
          "line_start": 86,
          "line_end": 86,
          "content": "{}, {}, {}, {}, {}"
        },
        {
          "total_lines": 1,
          "line_start": 83,
          "line_end": 83,
          "content": "true, true"
        },
        {
          "total_lines": 1,
          "line_start": 86,
          "line_end": 86,
          "content": "{}, {}, {}, {}, {}"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/IntKeyIntValueHashMap.java",
      "loc_duplicate": 132,
      "clones": [
          {
          "total_lines": 23,
          "line_start": 139,
          "line_end": 161,
          "content": "public boolean contains(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public Object get(Object key) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean addAll(Collection c) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean remove(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean isEmpty() {<br/>            return size() == 0;<br/>        }"
        },
        {
          "total_lines": 19,
          "line_start": 178,
          "line_end": 196,
          "content": "public boolean contains(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean addAll(Collection c) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean remove(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean isEmpty() {<br/>            return size() == 0;<br/>        }"
        },
        {
          "total_lines": 15,
          "line_start": 147,
          "line_end": 161,
          "content": "public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean addAll(Collection c) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean remove(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean isEmpty() {<br/>            return size() == 0;<br/>        }"
        },
        {
          "total_lines": 11,
          "line_start": 139,
          "line_end": 149,
          "content": "public boolean contains(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public Object get(Object key) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }"
        },
        {
          "total_lines": 9,
          "line_start": 82,
          "line_end": 90,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            value[0] = intValueTable[lookup];<br/><br/>            return true;<br/>        }<br/><br/>        return false;"
        },
        {
          "total_lines": 7,
          "line_start": 71,
          "line_end": 77,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            return intValueTable[lookup];<br/>        }<br/><br/>        return defaultValue;"
        },
        {
          "total_lines": 7,
          "line_start": 84,
          "line_end": 90,
          "content": "if (lookup != -1) {<br/>            value[0] = intValueTable[lookup];<br/><br/>            return true;<br/>        }<br/><br/>        return false;"
        },
        {
          "total_lines": 7,
          "line_start": 60,
          "line_end": 66,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            return intValueTable[lookup];<br/>        }<br/><br/>        throw new NoSuchElementException();"
        },
        {
          "total_lines": 5,
          "line_start": 104,
          "line_end": 108,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(key, 0, null, null, true);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 5,
          "line_start": 122,
          "line_end": 126,
          "content": "if (values == null) {<br/>            values = new Values();<br/>        }<br/><br/>        return values;"
        },
        {
          "total_lines": 5,
          "line_start": 95,
          "line_end": 99,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(key, value, null, null, false);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 5,
          "line_start": 113,
          "line_end": 117,
          "content": "if (keySet == null) {<br/>            keySet = new KeySet();<br/>        }<br/><br/>        return keySet;"
        },
        {
          "total_lines": 5,
          "line_start": 73,
          "line_end": 77,
          "content": "if (lookup != -1) {<br/>            return intValueTable[lookup];<br/>        }<br/><br/>        return defaultValue;"
        },
        {
          "total_lines": 3,
          "line_start": 106,
          "line_end": 108,
          "content": "super.addOrRemove(key, 0, null, null, true);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import java.util.NoSuchElementException;<br/><br/>import org.hsqldb.map.BaseHashMap;"
        },
        {
          "total_lines": 3,
          "line_start": 97,
          "line_end": 99,
          "content": "super.addOrRemove(key, value, null, null, false);<br/><br/>        return oldSize != size();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/cmdline/sqltool/SqlFileScanner.java",
      "loc_duplicate": 90,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 268,
          "line_end": 276,
          "content": "int i = 0;       /* index in packed string  */<br/>    int j = offset;  /* index in unpacked array */<br/>    int l = packed.length();<br/>    while (i < l) {<br/>      int count = packed.charAt(i++);<br/>      int value = packed.charAt(i++);<br/>      do result[j++] = value; while (--count > 0);<br/>    }<br/>    return j;"
        },
        {
          "total_lines": 9,
          "line_start": 119,
          "line_end": 127,
          "content": "int i = 0;       /* index in packed string  */<br/>    int j = offset;  /* index in unpacked array */<br/>    int l = packed.length();<br/>    while (i < l) {<br/>      int count = packed.charAt(i++);<br/>      int value = packed.charAt(i++);<br/>      do result[j++] = value; while (--count > 0);<br/>    }<br/>    return j;"
        },
        {
          "total_lines": 8,
          "line_start": 120,
          "line_end": 127,
          "content": "int j = offset;  /* index in unpacked array */<br/>    int l = packed.length();<br/>    while (i < l) {<br/>      int count = packed.charAt(i++);<br/>      int value = packed.charAt(i++);<br/>      do result[j++] = value; while (--count > 0);<br/>    }<br/>    return j;"
        },
        {
          "total_lines": 8,
          "line_start": 268,
          "line_end": 275,
          "content": "int i = 0;       /* index in packed string  */<br/>    int j = offset;  /* index in unpacked array */<br/>    int l = packed.length();<br/>    while (i < l) {<br/>      int count = packed.charAt(i++);<br/>      int value = packed.charAt(i++);<br/>      do result[j++] = value; while (--count > 0);<br/>    }"
        },
        {
          "total_lines": 8,
          "line_start": 269,
          "line_end": 276,
          "content": "int j = offset;  /* index in unpacked array */<br/>    int l = packed.length();<br/>    while (i < l) {<br/>      int count = packed.charAt(i++);<br/>      int value = packed.charAt(i++);<br/>      do result[j++] = value; while (--count > 0);<br/>    }<br/>    return j;"
        },
        {
          "total_lines": 8,
          "line_start": 119,
          "line_end": 126,
          "content": "int i = 0;       /* index in packed string  */<br/>    int j = offset;  /* index in unpacked array */<br/>    int l = packed.length();<br/>    while (i < l) {<br/>      int count = packed.charAt(i++);<br/>      int value = packed.charAt(i++);<br/>      do result[j++] = value; while (--count > 0);<br/>    }"
        },
        {
          "total_lines": 3,
          "line_start": 268,
          "line_end": 270,
          "content": "int i = 0;       /* index in packed string  */<br/>    int j = offset;  /* index in unpacked array */<br/>    int l = packed.length();"
        },
        {
          "total_lines": 3,
          "line_start": 119,
          "line_end": 121,
          "content": "int i = 0;       /* index in packed string  */<br/>    int j = offset;  /* index in unpacked array */<br/>    int l = packed.length();"
        },
        {
          "total_lines": 2,
          "line_start": 995,
          "line_end": 996,
          "content": "specialAppendState = false;<br/>        commandBuffer.append(yytext());"
        },
        {
          "total_lines": 2,
          "line_start": 1080,
          "line_end": 1081,
          "content": "yybegin(YYINITIAL);<br/>    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);"
        },
        {
          "total_lines": 2,
          "line_start": 1075,
          "line_end": 1076,
          "content": "yybegin(YYINITIAL);<br/>    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);"
        },
        {
          "total_lines": 2,
          "line_start": 1060,
          "line_end": 1061,
          "content": "yybegin(YYINITIAL);<br/>    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);"
        },
        {
          "total_lines": 2,
          "line_start": 1090,
          "line_end": 1091,
          "content": "yybegin(YYINITIAL);<br/>    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);"
        },
        {
          "total_lines": 2,
          "line_start": 1055,
          "line_end": 1056,
          "content": "yybegin(YYINITIAL);<br/>    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);"
        },
        {
          "total_lines": 2,
          "line_start": 1070,
          "line_end": 1071,
          "content": "yybegin(YYINITIAL);<br/>    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);"
        },
        {
          "total_lines": 2,
          "line_start": 1065,
          "line_end": 1066,
          "content": "yybegin(YYINITIAL);<br/>    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);"
        },
        {
          "total_lines": 2,
          "line_start": 710,
          "line_end": 711,
          "content": "yyline++;<br/>          yycolumn = 0;"
        },
        {
          "total_lines": 2,
          "line_start": 893,
          "line_end": 894,
          "content": "specialAppendState = false;<br/>        commandBuffer.append(yytext());"
        },
        {
          "total_lines": 2,
          "line_start": 154,
          "line_end": 155,
          "content": "int [] result = new int[114];<br/>    int offset = 0;"
        },
        {
          "total_lines": 2,
          "line_start": 715,
          "line_end": 716,
          "content": "yyline++;<br/>          yycolumn = 0;"
        },
        {
          "total_lines": 2,
          "line_start": 112,
          "line_end": 113,
          "content": "int [] result = new int[114];<br/>    int offset = 0;"
        },
        {
          "total_lines": 2,
          "line_start": 1012,
          "line_end": 1013,
          "content": "specialAppendState = false;<br/>        commandBuffer.append(yytext());"
        },
        {
          "total_lines": 2,
          "line_start": 1085,
          "line_end": 1086,
          "content": "yybegin(YYINITIAL);<br/>    return new Token(Token.UNTERM_TYPE, commandBuffer, yyline);"
        },
        {
          "total_lines": 2,
          "line_start": 1044,
          "line_end": 1045,
          "content": "specialAppendState = false;<br/>        commandBuffer.append(yytext());"
        },
        {
          "total_lines": 1,
          "line_start": 946,
          "line_end": 946,
          "content": "commandBuffer, yyline"
        },
        {
          "total_lines": 1,
          "line_start": 888,
          "line_end": 888,
          "content": "commandBuffer, yyline"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/navigator/RowSetNavigatorDataChangeMemory.java",
      "loc_duplicate": 9,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 38,
          "line_end": 40,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.lib.ArrayUtil;"
        },
        {
          "total_lines": 2,
          "line_start": 153,
          "line_end": 154,
          "content": "Session session, Row row, Object[] data,<br/>                           Type[] types, int[] columnMap"
        },
        {
          "total_lines": 2,
          "line_start": 119,
          "line_end": 120,
          "content": "RowOutputInterface out,<br/>                      ResultMetaData meta"
        },
        {
          "total_lines": 2,
          "line_start": 122,
          "line_end": 123,
          "content": "RowInputInterface in,<br/>                     ResultMetaData meta"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/scriptio/ScriptWriterEncode.java",
      "loc_duplicate": 61,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 105,
          "line_end": 111,
          "content": "FileAccess   fa  = isDump ? FileUtil.getFileUtil()<br/>                                      : database.logger.getFileAccess();<br/>            OutputStream fos = fa.openOutputStreamElement(outFile);<br/><br/>            outDescriptor = fa.getFileSync(fos);<br/>            fileStreamOut = fos;<br/>            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);"
        },
        {
          "total_lines": 6,
          "line_start": 105,
          "line_end": 110,
          "content": "FileAccess   fa  = isDump ? FileUtil.getFileUtil()<br/>                                      : database.logger.getFileAccess();<br/>            OutputStream fos = fa.openOutputStreamElement(outFile);<br/><br/>            outDescriptor = fa.getFileSync(fos);<br/>            fileStreamOut = fos;"
        },
        {
          "total_lines": 5,
          "line_start": 107,
          "line_end": 111,
          "content": "OutputStream fos = fa.openOutputStreamElement(outFile);<br/><br/>            outDescriptor = fa.getFileSync(fos);<br/>            fileStreamOut = fos;<br/>            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);"
        },
        {
          "total_lines": 5,
          "line_start": 105,
          "line_end": 109,
          "content": "FileAccess   fa  = isDump ? FileUtil.getFileUtil()<br/>                                      : database.logger.getFileAccess();<br/>            OutputStream fos = fa.openOutputStreamElement(outFile);<br/><br/>            outDescriptor = fa.getFileSync(fos);"
        },
        {
          "total_lines": 4,
          "line_start": 86,
          "line_end": 89,
          "content": "e, ErrorCode.FILE_IO_ERROR,<br/>                              ErrorCode.M_Message_Pair, new Object[] {<br/>                e.toString(), outFile<br/>            }"
        },
        {
          "total_lines": 4,
          "line_start": 107,
          "line_end": 110,
          "content": "OutputStream fos = fa.openOutputStreamElement(outFile);<br/><br/>            outDescriptor = fa.getFileSync(fos);<br/>            fileStreamOut = fos;"
        },
        {
          "total_lines": 4,
          "line_start": 69,
          "line_end": 72,
          "content": "e, ErrorCode.FILE_IO_ERROR,<br/>                              ErrorCode.M_Message_Pair, new Object[] {<br/>                e.toString(), outFile<br/>            }"
        },
        {
          "total_lines": 4,
          "line_start": 113,
          "line_end": 116,
          "content": "e, ErrorCode.FILE_IO_ERROR,<br/>                              ErrorCode.M_Message_Pair, new Object[] {<br/>                e.toString(), outFile<br/>            }"
        },
        {
          "total_lines": 3,
          "line_start": 65,
          "line_end": 67,
          "content": "cryptOut = crypto.getOutputStream(fileStreamOut);<br/>            fileStreamOut = new GZIPOutputStream(cryptOut);<br/>            isCrypt       = true;"
        },
        {
          "total_lines": 3,
          "line_start": 82,
          "line_end": 84,
          "content": "cryptOut = crypto.getOutputStream(fileStreamOut);<br/>            fileStreamOut = new GZIPOutputStream(cryptOut);<br/>            isCrypt       = true;"
        },
        {
          "total_lines": 3,
          "line_start": 105,
          "line_end": 107,
          "content": "FileAccess   fa  = isDump ? FileUtil.getFileUtil()<br/>                                      : database.logger.getFileAccess();<br/>            OutputStream fos = fa.openOutputStreamElement(outFile);"
        },
        {
          "total_lines": 3,
          "line_start": 107,
          "line_end": 109,
          "content": "OutputStream fos = fa.openOutputStreamElement(outFile);<br/><br/>            outDescriptor = fa.getFileSync(fos);"
        },
        {
          "total_lines": 2,
          "line_start": 83,
          "line_end": 84,
          "content": "fileStreamOut = new GZIPOutputStream(cryptOut);<br/>            isCrypt       = true;"
        },
        {
          "total_lines": 2,
          "line_start": 110,
          "line_end": 111,
          "content": "fileStreamOut = fos;<br/>            fileStreamOut = new BufferedOutputStream(fos, 1 << 14);"
        },
        {
          "total_lines": 2,
          "line_start": 65,
          "line_end": 66,
          "content": "cryptOut = crypto.getOutputStream(fileStreamOut);<br/>            fileStreamOut = new GZIPOutputStream(cryptOut);"
        },
        {
          "total_lines": 2,
          "line_start": 82,
          "line_end": 83,
          "content": "cryptOut = crypto.getOutputStream(fileStreamOut);<br/>            fileStreamOut = new GZIPOutputStream(cryptOut);"
        },
        {
          "total_lines": 2,
          "line_start": 66,
          "line_end": 67,
          "content": "fileStreamOut = new GZIPOutputStream(cryptOut);<br/>            isCrypt       = true;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/RowStoreAVLDisk.java",
      "loc_duplicate": 73,
      "clones": [
          {
          "total_lines": 12,
          "line_start": 325,
          "line_end": 336,
          "content": "NodeAVL node = (NodeAVL) accessorList[key.getPosition()];<br/><br/>        if (node == null) {<br/>            return null;<br/>        }<br/><br/>        RowAVL row = (RowAVL) get(node.getRow(this), false);<br/><br/>        node                            = row.getNode(key.getPosition());<br/>        accessorList[key.getPosition()] = node;<br/><br/>        return node;"
        },
        {
          "total_lines": 8,
          "line_start": 327,
          "line_end": 334,
          "content": "if (node == null) {<br/>            return null;<br/>        }<br/><br/>        RowAVL row = (RowAVL) get(node.getRow(this), false);<br/><br/>        node                            = row.getNode(key.getPosition());<br/>        accessorList[key.getPosition()] = node;"
        },
        {
          "total_lines": 5,
          "line_start": 244,
          "line_end": 248,
          "content": "// INSERT + DELETE<br/>                if (txModel == TransactionManager.LOCKS) {<br/>                    remove(row);<br/>                }<br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 355,
          "line_end": 358,
          "content": "indexList    = keys;<br/>            accessorList = new CachedObject[indexList.length];<br/><br/>            return;"
        },
        {
          "total_lines": 4,
          "line_start": 232,
          "line_end": 235,
          "content": "if (txModel == TransactionManager.LOCKS) {<br/>                    remove(row);<br/>                }<br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 191,
          "line_end": 194,
          "content": "row = (Row) get(row, true);<br/><br/>            super.indexRow(session, row);<br/>            row.keepInMemory(false);"
        },
        {
          "total_lines": 4,
          "line_start": 333,
          "line_end": 336,
          "content": "node                            = row.getNode(key.getPosition());<br/>        accessorList[key.getPosition()] = node;<br/><br/>        return node;"
        },
        {
          "total_lines": 3,
          "line_start": 118,
          "line_end": 120,
          "content": "CachedObject object = cache.get(key, this, keep);<br/><br/>        return object;"
        },
        {
          "total_lines": 3,
          "line_start": 111,
          "line_end": 113,
          "content": "CachedObject object = cache.get(key, this, false);<br/><br/>        return object;"
        },
        {
          "total_lines": 3,
          "line_start": 145,
          "line_end": 147,
          "content": "session, table,<br/>                                             RowAction.ACTION_INSERT, row,<br/>                                             null"
        },
        {
          "total_lines": 3,
          "line_start": 356,
          "line_end": 358,
          "content": "accessorList = new CachedObject[indexList.length];<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 125,
          "line_end": 127,
          "content": "object = cache.get(object, this, keep);<br/><br/>        return object;"
        },
        {
          "total_lines": 3,
          "line_start": 191,
          "line_end": 193,
          "content": "row = (Row) get(row, true);<br/><br/>            super.indexRow(session, row);"
        },
        {
          "total_lines": 2,
          "line_start": 221,
          "line_end": 222,
          "content": "Session session, Row row, int changeAction,<br/>                          int txModel"
        },
        {
          "total_lines": 2,
          "line_start": 45,
          "line_end": 46,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 280,
          "line_end": 281,
          "content": "remove(row);<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 260,
          "line_end": 261,
          "content": "Session session, Row row, int changeAction,<br/>                            int txModel"
        },
        {
          "total_lines": 2,
          "line_start": 293,
          "line_end": 294,
          "content": "remove(row);<br/>                break;"
        },
        {
          "total_lines": 1,
          "line_start": 84,
          "line_end": 84,
          "content": "PersistentStoreCollection manager, Table table"
        },
        {
          "total_lines": 1,
          "line_start": 260,
          "line_end": 260,
          "content": "Session session, Row row, int changeAction"
        },
        {
          "total_lines": 1,
          "line_start": 130,
          "line_end": 130,
          "content": "CachedObject object, boolean tx"
        },
        {
          "total_lines": 1,
          "line_start": 221,
          "line_end": 221,
          "content": "Session session, Row row, int changeAction"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ExpressionArrayAggregate.java",
      "loc_duplicate": 22,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 163,
          "line_end": 165,
          "content": "Session session,<br/>            RangeGroup rangeGroup, int rangeCount, RangeGroup[] rangeGroups,<br/>            HsqlList unresolvedSet, boolean acceptsSequences"
        },
        {
          "total_lines": 3,
          "line_start": 155,
          "line_end": 157,
          "content": "sb.append(\" arg=[\");<br/>            sb.append(nodes[LEFT].describe(session, blanks + 1));<br/>            sb.append(']');"
        },
        {
          "total_lines": 2,
          "line_start": 167,
          "line_end": 168,
          "content": "session,<br/>            rangeGroup, rangeCount, rangeGroups, null, false"
        },
        {
          "total_lines": 2,
          "line_start": 122,
          "line_end": 123,
          "content": "ErrorCode.U_S0500,<br/>                                         \"ExpressionAggregate\""
        },
        {
          "total_lines": 2,
          "line_start": 113,
          "line_end": 114,
          "content": "sb.append(left).append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 227,
          "line_end": 228,
          "content": "rowDataType,<br/>                                  ArrayType.defaultArrayCardinality"
        },
        {
          "total_lines": 2,
          "line_start": 156,
          "line_end": 157,
          "content": "sb.append(nodes[LEFT].describe(session, blanks + 1));<br/>            sb.append(']');"
        },
        {
          "total_lines": 2,
          "line_start": 108,
          "line_end": 109,
          "content": "sb.append(left).append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 118,
          "line_end": 119,
          "content": "sb.append(left).append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 219,
          "line_end": 220,
          "content": "rowDataType,<br/>                                  ArrayType.defaultArrayCardinality"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/LongKeyLongValueHashMap.java",
      "loc_duplicate": 127,
      "clones": [
          {
          "total_lines": 23,
          "line_start": 146,
          "line_end": 168,
          "content": "public boolean contains(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public Object get(Object key) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean addAll(Collection c) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean remove(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean isEmpty() {<br/>            return size() == 0;<br/>        }"
        },
        {
          "total_lines": 19,
          "line_start": 185,
          "line_end": 203,
          "content": "public boolean contains(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean addAll(Collection c) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean remove(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean isEmpty() {<br/>            return size() == 0;<br/>        }"
        },
        {
          "total_lines": 15,
          "line_start": 154,
          "line_end": 168,
          "content": "public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean addAll(Collection c) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean remove(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean isEmpty() {<br/>            return size() == 0;<br/>        }"
        },
        {
          "total_lines": 11,
          "line_start": 146,
          "line_end": 156,
          "content": "public boolean contains(Object o) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public Object get(Object key) {<br/>            throw new RuntimeException();<br/>        }<br/><br/>        public boolean add(Object value) {<br/>            throw new RuntimeException();<br/>        }"
        },
        {
          "total_lines": 9,
          "line_start": 89,
          "line_end": 97,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            value[0] = longValueTable[lookup];<br/><br/>            return true;<br/>        }<br/><br/>        return false;"
        },
        {
          "total_lines": 7,
          "line_start": 78,
          "line_end": 84,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            return longValueTable[lookup];<br/>        }<br/><br/>        return defaultValue;"
        },
        {
          "total_lines": 7,
          "line_start": 91,
          "line_end": 97,
          "content": "if (lookup != -1) {<br/>            value[0] = longValueTable[lookup];<br/><br/>            return true;<br/>        }<br/><br/>        return false;"
        },
        {
          "total_lines": 7,
          "line_start": 67,
          "line_end": 73,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            return longValueTable[lookup];<br/>        }<br/><br/>        throw new NoSuchElementException();"
        },
        {
          "total_lines": 5,
          "line_start": 120,
          "line_end": 124,
          "content": "if (keySet == null) {<br/>            keySet = new KeySet();<br/>        }<br/><br/>        return keySet;"
        },
        {
          "total_lines": 5,
          "line_start": 129,
          "line_end": 133,
          "content": "if (values == null) {<br/>            values = new Values();<br/>        }<br/><br/>        return values;"
        },
        {
          "total_lines": 5,
          "line_start": 111,
          "line_end": 115,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(key, 0, null, null, true);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 5,
          "line_start": 102,
          "line_end": 106,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(key, value, null, null, false);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 3,
          "line_start": 104,
          "line_end": 106,
          "content": "super.addOrRemove(key, value, null, null, false);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import java.util.NoSuchElementException;<br/><br/>import org.hsqldb.map.BaseHashMap;"
        },
        {
          "total_lines": 3,
          "line_start": 113,
          "line_end": 115,
          "content": "super.addOrRemove(key, 0, null, null, true);<br/><br/>        return oldSize != size();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/DatabaseManager.java",
      "loc_duplicate": 11,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 347,
          "line_end": 348,
          "content": "databaseMap = fileDatabaseMap;<br/>            key         = filePathToKey(path);"
        },
        {
          "total_lines": 2,
          "line_start": 142,
          "line_end": 143,
          "content": "password, zoneString,<br/>                                     timeZoneSeconds"
        },
        {
          "total_lines": 2,
          "line_start": 234,
          "line_end": 235,
          "content": "String type, String path,<br/>                                       HsqlProperties props"
        },
        {
          "total_lines": 2,
          "line_start": 370,
          "line_end": 371,
          "content": "databaseMap = fileDatabaseMap;<br/>            key         = filePathToKey(path);"
        },
        {
          "total_lines": 2,
          "line_start": 401,
          "line_end": 402,
          "content": "databaseMap = fileDatabaseMap;<br/>            key         = filePathToKey(path);"
        },
        {
          "total_lines": 1,
          "line_start": 163,
          "line_end": 163,
          "content": "password, zoneString, timeZoneSeconds"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/DataSpaceManagerSimple.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 100,
          "line_end": 101,
          "content": "long offset,<br/>                               long limit"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementManager.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 385,
          "line_end": 386,
          "content": "cmd.getGeneratedResultType(),<br/>                                  cmd.getGeneratedResultMetaData()"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestSql.java",
      "loc_duplicate": 154,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 839,
          "line_end": 847,
          "content": "r = sStatement.executeQuery(s);<br/><br/>            r.next();<br/><br/>            b1n = r.getBytes(1);<br/><br/>            r.next();<br/><br/>            b1n = r.getBytes(1);"
        },
        {
          "total_lines": 9,
          "line_start": 852,
          "line_end": 860,
          "content": "r = sStatement.executeQuery(s);<br/><br/>            r.next();<br/><br/>            b1n = r.getBytes(1);<br/><br/>            r.next();<br/><br/>            b1n = r.getBytes(1);"
        },
        {
          "total_lines": 7,
          "line_start": 839,
          "line_end": 845,
          "content": "r = sStatement.executeQuery(s);<br/><br/>            r.next();<br/><br/>            b1n = r.getBytes(1);<br/><br/>            r.next();"
        },
        {
          "total_lines": 7,
          "line_start": 841,
          "line_end": 847,
          "content": "r.next();<br/><br/>            b1n = r.getBytes(1);<br/><br/>            r.next();<br/><br/>            b1n = r.getBytes(1);"
        },
        {
          "total_lines": 7,
          "line_start": 854,
          "line_end": 860,
          "content": "r.next();<br/><br/>            b1n = r.getBytes(1);<br/><br/>            r.next();<br/><br/>            b1n = r.getBytes(1);"
        },
        {
          "total_lines": 7,
          "line_start": 852,
          "line_end": 858,
          "content": "r = sStatement.executeQuery(s);<br/><br/>            r.next();<br/><br/>            b1n = r.getBytes(1);<br/><br/>            r.next();"
        },
        {
          "total_lines": 7,
          "line_start": 432,
          "line_end": 438,
          "content": "value        = rs.getDouble(2);<br/>                wasEqual     = Double.isNaN(value);<br/>                integerValue = rs.getInt(4);<br/><br/>                // tests for conversion<br/>                // getInt on DECIMAL<br/>                integerValue = rs.getInt(1);"
        },
        {
          "total_lines": 6,
          "line_start": 65,
          "line_end": 70,
          "content": "super.setUp();<br/><br/>        try {<br/>            connection = super.newConnection();<br/>            stmnt      = connection.createStatement();<br/>        } catch (Exception e) {}"
        },
        {
          "total_lines": 5,
          "line_start": 576,
          "line_end": 580,
          "content": "rs = pstmt.executeQuery();<br/><br/>            rs.next();<br/><br/>            count = rs.getInt(1);"
        },
        {
          "total_lines": 5,
          "line_start": 854,
          "line_end": 858,
          "content": "r.next();<br/><br/>            b1n = r.getBytes(1);<br/><br/>            r.next();"
        },
        {
          "total_lines": 5,
          "line_start": 839,
          "line_end": 843,
          "content": "r = sStatement.executeQuery(s);<br/><br/>            r.next();<br/><br/>            b1n = r.getBytes(1);"
        },
        {
          "total_lines": 5,
          "line_start": 841,
          "line_end": 845,
          "content": "r.next();<br/><br/>            b1n = r.getBytes(1);<br/><br/>            r.next();"
        },
        {
          "total_lines": 5,
          "line_start": 843,
          "line_end": 847,
          "content": "b1n = r.getBytes(1);<br/><br/>            r.next();<br/><br/>            b1n = r.getBytes(1);"
        },
        {
          "total_lines": 5,
          "line_start": 856,
          "line_end": 860,
          "content": "b1n = r.getBytes(1);<br/><br/>            r.next();<br/><br/>            b1n = r.getBytes(1);"
        },
        {
          "total_lines": 5,
          "line_start": 585,
          "line_end": 589,
          "content": "rs = pstmt.executeQuery();<br/><br/>            rs.next();<br/><br/>            count = rs.getInt(1);"
        },
        {
          "total_lines": 5,
          "line_start": 161,
          "line_end": 165,
          "content": "for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                        result0 += rs.getString(i + 1) + \":\";<br/>                    }<br/><br/>                    result0 += \"\\n\";"
        },
        {
          "total_lines": 5,
          "line_start": 181,
          "line_end": 185,
          "content": "for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                        result0 += rs.getString(i + 1) + \":\";<br/>                    }<br/><br/>                    result0 += \"\\n\";"
        },
        {
          "total_lines": 5,
          "line_start": 852,
          "line_end": 856,
          "content": "r = sStatement.executeQuery(s);<br/><br/>            r.next();<br/><br/>            b1n = r.getBytes(1);"
        },
        {
          "total_lines": 4,
          "line_start": 398,
          "line_end": 401,
          "content": "ps.execute();<br/><br/>            //<br/>            ps.setInt(1, 0);"
        },
        {
          "total_lines": 3,
          "line_start": 454,
          "line_end": 456,
          "content": "int max = rs.getInt(1);<br/><br/>                System.out.println(\"Max value for i: \" + max);"
        },
        {
          "total_lines": 3,
          "line_start": 461,
          "line_end": 463,
          "content": "// cause errors<br/>                ps.setString(5, \"three\");<br/>                fail(\"update did not fail\");"
        },
        {
          "total_lines": 3,
          "line_start": 476,
          "line_end": 478,
          "content": "int max = rs.getInt(1);<br/><br/>                    System.out.println(\"Max value for ID: \" + max);"
        },
        {
          "total_lines": 2,
          "line_start": 385,
          "line_end": 386,
          "content": "ps.execute();<br/>            ps.setInt(1, 0);"
        },
        {
          "total_lines": 2,
          "line_start": 709,
          "line_end": 710,
          "content": "assertTrue(rs.next());<br/>        assertEquals(\"t1\", rs.getObject(\"atable\"));"
        },
        {
          "total_lines": 2,
          "line_start": 715,
          "line_end": 716,
          "content": "assertTrue(rs.next());<br/>        assertEquals(\"t1\", rs.getObject(\"atable\"));"
        },
        {
          "total_lines": 2,
          "line_start": 442,
          "line_end": 443,
          "content": "value    = rs.getDouble(2);<br/>                wasEqual = wasEqual && value == Double.POSITIVE_INFINITY;"
        },
        {
          "total_lines": 2,
          "line_start": 875,
          "line_end": 876,
          "content": "p.executeUpdate();<br/>            p.clearParameters();"
        },
        {
          "total_lines": 2,
          "line_start": 720,
          "line_end": 721,
          "content": "assertEquals(null, rs.getObject(\"value3\"));<br/>        assertTrue(rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 447,
          "line_end": 448,
          "content": "value    = rs.getDouble(2);<br/>                wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY;"
        },
        {
          "total_lines": 2,
          "line_start": 811,
          "line_end": 812,
          "content": "p.executeUpdate();<br/>            p.clearParameters();"
        },
        {
          "total_lines": 2,
          "line_start": 714,
          "line_end": 715,
          "content": "assertEquals(null, rs.getObject(\"value3\"));<br/>        assertTrue(rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 414,
          "line_end": 415,
          "content": "9, new java.sql.Timestamp(System.currentTimeMillis()<br/>                                                   + 2)"
        },
        {
          "total_lines": 2,
          "line_start": 918,
          "line_end": 919,
          "content": "e.printStackTrace();<br/>            System.out.println(\"TestSql.tearDown() error: \" + e.getMessage());"
        },
        {
          "total_lines": 1,
          "line_start": 396,
          "line_end": 396,
          "content": "8, new java.sql.Time(System.currentTimeMillis() + 1)"
        },
        {
          "total_lines": 1,
          "line_start": 211,
          "line_end": 211,
          "content": "null, null"
        },
        {
          "total_lines": 1,
          "line_start": 384,
          "line_end": 384,
          "content": "9, new java.sql.Timestamp(System.currentTimeMillis())"
        },
        {
          "total_lines": 1,
          "line_start": 397,
          "line_end": 397,
          "content": "9, new java.sql.Date(System.currentTimeMillis() + 1)"
        },
        {
          "total_lines": 1,
          "line_start": 382,
          "line_end": 382,
          "content": "8, new java.sql.Time(System.currentTimeMillis())"
        },
        {
          "total_lines": 1,
          "line_start": 412,
          "line_end": 412,
          "content": "7, new java.sql.Date(System.currentTimeMillis() + 2)"
        },
        {
          "total_lines": 1,
          "line_start": 413,
          "line_end": 413,
          "content": "8, new java.sql.Time(System.currentTimeMillis() + 2)"
        },
        {
          "total_lines": 1,
          "line_start": 395,
          "line_end": 395,
          "content": "7, new java.sql.Timestamp(System.currentTimeMillis() + 1)"
        },
        {
          "total_lines": 1,
          "line_start": 381,
          "line_end": 381,
          "content": "7, new java.sql.Date(System.currentTimeMillis())"
        },
        {
          "total_lines": 1,
          "line_start": 213,
          "line_end": 213,
          "content": "null, null"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementDMQL.java",
      "loc_duplicate": 175,
      "clones": [
          {
          "total_lines": 31,
          "line_start": 439,
          "line_end": 469,
          "content": "case StatementTypes.CALL : {<br/>                break;<br/>            }<br/>            case StatementTypes.INSERT : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.SELECT_CURSOR :<br/>                break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.UPDATE_WHERE : {<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.MERGE : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }"
        },
        {
          "total_lines": 28,
          "line_start": 442,
          "line_end": 469,
          "content": "case StatementTypes.INSERT : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.SELECT_CURSOR :<br/>                break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.UPDATE_WHERE : {<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.MERGE : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }"
        },
        {
          "total_lines": 24,
          "line_start": 439,
          "line_end": 462,
          "content": "{<br/>                break;<br/>            }<br/>            case StatementTypes.INSERT : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.SELECT_CURSOR :<br/>                break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.UPDATE_WHERE : {<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.MERGE :"
        },
        {
          "total_lines": 22,
          "line_start": 448,
          "line_end": 469,
          "content": "case StatementTypes.SELECT_CURSOR :<br/>                break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.UPDATE_WHERE : {<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.MERGE : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }"
        },
        {
          "total_lines": 21,
          "line_start": 449,
          "line_end": 469,
          "content": "break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.UPDATE_WHERE : {<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.MERGE : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }"
        },
        {
          "total_lines": 18,
          "line_start": 439,
          "line_end": 456,
          "content": "case StatementTypes.CALL : {<br/>                break;<br/>            }<br/>            case StatementTypes.INSERT : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.SELECT_CURSOR :<br/>                break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.UPDATE_WHERE :"
        },
        {
          "total_lines": 17,
          "line_start": 439,
          "line_end": 455,
          "content": "case StatementTypes.CALL : {<br/>                break;<br/>            }<br/>            case StatementTypes.INSERT : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.SELECT_CURSOR :<br/>                break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }"
        },
        {
          "total_lines": 14,
          "line_start": 456,
          "line_end": 469,
          "content": "case StatementTypes.UPDATE_WHERE : {<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.MERGE : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/ConnectionDialog.java",
      "loc_duplicate": 39,
      "clones": [
          {
          "total_lines": 8,
          "line_start": 343,
          "line_end": 350,
          "content": "String s = (String) e.getItem();<br/><br/>        for (int i = 0; i < connTypes.length; i++) {<br/>            if (s.equals(connTypes[i][0])) {<br/>                mDriver.setText(connTypes[i][1]);<br/>                mURL.setText(connTypes[i][2]);<br/>            }<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 160,
          "line_end": 164,
          "content": "mName.setText(setting.getName());<br/>                    mDriver.setText(setting.getDriver());<br/>                    mURL.setText(setting.getUrl());<br/>                    mUser.setText(setting.getUser());<br/>                    mPassword.setText(setting.getPassword());"
        },
        {
          "total_lines": 5,
          "line_start": 279,
          "line_end": 283,
          "content": "Label l = new Label(s);<br/><br/>        l.setBackground(SystemColor.control);<br/><br/>        return l;"
        },
        {
          "total_lines": 4,
          "line_start": 160,
          "line_end": 163,
          "content": "mName.setText(setting.getName());<br/>                    mDriver.setText(setting.getDriver());<br/>                    mURL.setText(setting.getUrl());<br/>                    mUser.setText(setting.getUser());"
        },
        {
          "total_lines": 3,
          "line_start": 279,
          "line_end": 281,
          "content": "Label l = new Label(s);<br/><br/>        l.setBackground(SystemColor.control);"
        },
        {
          "total_lines": 3,
          "line_start": 83,
          "line_end": 85,
          "content": "Class.forName(driver).newInstance();<br/><br/>        return DriverManager.getConnection(url, user, password);"
        },
        {
          "total_lines": 3,
          "line_start": 281,
          "line_end": 283,
          "content": "l.setBackground(SystemColor.control);<br/><br/>        return l;"
        },
        {
          "total_lines": 2,
          "line_start": 258,
          "line_end": 259,
          "content": "(d.width - size.width) / 2,<br/>                        (d.height - size.height) / 2"
        },
        {
          "total_lines": 2,
          "line_start": 80,
          "line_end": 81,
          "content": "String driver, String url,<br/>            String user, String password"
        },
        {
          "total_lines": 2,
          "line_start": 239,
          "line_end": 240,
          "content": "b.addActionListener(this);<br/>        pButton.add(b);"
        },
        {
          "total_lines": 2,
          "line_start": 233,
          "line_end": 234,
          "content": "b.addActionListener(this);<br/>        pButton.add(b);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestHSQLDB.java",
      "loc_duplicate": 6,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 82,
          "line_end": 84,
          "content": "System.err.println(e.getClass().getName() + \": \"<br/>                               + e.getMessage());<br/>            e.printStackTrace(System.err);"
        },
        {
          "total_lines": 3,
          "line_start": 86,
          "line_end": 88,
          "content": "System.err.println(e.getClass().getName() + \": \"<br/>                               + e.getMessage());<br/>            e.printStackTrace(System.err);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/Collation.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 503,
          "line_end": 503,
          "content": "Session session, SchemaObject parentObject"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ExpressionAccessor.java",
      "loc_duplicate": 11,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 66,
          "line_end": 71,
          "content": "if (nodes[i] == null) {<br/>                continue;<br/>            }<br/><br/>            unresolvedSet = nodes[i].resolveColumnReferences(session,<br/>                    rangeGroup, rangeCount, rangeGroups, unresolvedSet, acceptsSequences);"
        },
        {
          "total_lines": 3,
          "line_start": 61,
          "line_end": 63,
          "content": "Session session,<br/>            RangeGroup rangeGroup, int rangeCount,<br/>            RangeGroup[] rangeGroups, HsqlList unresolvedSet, boolean acceptsSequences"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/Grid.java",
      "loc_duplicate": 64,
      "clones": [
          {
          "total_lines": 16,
          "line_start": 308,
          "line_end": 323,
          "content": "switch (e.id) {<br/><br/>            case Event.SCROLL_LINE_UP :<br/>            case Event.SCROLL_LINE_DOWN :<br/>            case Event.SCROLL_PAGE_UP :<br/>            case Event.SCROLL_PAGE_DOWN :<br/>            case Event.SCROLL_ABSOLUTE :<br/>                iX = sbHoriz.getValue();<br/>                iY = iRowHeight * sbVert.getValue();<br/><br/>                repaint();<br/><br/>                return true;<br/>        }<br/><br/>        return super.handleEvent(e);"
        },
        {
          "total_lines": 15,
          "line_start": 189,
          "line_end": 203,
          "content": "// fredt@users 20011210 - patch 450412 by elise@users<br/>        super.setBounds(x, y, w, h);<br/><br/>        iSbHeight = sbHoriz.getPreferredSize().height;<br/>        iSbWidth  = sbVert.getPreferredSize().width;<br/>        iHeight   = h - iSbHeight;<br/>        iWidth    = w - iSbWidth;<br/><br/>        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);<br/>        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);<br/>        adjustScroll();<br/><br/>        iImage = null;<br/><br/>        repaint();"
        },
        {
          "total_lines": 12,
          "line_start": 192,
          "line_end": 203,
          "content": "iSbHeight = sbHoriz.getPreferredSize().height;<br/>        iSbWidth  = sbVert.getPreferredSize().width;<br/>        iHeight   = h - iSbHeight;<br/>        iWidth    = w - iSbWidth;<br/><br/>        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);<br/>        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);<br/>        adjustScroll();<br/><br/>        iImage = null;<br/><br/>        repaint();"
        },
        {
          "total_lines": 11,
          "line_start": 189,
          "line_end": 199,
          "content": "// fredt@users 20011210 - patch 450412 by elise@users<br/>        super.setBounds(x, y, w, h);<br/><br/>        iSbHeight = sbHoriz.getPreferredSize().height;<br/>        iSbWidth  = sbVert.getPreferredSize().width;<br/>        iHeight   = h - iSbHeight;<br/>        iWidth    = w - iSbWidth;<br/><br/>        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);<br/>        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);<br/>        adjustScroll();"
        },
        {
          "total_lines": 8,
          "line_start": 192,
          "line_end": 199,
          "content": "iSbHeight = sbHoriz.getPreferredSize().height;<br/>        iSbWidth  = sbVert.getPreferredSize().width;<br/>        iHeight   = h - iSbHeight;<br/>        iWidth    = w - iSbWidth;<br/><br/>        sbHoriz.setBounds(0, iHeight, iWidth, iSbHeight);<br/>        sbVert.setBounds(iWidth, 0, iSbWidth, iHeight);<br/>        adjustScroll();"
        },
        {
          "total_lines": 2,
          "line_start": 285,
          "line_end": 286,
          "content": "v = iY / iRowHeight,<br/>            h = iHeight / iRowHeight"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/OtherType.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 39,
          "line_end": 40,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 134,
          "line_end": 135,
          "content": "SessionInterface session, Object a,<br/>                                Type otherType"
        },
        {
          "total_lines": 1,
          "line_start": 112,
          "line_end": 112,
          "content": "Session session, Type other, int operation"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/SchemaObject.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 93,
          "line_end": 93,
          "content": "Session session, SchemaObject parentObject"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/IntKeyHashMap.java",
      "loc_duplicate": 40,
      "clones": [
          {
          "total_lines": 8,
          "line_start": 85,
          "line_end": 92,
          "content": "Iterator it = values().iterator();<br/>        int      i  = 0;<br/><br/>        while (it.hasNext()) {<br/>            array[i] = it.next();<br/><br/>            i++;<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 86,
          "line_end": 92,
          "content": "int      i  = 0;<br/><br/>        while (it.hasNext()) {<br/>            array[i] = it.next();<br/><br/>            i++;<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 58,
          "line_end": 64,
          "content": "int lookup = getLookup(key);<br/><br/>        if (lookup != -1) {<br/>            return objectValueTable[lookup];<br/>        }<br/><br/>        return null;"
        },
        {
          "total_lines": 5,
          "line_start": 97,
          "line_end": 101,
          "content": "if (keySet == null) {<br/>            keySet = new KeySet();<br/>        }<br/><br/>        return keySet;"
        },
        {
          "total_lines": 5,
          "line_start": 60,
          "line_end": 64,
          "content": "if (lookup != -1) {<br/>            return objectValueTable[lookup];<br/>        }<br/><br/>        return null;"
        },
        {
          "total_lines": 5,
          "line_start": 106,
          "line_end": 110,
          "content": "if (values == null) {<br/>            values = new Values();<br/>        }<br/><br/>        return values;"
        },
        {
          "total_lines": 2,
          "line_start": 52,
          "line_end": 53,
          "content": "BaseHashMap.intKeyOrValue,<br/>              BaseHashMap.objectKeyOrValue, false"
        },
        {
          "total_lines": 1,
          "line_start": 53,
          "line_end": 53,
          "content": "BaseHashMap.objectKeyOrValue, false"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCDataSource.java",
      "loc_duplicate": 35,
      "clones": [
          {
          "total_lines": 10,
          "line_start": 260,
          "line_end": 269,
          "content": "String    cname = \"org.hsqldb.jdbc.JDBCDataSourceFactory\";<br/>        Reference ref   = new Reference(getClass().getName(), cname, null);<br/><br/>        ref.add(new StringRefAddr(\"database\", getDatabase()));<br/>        ref.add(new StringRefAddr(\"user\", getUser()));<br/>        ref.add(new StringRefAddr(\"password\", password));<br/>        ref.add(new StringRefAddr(\"loginTimeout\",<br/>                                  Integer.toString(loginTimeout)));<br/><br/>        return ref;"
        },
        {
          "total_lines": 9,
          "line_start": 261,
          "line_end": 269,
          "content": "Reference ref   = new Reference(getClass().getName(), cname, null);<br/><br/>        ref.add(new StringRefAddr(\"database\", getDatabase()));<br/>        ref.add(new StringRefAddr(\"user\", getUser()));<br/>        ref.add(new StringRefAddr(\"password\", password));<br/>        ref.add(new StringRefAddr(\"loginTimeout\",<br/>                                  Integer.toString(loginTimeout)));<br/><br/>        return ref;"
        },
        {
          "total_lines": 8,
          "line_start": 260,
          "line_end": 267,
          "content": "String    cname = \"org.hsqldb.jdbc.JDBCDataSourceFactory\";<br/>        Reference ref   = new Reference(getClass().getName(), cname, null);<br/><br/>        ref.add(new StringRefAddr(\"database\", getDatabase()));<br/>        ref.add(new StringRefAddr(\"user\", getUser()));<br/>        ref.add(new StringRefAddr(\"password\", password));<br/>        ref.add(new StringRefAddr(\"loginTimeout\",<br/>                                  Integer.toString(loginTimeout)));"
        },
        {
          "total_lines": 5,
          "line_start": 219,
          "line_end": 223,
          "content": "if (isWrapperFor(iface)) {<br/>            return (T) this;<br/>        }<br/><br/>        throw JDBCUtil.invalidArgument(\"iface: \" + iface);"
        },
        {
          "total_lines": 2,
          "line_start": 263,
          "line_end": 264,
          "content": "ref.add(new StringRefAddr(\"database\", getDatabase()));<br/>        ref.add(new StringRefAddr(\"user\", getUser()));"
        },
        {
          "total_lines": 1,
          "line_start": 180,
          "line_end": 180,
          "content": "\"loginTimeout\", Integer.toString(loginTimeout)"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCStatement.java",
      "loc_duplicate": 29,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 1110,
          "line_end": 1114,
          "content": "errorResult.getMainString();<br/><br/>                throw new BatchUpdateException(errorResult.getMainString(),<br/>                        errorResult.getSubString(),<br/>                        errorResult.getErrorCode(), updateCounts);"
        },
        {
          "total_lines": 5,
          "line_start": 1735,
          "line_end": 1739,
          "content": "if (isWrapperFor(iface)) {<br/>            return (T) this;<br/>        }<br/><br/>        throw JDBCUtil.invalidArgument(\"iface: \" + iface);"
        },
        {
          "total_lines": 3,
          "line_start": 1101,
          "line_end": 1103,
          "content": "Object[] data = (Object[]) navigator.getNext();<br/><br/>            updateCounts[i] = ((Integer) data[0]).intValue();"
        },
        {
          "total_lines": 3,
          "line_start": 35,
          "line_end": 37,
          "content": "import java.sql.Connection;<br/>import java.sql.ResultSet;<br/>import java.sql.SQLException;"
        },
        {
          "total_lines": 3,
          "line_start": 918,
          "line_end": 920,
          "content": "checkClosed();<br/><br/>        return ResultProperties.getJDBCScrollability(rsProperties);"
        },
        {
          "total_lines": 3,
          "line_start": 888,
          "line_end": 890,
          "content": "checkClosed();<br/><br/>        return ResultProperties.getJDBCConcurrency(rsProperties);"
        },
        {
          "total_lines": 2,
          "line_start": 1480,
          "line_end": 1481,
          "content": "null,<br/>                    null"
        },
        {
          "total_lines": 2,
          "line_start": 36,
          "line_end": 37,
          "content": "import java.sql.ResultSet;<br/>import java.sql.SQLException;"
        },
        {
          "total_lines": 2,
          "line_start": 754,
          "line_end": 755,
          "content": "break;<br/>            default :"
        },
        {
          "total_lines": 1,
          "line_start": 209,
          "line_end": 209,
          "content": "null, null"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rowio/RowInputBinary.java",
      "loc_duplicate": 6,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 310,
          "line_end": 312,
          "content": "out.reset(rowsize);<br/><br/>            buffer = out.getBuffer();"
        },
        {
          "total_lines": 3,
          "line_start": 294,
          "line_end": 296,
          "content": "out.reset(rowsize);<br/><br/>            buffer = out.getBuffer();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/tar/TarReader.java",
      "loc_duplicate": 21,
      "clones": [
          {
          "total_lines": 11,
          "line_start": 265,
          "line_end": 275,
          "content": "if (paxString != null) {<br/>                            System.out.println(paxString);<br/>                        }<br/><br/>                        /* Display entry summary before successful extraction.<br/>                         * Both \"tar\" and \"rsync\" display the name of the<br/>                         * currently extracting file, and we do the same.<br/>                         * Thefore the currently \"shown\" name is still being<br/>                         * extracted.<br/>                         */<br/>                        System.out.println(header.toString());"
        },
        {
          "total_lines": 5,
          "line_start": 105,
          "line_end": 109,
          "content": "patternStrings = new String[sa.length - firstPatInd];<br/><br/>            for (int i = firstPatInd; i < sa.length; i++) {<br/>                patternStrings[i - firstPatInd] = sa[i];<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 255,
          "line_end": 259,
          "content": "if (paxString != null) {<br/>                            System.out.println(paxString);<br/>                        }<br/><br/>                        System.out.println(header.toString());"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/SimpleStore.java",
      "loc_duplicate": 18,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 211,
          "line_end": 212,
          "content": "Session session, Row row, int changeAction,<br/>                            int txModel"
        },
        {
          "total_lines": 2,
          "line_start": 208,
          "line_end": 209,
          "content": "Session session, Row row, int changeAction,<br/>                          int txModel"
        },
        {
          "total_lines": 2,
          "line_start": 39,
          "line_end": 40,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 83,
          "line_end": 84,
          "content": "CachedObject object, int mode,<br/>                           int[] colMap"
        },
        {
          "total_lines": 2,
          "line_start": 189,
          "line_end": 190,
          "content": "int colindex,<br/>                         int adjust"
        },
        {
          "total_lines": 2,
          "line_start": 133,
          "line_end": 134,
          "content": "Session session, Index idx, int count,<br/>                             int opType"
        },
        {
          "total_lines": 1,
          "line_start": 83,
          "line_end": 83,
          "content": "CachedObject object, int mode"
        },
        {
          "total_lines": 1,
          "line_start": 211,
          "line_end": 211,
          "content": "Session session, Row row, int changeAction"
        },
        {
          "total_lines": 1,
          "line_start": 208,
          "line_end": 208,
          "content": "Session session, Row row, int changeAction"
        },
        {
          "total_lines": 1,
          "line_start": 79,
          "line_end": 79,
          "content": "int mode, int[] colMap"
        },
        {
          "total_lines": 1,
          "line_start": 133,
          "line_end": 133,
          "content": "Index idx, int count"
        },
        {
          "total_lines": 1,
          "line_start": 167,
          "line_end": 167,
          "content": "CachedObject object, RowInputInterface in"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestLikePredicateOptimizations.java",
      "loc_duplicate": 339,
      "clones": [
          {
          "total_lines": 14,
          "line_start": 186,
          "line_end": 199,
          "content": "rs  = stmt.executeQuery(sql);<br/><br/>        rs.next();<br/><br/>        expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 14,
          "line_start": 236,
          "line_end": 249,
          "content": "rs  = stmt.executeQuery(sql);<br/><br/>        rs.next();<br/><br/>        expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 12,
          "line_start": 188,
          "line_end": 199,
          "content": "rs.next();<br/><br/>        expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 12,
          "line_start": 238,
          "line_end": 249,
          "content": "rs.next();<br/><br/>        expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 12,
          "line_start": 236,
          "line_end": 247,
          "content": "rs  = stmt.executeQuery(sql);<br/><br/>        rs.next();<br/><br/>        expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 12,
          "line_start": 186,
          "line_end": 197,
          "content": "rs  = stmt.executeQuery(sql);<br/><br/>        rs.next();<br/><br/>        expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 10,
          "line_start": 190,
          "line_end": 199,
          "content": "expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 10,
          "line_start": 238,
          "line_end": 247,
          "content": "rs.next();<br/><br/>        expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 10,
          "line_start": 188,
          "line_end": 197,
          "content": "rs.next();<br/><br/>        expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 10,
          "line_start": 240,
          "line_end": 249,
          "content": "expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 9,
          "line_start": 191,
          "line_end": 199,
          "content": "sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 9,
          "line_start": 241,
          "line_end": 249,
          "content": "sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 8,
          "line_start": 190,
          "line_end": 197,
          "content": "expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 8,
          "line_start": 226,
          "line_end": 233,
          "content": "pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 8,
          "line_start": 240,
          "line_end": 247,
          "content": "expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 8,
          "line_start": 160,
          "line_end": 167,
          "content": "pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 8,
          "line_start": 209,
          "line_end": 216,
          "content": "pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 8,
          "line_start": 192,
          "line_end": 199,
          "content": "pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 8,
          "line_start": 242,
          "line_end": 249,
          "content": "pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 8,
          "line_start": 130,
          "line_end": 137,
          "content": "pstmt = conn.prepareStatement(sql);<br/>        rs    = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 7,
          "line_start": 191,
          "line_end": 197,
          "content": "sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 7,
          "line_start": 144,
          "line_end": 150,
          "content": "rs = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);<br/><br/>        assertEquals(\"\\\"\" + sql + \"\\\"\", expectedCount, actualCount);"
        },
        {
          "total_lines": 7,
          "line_start": 34,
          "line_end": 40,
          "content": "import java.sql.Connection;<br/>import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.Statement;<br/><br/>import junit.framework.TestCase;<br/>import junit.framework.TestResult;"
        },
        {
          "total_lines": 7,
          "line_start": 241,
          "line_end": 247,
          "content": "sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 7,
          "line_start": 236,
          "line_end": 242,
          "content": "rs  = stmt.executeQuery(sql);<br/><br/>        rs.next();<br/><br/>        expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);"
        },
        {
          "total_lines": 7,
          "line_start": 186,
          "line_end": 192,
          "content": "rs  = stmt.executeQuery(sql);<br/><br/>        rs.next();<br/><br/>        expectedCount = rs.getInt(1);<br/>        sql           = \"select count(*) from test where name like '%'\";<br/>        pstmt         = conn.prepareStatement(sql);"
        },
        {
          "total_lines": 6,
          "line_start": 242,
          "line_end": 247,
          "content": "pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 6,
          "line_start": 130,
          "line_end": 135,
          "content": "pstmt = conn.prepareStatement(sql);<br/>        rs    = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 6,
          "line_start": 192,
          "line_end": 197,
          "content": "pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 6,
          "line_start": 160,
          "line_end": 165,
          "content": "pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 6,
          "line_start": 209,
          "line_end": 214,
          "content": "pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 6,
          "line_start": 35,
          "line_end": 40,
          "content": "import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.Statement;<br/><br/>import junit.framework.TestCase;<br/>import junit.framework.TestResult;"
        },
        {
          "total_lines": 6,
          "line_start": 226,
          "line_end": 231,
          "content": "pstmt         = conn.prepareStatement(sql);<br/>        rs            = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 5,
          "line_start": 220,
          "line_end": 224,
          "content": "rs = stmt.executeQuery(sql);<br/><br/>        rs.next();<br/><br/>        expectedCount = rs.getInt(1);"
        },
        {
          "total_lines": 5,
          "line_start": 124,
          "line_end": 128,
          "content": "rs = stmt.executeQuery(sql);<br/><br/>        rs.next();<br/><br/>        expectedCount = rs.getInt(1);"
        },
        {
          "total_lines": 5,
          "line_start": 144,
          "line_end": 148,
          "content": "rs = pstmt.executeQuery();<br/><br/>        rs.next();<br/><br/>        actualCount = rs.getInt(1);"
        },
        {
          "total_lines": 5,
          "line_start": 154,
          "line_end": 158,
          "content": "rs  = stmt.executeQuery(sql);<br/><br/>        rs.next();<br/><br/>        expectedCount = rs.getInt(1);"
        },
        {
          "total_lines": 5,
          "line_start": 203,
          "line_end": 207,
          "content": "rs = stmt.executeQuery(sql);<br/><br/>        rs.next();<br/><br/>        expectedCount = rs.getInt(1);"
        },
        {
          "total_lines": 3,
          "line_start": 126,
          "line_end": 128,
          "content": "rs.next();<br/><br/>        expectedCount = rs.getInt(1);"
        },
        {
          "total_lines": 3,
          "line_start": 154,
          "line_end": 156,
          "content": "rs  = stmt.executeQuery(sql);<br/><br/>        rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 203,
          "line_end": 205,
          "content": "rs = stmt.executeQuery(sql);<br/><br/>        rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 156,
          "line_end": 158,
          "content": "rs.next();<br/><br/>        expectedCount = rs.getInt(1);"
        },
        {
          "total_lines": 3,
          "line_start": 124,
          "line_end": 126,
          "content": "rs = stmt.executeQuery(sql);<br/><br/>        rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 263,
          "line_end": 265,
          "content": "pstmt = conn.prepareStatement(sql);<br/><br/>        pstmt.execute();"
        },
        {
          "total_lines": 3,
          "line_start": 220,
          "line_end": 222,
          "content": "rs = stmt.executeQuery(sql);<br/><br/>        rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 258,
          "line_end": 260,
          "content": "pstmt = conn.prepareStatement(sql);<br/><br/>        pstmt.execute();"
        },
        {
          "total_lines": 3,
          "line_start": 222,
          "line_end": 224,
          "content": "rs.next();<br/><br/>        expectedCount = rs.getInt(1);"
        },
        {
          "total_lines": 3,
          "line_start": 205,
          "line_end": 207,
          "content": "rs.next();<br/><br/>        expectedCount = rs.getInt(1);"
        },
        {
          "total_lines": 2,
          "line_start": 279,
          "line_end": 280,
          "content": "pstmt = conn.prepareStatement(sql);<br/>        rs    = pstmt.executeQuery();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/Schema.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 150,
          "line_end": 151,
          "content": "OrderedHashSet resolved,<br/>                                OrderedHashSet unresolved"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 1,
          "line_start": 120,
          "line_end": 120,
          "content": "Session session, SchemaObject parentObject"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/JavaObjectData.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 36,
          "line_end": 37,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/BinaryData.java",
      "loc_duplicate": 24,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 202,
          "line_end": 208,
          "content": "if (length > Integer.MAX_VALUE) {<br/>            throw new IndexOutOfBoundsException();<br/>        }<br/><br/>        byte[] bytes = b.getBytes(session, offset, (int) length);<br/><br/>        setBytes(session, pos, bytes, 0, bytes.length);"
        },
        {
          "total_lines": 3,
          "line_start": 206,
          "line_end": 208,
          "content": "byte[] bytes = b.getBytes(session, offset, (int) length);<br/><br/>        setBytes(session, pos, bytes, 0, bytes.length);"
        },
        {
          "total_lines": 2,
          "line_start": 229,
          "line_end": 230,
          "content": "byte[] pattern,<br/>                         long start"
        },
        {
          "total_lines": 2,
          "line_start": 199,
          "line_end": 200,
          "content": "long pos, BlobData b,<br/>                         long offset, long length"
        },
        {
          "total_lines": 2,
          "line_start": 211,
          "line_end": 212,
          "content": "long pos,<br/>                                InputStream in"
        },
        {
          "total_lines": 2,
          "line_start": 169,
          "line_end": 170,
          "content": "SessionInterface session, long pos,<br/>                                       long length"
        },
        {
          "total_lines": 2,
          "line_start": 243,
          "line_end": 244,
          "content": "BlobData pattern,<br/>                         long start"
        },
        {
          "total_lines": 1,
          "line_start": 169,
          "line_end": 169,
          "content": "SessionInterface session, long pos"
        },
        {
          "total_lines": 1,
          "line_start": 161,
          "line_end": 161,
          "content": "SessionInterface session, long pos"
        },
        {
          "total_lines": 1,
          "line_start": 148,
          "line_end": 148,
          "content": "SessionInterface session, long pos"
        },
        {
          "total_lines": 1,
          "line_start": 195,
          "line_end": 195,
          "content": "SessionInterface session, long pos"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestBench.java",
      "loc_duplicate": 665,
      "clones": [
          {
          "total_lines": 45,
          "line_start": 1052,
          "line_end": 1096,
          "content": "long    min          = 0;<br/>        long    max          = 0;<br/>        boolean keep_running = true;<br/><br/>        public MemoryWatcherThread() {<br/><br/>            this.reset();<br/><br/>            keep_running = true;<br/>        }<br/><br/>        public void reset() {<br/><br/>            System.gc();<br/><br/>            long currentFree  = Runtime.getRuntime().freeMemory();<br/>            long currentAlloc = Runtime.getRuntime().totalMemory();<br/><br/>            min = max = (currentAlloc - currentFree);<br/>        }<br/><br/>        public void end() {<br/>            keep_running = false;<br/>        }<br/><br/>        public void run() {<br/><br/>            while (keep_running) {<br/>                long currentFree  = Runtime.getRuntime().freeMemory();<br/>                long currentAlloc = Runtime.getRuntime().totalMemory();<br/>                long used         = currentAlloc - currentFree;<br/><br/>                if (used < min) {<br/>                    min = used;<br/>                }<br/><br/>                if (used > max) {<br/>                    max = used;<br/>                }<br/><br/>                try {<br/>                    sleep(100);<br/>                } catch (InterruptedException E) {}<br/>            }<br/>        }"
        },
        {
          "total_lines": 44,
          "line_start": 1053,
          "line_end": 1096,
          "content": "long    max          = 0;<br/>        boolean keep_running = true;<br/><br/>        public MemoryWatcherThread() {<br/><br/>            this.reset();<br/><br/>            keep_running = true;<br/>        }<br/><br/>        public void reset() {<br/><br/>            System.gc();<br/><br/>            long currentFree  = Runtime.getRuntime().freeMemory();<br/>            long currentAlloc = Runtime.getRuntime().totalMemory();<br/><br/>            min = max = (currentAlloc - currentFree);<br/>        }<br/><br/>        public void end() {<br/>            keep_running = false;<br/>        }<br/><br/>        public void run() {<br/><br/>            while (keep_running) {<br/>                long currentFree  = Runtime.getRuntime().freeMemory();<br/>                long currentAlloc = Runtime.getRuntime().totalMemory();<br/>                long used         = currentAlloc - currentFree;<br/><br/>                if (used < min) {<br/>                    min = used;<br/>                }<br/><br/>                if (used > max) {<br/>                    max = used;<br/>                }<br/><br/>                try {<br/>                    sleep(100);<br/>                } catch (InterruptedException E) {}<br/>            }<br/>        }"
        },
        {
          "total_lines": 43,
          "line_start": 1054,
          "line_end": 1096,
          "content": "boolean keep_running = true;<br/><br/>        public MemoryWatcherThread() {<br/><br/>            this.reset();<br/><br/>            keep_running = true;<br/>        }<br/><br/>        public void reset() {<br/><br/>            System.gc();<br/><br/>            long currentFree  = Runtime.getRuntime().freeMemory();<br/>            long currentAlloc = Runtime.getRuntime().totalMemory();<br/><br/>            min = max = (currentAlloc - currentFree);<br/>        }<br/><br/>        public void end() {<br/>            keep_running = false;<br/>        }<br/><br/>        public void run() {<br/><br/>            while (keep_running) {<br/>                long currentFree  = Runtime.getRuntime().freeMemory();<br/>                long currentAlloc = Runtime.getRuntime().totalMemory();<br/>                long used         = currentAlloc - currentFree;<br/><br/>                if (used < min) {<br/>                    min = used;<br/>                }<br/><br/>                if (used > max) {<br/>                    max = used;<br/>                }<br/><br/>                try {<br/>                    sleep(100);<br/>                } catch (InterruptedException E) {}<br/>            }<br/>        }"
        },
        {
          "total_lines": 20,
          "line_start": 1056,
          "line_end": 1075,
          "content": "public MemoryWatcherThread() {<br/><br/>            this.reset();<br/><br/>            keep_running = true;<br/>        }<br/><br/>        public void reset() {<br/><br/>            System.gc();<br/><br/>            long currentFree  = Runtime.getRuntime().freeMemory();<br/>            long currentAlloc = Runtime.getRuntime().totalMemory();<br/><br/>            min = max = (currentAlloc - currentFree);<br/>        }<br/><br/>        public void end() {<br/>            keep_running = false;<br/>        }"
        },
        {
          "total_lines": 19,
          "line_start": 640,
          "line_end": 658,
          "content": "int min = 0,<br/>            max = 0;<br/><br/>        switch (type) {<br/><br/>            case TELLER :<br/>                max = ntellers * tps - 1;<br/>                break;<br/><br/>            case BRANCH :<br/>                max = nbranches * tps - 1;<br/>                break;<br/><br/>            case ACCOUNT :<br/>                max = naccounts * tps - 1;<br/>                break;<br/>        }<br/><br/>        return (getRandomInt(min, max));"
        },
        {
          "total_lines": 19,
          "line_start": 844,
          "line_end": 862,
          "content": "if (pstmt1 != null) {<br/>                    pstmt1.close();<br/>                }<br/><br/>                if (pstmt2 != null) {<br/>                    pstmt2.close();<br/>                }<br/><br/>                if (pstmt3 != null) {<br/>                    pstmt3.close();<br/>                }<br/><br/>                if (pstmt4 != null) {<br/>                    pstmt4.close();<br/>                }<br/><br/>                if (pstmt5 != null) {<br/>                    pstmt5.close();<br/>                }"
        },
        {
          "total_lines": 17,
          "line_start": 946,
          "line_end": 962,
          "content": "System.out.println(number_of_txns);<br/><br/>            ntrans = number_of_txns;<br/>            Conn   = connect(url, user, password);<br/><br/>            if (Conn == null) {<br/>                return;<br/>            }<br/><br/>            try {<br/>                Conn.setAutoCommit(false);<br/>                Conn.setTransactionIsolation(transactionMode);<br/>                prepareStatements();<br/>            } catch (Exception E) {<br/>                System.out.println(E.getMessage());<br/>                E.printStackTrace();<br/>            }"
        },
        {
          "total_lines": 17,
          "line_start": 775,
          "line_end": 791,
          "content": "System.out.println(number_of_txns);<br/><br/>            ntrans = number_of_txns;<br/>            Conn   = connect(url, user, password);<br/><br/>            if (Conn == null) {<br/>                return;<br/>            }<br/><br/>            try {<br/>                Conn.setAutoCommit(false);<br/>                Conn.setTransactionIsolation(transactionMode);<br/>                prepareStatements();<br/>            } catch (Exception E) {<br/>                System.out.println(E.getMessage());<br/>                E.printStackTrace();<br/>            }"
        },
        {
          "total_lines": 16,
          "line_start": 643,
          "line_end": 658,
          "content": "switch (type) {<br/><br/>            case TELLER :<br/>                max = ntellers * tps - 1;<br/>                break;<br/><br/>            case BRANCH :<br/>                max = nbranches * tps - 1;<br/>                break;<br/><br/>            case ACCOUNT :<br/>                max = naccounts * tps - 1;<br/>                break;<br/>        }<br/><br/>        return (getRandomInt(min, max));"
        },
        {
          "total_lines": 15,
          "line_start": 948,
          "line_end": 962,
          "content": "ntrans = number_of_txns;<br/>            Conn   = connect(url, user, password);<br/><br/>            if (Conn == null) {<br/>                return;<br/>            }<br/><br/>            try {<br/>                Conn.setAutoCommit(false);<br/>                Conn.setTransactionIsolation(transactionMode);<br/>                prepareStatements();<br/>            } catch (Exception E) {<br/>                System.out.println(E.getMessage());<br/>                E.printStackTrace();<br/>            }"
        },
        {
          "total_lines": 15,
          "line_start": 848,
          "line_end": 862,
          "content": "if (pstmt2 != null) {<br/>                    pstmt2.close();<br/>                }<br/><br/>                if (pstmt3 != null) {<br/>                    pstmt3.close();<br/>                }<br/><br/>                if (pstmt4 != null) {<br/>                    pstmt4.close();<br/>                }<br/><br/>                if (pstmt5 != null) {<br/>                    pstmt5.close();<br/>                }"
        },
        {
          "total_lines": 15,
          "line_start": 844,
          "line_end": 858,
          "content": "if (pstmt1 != null) {<br/>                    pstmt1.close();<br/>                }<br/><br/>                if (pstmt2 != null) {<br/>                    pstmt2.close();<br/>                }<br/><br/>                if (pstmt3 != null) {<br/>                    pstmt3.close();<br/>                }<br/><br/>                if (pstmt4 != null) {<br/>                    pstmt4.close();<br/>                }"
        },
        {
          "total_lines": 15,
          "line_start": 777,
          "line_end": 791,
          "content": "ntrans = number_of_txns;<br/>            Conn   = connect(url, user, password);<br/><br/>            if (Conn == null) {<br/>                return;<br/>            }<br/><br/>            try {<br/>                Conn.setAutoCommit(false);<br/>                Conn.setTransactionIsolation(transactionMode);<br/>                prepareStatements();<br/>            } catch (Exception E) {<br/>                System.out.println(E.getMessage());<br/>                E.printStackTrace();<br/>            }"
        },
        {
          "total_lines": 14,
          "line_start": 949,
          "line_end": 962,
          "content": "Conn   = connect(url, user, password);<br/><br/>            if (Conn == null) {<br/>                return;<br/>            }<br/><br/>            try {<br/>                Conn.setAutoCommit(false);<br/>                Conn.setTransactionIsolation(transactionMode);<br/>                prepareStatements();<br/>            } catch (Exception E) {<br/>                System.out.println(E.getMessage());<br/>                E.printStackTrace();<br/>            }"
        },
        {
          "total_lines": 14,
          "line_start": 778,
          "line_end": 791,
          "content": "Conn   = connect(url, user, password);<br/><br/>            if (Conn == null) {<br/>                return;<br/>            }<br/><br/>            try {<br/>                Conn.setAutoCommit(false);<br/>                Conn.setTransactionIsolation(transactionMode);<br/>                prepareStatements();<br/>            } catch (Exception E) {<br/>                System.out.println(E.getMessage());<br/>                E.printStackTrace();<br/>            }"
        },
        {
          "total_lines": 12,
          "line_start": 780,
          "line_end": 791,
          "content": "if (Conn == null) {<br/>                return;<br/>            }<br/><br/>            try {<br/>                Conn.setAutoCommit(false);<br/>                Conn.setTransactionIsolation(transactionMode);<br/>                prepareStatements();<br/>            } catch (Exception E) {<br/>                System.out.println(E.getMessage());<br/>                E.printStackTrace();<br/>            }"
        },
        {
          "total_lines": 12,
          "line_start": 951,
          "line_end": 962,
          "content": "if (Conn == null) {<br/>                return;<br/>            }<br/><br/>            try {<br/>                Conn.setAutoCommit(false);<br/>                Conn.setTransactionIsolation(transactionMode);<br/>                prepareStatements();<br/>            } catch (Exception E) {<br/>                System.out.println(E.getMessage());<br/>                E.printStackTrace();<br/>            }"
        },
        {
          "total_lines": 11,
          "line_start": 844,
          "line_end": 854,
          "content": "if (pstmt1 != null) {<br/>                    pstmt1.close();<br/>                }<br/><br/>                if (pstmt2 != null) {<br/>                    pstmt2.close();<br/>                }<br/><br/>                if (pstmt3 != null) {<br/>                    pstmt3.close();<br/>                }"
        },
        {
          "total_lines": 11,
          "line_start": 1033,
          "line_end": 1043,
          "content": "if (verbose) {<br/>                    System.out.println(\"Transaction failed: \"<br/>                                       + E.getMessage());<br/>                    E.printStackTrace();<br/>                }<br/><br/>                incrementFailedTransactionCount();<br/><br/>                try {<br/>                    Conn.rollback();<br/>                } catch (SQLException E1) {}"
        },
        {
          "total_lines": 11,
          "line_start": 848,
          "line_end": 858,
          "content": "if (pstmt2 != null) {<br/>                    pstmt2.close();<br/>                }<br/><br/>                if (pstmt3 != null) {<br/>                    pstmt3.close();<br/>                }<br/><br/>                if (pstmt4 != null) {<br/>                    pstmt4.close();<br/>                }"
        },
        {
          "total_lines": 11,
          "line_start": 852,
          "line_end": 862,
          "content": "if (pstmt3 != null) {<br/>                    pstmt3.close();<br/>                }<br/><br/>                if (pstmt4 != null) {<br/>                    pstmt4.close();<br/>                }<br/><br/>                if (pstmt5 != null) {<br/>                    pstmt5.close();<br/>                }"
        },
        {
          "total_lines": 11,
          "line_start": 919,
          "line_end": 929,
          "content": "if (verbose) {<br/>                    System.out.println(\"Transaction failed: \"<br/>                                       + E.getMessage());<br/>                    E.printStackTrace();<br/>                }<br/><br/>                incrementFailedTransactionCount();<br/><br/>                try {<br/>                    Conn.rollback();<br/>                } catch (SQLException E1) {}"
        },
        {
          "total_lines": 10,
          "line_start": 208,
          "line_end": 217,
          "content": "System.out.println(\"Start: \" + start.toString());<br/>                System.out.print(\"Initializing dataset...\");<br/>                createDatabase(url, user, password);<br/><br/>                double seconds = (System.currentTimeMillis() - start.getTime())<br/>                                 / 1000D;<br/><br/>                System.out.println(\"done. in \" + seconds + \" seconds\\n\");<br/>                System.out.println(\"Complete: \"<br/>                                   + (new java.util.Date()).toString());"
        },
        {
          "total_lines": 9,
          "line_start": 209,
          "line_end": 217,
          "content": "System.out.print(\"Initializing dataset...\");<br/>                createDatabase(url, user, password);<br/><br/>                double seconds = (System.currentTimeMillis() - start.getTime())<br/>                                 / 1000D;<br/><br/>                System.out.println(\"done. in \" + seconds + \" seconds\\n\");<br/>                System.out.println(\"Complete: \"<br/>                                   + (new java.util.Date()).toString());"
        },
        {
          "total_lines": 8,
          "line_start": 775,
          "line_end": 782,
          "content": "System.out.println(number_of_txns);<br/><br/>            ntrans = number_of_txns;<br/>            Conn   = connect(url, user, password);<br/><br/>            if (Conn == null) {<br/>                return;<br/>            }"
        },
        {
          "total_lines": 8,
          "line_start": 208,
          "line_end": 215,
          "content": "System.out.println(\"Start: \" + start.toString());<br/>                System.out.print(\"Initializing dataset...\");<br/>                createDatabase(url, user, password);<br/><br/>                double seconds = (System.currentTimeMillis() - start.getTime())<br/>                                 / 1000D;<br/><br/>                System.out.println(\"done. in \" + seconds + \" seconds\\n\");"
        },
        {
          "total_lines": 8,
          "line_start": 946,
          "line_end": 953,
          "content": "System.out.println(number_of_txns);<br/><br/>            ntrans = number_of_txns;<br/>            Conn   = connect(url, user, password);<br/><br/>            if (Conn == null) {<br/>                return;<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 919,
          "line_end": 925,
          "content": "if (verbose) {<br/>                    System.out.println(\"Transaction failed: \"<br/>                                       + E.getMessage());<br/>                    E.printStackTrace();<br/>                }<br/><br/>                incrementFailedTransactionCount();"
        },
        {
          "total_lines": 7,
          "line_start": 978,
          "line_end": 984,
          "content": "int account = TestBench.getRandomID(ACCOUNT);<br/>                int branch  = TestBench.getRandomID(BRANCH);<br/>                int teller  = TestBench.getRandomID(TELLER);<br/>                int delta   = TestBench.getRandomInt(-1000, 1000);<br/><br/>                doOne(branch, teller, account, delta);<br/>                incrementTransactionCount();"
        },
        {
          "total_lines": 7,
          "line_start": 852,
          "line_end": 858,
          "content": "if (pstmt3 != null) {<br/>                    pstmt3.close();<br/>                }<br/><br/>                if (pstmt4 != null) {<br/>                    pstmt4.close();<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 819,
          "line_end": 825,
          "content": "int account = TestBench.getRandomID(ACCOUNT);<br/>                int branch  = TestBench.getRandomID(BRANCH);<br/>                int teller  = TestBench.getRandomID(TELLER);<br/>                int delta   = TestBench.getRandomInt(-1000, 1000);<br/><br/>                doOne(branch, teller, account, delta);<br/>                incrementTransactionCount();"
        },
        {
          "total_lines": 7,
          "line_start": 856,
          "line_end": 862,
          "content": "if (pstmt4 != null) {<br/>                    pstmt4.close();<br/>                }<br/><br/>                if (pstmt5 != null) {<br/>                    pstmt5.close();<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 1033,
          "line_end": 1039,
          "content": "if (verbose) {<br/>                    System.out.println(\"Transaction failed: \"<br/>                                       + E.getMessage());<br/>                    E.printStackTrace();<br/>                }<br/><br/>                incrementFailedTransactionCount();"
        },
        {
          "total_lines": 7,
          "line_start": 844,
          "line_end": 850,
          "content": "if (pstmt1 != null) {<br/>                    pstmt1.close();<br/>                }<br/><br/>                if (pstmt2 != null) {<br/>                    pstmt2.close();<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 848,
          "line_end": 854,
          "content": "if (pstmt2 != null) {<br/>                    pstmt2.close();<br/>                }<br/><br/>                if (pstmt3 != null) {<br/>                    pstmt3.close();<br/>                }"
        },
        {
          "total_lines": 6,
          "line_start": 154,
          "line_end": 159,
          "content": "System.out.println();<br/>            System.out.println(\"-v          verbose error messages\");<br/>            System.out.println(\"-init       initialize the tables\");<br/>            System.out.println(\"-tpc        transactions per client\");<br/>            System.out.println(\"-clients    number of simultaneous clients\");<br/>            System.exit(-1);"
        },
        {
          "total_lines": 6,
          "line_start": 471,
          "line_end": 476,
          "content": "if (createExtension.length() > 0) {<br/>                Query += createExtension;<br/>            }<br/><br/>            Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 6,
          "line_start": 630,
          "line_end": 635,
          "content": "int ret = 0;<br/><br/>        ret = (int) (Math.random() * (hi - lo + 1));<br/>        ret += lo;<br/><br/>        return ret;"
        },
        {
          "total_lines": 6,
          "line_start": 459,
          "line_end": 464,
          "content": "if (createExtension.length() > 0) {<br/>                Query += createExtension;<br/>            }<br/><br/>            Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 5,
          "line_start": 154,
          "line_end": 158,
          "content": "System.out.println();<br/>            System.out.println(\"-v          verbose error messages\");<br/>            System.out.println(\"-init       initialize the tables\");<br/>            System.out.println(\"-tpc        transactions per client\");<br/>            System.out.println(\"-clients    number of simultaneous clients\");"
        },
        {
          "total_lines": 5,
          "line_start": 821,
          "line_end": 825,
          "content": "int teller  = TestBench.getRandomID(TELLER);<br/>                int delta   = TestBench.getRandomInt(-1000, 1000);<br/><br/>                doOne(branch, teller, account, delta);<br/>                incrementTransactionCount();"
        },
        {
          "total_lines": 5,
          "line_start": 980,
          "line_end": 984,
          "content": "int teller  = TestBench.getRandomID(TELLER);<br/>                int delta   = TestBench.getRandomInt(-1000, 1000);<br/><br/>                doOne(branch, teller, account, delta);<br/>                incrementTransactionCount();"
        },
        {
          "total_lines": 4,
          "line_start": 665,
          "line_end": 668,
          "content": "Connection conn = DriverManager.getConnection(DBUrl, DBUser,<br/>                DBPassword);<br/><br/>            return conn;"
        },
        {
          "total_lines": 4,
          "line_start": 981,
          "line_end": 984,
          "content": "int delta   = TestBench.getRandomInt(-1000, 1000);<br/><br/>                doOne(branch, teller, account, delta);<br/>                incrementTransactionCount();"
        },
        {
          "total_lines": 4,
          "line_start": 822,
          "line_end": 825,
          "content": "int delta   = TestBench.getRandomInt(-1000, 1000);<br/><br/>                doOne(branch, teller, account, delta);<br/>                incrementTransactionCount();"
        },
        {
          "total_lines": 4,
          "line_start": 156,
          "line_end": 159,
          "content": "System.out.println(\"-init       initialize the tables\");<br/>            System.out.println(\"-tpc        transactions per client\");<br/>            System.out.println(\"-clients    number of simultaneous clients\");<br/>            System.exit(-1);"
        },
        {
          "total_lines": 4,
          "line_start": 396,
          "line_end": 399,
          "content": "System.out.println(\"Already initialized\");<br/>                connectClose(Conn);<br/><br/>                return;"
        },
        {
          "total_lines": 3,
          "line_start": 942,
          "line_end": 944,
          "content": "int number_of_txns, String url,<br/>                                     String user, String password,<br/>                                     int transactionMode"
        },
        {
          "total_lines": 3,
          "line_start": 126,
          "line_end": 128,
          "content": "i++;<br/><br/>                    n_txn_per_client = Integer.parseInt(Args[i]);"
        },
        {
          "total_lines": 3,
          "line_start": 978,
          "line_end": 980,
          "content": "int account = TestBench.getRandomID(ACCOUNT);<br/>                int branch  = TestBench.getRandomID(BRANCH);<br/>                int teller  = TestBench.getRandomID(TELLER);"
        },
        {
          "total_lines": 3,
          "line_start": 303,
          "line_end": 305,
          "content": "Client = (Thread) e.nextElement();<br/><br/>            Client.join();"
        },
        {
          "total_lines": 3,
          "line_start": 154,
          "line_end": 156,
          "content": "System.out.println();<br/>            System.out.println(\"-v          verbose error messages\");<br/>            System.out.println(\"-init       initialize the tables\");"
        },
        {
          "total_lines": 3,
          "line_start": 397,
          "line_end": 399,
          "content": "connectClose(Conn);<br/><br/>                return;"
        },
        {
          "total_lines": 3,
          "line_start": 633,
          "line_end": 635,
          "content": "ret += lo;<br/><br/>        return ret;"
        },
        {
          "total_lines": 3,
          "line_start": 238,
          "line_end": 240,
          "content": "guardian  = connect(url, user, password);<br/><br/>            checkSums(guardian);"
        },
        {
          "total_lines": 3,
          "line_start": 96,
          "line_end": 98,
          "content": "i++;<br/><br/>                    n_clients = Integer.parseInt(Args[i]);"
        },
        {
          "total_lines": 3,
          "line_start": 819,
          "line_end": 821,
          "content": "int account = TestBench.getRandomID(ACCOUNT);<br/>                int branch  = TestBench.getRandomID(BRANCH);<br/>                int teller  = TestBench.getRandomID(TELLER);"
        },
        {
          "total_lines": 2,
          "line_start": 285,
          "line_end": 286,
          "content": "password,<br/>                    Connection.TRANSACTION_READ_COMMITTED"
        },
        {
          "total_lines": 2,
          "line_start": 368,
          "line_end": 369,
          "content": "Conn.setAutoCommit(false);<br/>            System.out.println(\"In transaction mode\");"
        },
        {
          "total_lines": 2,
          "line_start": 424,
          "line_end": 425,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 608,
          "line_end": 609,
          "content": "pstmt.close();<br/>            Conn.commit();"
        },
        {
          "total_lines": 2,
          "line_start": 530,
          "line_end": 531,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 525,
          "line_end": 526,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 535,
          "line_end": 536,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 271,
          "line_end": 272,
          "content": "String url, String user,<br/>                  String password"
        },
        {
          "total_lines": 2,
          "line_start": 864,
          "line_end": 865,
          "content": "System.out.println(E.getMessage());<br/>                E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 451,
          "line_end": 452,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 226,
          "line_end": 227,
          "content": "guardian  = connect(url, user, password);<br/>            checkSums(guardian);"
        },
        {
          "total_lines": 2,
          "line_start": 248,
          "line_end": 249,
          "content": "System.out.println(E.getMessage());<br/>            E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 558,
          "line_end": 559,
          "content": "pstmt.executeUpdate();<br/>                pstmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 189,
          "line_end": 190,
          "content": "DBUser, DBPassword,<br/>                                         initialize_dataset"
        },
        {
          "total_lines": 2,
          "line_start": 434,
          "line_end": 435,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 686,
          "line_end": 687,
          "content": "System.out.println(E.getMessage());<br/>            E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 429,
          "line_end": 430,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 992,
          "line_end": 993,
          "content": "System.out.println(E.getMessage());<br/>                E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 419,
          "line_end": 420,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 585,
          "line_end": 586,
          "content": "pstmt.close();<br/>            Conn.commit();"
        },
        {
          "total_lines": 2,
          "line_start": 621,
          "line_end": 622,
          "content": "System.out.println(E.getMessage());<br/>            E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 670,
          "line_end": 671,
          "content": "System.out.println(E.getMessage());<br/>            E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 192,
          "line_end": 193,
          "content": "System.out.println(E.getMessage());<br/>            E.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 772,
          "line_end": 773,
          "content": "int number_of_txns, String url, String user,<br/>                            String password, int transactionMode"
        },
        {
          "total_lines": 2,
          "line_start": 158,
          "line_end": 159,
          "content": "System.out.println(\"-clients    number of simultaneous clients\");<br/>            System.exit(-1);"
        },
        {
          "total_lines": 2,
          "line_start": 540,
          "line_end": 541,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 2,
          "line_start": 566,
          "line_end": 567,
          "content": "pstmt.close();<br/>            Conn.commit();"
        },
        {
          "total_lines": 2,
          "line_start": 359,
          "line_end": 360,
          "content": "String url, String user,<br/>                        String password"
        },
        {
          "total_lines": 2,
          "line_start": 661,
          "line_end": 662,
          "content": "String DBUrl, String DBUser,<br/>                                     String DBPassword"
        },
        {
          "total_lines": 2,
          "line_start": 157,
          "line_end": 158,
          "content": "System.out.println(\"-tpc        transactions per client\");<br/>            System.out.println(\"-clients    number of simultaneous clients\");"
        },
        {
          "total_lines": 2,
          "line_start": 289,
          "line_end": 290,
          "content": "password,<br/>                                     Connection.TRANSACTION_READ_COMMITTED"
        },
        {
          "total_lines": 2,
          "line_start": 1052,
          "line_end": 1053,
          "content": "long    min          = 0;<br/>        long    max          = 0;"
        },
        {
          "total_lines": 2,
          "line_start": 156,
          "line_end": 157,
          "content": "System.out.println(\"-init       initialize the tables\");<br/>            System.out.println(\"-tpc        transactions per client\");"
        },
        {
          "total_lines": 2,
          "line_start": 483,
          "line_end": 484,
          "content": "Stmt.execute(Query);<br/>            Stmt.clearWarnings();"
        },
        {
          "total_lines": 1,
          "line_start": 197,
          "line_end": 197,
          "content": "String password, boolean init"
        },
        {
          "total_lines": 1,
          "line_start": 661,
          "line_end": 661,
          "content": "String DBUrl, String DBUser"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/HsqlTimer.java",
      "loc_duplicate": 10,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 484,
          "line_end": 488,
          "content": "try {<br/>            taskRunnerThread.setContextClassLoader(null);<br/>        } catch (Throwable t) {}<br/><br/>        taskRunnerThread = null;"
        },
        {
          "total_lines": 2,
          "line_start": 463,
          "line_end": 464,
          "content": "final Runnable runnable,<br/>                           final long period"
        },
        {
          "total_lines": 2,
          "line_start": 705,
          "line_end": 706,
          "content": "final Runnable runnable, final long period,<br/>                final boolean relative"
        },
        {
          "total_lines": 1,
          "line_start": 705,
          "line_end": 705,
          "content": "final Runnable runnable, final long period"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/index/NodeAVLDisk.java",
      "loc_duplicate": 112,
      "clones": [
          {
          "total_lines": 13,
          "line_start": 432,
          "line_end": 444,
          "content": "NodeAVL x;<br/><br/>        if (isLeft) {<br/>            x = setLeft(store, n);<br/>        } else {<br/>            x = setRight(store, n);<br/>        }<br/><br/>        if (n != null) {<br/>            n.setParent(store, this);<br/>        }<br/><br/>        return x;"
        },
        {
          "total_lines": 11,
          "line_start": 434,
          "line_end": 444,
          "content": "if (isLeft) {<br/>            x = setLeft(store, n);<br/>        } else {<br/>            x = setRight(store, n);<br/>        }<br/><br/>        if (n != null) {<br/>            n.setParent(store, this);<br/>        }<br/><br/>        return x;"
        },
        {
          "total_lines": 10,
          "line_start": 73,
          "line_end": 82,
          "content": "import java.io.IOException;<br/><br/>import org.hsqldb.RowAVL;<br/>import org.hsqldb.RowAVLDisk;<br/>import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.lib.LongLookup;<br/>import org.hsqldb.persist.PersistentStore;<br/>import org.hsqldb.rowio.RowInputInterface;<br/>import org.hsqldb.rowio.RowOutputInterface;"
        },
        {
          "total_lines": 9,
          "line_start": 145,
          "line_end": 153,
          "content": "iLeft    = NO_POS;<br/>        iRight   = NO_POS;<br/>        iParent  = NO_POS;<br/>        nLeft    = null;<br/>        nRight   = null;<br/>        nParent  = null;<br/>        iBalance = 0;<br/><br/>        row.setNodesChanged();"
        },
        {
          "total_lines": 8,
          "line_start": 75,
          "line_end": 82,
          "content": "import org.hsqldb.RowAVL;<br/>import org.hsqldb.RowAVLDisk;<br/>import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.lib.LongLookup;<br/>import org.hsqldb.persist.PersistentStore;<br/>import org.hsqldb.rowio.RowInputInterface;<br/>import org.hsqldb.rowio.RowOutputInterface;"
        },
        {
          "total_lines": 7,
          "line_start": 170,
          "line_end": 176,
          "content": "if (!row.isInMemory()) {<br/>            return (RowAVLDisk) store.get(this.row, false);<br/>        } else {<br/>            row.updateAccessCount(store.getAccessCount());<br/>        }<br/><br/>        return row;"
        },
        {
          "total_lines": 5,
          "line_start": 440,
          "line_end": 444,
          "content": "if (n != null) {<br/>            n.setParent(store, this);<br/>        }<br/><br/>        return x;"
        },
        {
          "total_lines": 5,
          "line_start": 197,
          "line_end": 201,
          "content": "if (n == null) {<br/>            return iLeft == NO_POS;<br/>        }<br/><br/>        return iLeft == n.getPos();"
        },
        {
          "total_lines": 5,
          "line_start": 206,
          "line_end": 210,
          "content": "if (n == null) {<br/>            return iRight == NO_POS;<br/>        }<br/><br/>        return iRight == n.getPos();"
        },
        {
          "total_lines": 5,
          "line_start": 450,
          "line_end": 454,
          "content": "if (n != null) {<br/>                n = n.setParent(store, null);<br/>            }<br/><br/>            store.setAccessor(index, n);"
        },
        {
          "total_lines": 3,
          "line_start": 341,
          "line_end": 343,
          "content": "row.keepInMemory(false);<br/><br/>            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");"
        },
        {
          "total_lines": 2,
          "line_start": 219,
          "line_end": 220,
          "content": "row  = (RowAVLDisk) store.get(this.row, false);<br/>            node = (NodeAVLDisk) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 310,
          "line_end": 311,
          "content": "row  = (RowAVLDisk) store.get(this.row, false);<br/>            node = (NodeAVLDisk) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 263,
          "line_end": 264,
          "content": "row  = (RowAVLDisk) store.get(this.row, false);<br/>            node = (NodeAVLDisk) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 363,
          "line_end": 364,
          "content": "row  = (RowAVLDisk) store.get(this.row, true);<br/>            node = (NodeAVLDisk) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 241,
          "line_end": 242,
          "content": "row  = (RowAVLDisk) store.get(this.row, false);<br/>            node = (NodeAVLDisk) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 336,
          "line_end": 337,
          "content": "row  = (RowAVLDisk) store.get(this.row, true);<br/>            node = (NodeAVLDisk) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 297,
          "line_end": 298,
          "content": "row  = (RowAVLDisk) store.get(this.row, false);<br/>            node = (NodeAVLDisk) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 386,
          "line_end": 387,
          "content": "row  = (RowAVLDisk) store.get(this.row, true);<br/>            node = (NodeAVLDisk) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 284,
          "line_end": 285,
          "content": "row  = (RowAVLDisk) store.get(this.row, false);<br/>            node = (NodeAVLDisk) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 115,
          "line_end": 116,
          "content": "RowInputInterface in,<br/>                       int id"
        },
        {
          "total_lines": 2,
          "line_start": 250,
          "line_end": 251,
          "content": "node.nRight         = findNode(store, node.iRight);<br/>            node.nRight.nParent = node;"
        },
        {
          "total_lines": 2,
          "line_start": 148,
          "line_end": 149,
          "content": "nLeft    = null;<br/>        nRight   = null;"
        },
        {
          "total_lines": 2,
          "line_start": 411,
          "line_end": 412,
          "content": "row  = (RowAVLDisk) store.get(this.row, true);<br/>            node = (NodeAVLDisk) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 228,
          "line_end": 229,
          "content": "node.nLeft         = findNode(store, node.iLeft);<br/>            node.nLeft.nParent = node;"
        },
        {
          "total_lines": 1,
          "line_start": 509,
          "line_end": 509,
          "content": "RowOutputInterface out, LongLookup lookup"
        },
        {
          "total_lines": 1,
          "line_start": 430,
          "line_end": 430,
          "content": "boolean isLeft, NodeAVL n"
        },
        {
          "total_lines": 1,
          "line_start": 447,
          "line_end": 447,
          "content": "PersistentStore store, Index index, NodeAVL n"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementResultUpdate.java",
      "loc_duplicate": 175,
      "clones": [
          {
          "total_lines": 31,
          "line_start": 211,
          "line_end": 241,
          "content": "case StatementTypes.CALL : {<br/>                break;<br/>            }<br/>            case StatementTypes.INSERT : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.SELECT_CURSOR :<br/>                break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.UPDATE_WHERE : {<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.MERGE : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }"
        },
        {
          "total_lines": 28,
          "line_start": 214,
          "line_end": 241,
          "content": "case StatementTypes.INSERT : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.SELECT_CURSOR :<br/>                break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.UPDATE_WHERE : {<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.MERGE : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }"
        },
        {
          "total_lines": 24,
          "line_start": 211,
          "line_end": 234,
          "content": "{<br/>                break;<br/>            }<br/>            case StatementTypes.INSERT : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.SELECT_CURSOR :<br/>                break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.UPDATE_WHERE : {<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.MERGE :"
        },
        {
          "total_lines": 22,
          "line_start": 220,
          "line_end": 241,
          "content": "case StatementTypes.SELECT_CURSOR :<br/>                break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.UPDATE_WHERE : {<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.MERGE : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }"
        },
        {
          "total_lines": 21,
          "line_start": 221,
          "line_end": 241,
          "content": "break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.UPDATE_WHERE : {<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.MERGE : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }"
        },
        {
          "total_lines": 18,
          "line_start": 211,
          "line_end": 228,
          "content": "case StatementTypes.CALL : {<br/>                break;<br/>            }<br/>            case StatementTypes.INSERT : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.SELECT_CURSOR :<br/>                break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.UPDATE_WHERE :"
        },
        {
          "total_lines": 17,
          "line_start": 211,
          "line_end": 227,
          "content": "case StatementTypes.CALL : {<br/>                break;<br/>            }<br/>            case StatementTypes.INSERT : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.SELECT_CURSOR :<br/>                break;<br/><br/>            case StatementTypes.DELETE_WHERE : {<br/>                session.getGrantee().checkDelete(targetTable);<br/><br/>                break;<br/>            }"
        },
        {
          "total_lines": 14,
          "line_start": 228,
          "line_end": 241,
          "content": "case StatementTypes.UPDATE_WHERE : {<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }<br/>            case StatementTypes.MERGE : {<br/>                session.getGrantee().checkInsert(targetTable,<br/>                                                 insertCheckColumns);<br/>                session.getGrantee().checkUpdate(targetTable,<br/>                                                 updateCheckColumns);<br/><br/>                break;<br/>            }"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestBug778213.java",
      "loc_duplicate": 20,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 171,
          "line_end": 176,
          "content": "TestResult            result;<br/>        TestCase              test;<br/>        java.util.Enumeration failures;<br/>        int                   count;<br/><br/>        result = new TestResult();"
        },
        {
          "total_lines": 5,
          "line_start": 185,
          "line_end": 189,
          "content": "failures = result.failures();<br/><br/>        while (failures.hasMoreElements()) {<br/>            System.out.println(failures.nextElement());<br/>        }"
        },
        {
          "total_lines": 3,
          "line_start": 179,
          "line_end": 181,
          "content": "test.run(result);<br/><br/>        count = result.failureCount();"
        },
        {
          "total_lines": 3,
          "line_start": 77,
          "line_end": 79,
          "content": "updateCount = pstmt.executeUpdate();<br/><br/>            assertTrue(\"expected update count of zero\", updateCount == 0);"
        },
        {
          "total_lines": 3,
          "line_start": 72,
          "line_end": 74,
          "content": "updateCount = pstmt.executeUpdate();<br/><br/>            assertTrue(\"expected update count of zero\", updateCount == 0);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/HsqlDateTime.java",
      "loc_duplicate": 39,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 324,
          "line_end": 327,
          "content": "setTimeInMillis(cal, t);<br/>            resetToTime(cal);<br/><br/>            return getTimeInMillis(cal);"
        },
        {
          "total_lines": 4,
          "line_start": 314,
          "line_end": 317,
          "content": "setTimeInMillis(cal, t);<br/>            resetToTime(cal);<br/><br/>            return getTimeInMillis(cal);"
        },
        {
          "total_lines": 3,
          "line_start": 303,
          "line_end": 305,
          "content": "resetToDate(cal);<br/><br/>            return getTimeInMillis(cal);"
        },
        {
          "total_lines": 3,
          "line_start": 345,
          "line_end": 347,
          "content": "resetToDate(cal);<br/><br/>            return getTimeInMillis(cal);"
        },
        {
          "total_lines": 2,
          "line_start": 559,
          "line_end": 560,
          "content": "-1,<br/>        Types.SQL_INTERVAL_HOUR"
        },
        {
          "total_lines": 2,
          "line_start": 563,
          "line_end": 564,
          "content": "-1,-1,<br/>        -1"
        },
        {
          "total_lines": 2,
          "line_start": 552,
          "line_end": 553,
          "content": "-1, Types.SQL_INTERVAL_YEAR,<br/>        -1"
        },
        {
          "total_lines": 2,
          "line_start": 95,
          "line_end": 96,
          "content": "TimeZone.getTimeZone(\"GMT\"),<br/>                defaultLocale"
        },
        {
          "total_lines": 2,
          "line_start": 92,
          "line_end": 93,
          "content": "TimeZone.getTimeZone(\"GMT\"),<br/>                                               defaultLocale"
        },
        {
          "total_lines": 2,
          "line_start": 555,
          "line_end": 556,
          "content": "Types.SQL_INTERVAL_MONTH,<br/>        Types.SQL_INTERVAL_MONTH"
        },
        {
          "total_lines": 2,
          "line_start": 89,
          "line_end": 90,
          "content": "TimeZone.getTimeZone(\"GMT\"),<br/>                                               defaultLocale"
        },
        {
          "total_lines": 2,
          "line_start": 553,
          "line_end": 554,
          "content": "-1, Types.SQL_INTERVAL_YEAR,<br/>        -1"
        },
        {
          "total_lines": 1,
          "line_start": 539,
          "line_end": 539,
          "content": "\"G\", \"G\", \"G\""
        },
        {
          "total_lines": 1,
          "line_start": 555,
          "line_end": 555,
          "content": "Types.SQL_INTERVAL_MONTH, Types.SQL_INTERVAL_MONTH"
        },
        {
          "total_lines": 1,
          "line_start": 563,
          "line_end": 563,
          "content": "-1,-1,-1"
        },
        {
          "total_lines": 1,
          "line_start": 76,
          "line_end": 76,
          "content": "TimeZone.getTimeZone(\"GMT\"), defaultLocale"
        },
        {
          "total_lines": 1,
          "line_start": 547,
          "line_end": 547,
          "content": "\"aaa\", \"aaa\", \"aaa\""
        },
        {
          "total_lines": 1,
          "line_start": 539,
          "line_end": 539,
          "content": "\"G\", \"G\", \"G\""
        },
        {
          "total_lines": 1,
          "line_start": 560,
          "line_end": 560,
          "content": "-1, Types.SQL_INTERVAL_HOUR"
        },
        {
          "total_lines": 1,
          "line_start": 557,
          "line_end": 557,
          "content": "-1, -1"
        },
        {
          "total_lines": 1,
          "line_start": 547,
          "line_end": 547,
          "content": "\"aaa\", \"aaa\", \"aaa\""
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/sample/Testdb.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 38,
          "line_end": 39,
          "content": "import java.sql.SQLException;<br/>import java.sql.Statement;"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import java.sql.Connection;<br/>import java.sql.DriverManager;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/HsqlArrayHeap.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 95,
          "line_end": 95,
          "content": "IllegalArgumentException, RuntimeException"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/cmdline/SqltoolRB.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 286,
          "line_end": 287,
          "content": "vrb.setMissingPosValueBehavior(ValidatingResourceBundle.NOOP_BEHAVIOR);<br/>        vrb.setMissingPropertyBehavior(ValidatingResourceBundle.NOOP_BEHAVIOR);"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.lib.ValidatingResourceBundle;<br/>import org.hsqldb.lib.RefCapableRBInterface;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestStoredProcedure.java",
      "loc_duplicate": 118,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 270,
          "line_end": 275,
          "content": "rs = cs.getResultSet();<br/><br/>            rs.next();<br/>            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");<br/>            assertEquals(rs.getString(2), \"LOBS\");<br/>            rs.close();"
        },
        {
          "total_lines": 6,
          "line_start": 234,
          "line_end": 239,
          "content": "rs = cs.getResultSet();<br/><br/>            rs.next();<br/>            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");<br/>            assertEquals(rs.getString(2), \"LOBS\");<br/>            rs.close();"
        },
        {
          "total_lines": 4,
          "line_start": 264,
          "line_end": 267,
          "content": "rs.next();<br/>        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");<br/>        assertEquals(rs.getString(2), \"LOB_IDS\");<br/>        rs.close();"
        },
        {
          "total_lines": 4,
          "line_start": 280,
          "line_end": 283,
          "content": "rs.next();<br/>        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");<br/>        assertEquals(rs.getString(2), \"LOB_IDS\");<br/>        rs.close();"
        },
        {
          "total_lines": 4,
          "line_start": 314,
          "line_end": 317,
          "content": "rs.next();<br/>        assertEquals(rs.getString(1), \"INFORMATION_SCHEMA\");<br/>        assertEquals(rs.getString(2), \"_SYSTEM\");<br/>        rs.close();"
        },
        {
          "total_lines": 4,
          "line_start": 302,
          "line_end": 305,
          "content": "rs.next();<br/>        assertEquals(rs.getString(1), \"INFORMATION_SCHEMA\");<br/>        assertEquals(rs.getString(2), \"_SYSTEM\");<br/>        rs.close();"
        },
        {
          "total_lines": 4,
          "line_start": 234,
          "line_end": 237,
          "content": "rs = cs.getResultSet();<br/><br/>            rs.next();<br/>            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");"
        },
        {
          "total_lines": 4,
          "line_start": 350,
          "line_end": 353,
          "content": "rs = cs.getResultSet();<br/><br/>            rs.next();<br/>            assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));"
        },
        {
          "total_lines": 4,
          "line_start": 270,
          "line_end": 273,
          "content": "rs = cs.getResultSet();<br/><br/>            rs.next();<br/>            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");"
        },
        {
          "total_lines": 4,
          "line_start": 375,
          "line_end": 378,
          "content": "rs = cs.getResultSet();<br/><br/>            rs.next();<br/>            assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));"
        },
        {
          "total_lines": 3,
          "line_start": 462,
          "line_end": 464,
          "content": "intparam[0] = rs.getInt(1);<br/><br/>            rs.close();"
        },
        {
          "total_lines": 3,
          "line_start": 368,
          "line_end": 370,
          "content": "rs.next();<br/>        assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));<br/>        rs.close();"
        },
        {
          "total_lines": 3,
          "line_start": 281,
          "line_end": 283,
          "content": "assertEquals(rs.getString(1), \"SYSTEM_LOBS\");<br/>        assertEquals(rs.getString(2), \"LOB_IDS\");<br/>        rs.close();"
        },
        {
          "total_lines": 3,
          "line_start": 375,
          "line_end": 377,
          "content": "rs = cs.getResultSet();<br/><br/>            rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 265,
          "line_end": 267,
          "content": "assertEquals(rs.getString(1), \"SYSTEM_LOBS\");<br/>        assertEquals(rs.getString(2), \"LOB_IDS\");<br/>        rs.close();"
        },
        {
          "total_lines": 3,
          "line_start": 390,
          "line_end": 392,
          "content": "rs.next();<br/>        assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));<br/>        rs.close();"
        },
        {
          "total_lines": 3,
          "line_start": 413,
          "line_end": 415,
          "content": "rs.next();<br/>        assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));<br/>        rs.close();"
        },
        {
          "total_lines": 3,
          "line_start": 148,
          "line_end": 150,
          "content": "rs.next();<br/><br/>            b = rs.getBoolean(1);"
        },
        {
          "total_lines": 3,
          "line_start": 343,
          "line_end": 345,
          "content": "rs.next();<br/>        assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));<br/>        rs.close();"
        },
        {
          "total_lines": 3,
          "line_start": 442,
          "line_end": 444,
          "content": "intparam[0] = rs.getInt(1);<br/><br/>            rs.close();"
        },
        {
          "total_lines": 3,
          "line_start": 236,
          "line_end": 238,
          "content": "rs.next();<br/>            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");<br/>            assertEquals(rs.getString(2), \"LOBS\");"
        },
        {
          "total_lines": 3,
          "line_start": 350,
          "line_end": 352,
          "content": "rs = cs.getResultSet();<br/><br/>            rs.next();"
        },
        {
          "total_lines": 3,
          "line_start": 272,
          "line_end": 274,
          "content": "rs.next();<br/>            assertEquals(rs.getString(1), \"SYSTEM_LOBS\");<br/>            assertEquals(rs.getString(2), \"LOBS\");"
        },
        {
          "total_lines": 3,
          "line_start": 172,
          "line_end": 174,
          "content": "rs.next();<br/><br/>            b = rs.getBoolean(1);"
        },
        {
          "total_lines": 2,
          "line_start": 274,
          "line_end": 275,
          "content": "assertEquals(rs.getString(2), \"LOBS\");<br/>            rs.close();"
        },
        {
          "total_lines": 2,
          "line_start": 110,
          "line_end": 111,
          "content": "rs.next();<br/>            assertEquals(value, 2);"
        },
        {
          "total_lines": 2,
          "line_start": 413,
          "line_end": 414,
          "content": "rs.next();<br/>        assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));"
        },
        {
          "total_lines": 2,
          "line_start": 368,
          "line_end": 369,
          "content": "rs.next();<br/>        assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));"
        },
        {
          "total_lines": 2,
          "line_start": 343,
          "line_end": 344,
          "content": "rs.next();<br/>        assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));"
        },
        {
          "total_lines": 2,
          "line_start": 363,
          "line_end": 364,
          "content": "assertFalse(isResult);<br/>        cs.getMoreResults();"
        },
        {
          "total_lines": 2,
          "line_start": 264,
          "line_end": 265,
          "content": "rs.next();<br/>        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");"
        },
        {
          "total_lines": 2,
          "line_start": 140,
          "line_end": 141,
          "content": "rs.close();<br/>            assertTrue(\"test result not correct\", b);"
        },
        {
          "total_lines": 2,
          "line_start": 152,
          "line_end": 153,
          "content": "rs.close();<br/>            assertTrue(\"test result not correct\", b);"
        },
        {
          "total_lines": 2,
          "line_start": 338,
          "line_end": 339,
          "content": "assertFalse(isResult);<br/>        cs.getMoreResults();"
        },
        {
          "total_lines": 2,
          "line_start": 238,
          "line_end": 239,
          "content": "assertEquals(rs.getString(2), \"LOBS\");<br/>            rs.close();"
        },
        {
          "total_lines": 2,
          "line_start": 105,
          "line_end": 106,
          "content": "rs.next();<br/>            assertEquals(value, 2);"
        },
        {
          "total_lines": 2,
          "line_start": 422,
          "line_end": 423,
          "content": "rs.next();<br/>            assertEquals(\"INFORMATION_SCHEMA\",rs.getString(2));"
        },
        {
          "total_lines": 2,
          "line_start": 280,
          "line_end": 281,
          "content": "rs.next();<br/>        assertEquals(rs.getString(1), \"SYSTEM_LOBS\");"
        },
        {
          "total_lines": 2,
          "line_start": 399,
          "line_end": 400,
          "content": "rs.next();<br/>            assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));"
        },
        {
          "total_lines": 2,
          "line_start": 390,
          "line_end": 391,
          "content": "rs.next();<br/>        assertEquals(\"INFORMATION_SCHEMA\", rs.getString(2));"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/RowStoreAVL.java",
      "loc_duplicate": 32,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 173,
          "line_end": 179,
          "content": "int position = key.getPosition();<br/><br/>        if (position >= accessorList.length) {<br/>            throw Error.runtimeError(ErrorCode.U_S0500, \"RowStoreAVL\");<br/>        }<br/><br/>        return accessorList[position];"
        },
        {
          "total_lines": 5,
          "line_start": 175,
          "line_end": 179,
          "content": "if (position >= accessorList.length) {<br/>            throw Error.runtimeError(ErrorCode.U_S0500, \"RowStoreAVL\");<br/>        }<br/><br/>        return accessorList[position];"
        },
        {
          "total_lines": 4,
          "line_start": 313,
          "line_end": 316,
          "content": "indexList    = keys;<br/>            accessorList = new CachedObject[indexList.length];<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 314,
          "line_end": 316,
          "content": "accessorList = new CachedObject[indexList.length];<br/><br/>            return;"
        },
        {
          "total_lines": 2,
          "line_start": 203,
          "line_end": 204,
          "content": "baseElementCount = count;<br/>                searchCost       = null;"
        },
        {
          "total_lines": 2,
          "line_start": 242,
          "line_end": 243,
          "content": "baseElementCount = count;<br/>                    searchCost       = null;"
        },
        {
          "total_lines": 2,
          "line_start": 116,
          "line_end": 117,
          "content": "CachedObject object, int mode,<br/>                           int[] colMap"
        },
        {
          "total_lines": 2,
          "line_start": 465,
          "line_end": 466,
          "content": "PersistentStore other,<br/>                               int colindex, int adjust"
        },
        {
          "total_lines": 1,
          "line_start": 112,
          "line_end": 112,
          "content": "int mode, int[] colMap"
        },
        {
          "total_lines": 1,
          "line_start": 466,
          "line_end": 466,
          "content": "int colindex, int adjust"
        },
        {
          "total_lines": 1,
          "line_start": 110,
          "line_end": 110,
          "content": "CachedObject object, boolean tx"
        },
        {
          "total_lines": 1,
          "line_start": 116,
          "line_end": 116,
          "content": "CachedObject object, int mode"
        },
        {
          "total_lines": 1,
          "line_start": 130,
          "line_end": 130,
          "content": "CachedObject object, RowInputInterface in"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/index/Index.java",
      "loc_duplicate": 26,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 168,
          "line_end": 171,
          "content": "Session session, PersistentStore store,<br/>                                    Object[] rowdata, int matchCount,<br/>                                    int distinctCount, int compareType,<br/>                                    boolean reversed, boolean[] map"
        },
        {
          "total_lines": 2,
          "line_start": 235,
          "line_end": 236,
          "content": "Session session, Object[] a, Object[] b,<br/>                                   int[] rowColMap"
        },
        {
          "total_lines": 2,
          "line_start": 202,
          "line_end": 203,
          "content": "Session session,<br/>                                           PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 182,
          "line_end": 183,
          "content": "Session session, PersistentStore store,<br/>                                    Object[] rowdata"
        },
        {
          "total_lines": 2,
          "line_start": 238,
          "line_end": 239,
          "content": "Session session, Object[] a, Object[] b,<br/>                                   int[] rowColMap, int fieldCount"
        },
        {
          "total_lines": 2,
          "line_start": 220,
          "line_end": 221,
          "content": "Session session, PersistentStore store,<br/>                               int distinctCount"
        },
        {
          "total_lines": 2,
          "line_start": 194,
          "line_end": 195,
          "content": "Session session, PersistentStore store,<br/>                                    Object[] rowdata, int[] rowColMap"
        },
        {
          "total_lines": 2,
          "line_start": 156,
          "line_end": 157,
          "content": "Session session, PersistentStore store,<br/>                                Object[] rowdata, int[] rowColMap"
        },
        {
          "total_lines": 2,
          "line_start": 212,
          "line_end": 213,
          "content": "Session session, PersistentStore store,<br/>                                int distinctCount"
        },
        {
          "total_lines": 1,
          "line_start": 154,
          "line_end": 154,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 139,
          "line_end": 139,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 244,
          "line_end": 244,
          "content": "Session session, Object[] a, Object[] b"
        },
        {
          "total_lines": 1,
          "line_start": 152,
          "line_end": 152,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 143,
          "line_end": 143,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 247,
          "line_end": 247,
          "content": "Session session, Object[] a, Object[] b"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/LockFile.java",
      "loc_duplicate": 86,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 1665,
          "line_end": 1670,
          "content": "LockFile.FileSecurityException,<br/>           LockFile.LockHeldExternallyException,<br/>           LockFile.UnexpectedFileNotFoundException,<br/>           LockFile.UnexpectedEndOfFileException,<br/>           LockFile.UnexpectedFileIOException, LockFile.WrongLengthException,<br/>           LockFile.WrongMagicException"
        },
        {
          "total_lines": 6,
          "line_start": 1577,
          "line_end": 1582,
          "content": "LockFile.FileSecurityException,<br/>           LockFile.LockHeldExternallyException,<br/>           LockFile.UnexpectedFileNotFoundException,<br/>           LockFile.UnexpectedEndOfFileException,<br/>           LockFile.UnexpectedFileIOException, LockFile.WrongLengthException,<br/>           LockFile.WrongMagicException"
        },
        {
          "total_lines": 5,
          "line_start": 1666,
          "line_end": 1670,
          "content": "LockFile.LockHeldExternallyException,<br/>           LockFile.UnexpectedFileNotFoundException,<br/>           LockFile.UnexpectedEndOfFileException,<br/>           LockFile.UnexpectedFileIOException, LockFile.WrongLengthException,<br/>           LockFile.WrongMagicException"
        },
        {
          "total_lines": 5,
          "line_start": 1577,
          "line_end": 1581,
          "content": "LockFile.FileSecurityException,<br/>           LockFile.LockHeldExternallyException,<br/>           LockFile.UnexpectedFileNotFoundException,<br/>           LockFile.UnexpectedEndOfFileException,<br/>           LockFile.UnexpectedFileIOException"
        },
        {
          "total_lines": 5,
          "line_start": 1665,
          "line_end": 1669,
          "content": "LockFile.FileSecurityException,<br/>           LockFile.LockHeldExternallyException,<br/>           LockFile.UnexpectedFileNotFoundException,<br/>           LockFile.UnexpectedEndOfFileException,<br/>           LockFile.UnexpectedFileIOException"
        },
        {
          "total_lines": 5,
          "line_start": 1578,
          "line_end": 1582,
          "content": "LockFile.LockHeldExternallyException,<br/>           LockFile.UnexpectedFileNotFoundException,<br/>           LockFile.UnexpectedEndOfFileException,<br/>           LockFile.UnexpectedFileIOException, LockFile.WrongLengthException,<br/>           LockFile.WrongMagicException"
        },
        {
          "total_lines": 4,
          "line_start": 1578,
          "line_end": 1581,
          "content": "LockFile.LockHeldExternallyException,<br/>           LockFile.UnexpectedFileNotFoundException,<br/>           LockFile.UnexpectedEndOfFileException,<br/>           LockFile.UnexpectedFileIOException"
        },
        {
          "total_lines": 4,
          "line_start": 1666,
          "line_end": 1669,
          "content": "LockFile.LockHeldExternallyException,<br/>           LockFile.UnexpectedFileNotFoundException,<br/>           LockFile.UnexpectedEndOfFileException,<br/>           LockFile.UnexpectedFileIOException"
        },
        {
          "total_lines": 3,
          "line_start": 2218,
          "line_end": 2220,
          "content": "final LockFile lockFile,<br/>                                         final String inMethod,<br/>                                         final IOException reason"
        },
        {
          "total_lines": 3,
          "line_start": 1228,
          "line_end": 1230,
          "content": "LockFile.FileSecurityException,<br/>           LockFile.UnexpectedEndOfFileException,<br/>           LockFile.UnexpectedFileIOException"
        },
        {
          "total_lines": 3,
          "line_start": 1997,
          "line_end": 1999,
          "content": "final LockFile lockFile,<br/>                                             final String inMethod,<br/>                                             final IOException reason"
        },
        {
          "total_lines": 3,
          "line_start": 1266,
          "line_end": 1268,
          "content": "LockFile.FileSecurityException,<br/>           LockFile.UnexpectedEndOfFileException,<br/>           LockFile.UnexpectedFileIOException"
        },
        {
          "total_lines": 3,
          "line_start": 1199,
          "line_end": 1201,
          "content": "HsqlTimer.cancel(timerTask);<br/><br/>            timerTask = null;"
        },
        {
          "total_lines": 2,
          "line_start": 1669,
          "line_end": 1670,
          "content": "LockFile.UnexpectedFileIOException, LockFile.WrongLengthException,<br/>           LockFile.WrongMagicException"
        },
        {
          "total_lines": 2,
          "line_start": 1998,
          "line_end": 1999,
          "content": "final String inMethod,<br/>                                             final IOException reason"
        },
        {
          "total_lines": 2,
          "line_start": 45,
          "line_end": 46,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 1267,
          "line_end": 1268,
          "content": "LockFile.UnexpectedEndOfFileException,<br/>           LockFile.UnexpectedFileIOException"
        },
        {
          "total_lines": 2,
          "line_start": 783,
          "line_end": 784,
          "content": "LockFile.FileSecurityException,<br/>           LockFile.LockHeldExternallyException"
        },
        {
          "total_lines": 2,
          "line_start": 633,
          "line_end": 634,
          "content": "ErrorCode.LOCK_FILE_ACQUISITION_FAILURE,<br/>                              e.getMessage()"
        },
        {
          "total_lines": 2,
          "line_start": 2218,
          "line_end": 2219,
          "content": "final LockFile lockFile,<br/>                                         final String inMethod"
        },
        {
          "total_lines": 2,
          "line_start": 2219,
          "line_end": 2220,
          "content": "final String inMethod,<br/>                                         final IOException reason"
        },
        {
          "total_lines": 2,
          "line_start": 2309,
          "line_end": 2310,
          "content": "final LockFile lockFile,<br/>                                    final String inMethod"
        },
        {
          "total_lines": 2,
          "line_start": 1997,
          "line_end": 1998,
          "content": "final LockFile lockFile,<br/>                                             final String inMethod"
        },
        {
          "total_lines": 2,
          "line_start": 2353,
          "line_end": 2354,
          "content": "final LockFile lockFile,<br/>                                   final String inMethod"
        },
        {
          "total_lines": 2,
          "line_start": 1581,
          "line_end": 1582,
          "content": "LockFile.UnexpectedFileIOException, LockFile.WrongLengthException,<br/>           LockFile.WrongMagicException"
        },
        {
          "total_lines": 2,
          "line_start": 642,
          "line_end": 643,
          "content": "ErrorCode.LOCK_FILE_ACQUISITION_FAILURE,<br/>                              e.getMessage()"
        },
        {
          "total_lines": 2,
          "line_start": 785,
          "line_end": 786,
          "content": "LockFile.UnexpectedEndOfFileException,<br/>           LockFile.UnexpectedFileIOException"
        },
        {
          "total_lines": 2,
          "line_start": 1229,
          "line_end": 1230,
          "content": "LockFile.UnexpectedEndOfFileException,<br/>           LockFile.UnexpectedFileIOException"
        },
        {
          "total_lines": 1,
          "line_start": 788,
          "line_end": 788,
          "content": "LockFile.WrongLengthException, LockFile.WrongMagicException"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/TransferDb.java",
      "loc_duplicate": 48,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 336,
          "line_end": 340,
          "content": "while (result.next()) {<br/>                    ret.addElement(result.getString(1));<br/>                }<br/><br/>                result.close();"
        },
        {
          "total_lines": 5,
          "line_start": 126,
          "line_end": 130,
          "content": "try {<br/>                srcStatement.close();<br/>            } catch (SQLException e) {}<br/><br/>            srcStatement = null;"
        },
        {
          "total_lines": 5,
          "line_start": 109,
          "line_end": 113,
          "content": "try {<br/>                srcStatement.close();<br/>            } catch (SQLException e) {}<br/><br/>            srcStatement = null;"
        },
        {
          "total_lines": 5,
          "line_start": 887,
          "line_end": 891,
          "content": "try {<br/>                srcStatement.close();<br/>            } catch (SQLException e) {}<br/><br/>            srcStatement = null;"
        },
        {
          "total_lines": 5,
          "line_start": 304,
          "line_end": 308,
          "content": "while (result.next()) {<br/>                    ret.addElement(result.getString(1));<br/>                }<br/><br/>                result.close();"
        },
        {
          "total_lines": 4,
          "line_start": 671,
          "line_end": 674,
          "content": "CreateIndex =<br/>                                CreateIndex.substring(<br/>                                    0, CreateIndex.length() - 1) + \");\";<br/>                            DropIndex += \";\";"
        },
        {
          "total_lines": 4,
          "line_start": 721,
          "line_end": 724,
          "content": "CreateIndex =<br/>                        CreateIndex.substring(0, CreateIndex.length() - 1)<br/>                        + \");\";<br/>                    DropIndex += \";\";"
        },
        {
          "total_lines": 3,
          "line_start": 492,
          "line_end": 494,
          "content": "TTable.Stmts.sDatabaseToConvert,<br/>                                     TTable.Stmts.sSchema,<br/>                                     TTable.Stmts.sSourceTable"
        },
        {
          "total_lines": 3,
          "line_start": 601,
          "line_end": 603,
          "content": "TTable.Stmts.sDatabaseToConvert,<br/>                                              TTable.Stmts.sSchema,<br/>                                              TTable.Stmts.sSourceTable"
        },
        {
          "total_lines": 2,
          "line_start": 835,
          "line_end": 836,
          "content": "select_rsmdata,<br/>                                                     datatype, col"
        },
        {
          "total_lines": 2,
          "line_start": 429,
          "line_end": 430,
          "content": "TransferTable TTable,<br/>                           DataAccessPoint Dest"
        },
        {
          "total_lines": 2,
          "line_start": 837,
          "line_end": 838,
          "content": "TTable,<br/>                        select_rsmdata, datatype"
        },
        {
          "total_lines": 2,
          "line_start": 196,
          "line_end": 197,
          "content": "String statement, TransferResultSet r,<br/>                 int iMaxRows"
        },
        {
          "total_lines": 1,
          "line_start": 838,
          "line_end": 838,
          "content": "select_rsmdata, datatype, col"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/tar/TarGenerator.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 190,
          "line_end": 190,
          "content": "FileNotFoundException, TarMalformatException"
        },
        {
          "total_lines": 1,
          "line_start": 477,
          "line_end": 477,
          "content": "FileNotFoundException, TarMalformatException"
        },
        {
          "total_lines": 1,
          "line_start": 185,
          "line_end": 185,
          "content": "FileNotFoundException, TarMalformatException"
        },
        {
          "total_lines": 1,
          "line_start": 196,
          "line_end": 196,
          "content": "FileNotFoundException, TarMalformatException"
        },
        {
          "total_lines": 1,
          "line_start": 445,
          "line_end": 445,
          "content": "FileNotFoundException, TarMalformatException"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/Charset.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 197,
          "line_end": 197,
          "content": "Session session, SchemaObject parentObject"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/auth/AuthUtils.java",
      "loc_duplicate": 7,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 90,
          "line_end": 96,
          "content": "if (rs != null) try {<br/>                rs.close();<br/>            } catch (SQLException se) {<br/>                logger.error(<br/>                        \"Failed to close ResultSet for retrieving db name\");<br/>            }<br/>            rs = null;  // Encourage GC"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/FunctionSQL.java",
      "loc_duplicate": 346,
      "clones": [
          {
          "total_lines": 15,
          "line_start": 983,
          "line_end": 997,
          "content": "case Tokens.BOTH :<br/>                        leading = trailing = true;<br/>                        break;<br/><br/>                    case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;<br/><br/>                    default :<br/>                        throw Error.runtimeError(ErrorCode.U_S0500,<br/>                                                 \"FunctionSQL\");"
        },
        {
          "total_lines": 15,
          "line_start": 1079,
          "line_end": 1093,
          "content": "case Tokens.BOTH :<br/>                        leading = trailing = true;<br/>                        break;<br/><br/>                    case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;<br/><br/>                    default :<br/>                        throw Error.runtimeError(ErrorCode.U_S0500,<br/>                                                 \"FunctionSQL\");"
        },
        {
          "total_lines": 11,
          "line_start": 1079,
          "line_end": 1089,
          "content": "case Tokens.BOTH :<br/>                        leading = trailing = true;<br/>                        break;<br/><br/>                    case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;"
        },
        {
          "total_lines": 11,
          "line_start": 1337,
          "line_end": 1347,
          "content": "if (nodes[0].dataType == null) {<br/>                    throw Error.error(ErrorCode.X_42567);<br/>                }<br/><br/>                if (!nodes[0].dataType.isArrayType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }<br/><br/>                dataType = Type.SQL_INTEGER;<br/><br/>                break;"
        },
        {
          "total_lines": 11,
          "line_start": 987,
          "line_end": 997,
          "content": "case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;<br/><br/>                    default :<br/>                        throw Error.runtimeError(ErrorCode.U_S0500,<br/>                                                 \"FunctionSQL\");"
        },
        {
          "total_lines": 11,
          "line_start": 1324,
          "line_end": 1334,
          "content": "if (nodes[0].dataType == null) {<br/>                    throw Error.error(ErrorCode.X_42567);<br/>                }<br/><br/>                if (!nodes[0].dataType.isArrayType()) {<br/>                    throw Error.error(ErrorCode.X_42563);<br/>                }<br/><br/>                dataType = Type.SQL_INTEGER;<br/><br/>                break;"
        },
        {
          "total_lines": 11,
          "line_start": 983,
          "line_end": 993,
          "content": "case Tokens.BOTH :<br/>                        leading = trailing = true;<br/>                        break;<br/><br/>                    case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;"
        },
        {
          "total_lines": 11,
          "line_start": 1083,
          "line_end": 1093,
          "content": "case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;<br/><br/>                    default :<br/>                        throw Error.runtimeError(ErrorCode.U_S0500,<br/>                                                 \"FunctionSQL\");"
        },
        {
          "total_lines": 10,
          "line_start": 984,
          "line_end": 993,
          "content": "leading = trailing = true;<br/>                        break;<br/><br/>                    case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;"
        },
        {
          "total_lines": 10,
          "line_start": 1080,
          "line_end": 1089,
          "content": "leading = trailing = true;<br/>                        break;<br/><br/>                    case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;"
        },
        {
          "total_lines": 10,
          "line_start": 988,
          "line_end": 997,
          "content": "leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;<br/><br/>                    default :<br/>                        throw Error.runtimeError(ErrorCode.U_S0500,<br/>                                                 \"FunctionSQL\");"
        },
        {
          "total_lines": 10,
          "line_start": 1084,
          "line_end": 1093,
          "content": "leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;<br/><br/>                    default :<br/>                        throw Error.runtimeError(ErrorCode.U_S0500,<br/>                                                 \"FunctionSQL\");"
        },
        {
          "total_lines": 9,
          "line_start": 1085,
          "line_end": 1093,
          "content": "break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;<br/><br/>                    default :<br/>                        throw Error.runtimeError(ErrorCode.U_S0500,<br/>                                                 \"FunctionSQL\");"
        },
        {
          "total_lines": 9,
          "line_start": 1081,
          "line_end": 1089,
          "content": "break;<br/><br/>                    case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;"
        },
        {
          "total_lines": 9,
          "line_start": 989,
          "line_end": 997,
          "content": "break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;<br/><br/>                    default :<br/>                        throw Error.runtimeError(ErrorCode.U_S0500,<br/>                                                 \"FunctionSQL\");"
        },
        {
          "total_lines": 9,
          "line_start": 985,
          "line_end": 993,
          "content": "break;<br/><br/>                    case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;"
        },
        {
          "total_lines": 7,
          "line_start": 985,
          "line_end": 991,
          "content": "break;<br/><br/>                    case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :"
        },
        {
          "total_lines": 7,
          "line_start": 1123,
          "line_end": 1129,
          "content": "if (data[3] == null) {<br/>                        return null;<br/>                    }<br/><br/>                    value = Type.SQL_BIGINT.convertToType(session, data[3],<br/>                                                          nodes[3].dataType);<br/>                    length = ((Number) value).longValue();"
        },
        {
          "total_lines": 7,
          "line_start": 1085,
          "line_end": 1091,
          "content": "break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;<br/><br/>                    default :"
        },
        {
          "total_lines": 7,
          "line_start": 1079,
          "line_end": 1085,
          "content": "case Tokens.BOTH :<br/>                        leading = trailing = true;<br/>                        break;<br/><br/>                    case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;"
        },
        {
          "total_lines": 7,
          "line_start": 1026,
          "line_end": 1032,
          "content": "if (data[3] == null) {<br/>                        return null;<br/>                    }<br/><br/>                    value = Type.SQL_BIGINT.convertToType(session, data[3],<br/>                                                          nodes[3].dataType);<br/>                    length = ((Number) value).longValue();"
        },
        {
          "total_lines": 7,
          "line_start": 1083,
          "line_end": 1089,
          "content": "case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;"
        },
        {
          "total_lines": 7,
          "line_start": 987,
          "line_end": 993,
          "content": "case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;"
        },
        {
          "total_lines": 7,
          "line_start": 1081,
          "line_end": 1087,
          "content": "break;<br/><br/>                    case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;<br/><br/>                    case Tokens.TRAILING :"
        },
        {
          "total_lines": 7,
          "line_start": 989,
          "line_end": 995,
          "content": "break;<br/><br/>                    case Tokens.TRAILING :<br/>                        trailing = true;<br/>                        break;<br/><br/>                    default :"
        },
        {
          "total_lines": 7,
          "line_start": 983,
          "line_end": 989,
          "content": "case Tokens.BOTH :<br/>                        leading = trailing = true;<br/>                        break;<br/><br/>                    case Tokens.LEADING :<br/>                        leading = true;<br/>                        break;"
        },
        {
          "total_lines": 3,
          "line_start": 859,
          "line_end": 861,
          "content": "data[3],<br/>                                                ValuePool.INTEGER_1,<br/>                                                Type.SQL_INTEGER"
        },
        {
          "total_lines": 3,
          "line_start": 400,
          "line_end": 402,
          "content": "Tokens.COMMA,<br/>                    Tokens.QUESTION, Tokens.X_OPTION, 2, Tokens.COMMA,<br/>                    Tokens.QUESTION"
        },
        {
          "total_lines": 3,
          "line_start": 879,
          "line_end": 881,
          "content": "data[3],<br/>                                                ValuePool.INTEGER_1,<br/>                                                Type.SQL_INTEGER"
        },
        {
          "total_lines": 2,
          "line_start": 879,
          "line_end": 880,
          "content": "session, data[3],<br/>                                                ValuePool.INTEGER_1"
        },
        {
          "total_lines": 2,
          "line_start": 366,
          "line_end": 367,
          "content": "parseList = doubleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 859,
          "line_end": 860,
          "content": "session, data[3],<br/>                                                ValuePool.INTEGER_1"
        },
        {
          "total_lines": 2,
          "line_start": 1535,
          "line_end": 1536,
          "content": "Types.SQL_VARCHAR, dataType.precision,<br/>                            dataType.getCollation()"
        },
        {
          "total_lines": 2,
          "line_start": 414,
          "line_end": 415,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 866,
          "line_end": 867,
          "content": "data[1],<br/>                                                 nodes[0].dataType"
        },
        {
          "total_lines": 2,
          "line_start": 351,
          "line_end": 352,
          "content": "parseList = doubleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 400,
          "line_end": 401,
          "content": "Tokens.OPENBRACKET, Tokens.QUESTION, Tokens.COMMA,<br/>                    Tokens.QUESTION, Tokens.X_OPTION, 2"
        },
        {
          "total_lines": 2,
          "line_start": 346,
          "line_end": 347,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 491,
          "line_end": 492,
          "content": "parseList = noParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 401,
          "line_end": 402,
          "content": "2, Tokens.COMMA,<br/>                    Tokens.QUESTION"
        },
        {
          "total_lines": 2,
          "line_start": 526,
          "line_end": 527,
          "content": "parseList = optionalIntegerParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 143,
          "line_end": 144,
          "content": "Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION,<br/>        Tokens.COMMA, Tokens.QUESTION"
        },
        {
          "total_lines": 2,
          "line_start": 336,
          "line_end": 337,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 341,
          "line_end": 342,
          "content": "parseList = doubleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 356,
          "line_end": 357,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 321,
          "line_end": 322,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 419,
          "line_end": 420,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 747,
          "line_end": 748,
          "content": "session,<br/>                    data[0], data[1]"
        },
        {
          "total_lines": 2,
          "line_start": 516,
          "line_end": 517,
          "content": "parseList = optionalIntegerParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 453,
          "line_end": 454,
          "content": "Tokens.QUESTION,<br/>                    Tokens.X_OPTION"
        },
        {
          "total_lines": 2,
          "line_start": 864,
          "line_end": 865,
          "content": "data[0], data[1],<br/>                                                nodes[0].dataType"
        },
        {
          "total_lines": 2,
          "line_start": 486,
          "line_end": 487,
          "content": "parseList = noParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 496,
          "line_end": 497,
          "content": "parseList = noParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 521,
          "line_end": 522,
          "content": "parseList = optionalIntegerParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 139,
          "line_end": 140,
          "content": "Tokens.QUESTION,<br/>        Tokens.COMMA, Tokens.QUESTION"
        },
        {
          "total_lines": 2,
          "line_start": 1955,
          "line_end": 1956,
          "content": "sb.append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 531,
          "line_end": 532,
          "content": "parseList = optionalIntegerParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 381,
          "line_end": 382,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 477,
          "line_end": 478,
          "content": "parseList = noParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 361,
          "line_end": 362,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 452,
          "line_end": 453,
          "content": "Tokens.QUESTION,<br/>                    Tokens.X_OPTION"
        },
        {
          "total_lines": 2,
          "line_start": 1597,
          "line_end": 1598,
          "content": "Types.SQL_VARCHAR, dataType.precision,<br/>                            dataType.getCollation()"
        },
        {
          "total_lines": 2,
          "line_start": 143,
          "line_end": 144,
          "content": "Tokens.QUESTION,<br/>        Tokens.COMMA, Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION"
        },
        {
          "total_lines": 2,
          "line_start": 511,
          "line_end": 512,
          "content": "parseList = noParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 326,
          "line_end": 327,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 376,
          "line_end": 377,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 2001,
          "line_end": 2002,
          "content": "sb.append(')');<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 506,
          "line_end": 507,
          "content": "parseList = noParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 461,
          "line_end": 462,
          "content": "parseList = noParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 331,
          "line_end": 332,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 371,
          "line_end": 372,
          "content": "parseList = singleParamList;<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 472,
          "line_end": 473,
          "content": "parseList = noParamList;<br/>                break;"
        },
        {
          "total_lines": 1,
          "line_start": 884,
          "line_end": 884,
          "content": "session, data[1]"
        },
        {
          "total_lines": 1,
          "line_start": 454,
          "line_end": 454,
          "content": "Tokens.X_OPTION, 2"
        },
        {
          "total_lines": 1,
          "line_start": 395,
          "line_end": 395,
          "content": "Tokens.QUESTION, Tokens.X_OPTION"
        },
        {
          "total_lines": 1,
          "line_start": 394,
          "line_end": 394,
          "content": "Tokens.QUESTION, Tokens.X_OPTION"
        },
        {
          "total_lines": 1,
          "line_start": 1008,
          "line_end": 1008,
          "content": "session, data[2]"
        },
        {
          "total_lines": 1,
          "line_start": 864,
          "line_end": 864,
          "content": "session, data[0], data[1]"
        },
        {
          "total_lines": 1,
          "line_start": 453,
          "line_end": 453,
          "content": "Tokens.X_OPTION, 2"
        },
        {
          "total_lines": 1,
          "line_start": 886,
          "line_end": 886,
          "content": "session, data[1]"
        },
        {
          "total_lines": 1,
          "line_start": 139,
          "line_end": 139,
          "content": "Tokens.QUESTION, Tokens.COMMA, Tokens.QUESTION"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/index/IndexAVL.java",
      "loc_duplicate": 323,
      "clones": [
          {
          "total_lines": 21,
          "line_start": 812,
          "line_end": 832,
          "content": "int i = colTypes[j].compare(session, a[colIndex[j]],<br/>                                        b[colIndex[j]]);<br/><br/>            if (i != 0) {<br/>                if (isSimpleOrder) {<br/>                    return i;<br/>                }<br/><br/>                boolean nulls = a[colIndex[j]] == null<br/>                                || b[colIndex[j]] == null;<br/><br/>                if (colDesc[j] && !nulls) {<br/>                    i = -i;<br/>                }<br/><br/>                if (nullsLast[j] && nulls) {<br/>                    i = -i;<br/>                }<br/><br/>                return i;<br/>            }"
        },
        {
          "total_lines": 21,
          "line_start": 767,
          "line_end": 787,
          "content": "int i = colTypes[j].compare(session, a[colIndex[j]],<br/>                                        b[colIndex[j]]);<br/><br/>            if (i != 0) {<br/>                if (isSimpleOrder) {<br/>                    return i;<br/>                }<br/><br/>                boolean nulls = a[colIndex[j]] == null<br/>                                || b[colIndex[j]] == null;<br/><br/>                if (colDesc[j] && !nulls) {<br/>                    i = -i;<br/>                }<br/><br/>                if (nullsLast[j] && nulls) {<br/>                    i = -i;<br/>                }<br/><br/>                return i;<br/>            }"
        },
        {
          "total_lines": 15,
          "line_start": 1409,
          "line_end": 1423,
          "content": "if (x == null) {<br/>                return x;<br/>            }<br/><br/>            if (session == null) {<br/>                return x;<br/>            }<br/><br/>            Row row = x.getRow(store);<br/><br/>            if (session.database.txManager.canRead(<br/>                    session, store, row, TransactionManager.ACTION_READ,<br/>                    null)) {<br/>                return x;<br/>            }"
        },
        {
          "total_lines": 15,
          "line_start": 1377,
          "line_end": 1391,
          "content": "if (x == null) {<br/>                return x;<br/>            }<br/><br/>            if (session == null) {<br/>                return x;<br/>            }<br/><br/>            Row row = x.getRow(store);<br/><br/>            if (session.database.txManager.canRead(<br/>                    session, store, row, TransactionManager.ACTION_READ,<br/>                    null)) {<br/>                return x;<br/>            }"
        },
        {
          "total_lines": 11,
          "line_start": 1574,
          "line_end": 1584,
          "content": "row = c.getRow(store);<br/><br/>                session.database.txManager.setTransactionInfo(store, row);<br/><br/>                if (session.database.txManager.canRead(<br/>                        session, store, row, TransactionManager.ACTION_DUP,<br/>                        null)) {<br/>                    return true;<br/>                }<br/><br/>                continue;"
        },
        {
          "total_lines": 11,
          "line_start": 1600,
          "line_end": 1610,
          "content": "row = c.getRow(store);<br/><br/>                session.database.txManager.setTransactionInfo(store, row);<br/><br/>                if (session.database.txManager.canRead(<br/>                        session, store, row, TransactionManager.ACTION_DUP,<br/>                        null)) {<br/>                    return true;<br/>                }<br/><br/>                continue;"
        },
        {
          "total_lines": 9,
          "line_start": 1600,
          "line_end": 1608,
          "content": "row = c.getRow(store);<br/><br/>                session.database.txManager.setTransactionInfo(store, row);<br/><br/>                if (session.database.txManager.canRead(<br/>                        session, store, row, TransactionManager.ACTION_DUP,<br/>                        null)) {<br/>                    return true;<br/>                }"
        },
        {
          "total_lines": 9,
          "line_start": 1576,
          "line_end": 1584,
          "content": "session.database.txManager.setTransactionInfo(store, row);<br/><br/>                if (session.database.txManager.canRead(<br/>                        session, store, row, TransactionManager.ACTION_DUP,<br/>                        null)) {<br/>                    return true;<br/>                }<br/><br/>                continue;"
        },
        {
          "total_lines": 9,
          "line_start": 1574,
          "line_end": 1582,
          "content": "row = c.getRow(store);<br/><br/>                session.database.txManager.setTransactionInfo(store, row);<br/><br/>                if (session.database.txManager.canRead(<br/>                        session, store, row, TransactionManager.ACTION_DUP,<br/>                        null)) {<br/>                    return true;<br/>                }"
        },
        {
          "total_lines": 9,
          "line_start": 1409,
          "line_end": 1417,
          "content": "if (x == null) {<br/>                return x;<br/>            }<br/><br/>            if (session == null) {<br/>                return x;<br/>            }<br/><br/>            Row row = x.getRow(store);"
        },
        {
          "total_lines": 9,
          "line_start": 1602,
          "line_end": 1610,
          "content": "session.database.txManager.setTransactionInfo(store, row);<br/><br/>                if (session.database.txManager.canRead(<br/>                        session, store, row, TransactionManager.ACTION_DUP,<br/>                        null)) {<br/>                    return true;<br/>                }<br/><br/>                continue;"
        },
        {
          "total_lines": 9,
          "line_start": 1377,
          "line_end": 1385,
          "content": "if (x == null) {<br/>                return x;<br/>            }<br/><br/>            if (session == null) {<br/>                return x;<br/>            }<br/><br/>            Row row = x.getRow(store);"
        },
        {
          "total_lines": 7,
          "line_start": 1417,
          "line_end": 1423,
          "content": "Row row = x.getRow(store);<br/><br/>            if (session.database.txManager.canRead(<br/>                    session, store, row, TransactionManager.ACTION_READ,<br/>                    null)) {<br/>                return x;<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 1409,
          "line_end": 1415,
          "content": "if (x == null) {<br/>                return x;<br/>            }<br/><br/>            if (session == null) {<br/>                return x;<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 1511,
          "line_end": 1517,
          "content": "if (x == null) {<br/>            return null;<br/>        }<br/><br/>        RowAVL row = x.getRow(store);<br/><br/>        x = row.getNode(position);"
        },
        {
          "total_lines": 7,
          "line_start": 1385,
          "line_end": 1391,
          "content": "Row row = x.getRow(store);<br/><br/>            if (session.database.txManager.canRead(<br/>                    session, store, row, TransactionManager.ACTION_READ,<br/>                    null)) {<br/>                return x;<br/>            }"
        },
        {
          "total_lines": 7,
          "line_start": 1429,
          "line_end": 1435,
          "content": "if (x == null) {<br/>            return null;<br/>        }<br/><br/>        RowAVL row = x.getRow(store);<br/><br/>        x = row.getNode(position);"
        },
        {
          "total_lines": 7,
          "line_start": 1338,
          "line_end": 1344,
          "content": "Row row = x.getRow(store);<br/><br/>                if (session.database.txManager.canRead(<br/>                        session, store, row, TransactionManager.ACTION_READ,<br/>                        null)) {<br/>                    break;<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 1273,
          "line_end": 1279,
          "content": "Row row = x.getRow(store);<br/><br/>                if (session.database.txManager.canRead(<br/>                        session, store, row, TransactionManager.ACTION_READ,<br/>                        null)) {<br/>                    break;<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 1377,
          "line_end": 1383,
          "content": "if (x == null) {<br/>                return x;<br/>            }<br/><br/>            if (session == null) {<br/>                return x;<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 705,
          "line_end": 710,
          "content": "int i = colTypes[j].compare(session, a[colIndex[j]],<br/>                                        b[rowColMap[j]]);<br/><br/>            if (i != 0) {<br/>                return i;<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 720,
          "line_end": 725,
          "content": "int i = colTypes[j].compare(session, a[colIndex[j]],<br/>                                        b[rowColMap[j]]);<br/><br/>            if (i != 0) {<br/>                return i;<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 911,
          "line_end": 915,
          "content": "compareRowId = true;<br/>                        compare = compareRowForInsertOrDelete(session, row,<br/>                                                              currentRow,<br/>                                                              compareRowId,<br/>                                                              colIndex.length);"
        },
        {
          "total_lines": 4,
          "line_start": 1167,
          "line_end": 1170,
          "content": "Session session, PersistentStore store,<br/>                                    Object[] rowdata, int matchCount,<br/>                                    int distinctCount, int compareType,<br/>                                    boolean reversed, boolean[] map"
        },
        {
          "total_lines": 4,
          "line_start": 169,
          "line_end": 172,
          "content": "TableBase table, int[] columns,<br/>                    boolean[] descending, boolean[] nullsLast,<br/>                    Type[] colTypes, boolean pk, boolean unique,<br/>                    boolean constraint"
        },
        {
          "total_lines": 3,
          "line_start": 1726,
          "line_end": 1728,
          "content": "currentRow.getData(),<br/>                                              rowdata, rowColMap, fieldCount,<br/>                                              compareType"
        },
        {
          "total_lines": 3,
          "line_start": 895,
          "line_end": 897,
          "content": "store.setAccessor(this, ((RowAVL) row).getNode(position));<br/><br/>                return;"
        },
        {
          "total_lines": 3,
          "line_start": 1698,
          "line_end": 1700,
          "content": "currentRow.getData(),<br/>                                              rowdata, rowColMap, fieldCount,<br/>                                              compareType"
        },
        {
          "total_lines": 3,
          "line_start": 656,
          "line_end": 658,
          "content": "checkNodes(store, f);<br/><br/>                f = next(store, f);"
        },
        {
          "total_lines": 3,
          "line_start": 1712,
          "line_end": 1714,
          "content": "currentRow.getData(),<br/>                                              rowdata, rowColMap, fieldCount,<br/>                                              compareType"
        },
        {
          "total_lines": 3,
          "line_start": 215,
          "line_end": 217,
          "content": "break;<br/><br/>            default :"
        },
        {
          "total_lines": 3,
          "line_start": 1556,
          "line_end": 1558,
          "content": "row,<br/>                                               TransactionManager.ACTION_DUP,<br/>                                               null"
        },
        {
          "total_lines": 3,
          "line_start": 1574,
          "line_end": 1576,
          "content": "row = c.getRow(store);<br/><br/>                session.database.txManager.setTransactionInfo(store, row);"
        },
        {
          "total_lines": 3,
          "line_start": 1683,
          "line_end": 1685,
          "content": "currentRow.getData(),<br/>                                              rowdata, rowColMap, fieldCount,<br/>                                              compareType"
        },
        {
          "total_lines": 3,
          "line_start": 1600,
          "line_end": 1602,
          "content": "row = c.getRow(store);<br/><br/>                session.database.txManager.setTransactionInfo(store, row);"
        },
        {
          "total_lines": 2,
          "line_start": 1193,
          "line_end": 1194,
          "content": "Session session, PersistentStore store,<br/>                                    Object[] rowdata"
        },
        {
          "total_lines": 2,
          "line_start": 1258,
          "line_end": 1259,
          "content": "Session session, PersistentStore store,<br/>                                int distinctCount"
        },
        {
          "total_lines": 2,
          "line_start": 716,
          "line_end": 717,
          "content": "Session session, Object[] a, Object[] b,<br/>                                   int[] rowColMap, int fieldCount"
        },
        {
          "total_lines": 2,
          "line_start": 1698,
          "line_end": 1699,
          "content": "currentRow.getData(),<br/>                                              rowdata"
        },
        {
          "total_lines": 2,
          "line_start": 1144,
          "line_end": 1145,
          "content": "Session session, PersistentStore store,<br/>                                Object[] rowdata, int[] rowColMap"
        },
        {
          "total_lines": 2,
          "line_start": 169,
          "line_end": 170,
          "content": "long id, TableBase table, int[] columns,<br/>                    boolean[] descending"
        },
        {
          "total_lines": 2,
          "line_start": 1661,
          "line_end": 1662,
          "content": "currentRow.getData(),<br/>                                            rowdata"
        },
        {
          "total_lines": 2,
          "line_start": 1323,
          "line_end": 1324,
          "content": "Session session, PersistentStore store,<br/>                               int distinctCount"
        },
        {
          "total_lines": 2,
          "line_start": 1238,
          "line_end": 1239,
          "content": "Session session,<br/>                                           PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 949,
          "line_end": 950,
          "content": "store.writeUnlock();<br/>            writeLock.unlock();"
        },
        {
          "total_lines": 2,
          "line_start": 1451,
          "line_end": 1452,
          "content": "temp = x;<br/>        x    = x.getParent(store);"
        },
        {
          "total_lines": 2,
          "line_start": 1683,
          "line_end": 1684,
          "content": "currentRow.getData(),<br/>                                              rowdata"
        },
        {
          "total_lines": 2,
          "line_start": 1218,
          "line_end": 1219,
          "content": "Session session, PersistentStore store,<br/>                                    Object[] rowdata, int[] rowColMap"
        },
        {
          "total_lines": 2,
          "line_start": 1780,
          "line_end": 1781,
          "content": "rowColMap,<br/>                            fieldCount"
        },
        {
          "total_lines": 2,
          "line_start": 1533,
          "line_end": 1534,
          "content": "temp = x;<br/>        x    = x.getParent(store);"
        },
        {
          "total_lines": 2,
          "line_start": 1363,
          "line_end": 1364,
          "content": "Session session, PersistentStore store, NodeAVL x,<br/>                 int distinctCount"
        },
        {
          "total_lines": 2,
          "line_start": 171,
          "line_end": 172,
          "content": "boolean unique,<br/>                    boolean constraint"
        },
        {
          "total_lines": 2,
          "line_start": 1395,
          "line_end": 1396,
          "content": "Session session, PersistentStore store, NodeAVL x,<br/>                 int distinctCount"
        },
        {
          "total_lines": 2,
          "line_start": 699,
          "line_end": 700,
          "content": "Session session, Object[] a, Object[] b,<br/>                                   int[] rowColMap"
        },
        {
          "total_lines": 2,
          "line_start": 88,
          "line_end": 89,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 1139,
          "line_end": 1140,
          "content": "store.writeUnlock();<br/>            writeLock.unlock();"
        },
        {
          "total_lines": 2,
          "line_start": 1726,
          "line_end": 1727,
          "content": "currentRow.getData(),<br/>                                              rowdata"
        },
        {
          "total_lines": 2,
          "line_start": 1712,
          "line_end": 1713,
          "content": "currentRow.getData(),<br/>                                              rowdata"
        },
        {
          "total_lines": 1,
          "line_start": 255,
          "line_end": 255,
          "content": "Session session, SchemaObject parentObject"
        },
        {
          "total_lines": 1,
          "line_start": 954,
          "line_end": 954,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 879,
          "line_end": 879,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 512,
          "line_end": 512,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 420,
          "line_end": 420,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1699,
          "line_end": 1699,
          "content": "rowColMap, fieldCount"
        },
        {
          "total_lines": 1,
          "line_start": 1713,
          "line_end": 1713,
          "content": "rowColMap, fieldCount"
        },
        {
          "total_lines": 1,
          "line_start": 1684,
          "line_end": 1684,
          "content": "rowColMap, fieldCount"
        },
        {
          "total_lines": 1,
          "line_start": 734,
          "line_end": 734,
          "content": "Session session, Object[] a, Object[] b"
        },
        {
          "total_lines": 1,
          "line_start": 943,
          "line_end": 943,
          "content": "isleft, ((RowAVL) row).getNode(position)"
        },
        {
          "total_lines": 1,
          "line_start": 1727,
          "line_end": 1727,
          "content": "rowColMap, fieldCount"
        },
        {
          "total_lines": 1,
          "line_start": 1662,
          "line_end": 1662,
          "content": "rowColMap, fieldCount"
        },
        {
          "total_lines": 1,
          "line_start": 764,
          "line_end": 764,
          "content": "Session session, Object[] a, Object[] b"
        },
        {
          "total_lines": 1,
          "line_start": 1544,
          "line_end": 1544,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1763,
          "line_end": 1763,
          "content": "session, store"
        },
        {
          "total_lines": 1,
          "line_start": 539,
          "line_end": 539,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 398,
          "line_end": 398,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 1864,
          "line_end": 1864,
          "content": "NodeAVL x, boolean isleft"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCClobClient.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 704,
          "line_end": 706,
          "content": "isWritable = true;<br/>        resultSet  = result;<br/>        colIndex   = index;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ExpressionArithmetic.java",
      "loc_duplicate": 26,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 241,
          "line_end": 247,
          "content": "if (nodes[i] == null) {<br/>                continue;<br/>            }<br/><br/>            unresolvedSet = nodes[i].resolveColumnReferences(session,<br/>                    rangeGroup, rangeCount, rangeGroups, unresolvedSet,<br/>                    acceptsSequences);"
        },
        {
          "total_lines": 5,
          "line_start": 617,
          "line_end": 621,
          "content": "Object value =<br/>                    session.sessionContext.rangeIterators[rangePosition]<br/>                        .getCurrent(columnIndex);<br/><br/>                return value;"
        },
        {
          "total_lines": 3,
          "line_start": 224,
          "line_end": 226,
          "content": "sb.append(\" arg_right=[\");<br/>            sb.append(nodes[RIGHT].describe(session, blanks + 1));<br/>            sb.append(']');"
        },
        {
          "total_lines": 3,
          "line_start": 232,
          "line_end": 234,
          "content": "Session session,<br/>            RangeGroup rangeGroup, int rangeCount, RangeGroup[] rangeGroups,<br/>            HsqlList unresolvedSet, boolean acceptsSequences"
        },
        {
          "total_lines": 3,
          "line_start": 218,
          "line_end": 220,
          "content": "sb.append(\" arg_left=[\");<br/>            sb.append(nodes[LEFT].describe(session, blanks + 1));<br/>            sb.append(']');"
        },
        {
          "total_lines": 2,
          "line_start": 322,
          "line_end": 323,
          "content": "nodes[LEFT].dataType  = Type.SQL_INTEGER;<br/>            nodes[RIGHT].dataType = Type.SQL_INTEGER;"
        },
        {
          "total_lines": 2,
          "line_start": 317,
          "line_end": 318,
          "content": "nodes[LEFT].dataType  = Type.SQL_INTEGER;<br/>            nodes[RIGHT].dataType = Type.SQL_INTEGER;"
        },
        {
          "total_lines": 1,
          "line_start": 52,
          "line_end": 52,
          "content": "int type, Expression left"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/map/BitMap.java",
      "loc_duplicate": 52,
      "clones": [
          {
          "total_lines": 13,
          "line_start": 612,
          "line_end": 624,
          "content": "int    length      = a.length > b.length ? a.length<br/>                                                 : b.length;<br/>        int    shortLength = a.length > b.length ? b.length<br/>                                                 : a.length;<br/>        byte[] map         = new byte[length];<br/><br/>        if (length != shortLength) {<br/>            byte[] source = a.length > b.length ? a<br/>                                                : b;<br/><br/>            System.arraycopy(source, shortLength, map, shortLength,<br/>                             length - shortLength);<br/>        }"
        },
        {
          "total_lines": 13,
          "line_start": 635,
          "line_end": 647,
          "content": "int    length      = a.length > b.length ? a.length<br/>                                                 : b.length;<br/>        int    shortLength = a.length > b.length ? b.length<br/>                                                 : a.length;<br/>        byte[] map         = new byte[length];<br/><br/>        if (length != shortLength) {<br/>            byte[] source = a.length > b.length ? a<br/>                                                : b;<br/><br/>            System.arraycopy(source, shortLength, map, shortLength,<br/>                             length - shortLength);<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 635,
          "line_end": 639,
          "content": "int    length      = a.length > b.length ? a.length<br/>                                                 : b.length;<br/>        int    shortLength = a.length > b.length ? b.length<br/>                                                 : a.length;<br/>        byte[] map         = new byte[length];"
        },
        {
          "total_lines": 5,
          "line_start": 612,
          "line_end": 616,
          "content": "int    length      = a.length > b.length ? a.length<br/>                                                 : b.length;<br/>        int    shortLength = a.length > b.length ? b.length<br/>                                                 : a.length;<br/>        byte[] map         = new byte[length];"
        },
        {
          "total_lines": 4,
          "line_start": 635,
          "line_end": 638,
          "content": "int    length      = a.length > b.length ? a.length<br/>                                                 : b.length;<br/>        int    shortLength = a.length > b.length ? b.length<br/>                                                 : a.length;"
        },
        {
          "total_lines": 4,
          "line_start": 612,
          "line_end": 615,
          "content": "int    length      = a.length > b.length ? a.length<br/>                                                 : b.length;<br/>        int    shortLength = a.length > b.length ? b.length<br/>                                                 : a.length;"
        },
        {
          "total_lines": 2,
          "line_start": 563,
          "line_end": 564,
          "content": "innermask = innermask >>> (8 - count);<br/>            innermask = innermask << (8 - count);"
        },
        {
          "total_lines": 2,
          "line_start": 142,
          "line_end": 143,
          "content": "mask        = ~mask;<br/>            map[windex] = (word & mask);"
        },
        {
          "total_lines": 2,
          "line_start": 129,
          "line_end": 130,
          "content": "mask        = ~mask;<br/>                map[windex] = (word & mask);"
        },
        {
          "total_lines": 2,
          "line_start": 488,
          "line_end": 489,
          "content": "innermask = innermask >>> (8 - count);<br/>            innermask = innermask << (8 - count);"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/TransactionManagerMV2PL.java",
      "loc_duplicate": 202,
      "clones": [
          {
          "total_lines": 15,
          "line_start": 389,
          "line_end": 403,
          "content": "rowActionMap.getWriteLock().lock();<br/><br/>        try {<br/>            RowAction action = (RowAction) rowActionMap.get(id);<br/><br/>            synchronized (action) {<br/><br/>                // remove only if not changed<br/>                if (action.type == RowActionBase.ACTION_NONE) {<br/>                    rowActionMap.remove(id);<br/>                }<br/>            }<br/>        } finally {<br/>            rowActionMap.getWriteLock().unlock();<br/>        }"
        },
        {
          "total_lines": 13,
          "line_start": 438,
          "line_end": 450,
          "content": "if (committedTransactionTimestamps.isEmpty()) {<br/>                    break;<br/>                }<br/><br/>                commitTimestamp = committedTransactionTimestamps.getFirst();<br/><br/>                if (commitTimestamp < timestamp) {<br/>                    committedTransactionTimestamps.removeFirst();<br/><br/>                    actions = (Object[]) committedTransactions.removeFirst();<br/>                } else {<br/>                    break;<br/>                }"
        },
        {
          "total_lines": 11,
          "line_start": 362,
          "line_end": 372,
          "content": "if (object.isMemory()) {<br/>            return;<br/>        }<br/><br/>        Row row = (Row) object;<br/><br/>        if (row.getTable().tableType == TableBase.CACHED_TABLE) {<br/>            RowAction rowact = (RowAction) rowActionMap.get(row.getPos());<br/><br/>            row.rowAction = rowact;<br/>        }"
        },
        {
          "total_lines": 11,
          "line_start": 329,
          "line_end": 339,
          "content": "if (store.getTable().tableType == TableBase.TEMP_TABLE) {<br/>            return true;<br/>        }<br/><br/>        RowAction action = (RowAction) rowActionMap.get(id);<br/><br/>        if (action == null) {<br/>            return true;<br/>        }<br/><br/>        return action.canRead(session, mode);"
        },
        {
          "total_lines": 11,
          "line_start": 191,
          "line_end": 201,
          "content": "long timestamp = session.sessionContext.savepointTimestamps.get(index);<br/>        Integer oi = (Integer) session.sessionContext.savepoints.get(index);<br/>        int     start  = oi.intValue();<br/><br/>        while (session.sessionContext.savepoints.size() > index + 1) {<br/>            session.sessionContext.savepoints.remove(<br/>                session.sessionContext.savepoints.size() - 1);<br/>            session.sessionContext.savepointTimestamps.removeLast();<br/>        }<br/><br/>        rollbackPartial(session, start, timestamp);"
        },
        {
          "total_lines": 10,
          "line_start": 413,
          "line_end": 422,
          "content": "// add the txList according to commit timestamp<br/>            committedTransactions.addLast(list);<br/><br/>            // get session commit timestamp<br/>            committedTransactionTimestamps.addLast(session.actionTimestamp);<br/>/* debug 190<br/>            if (committedTransactions.size() > 64) {<br/>                System.out.println(\"******* excessive transaction queue\");<br/>            }<br/>// debug 190 */"
        },
        {
          "total_lines": 9,
          "line_start": 442,
          "line_end": 450,
          "content": "commitTimestamp = committedTransactionTimestamps.getFirst();<br/><br/>                if (commitTimestamp < timestamp) {<br/>                    committedTransactionTimestamps.removeFirst();<br/><br/>                    actions = (Object[]) committedTransactions.removeFirst();<br/>                } else {<br/>                    break;<br/>                }"
        },
        {
          "total_lines": 9,
          "line_start": 191,
          "line_end": 199,
          "content": "long timestamp = session.sessionContext.savepointTimestamps.get(index);<br/>        Integer oi = (Integer) session.sessionContext.savepoints.get(index);<br/>        int     start  = oi.intValue();<br/><br/>        while (session.sessionContext.savepoints.size() > index + 1) {<br/>            session.sessionContext.savepoints.remove(<br/>                session.sessionContext.savepoints.size() - 1);<br/>            session.sessionContext.savepointTimestamps.removeLast();<br/>        }"
        },
        {
          "total_lines": 9,
          "line_start": 329,
          "line_end": 337,
          "content": "if (store.getTable().tableType == TableBase.TEMP_TABLE) {<br/>            return true;<br/>        }<br/><br/>        RowAction action = (RowAction) rowActionMap.get(id);<br/><br/>        if (action == null) {<br/>            return true;<br/>        }"
        },
        {
          "total_lines": 7,
          "line_start": 531,
          "line_end": 537,
          "content": "session.transactionTimestamp = session.actionTimestamp;<br/>                session.isTransaction        = true;<br/><br/>                liveTransactionTimestamps.addLast(<br/>                    session.transactionTimestamp);<br/><br/>                transactionCount++;"
        },
        {
          "total_lines": 6,
          "line_start": 140,
          "line_end": 145,
          "content": "Object[] list = session.rowActionList.getArray();<br/><br/>                mergeTransaction(list, limit, newLimit,<br/>                                 session.actionTimestamp);<br/>                finaliseRows(session, list, limit, newLimit);<br/>                session.rowActionList.setSize(limit);"
        },
        {
          "total_lines": 6,
          "line_start": 493,
          "line_end": 498,
          "content": "cs = session.statementManager.getStatement(session, cs);<br/>                session.sessionContext.currentStatement = cs;<br/><br/>                if (cs == null) {<br/>                    return;<br/>                }"
        },
        {
          "total_lines": 5,
          "line_start": 438,
          "line_end": 442,
          "content": "if (committedTransactionTimestamps.isEmpty()) {<br/>                    break;<br/>                }<br/><br/>                commitTimestamp = committedTransactionTimestamps.getFirst();"
        },
        {
          "total_lines": 5,
          "line_start": 531,
          "line_end": 535,
          "content": "session.transactionTimestamp = session.actionTimestamp;<br/>                session.isTransaction        = true;<br/><br/>                liveTransactionTimestamps.addLast(<br/>                    session.transactionTimestamp);"
        },
        {
          "total_lines": 5,
          "line_start": 140,
          "line_end": 144,
          "content": "Object[] list = session.rowActionList.getArray();<br/><br/>                mergeTransaction(list, limit, newLimit,<br/>                                 session.actionTimestamp);<br/>                finaliseRows(session, list, limit, newLimit);"
        },
        {
          "total_lines": 4,
          "line_start": 152,
          "line_end": 155,
          "content": "Object[] list = session.rowActionList.getArray();<br/><br/>                mergeTransaction(list, 0, limit, session.actionTimestamp);<br/>                finaliseRows(session, list, 0, limit);"
        },
        {
          "total_lines": 4,
          "line_start": 559,
          "line_end": 562,
          "content": "transactionCount--;<br/><br/>            liveTransactionTimestamps.remove(index);<br/>            mergeExpiredTransactions(session);"
        },
        {
          "total_lines": 4,
          "line_start": 142,
          "line_end": 145,
          "content": "mergeTransaction(list, limit, newLimit,<br/>                                 session.actionTimestamp);<br/>                finaliseRows(session, list, limit, newLimit);<br/>                session.rowActionList.setSize(limit);"
        },
        {
          "total_lines": 3,
          "line_start": 191,
          "line_end": 193,
          "content": "long timestamp = session.sessionContext.savepointTimestamps.get(index);<br/>        Integer oi = (Integer) session.sessionContext.savepoints.get(index);<br/>        int     start  = oi.intValue();"
        },
        {
          "total_lines": 3,
          "line_start": 464,
          "line_end": 466,
          "content": "session.actionTimestamp      = getNextGlobalChangeTimestamp();<br/>                session.transactionTimestamp = session.actionTimestamp;<br/>                session.isTransaction        = true;"
        },
        {
          "total_lines": 3,
          "line_start": 559,
          "line_end": 561,
          "content": "transactionCount--;<br/><br/>            liveTransactionTimestamps.remove(index);"
        },
        {
          "total_lines": 3,
          "line_start": 100,
          "line_end": 102,
          "content": "RowAction action = (RowAction) session.rowActionList.get(i);<br/><br/>                action.prepareCommit(session);"
        },
        {
          "total_lines": 3,
          "line_start": 290,
          "line_end": 292,
          "content": "Session session, Table table,<br/>                                PersistentStore store, Row row,<br/>                                int[] changedColumns"
        },
        {
          "total_lines": 3,
          "line_start": 129,
          "line_end": 131,
          "content": "RowAction action = (RowAction) session.rowActionList.get(i);<br/><br/>                action.commit(session);"
        },
        {
          "total_lines": 3,
          "line_start": 142,
          "line_end": 144,
          "content": "mergeTransaction(list, limit, newLimit,<br/>                                 session.actionTimestamp);<br/>                finaliseRows(session, list, limit, newLimit);"
        },
        {
          "total_lines": 3,
          "line_start": 253,
          "line_end": 255,
          "content": "Session session, Table table,<br/>                                     PersistentStore store, Row row,<br/>                                     int[] colMap"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import org.hsqldb.HsqlNameManager.HsqlName;<br/>import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 3,
          "line_start": 206,
          "line_end": 208,
          "content": "rollbackPartial(session, session.actionIndex,<br/>                        session.actionStartTimestamp);<br/>        endActionTPL(session);"
        },
        {
          "total_lines": 3,
          "line_start": 157,
          "line_end": 159,
          "content": "Object[] list = session.rowActionList.toArray();<br/><br/>                addToCommittedQueue(session, list);"
        },
        {
          "total_lines": 3,
          "line_start": 243,
          "line_end": 245,
          "content": "Object[] list = session.rowActionList.getArray();<br/><br/>            mergeRolledBackTransaction(session, timestamp, list, start, limit);"
        },
        {
          "total_lines": 2,
          "line_start": 326,
          "line_end": 327,
          "content": "Session session, PersistentStore store, long id,<br/>                           int mode"
        },
        {
          "total_lines": 2,
          "line_start": 561,
          "line_end": 562,
          "content": "liveTransactionTimestamps.remove(index);<br/>            mergeExpiredTransactions(session);"
        },
        {
          "total_lines": 2,
          "line_start": 359,
          "line_end": 360,
          "content": "PersistentStore store,<br/>                                   CachedObject object"
        },
        {
          "total_lines": 2,
          "line_start": 493,
          "line_end": 494,
          "content": "cs = session.statementManager.getStatement(session, cs);<br/>                session.sessionContext.currentStatement = cs;"
        },
        {
          "total_lines": 2,
          "line_start": 144,
          "line_end": 145,
          "content": "finaliseRows(session, list, limit, newLimit);<br/>                session.rowActionList.setSize(limit);"
        },
        {
          "total_lines": 2,
          "line_start": 154,
          "line_end": 155,
          "content": "mergeTransaction(list, 0, limit, session.actionTimestamp);<br/>                finaliseRows(session, list, 0, limit);"
        },
        {
          "total_lines": 2,
          "line_start": 310,
          "line_end": 311,
          "content": "Row row,<br/>                           int mode"
        },
        {
          "total_lines": 2,
          "line_start": 301,
          "line_end": 302,
          "content": "ErrorCode.GENERAL_ERROR,<br/>                                     \"null insert action \""
        },
        {
          "total_lines": 2,
          "line_start": 253,
          "line_end": 254,
          "content": "Session session, Table table,<br/>                                     PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 254,
          "line_end": 255,
          "content": "Row row,<br/>                                     int[] colMap"
        },
        {
          "total_lines": 1,
          "line_start": 453,
          "line_end": 453,
          "content": "actions, 0, actions.length"
        },
        {
          "total_lines": 1,
          "line_start": 326,
          "line_end": 326,
          "content": "PersistentStore store, long id"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/ExpressionTable.java",
      "loc_duplicate": 6,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 206,
          "line_end": 207,
          "content": "Session session,<br/>                                       PersistentStore store"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 1,
          "line_start": 216,
          "line_end": 216,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 232,
          "line_end": 232,
          "content": "Session session, PersistentStore store"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/RowStoreAVLMemory.java",
      "loc_duplicate": 43,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 60,
          "line_end": 66,
          "content": "this.database     = table.database;<br/>        this.manager      = manager;<br/>        this.table        = table;<br/>        this.indexList    = table.getIndexList();<br/>        this.accessorList = new CachedObject[indexList.length];<br/><br/>        manager.setStore(table, this);"
        },
        {
          "total_lines": 6,
          "line_start": 61,
          "line_end": 66,
          "content": "this.manager      = manager;<br/>        this.table        = table;<br/>        this.indexList    = table.getIndexList();<br/>        this.accessorList = new CachedObject[indexList.length];<br/><br/>        manager.setStore(table, this);"
        },
        {
          "total_lines": 5,
          "line_start": 62,
          "line_end": 66,
          "content": "this.table        = table;<br/>        this.indexList    = table.getIndexList();<br/>        this.accessorList = new CachedObject[indexList.length];<br/><br/>        manager.setStore(table, this);"
        },
        {
          "total_lines": 3,
          "line_start": 109,
          "line_end": 111,
          "content": "session, table,<br/>                                             RowAction.ACTION_INSERT, row,<br/>                                             null"
        },
        {
          "total_lines": 3,
          "line_start": 179,
          "line_end": 181,
          "content": "// INSERT + DELETE<br/>                remove(row);<br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 121,
          "line_end": 123,
          "content": "destroy();<br/>        elementCount.set(0);<br/>        ArrayUtil.fillArray(accessorList, null);"
        },
        {
          "total_lines": 2,
          "line_start": 60,
          "line_end": 61,
          "content": "this.database     = table.database;<br/>        this.manager      = manager;"
        },
        {
          "total_lines": 2,
          "line_start": 167,
          "line_end": 168,
          "content": "((RowAVL) row).setNewNodes(this);<br/>                    indexRow(session, row);"
        },
        {
          "total_lines": 2,
          "line_start": 41,
          "line_end": 42,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        },
        {
          "total_lines": 2,
          "line_start": 132,
          "line_end": 133,
          "content": "Session session, Row row, int changeAction,<br/>                          int txModel"
        },
        {
          "total_lines": 2,
          "line_start": 160,
          "line_end": 161,
          "content": "Session session, Row row, int changeAction,<br/>                            int txModel"
        },
        {
          "total_lines": 2,
          "line_start": 174,
          "line_end": 175,
          "content": "remove(row);<br/>                break;"
        },
        {
          "total_lines": 1,
          "line_start": 132,
          "line_end": 132,
          "content": "Session session, Row row, int changeAction"
        },
        {
          "total_lines": 1,
          "line_start": 58,
          "line_end": 58,
          "content": "PersistentStoreCollection manager, Table table"
        },
        {
          "total_lines": 1,
          "line_start": 160,
          "line_end": 160,
          "content": "Session session, Row row, int changeAction"
        },
        {
          "total_lines": 1,
          "line_start": 91,
          "line_end": 91,
          "content": "CachedObject object, boolean tx"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/Session.java",
      "loc_duplicate": 53,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 1335,
          "line_end": 1339,
          "content": "rollback(false);<br/><br/>                sessionContext.currentStatement = null;<br/><br/>                return Result.newErrorResult(Error.error(ErrorCode.X_40001));"
        },
        {
          "total_lines": 5,
          "line_start": 1309,
          "line_end": 1313,
          "content": "rollback(false);<br/><br/>                sessionContext.currentStatement = null;<br/><br/>                return Result.newErrorResult(Error.error(ErrorCode.X_40001));"
        },
        {
          "total_lines": 5,
          "line_start": 2075,
          "line_end": 2079,
          "content": "if (calendarGMT == null) {<br/>            calendarGMT = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));<br/>        }<br/><br/>        return calendarGMT;"
        },
        {
          "total_lines": 5,
          "line_start": 1844,
          "line_end": 1848,
          "content": "if (lobID == 0) {<br/>            throw Error.error(ErrorCode.X_0F502);<br/>        }<br/><br/>        sessionData.registerNewLob(lobID);"
        },
        {
          "total_lines": 5,
          "line_start": 1857,
          "line_end": 1861,
          "content": "if (lobID == 0) {<br/>            throw Error.error(ErrorCode.X_0F502);<br/>        }<br/><br/>        sessionData.registerNewLob(lobID);"
        },
        {
          "total_lines": 4,
          "line_start": 1472,
          "line_end": 1475,
          "content": "updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);<br/>                error        = in;<br/><br/>                break;"
        },
        {
          "total_lines": 4,
          "line_start": 1532,
          "line_end": 1535,
          "content": "updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);<br/>                error        = in;<br/><br/>                break;"
        },
        {
          "total_lines": 3,
          "line_start": 2064,
          "line_end": 2066,
          "content": "TimeZone zone = TimeZone.getTimeZone(zoneString);<br/><br/>                calendar = new GregorianCalendar(zone);"
        },
        {
          "total_lines": 2,
          "line_start": 1214,
          "line_end": 1215,
          "content": "cmd.getGeneratedResultType(),<br/>                                      cmd.getGeneratedResultMetaData()"
        },
        {
          "total_lines": 2,
          "line_start": 1532,
          "line_end": 1533,
          "content": "updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);<br/>                error        = in;"
        },
        {
          "total_lines": 2,
          "line_start": 1217,
          "line_end": 1218,
          "content": "ValuePool.emptyObjectArray,<br/>                                              cmd.queryTimeout"
        },
        {
          "total_lines": 2,
          "line_start": 1472,
          "line_end": 1473,
          "content": "updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);<br/>                error        = in;"
        },
        {
          "total_lines": 2,
          "line_start": 1506,
          "line_end": 1507,
          "content": "ValuePool.emptyObjectArray,<br/>                                              cmd.queryTimeout"
        },
        {
          "total_lines": 1,
          "line_start": 1899,
          "line_end": 1899,
          "content": "id, cmd.getOffset(), (int) cmd.getBlockLength()"
        },
        {
          "total_lines": 1,
          "line_start": 1506,
          "line_end": 1506,
          "content": "cs, ValuePool.emptyObjectArray"
        },
        {
          "total_lines": 1,
          "line_start": 1217,
          "line_end": 1217,
          "content": "cs, ValuePool.emptyObjectArray"
        },
        {
          "total_lines": 1,
          "line_start": 1870,
          "line_end": 1870,
          "content": "ResultLob result, InputStream inputStream"
        },
        {
          "total_lines": 1,
          "line_start": 1903,
          "line_end": 1903,
          "content": "id, cmd.getOffset()"
        },
        {
          "total_lines": 1,
          "line_start": 1890,
          "line_end": 1890,
          "content": "id, cmd.getOffset(), (int) cmd.getBlockLength()"
        },
        {
          "total_lines": 1,
          "line_start": 1894,
          "line_end": 1894,
          "content": "id, cmd.getOffset()"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/KMPSearchAlgorithm.java",
      "loc_duplicate": 165,
      "clones": [
          {
          "total_lines": 35,
          "line_start": 451,
          "line_end": 485,
          "content": "if (pattern == null) {<br/>            throw new IllegalArgumentException(\"Pattern must  not be null.\");<br/>        } else if (pattern.length < 2) {<br/>            throw new IllegalArgumentException(\"Pattern length must be > 1.\");<br/>        }<br/><br/>        //<br/>        final int[] table = new int[pattern.length];<br/>        int         i     = 2;<br/>        int         j     = 0;<br/><br/>        //<br/>        table[0] = -1;<br/>        table[1] = 0;<br/><br/>        //<br/>        while (i < pattern.length) {<br/>            if (pattern[i - 1] == pattern[j]) {<br/>                table[i] = j + 1;<br/><br/>                j++;<br/>                i++;<br/>            } else if (j > 0) {<br/>                j = table[j];<br/>            } else {<br/>                table[i] = 0;<br/><br/>                i++;<br/><br/>                j = 0;<br/>            }<br/>        }<br/><br/>        //<br/>        return table;"
        },
        {
          "total_lines": 32,
          "line_start": 451,
          "line_end": 482,
          "content": "if (pattern == null) {<br/>            throw new IllegalArgumentException(\"Pattern must  not be null.\");<br/>        } else if (pattern.length < 2) {<br/>            throw new IllegalArgumentException(\"Pattern length must be > 1.\");<br/>        }<br/><br/>        //<br/>        final int[] table = new int[pattern.length];<br/>        int         i     = 2;<br/>        int         j     = 0;<br/><br/>        //<br/>        table[0] = -1;<br/>        table[1] = 0;<br/><br/>        //<br/>        while (i < pattern.length) {<br/>            if (pattern[i - 1] == pattern[j]) {<br/>                table[i] = j + 1;<br/><br/>                j++;<br/>                i++;<br/>            } else if (j > 0) {<br/>                j = table[j];<br/>            } else {<br/>                table[i] = 0;<br/><br/>                i++;<br/><br/>                j = 0;<br/>            }<br/>        }"
        },
        {
          "total_lines": 31,
          "line_start": 490,
          "line_end": 520,
          "content": "if (pattern == null) {<br/>            throw new IllegalArgumentException(\"Pattern must  not be null.\");<br/>        } else if (pattern.length < 2) {<br/>            throw new IllegalArgumentException(\"Pattern length must be > 1.\");<br/>        }<br/><br/>        int[] table = new int[pattern.length];<br/>        int   i     = 2;<br/>        int   j     = 0;<br/><br/>        table[0] = -1;<br/>        table[1] = 0;<br/><br/>        while (i < pattern.length) {<br/>            if (pattern[i - 1] == pattern[j]) {<br/>                table[i] = j + 1;<br/><br/>                j++;<br/>                i++;<br/>            } else if (j > 0) {<br/>                j = table[j];<br/>            } else {<br/>                table[i] = 0;<br/><br/>                i++;<br/><br/>                j = 0;<br/>            }<br/>        }<br/><br/>        return table;"
        },
        {
          "total_lines": 29,
          "line_start": 490,
          "line_end": 518,
          "content": "if (pattern == null) {<br/>            throw new IllegalArgumentException(\"Pattern must  not be null.\");<br/>        } else if (pattern.length < 2) {<br/>            throw new IllegalArgumentException(\"Pattern length must be > 1.\");<br/>        }<br/><br/>        int[] table = new int[pattern.length];<br/>        int   i     = 2;<br/>        int   j     = 0;<br/><br/>        table[0] = -1;<br/>        table[1] = 0;<br/><br/>        while (i < pattern.length) {<br/>            if (pattern[i - 1] == pattern[j]) {<br/>                table[i] = j + 1;<br/><br/>                j++;<br/>                i++;<br/>            } else if (j > 0) {<br/>                j = table[j];<br/>            } else {<br/>                table[i] = 0;<br/><br/>                i++;<br/><br/>                j = 0;<br/>            }<br/>        }"
        },
        {
          "total_lines": 9,
          "line_start": 422,
          "line_end": 430,
          "content": "final int tableValue = table[patternIndex];<br/><br/>                matchStart += (patternIndex - tableValue);<br/><br/>                if (patternIndex > 0) {<br/>                    patternIndex = tableValue;<br/>                }<br/><br/>                patternIndex++;"
        },
        {
          "total_lines": 9,
          "line_start": 358,
          "line_end": 366,
          "content": "final int tableValue = table[patternIndex];<br/><br/>                matchStart += (patternIndex - tableValue);<br/><br/>                if (patternIndex > 0) {<br/>                    patternIndex = tableValue;<br/>                }<br/><br/>                patternIndex++;"
        },
        {
          "total_lines": 4,
          "line_start": 460,
          "line_end": 463,
          "content": "int         j     = 0;<br/><br/>        //<br/>        table[0] = -1;"
        },
        {
          "total_lines": 3,
          "line_start": 219,
          "line_end": 221,
          "content": "patternIndex = table[patternIndex];<br/><br/>                patternIndex++;"
        },
        {
          "total_lines": 3,
          "line_start": 498,
          "line_end": 500,
          "content": "int   j     = 0;<br/><br/>        table[0] = -1;"
        },
        {
          "total_lines": 3,
          "line_start": 150,
          "line_end": 152,
          "content": "patternIndex = table[patternIndex];<br/><br/>                patternIndex++;"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import java.io.IOException;<br/>import java.io.InputStream;<br/>import java.io.Reader;"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.io.InputStream;<br/>import java.io.Reader;"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import java.io.IOException;<br/>import java.io.InputStream;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCBlobClient.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 357,
          "line_end": 359,
          "content": "isWritable = true;<br/>        resultSet  = result;<br/>        colIndex   = index;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/LongValueHashMap.java",
      "loc_duplicate": 35,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 126,
          "line_end": 134,
          "content": "if (key == null) {<br/>            throw new NoSuchElementException();<br/>        }<br/><br/>        int oldSize = size();<br/><br/>        super.addOrRemove(0, value, key, null, false);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 7,
          "line_start": 212,
          "line_end": 218,
          "content": "Iterator it = t.keySet().iterator();<br/><br/>        while (it.hasNext()) {<br/>            Object key = it.next();<br/><br/>            put(key, t.get(key));<br/>        }"
        },
        {
          "total_lines": 5,
          "line_start": 139,
          "line_end": 143,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(0, 0, key, null, true);<br/><br/>        return oldSize != size();"
        },
        {
          "total_lines": 5,
          "line_start": 152,
          "line_end": 156,
          "content": "if (keySet == null) {<br/>            keySet = new KeySet();<br/>        }<br/><br/>        return keySet;"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import java.util.NoSuchElementException;<br/><br/>import org.hsqldb.map.BaseHashMap;"
        },
        {
          "total_lines": 3,
          "line_start": 130,
          "line_end": 132,
          "content": "int oldSize = size();<br/><br/>        super.addOrRemove(0, value, key, null, false);"
        },
        {
          "total_lines": 3,
          "line_start": 141,
          "line_end": 143,
          "content": "super.addOrRemove(0, 0, key, null, true);<br/><br/>        return oldSize != size();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestMultiInsert.java",
      "loc_duplicate": 165,
      "clones": [
          {
          "total_lines": 18,
          "line_start": 70,
          "line_end": 87,
          "content": "int rows = 0;<br/>        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/><br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \"<br/>            + expected + \" rows total:\\n\";<br/><br/>        while (rs.next()) {<br/>            for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                result += rsmd.getColumnLabel(i + 1) + \":\"<br/>                           + rs.getString(i + 1) + \":\";<br/>            }<br/>            result += \"\\n\";<br/>            rows++;<br/>        }<br/>        rs.close();<br/>        System.out.println(result);<br/>        assertEquals(expected, rows);"
        },
        {
          "total_lines": 17,
          "line_start": 70,
          "line_end": 86,
          "content": "int rows = 0;<br/>        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/><br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \"<br/>            + expected + \" rows total:\\n\";<br/><br/>        while (rs.next()) {<br/>            for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                result += rsmd.getColumnLabel(i + 1) + \":\"<br/>                           + rs.getString(i + 1) + \":\";<br/>            }<br/>            result += \"\\n\";<br/>            rows++;<br/>        }<br/>        rs.close();<br/>        System.out.println(result);"
        },
        {
          "total_lines": 17,
          "line_start": 71,
          "line_end": 87,
          "content": "ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/><br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \"<br/>            + expected + \" rows total:\\n\";<br/><br/>        while (rs.next()) {<br/>            for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                result += rsmd.getColumnLabel(i + 1) + \":\"<br/>                           + rs.getString(i + 1) + \":\";<br/>            }<br/>            result += \"\\n\";<br/>            rows++;<br/>        }<br/>        rs.close();<br/>        System.out.println(result);<br/>        assertEquals(expected, rows);"
        },
        {
          "total_lines": 16,
          "line_start": 70,
          "line_end": 85,
          "content": "int rows = 0;<br/>        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/><br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \"<br/>            + expected + \" rows total:\\n\";<br/><br/>        while (rs.next()) {<br/>            for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                result += rsmd.getColumnLabel(i + 1) + \":\"<br/>                           + rs.getString(i + 1) + \":\";<br/>            }<br/>            result += \"\\n\";<br/>            rows++;<br/>        }<br/>        rs.close();"
        },
        {
          "total_lines": 16,
          "line_start": 71,
          "line_end": 86,
          "content": "ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/><br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \"<br/>            + expected + \" rows total:\\n\";<br/><br/>        while (rs.next()) {<br/>            for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                result += rsmd.getColumnLabel(i + 1) + \":\"<br/>                           + rs.getString(i + 1) + \":\";<br/>            }<br/>            result += \"\\n\";<br/>            rows++;<br/>        }<br/>        rs.close();<br/>        System.out.println(result);"
        },
        {
          "total_lines": 15,
          "line_start": 71,
          "line_end": 85,
          "content": "ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/><br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \"<br/>            + expected + \" rows total:\\n\";<br/><br/>        while (rs.next()) {<br/>            for (int i = 0; i < rsmd.getColumnCount(); i++) {<br/>                result += rsmd.getColumnLabel(i + 1) + \":\"<br/>                           + rs.getString(i + 1) + \":\";<br/>            }<br/>            result += \"\\n\";<br/>            rows++;<br/>        }<br/>        rs.close();"
        },
        {
          "total_lines": 10,
          "line_start": 34,
          "line_end": 43,
          "content": "import java.sql.Connection;<br/>import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;<br/>import java.sql.Statement;<br/>import java.util.Enumeration;<br/><br/>import junit.framework.TestCase;<br/>import junit.framework.TestResult;"
        },
        {
          "total_lines": 9,
          "line_start": 35,
          "line_end": 43,
          "content": "import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;<br/>import java.sql.Statement;<br/>import java.util.Enumeration;<br/><br/>import junit.framework.TestCase;<br/>import junit.framework.TestResult;"
        },
        {
          "total_lines": 9,
          "line_start": 34,
          "line_end": 42,
          "content": "import java.sql.Connection;<br/>import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;<br/>import java.sql.Statement;<br/>import java.util.Enumeration;<br/><br/>import junit.framework.TestCase;"
        },
        {
          "total_lines": 8,
          "line_start": 35,
          "line_end": 42,
          "content": "import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;<br/>import java.sql.Statement;<br/>import java.util.Enumeration;<br/><br/>import junit.framework.TestCase;"
        },
        {
          "total_lines": 8,
          "line_start": 36,
          "line_end": 43,
          "content": "import java.sql.ResultSet;<br/>import java.sql.ResultSetMetaData;<br/>import java.sql.SQLException;<br/>import java.sql.Statement;<br/>import java.util.Enumeration;<br/><br/>import junit.framework.TestCase;<br/>import junit.framework.TestResult;"
        },
        {
          "total_lines": 6,
          "line_start": 61,
          "line_end": 66,
          "content": "super.setUp();<br/><br/>        try {<br/>            connection = super.newConnection();<br/>            stmnt      = connection.createStatement();<br/>        } catch (Exception e) {}"
        },
        {
          "total_lines": 6,
          "line_start": 70,
          "line_end": 75,
          "content": "int rows = 0;<br/>        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/><br/>        ResultSetMetaData rsmd = rs.getMetaData();<br/>        String result = \"Table \" + table + \", expecting \"<br/>            + expected + \" rows total:\\n\";"
        },
        {
          "total_lines": 3,
          "line_start": 85,
          "line_end": 87,
          "content": "rs.close();<br/>        System.out.println(result);<br/>        assertEquals(expected, rows);"
        },
        {
          "total_lines": 3,
          "line_start": 71,
          "line_end": 73,
          "content": "ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);<br/><br/>        ResultSetMetaData rsmd = rs.getMetaData();"
        },
        {
          "total_lines": 2,
          "line_start": 70,
          "line_end": 71,
          "content": "int rows = 0;<br/>        ResultSet rs = stmnt.executeQuery(\"SELECT \" + cols + \" FROM \" + table);"
        },
        {
          "total_lines": 2,
          "line_start": 144,
          "line_end": 145,
          "content": "e.printStackTrace();<br/>            System.out.println(\"TestSql.tearDown() error: \" + e.getMessage());"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/BlobInputStream.java",
      "loc_duplicate": 39,
      "clones": [
          {
          "total_lines": 13,
          "line_start": 100,
          "line_end": 112,
          "content": "checkClosed();<br/><br/>        if (n <= 0) {<br/>            return 0;<br/>        }<br/><br/>        if (currentPosition + n > availableLength) {<br/>            n = availableLength - currentPosition;<br/>        }<br/><br/>        currentPosition += n;<br/><br/>        return n;"
        },
        {
          "total_lines": 11,
          "line_start": 100,
          "line_end": 110,
          "content": "checkClosed();<br/><br/>        if (n <= 0) {<br/>            return 0;<br/>        }<br/><br/>        if (currentPosition + n > availableLength) {<br/>            n = availableLength - currentPosition;<br/>        }<br/><br/>        currentPosition += n;"
        },
        {
          "total_lines": 7,
          "line_start": 117,
          "line_end": 123,
          "content": "long avail = availableLength - currentPosition;<br/><br/>        if (avail > Integer.MAX_VALUE) {<br/>            return Integer.MAX_VALUE;<br/>        }<br/><br/>        return (int) avail;"
        },
        {
          "total_lines": 5,
          "line_start": 119,
          "line_end": 123,
          "content": "if (avail > Integer.MAX_VALUE) {<br/>            return Integer.MAX_VALUE;<br/>        }<br/><br/>        return (int) avail;"
        },
        {
          "total_lines": 2,
          "line_start": 69,
          "line_end": 70,
          "content": "this.currentPosition = offset;<br/>        this.streamBlockSize = session.getStreamBlockSize();"
        },
        {
          "total_lines": 1,
          "line_start": 62,
          "line_end": 62,
          "content": "long offset, long length"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCPreparedStatement.java",
      "loc_duplicate": 225,
      "clones": [
          {
          "total_lines": 12,
          "line_start": 4418,
          "line_end": 4429,
          "content": "if (is.session.getDatabaseUniqueName().equals(<br/>                    session.getDatabaseUniqueName())) {<br/>                throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,<br/>                                        \"invalid Reader\");<br/>            }<br/><br/>            // in the same database ? see if it blocks in<br/>            parameterValues[i - 1] = o;<br/>            streamLengths[i - 1]   = streamLength;<br/>            parameterSet[i - 1]    = Boolean.FALSE;<br/><br/>            return;"
        },
        {
          "total_lines": 10,
          "line_start": 4348,
          "line_end": 4357,
          "content": "if (is.session.getDatabaseUniqueName().equals(<br/>                    session.getDatabaseUniqueName())) {<br/>                throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,<br/>                                        \"invalid Reader\");<br/>            }<br/>            parameterValues[i - 1] = o;<br/>            streamLengths[i - 1]   = streamLength;<br/>            parameterSet[i - 1]    = Boolean.FALSE;<br/><br/>            return;"
        },
        {
          "total_lines": 9,
          "line_start": 4418,
          "line_end": 4426,
          "content": "if (is.session.getDatabaseUniqueName().equals(<br/>                    session.getDatabaseUniqueName())) {<br/>                throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,<br/>                                        \"invalid Reader\");<br/>            }<br/><br/>            // in the same database ? see if it blocks in<br/>            parameterValues[i - 1] = o;<br/>            streamLengths[i - 1]   = streamLength;"
        },
        {
          "total_lines": 7,
          "line_start": 3900,
          "line_end": 3906,
          "content": "SQLWarning w = JDBCUtil.sqlWarning(current);<br/><br/>                if (rootWarning == null) {<br/>                    rootWarning = w;<br/>                } else {<br/>                    rootWarning.setNextWarning(w);<br/>                }"
        },
        {
          "total_lines": 7,
          "line_start": 4348,
          "line_end": 4354,
          "content": "if (is.session.getDatabaseUniqueName().equals(<br/>                    session.getDatabaseUniqueName())) {<br/>                throw JDBCUtil.sqlException(ErrorCode.JDBC_INVALID_ARGUMENT,<br/>                                        \"invalid Reader\");<br/>            }<br/>            parameterValues[i - 1] = o;<br/>            streamLengths[i - 1]   = streamLength;"
        },
        {
          "total_lines": 5,
          "line_start": 4359,
          "line_end": 4363,
          "content": "parameterValues[i - 1] = o;<br/>            streamLengths[i - 1]   = streamLength;<br/>            parameterSet[i - 1]    = Boolean.FALSE;<br/><br/>            return;"
        },
        {
          "total_lines": 5,
          "line_start": 4431,
          "line_end": 4435,
          "content": "parameterValues[i - 1] = o;<br/>            streamLengths[i - 1]   = streamLength;<br/>            parameterSet[i - 1]    = Boolean.FALSE;<br/><br/>            return;"
        },
        {
          "total_lines": 5,
          "line_start": 3808,
          "line_end": 3812,
          "content": "if (isWrapperFor(iface)) {<br/>            return (T) this;<br/>        }<br/><br/>        throw JDBCUtil.invalidArgument(\"iface: \" + iface);"
        },
        {
          "total_lines": 5,
          "line_start": 1937,
          "line_end": 1941,
          "content": "errorResult.getMainString();<br/><br/>                throw new BatchUpdateException(errorResult.getMainString(),<br/>                        errorResult.getSubString(),<br/>                        errorResult.getErrorCode(), updateCounts);"
        },
        {
          "total_lines": 4,
          "line_start": 1647,
          "line_end": 1650,
          "content": "parameterValues[i] = null;<br/>            parameterSet[i]    = Boolean.TRUE;<br/><br/>            return;"
        },
        {
          "total_lines": 4,
          "line_start": 4226,
          "line_end": 4229,
          "content": "o = outType.convertToType(session, o,<br/>                                Type.SQL_VARCHAR);<br/><br/>                        break;"
        },
        {
          "total_lines": 4,
          "line_start": 1722,
          "line_end": 1725,
          "content": "parameterValues[i] = null;<br/>            parameterSet[i]    = Boolean.TRUE;<br/><br/>            return;"
        },
        {
          "total_lines": 4,
          "line_start": 4360,
          "line_end": 4363,
          "content": "streamLengths[i - 1]   = streamLength;<br/>            parameterSet[i - 1]    = Boolean.FALSE;<br/><br/>            return;"
        },
        {
          "total_lines": 4,
          "line_start": 1573,
          "line_end": 1576,
          "content": "parameterValues[i] = null;<br/>            parameterSet[i]    = Boolean.TRUE;<br/><br/>            return;"
        },
        {
          "total_lines": 4,
          "line_start": 418,
          "line_end": 421,
          "content": "parameterValues[--parameterIndex] = Integer.valueOf(x);<br/>            parameterSet[parameterIndex]      = Boolean.TRUE;<br/><br/>            return;"
        },
        {
          "total_lines": 4,
          "line_start": 4249,
          "line_end": 4252,
          "content": "o = outType.convertToType(session, o,<br/>                                Type.SQL_VARCHAR);<br/><br/>                        break;"
        },
        {
          "total_lines": 4,
          "line_start": 4114,
          "line_end": 4117,
          "content": "parameterValues[i] = null;<br/>            parameterSet[i]    = Boolean.TRUE;<br/><br/>            return;"
        },
        {
          "total_lines": 4,
          "line_start": 4432,
          "line_end": 4435,
          "content": "streamLengths[i - 1]   = streamLength;<br/>            parameterSet[i - 1]    = Boolean.FALSE;<br/><br/>            return;"
        },
        {
          "total_lines": 4,
          "line_start": 447,
          "line_end": 450,
          "content": "parameterValues[--parameterIndex] = Integer.valueOf(x);<br/>            parameterSet[parameterIndex]      = Boolean.TRUE;<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 4139,
          "line_end": 4141,
          "content": "o = outType.convertToDefaultType(session, o);<br/><br/>                        break;"
        },
        {
          "total_lines": 3,
          "line_start": 4157,
          "line_end": 4159,
          "content": "o = outType.convertToDefaultType(session, o);<br/><br/>                        break;"
        },
        {
          "total_lines": 3,
          "line_start": 4359,
          "line_end": 4361,
          "content": "parameterValues[i - 1] = o;<br/>            streamLengths[i - 1]   = streamLength;<br/>            parameterSet[i - 1]    = Boolean.FALSE;"
        },
        {
          "total_lines": 3,
          "line_start": 4145,
          "line_end": 4147,
          "content": "o = outType.convertToDefaultType(session, o);<br/><br/>                        break;"
        },
        {
          "total_lines": 3,
          "line_start": 4296,
          "line_end": 4298,
          "content": "o = outType.convertToDefaultType(session, o);<br/><br/>                    break;"
        },
        {
          "total_lines": 3,
          "line_start": 4115,
          "line_end": 4117,
          "content": "parameterSet[i]    = Boolean.TRUE;<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 4177,
          "line_end": 4179,
          "content": "o = outType.convertToDefaultType(session, o);<br/><br/>                        break;"
        },
        {
          "total_lines": 3,
          "line_start": 419,
          "line_end": 421,
          "content": "parameterSet[parameterIndex]      = Boolean.TRUE;<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 4151,
          "line_end": 4153,
          "content": "o = outType.convertToDefaultType(session, o);<br/><br/>                        break;"
        },
        {
          "total_lines": 3,
          "line_start": 4270,
          "line_end": 4272,
          "content": "o = outType.convertToDefaultType(session, o);<br/><br/>                        break;"
        },
        {
          "total_lines": 3,
          "line_start": 1723,
          "line_end": 1725,
          "content": "parameterSet[i]    = Boolean.TRUE;<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 4433,
          "line_end": 4435,
          "content": "parameterSet[i - 1]    = Boolean.FALSE;<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 1574,
          "line_end": 1576,
          "content": "parameterSet[i]    = Boolean.TRUE;<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 4431,
          "line_end": 4433,
          "content": "parameterValues[i - 1] = o;<br/>            streamLengths[i - 1]   = streamLength;<br/>            parameterSet[i - 1]    = Boolean.FALSE;"
        },
        {
          "total_lines": 3,
          "line_start": 4361,
          "line_end": 4363,
          "content": "parameterSet[i - 1]    = Boolean.FALSE;<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 1648,
          "line_end": 1650,
          "content": "parameterSet[i]    = Boolean.TRUE;<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 4005,
          "line_end": 4007,
          "content": "String msg = \"parameter index out of range: \" + i;<br/><br/>            throw JDBCUtil.outOfRangeArgument(msg);"
        },
        {
          "total_lines": 3,
          "line_start": 4025,
          "line_end": 4027,
          "content": "String msg = \"parameter index out of range: \" + i;<br/><br/>            throw JDBCUtil.outOfRangeArgument(msg);"
        },
        {
          "total_lines": 3,
          "line_start": 1928,
          "line_end": 1930,
          "content": "Object[] data = (Object[]) navigator.getNext();<br/><br/>            updateCounts[i] = ((Integer) data[0]).intValue();"
        },
        {
          "total_lines": 3,
          "line_start": 448,
          "line_end": 450,
          "content": "parameterSet[parameterIndex]      = Boolean.TRUE;<br/><br/>            return;"
        },
        {
          "total_lines": 2,
          "line_start": 2608,
          "line_end": 2609,
          "content": "java.io.InputStream x,<br/>                      long length"
        },
        {
          "total_lines": 2,
          "line_start": 2737,
          "line_end": 2738,
          "content": "ErrorCode.JDBC_INVALID_ARGUMENT,<br/>                                    \"length: \" + length"
        },
        {
          "total_lines": 2,
          "line_start": 2503,
          "line_end": 2504,
          "content": "InputStream inputStream,<br/>                                     long length"
        },
        {
          "total_lines": 2,
          "line_start": 1817,
          "line_end": 1818,
          "content": "int parameterIndex, int sqlType,<br/>                                     String typeName"
        },
        {
          "total_lines": 2,
          "line_start": 800,
          "line_end": 801,
          "content": "int parameterIndex,<br/>            java.io.InputStream x, int length"
        },
        {
          "total_lines": 2,
          "line_start": 1312,
          "line_end": 1313,
          "content": "ErrorCode.JDBC_INPUTSTREAM_ERROR,<br/>                                    e.toString(), e"
        },
        {
          "total_lines": 2,
          "line_start": 2530,
          "line_end": 2531,
          "content": "Reader reader,<br/>                                      long length"
        },
        {
          "total_lines": 2,
          "line_start": 2670,
          "line_end": 2671,
          "content": "java.io.InputStream x,<br/>                              long length"
        },
        {
          "total_lines": 2,
          "line_start": 2810,
          "line_end": 2811,
          "content": "int parameterIndex,<br/>                               java.io.InputStream x"
        },
        {
          "total_lines": 2,
          "line_start": 739,
          "line_end": 740,
          "content": "int parameterIndex,<br/>            java.io.InputStream x, int length"
        },
        {
          "total_lines": 2,
          "line_start": 3881,
          "line_end": 3882,
          "content": "resultSetType,<br/>            resultSetConcurrency"
        },
        {
          "total_lines": 2,
          "line_start": 2461,
          "line_end": 2462,
          "content": "Reader reader,<br/>                                     long length"
        },
        {
          "total_lines": 2,
          "line_start": 1188,
          "line_end": 1189,
          "content": "int parameterIndex,<br/>            java.io.Reader reader"
        },
        {
          "total_lines": 2,
          "line_start": 2660,
          "line_end": 2661,
          "content": "int parameterIndex,<br/>            java.io.InputStream x, long length"
        },
        {
          "total_lines": 2,
          "line_start": 2733,
          "line_end": 2734,
          "content": "int parameterIndex,<br/>            java.io.Reader reader, long length"
        },
        {
          "total_lines": 2,
          "line_start": 2602,
          "line_end": 2603,
          "content": "ErrorCode.JDBC_INVALID_ARGUMENT,<br/>                                    \"length: \" + length"
        },
        {
          "total_lines": 2,
          "line_start": 2743,
          "line_end": 2744,
          "content": "java.io.Reader reader,<br/>                               long length"
        },
        {
          "total_lines": 2,
          "line_start": 1537,
          "line_end": 1538,
          "content": "resultMetaData,<br/>                    isUpdatable, isInsertable, connection"
        },
        {
          "total_lines": 2,
          "line_start": 2770,
          "line_end": 2771,
          "content": "ErrorCode.JDBC_INPUTSTREAM_ERROR,<br/>                                    e.toString(), e"
        },
        {
          "total_lines": 2,
          "line_start": 2598,
          "line_end": 2599,
          "content": "int parameterIndex,<br/>            java.io.InputStream x, long length"
        },
        {
          "total_lines": 2,
          "line_start": 2699,
          "line_end": 2700,
          "content": "ErrorCode.JDBC_INPUTSTREAM_ERROR,<br/>                                    e.toString(), e"
        },
        {
          "total_lines": 2,
          "line_start": 873,
          "line_end": 874,
          "content": "int parameterIndex,<br/>            java.io.InputStream x, int length"
        },
        {
          "total_lines": 2,
          "line_start": 2664,
          "line_end": 2665,
          "content": "ErrorCode.JDBC_INVALID_ARGUMENT,<br/>                                    \"length: \" + length"
        },
        {
          "total_lines": 2,
          "line_start": 2854,
          "line_end": 2855,
          "content": "int parameterIndex,<br/>            java.io.InputStream x"
        },
        {
          "total_lines": 1,
          "line_start": 3882,
          "line_end": 3882,
          "content": "resultSetConcurrency, resultSetHoldability"
        },
        {
          "total_lines": 1,
          "line_start": 801,
          "line_end": 801,
          "content": "java.io.InputStream x, int length"
        },
        {
          "total_lines": 1,
          "line_start": 2771,
          "line_end": 2771,
          "content": "e.toString(), e"
        },
        {
          "total_lines": 1,
          "line_start": 3884,
          "line_end": 3884,
          "content": "0, 0"
        },
        {
          "total_lines": 1,
          "line_start": 2700,
          "line_end": 2700,
          "content": "e.toString(), e"
        },
        {
          "total_lines": 1,
          "line_start": 2734,
          "line_end": 2734,
          "content": "java.io.Reader reader, long length"
        },
        {
          "total_lines": 1,
          "line_start": 1313,
          "line_end": 1313,
          "content": "e.toString(), e"
        },
        {
          "total_lines": 1,
          "line_start": 874,
          "line_end": 874,
          "content": "java.io.InputStream x, int length"
        },
        {
          "total_lines": 1,
          "line_start": 2661,
          "line_end": 2661,
          "content": "java.io.InputStream x, long length"
        },
        {
          "total_lines": 1,
          "line_start": 740,
          "line_end": 740,
          "content": "java.io.InputStream x, int length"
        },
        {
          "total_lines": 1,
          "line_start": 3884,
          "line_end": 3884,
          "content": "0, 0"
        },
        {
          "total_lines": 1,
          "line_start": 2599,
          "line_end": 2599,
          "content": "java.io.InputStream x, long length"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCDriver.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 42,
          "line_end": 43,
          "content": "import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.persist.HsqlDatabaseProperties;"
        },
        {
          "total_lines": 2,
          "line_start": 465,
          "line_end": 466,
          "content": "p.required = false;<br/>        p.choices  = choices;"
        },
        {
          "total_lines": 2,
          "line_start": 395,
          "line_end": 396,
          "content": "0, DatabaseURL.S_URL_INTERNAL, 0,<br/>                              DatabaseURL.S_URL_INTERNAL.length()"
        },
        {
          "total_lines": 2,
          "line_start": 249,
          "line_end": 250,
          "content": "0, DatabaseURL.S_URL_INTERNAL, 0,<br/>                              DatabaseURL.S_URL_INTERNAL.length()"
        },
        {
          "total_lines": 2,
          "line_start": 455,
          "line_end": 456,
          "content": "p.required = false;<br/>        p.choices  = choices;"
        },
        {
          "total_lines": 2,
          "line_start": 460,
          "line_end": 461,
          "content": "p.required = false;<br/>        p.choices  = choices;"
        },
        {
          "total_lines": 2,
          "line_start": 470,
          "line_end": 471,
          "content": "p.required = false;<br/>        p.choices  = choices;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/index/IndexAVLMemory.java",
      "loc_duplicate": 34,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 114,
          "line_end": 118,
          "content": "TableBase table,<br/>                          int[] columns, boolean[] descending,<br/>                          boolean[] nullsLast, Type[] colTypes, boolean pk,<br/>                          boolean unique, boolean constraint,<br/>                          boolean forward"
        },
        {
          "total_lines": 5,
          "line_start": 223,
          "line_end": 227,
          "content": "compareRowId = true;<br/>                        compare = compareRowForInsertOrDelete(session, row,<br/>                                                              currentRow,<br/>                                                              compareRowId,<br/>                                                              colIndex.length);"
        },
        {
          "total_lines": 4,
          "line_start": 114,
          "line_end": 117,
          "content": "TableBase table,<br/>                          int[] columns, boolean[] descending,<br/>                          boolean[] nullsLast, Type[] colTypes, boolean pk,<br/>                          boolean unique, boolean constraint"
        },
        {
          "total_lines": 3,
          "line_start": 114,
          "line_end": 116,
          "content": "HsqlName name, long id, TableBase table,<br/>                          int[] columns, boolean[] descending,<br/>                          boolean[] nullsLast"
        },
        {
          "total_lines": 3,
          "line_start": 193,
          "line_end": 195,
          "content": "store.setAccessor(this, ((RowAVL) row).getNode(position));<br/><br/>                return;"
        },
        {
          "total_lines": 3,
          "line_start": 142,
          "line_end": 144,
          "content": "checkNodes(store, f);<br/><br/>                f = next(store, f);"
        },
        {
          "total_lines": 2,
          "line_start": 114,
          "line_end": 115,
          "content": "long id, TableBase table,<br/>                          int[] columns, boolean[] descending"
        },
        {
          "total_lines": 2,
          "line_start": 117,
          "line_end": 118,
          "content": "boolean unique, boolean constraint,<br/>                          boolean forward"
        },
        {
          "total_lines": 2,
          "line_start": 119,
          "line_end": 120,
          "content": "name, id, table, columns, descending, nullsLast, colTypes, pk,<br/>              unique"
        },
        {
          "total_lines": 1,
          "line_start": 117,
          "line_end": 117,
          "content": "boolean unique, boolean constraint"
        },
        {
          "total_lines": 1,
          "line_start": 253,
          "line_end": 253,
          "content": "isleft, ((RowAVL) row).getNode(position)"
        },
        {
          "total_lines": 1,
          "line_start": 501,
          "line_end": 501,
          "content": "NodeAVL x, boolean isleft"
        },
        {
          "total_lines": 1,
          "line_start": 176,
          "line_end": 176,
          "content": "Session session, PersistentStore store"
        },
        {
          "total_lines": 1,
          "line_start": 119,
          "line_end": 119,
          "content": "name, id, table, columns, descending, nullsLast"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/TransferSQLText.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 83,
          "line_end": 84,
          "content": "WTextWrite.write(statement + \"\\n\");<br/>            WTextWrite.flush();"
        },
        {
          "total_lines": 2,
          "line_start": 651,
          "line_end": 652,
          "content": "TransferTable TTable,<br/>                           DataAccessPoint Dest"
        },
        {
          "total_lines": 2,
          "line_start": 112,
          "line_end": 113,
          "content": "WTextWrite.write(statement + \"\\n\");<br/>                    WTextWrite.flush();"
        },
        {
          "total_lines": 2,
          "line_start": 567,
          "line_end": 568,
          "content": "relatedTable.Stmts.sSourceTable,<br/>                                    relatedTable"
        },
        {
          "total_lines": 2,
          "line_start": 423,
          "line_end": 424,
          "content": "relatedTable.Stmts.sSourceTable,<br/>                                    relatedTable"
        },
        {
          "total_lines": 2,
          "line_start": 92,
          "line_end": 93,
          "content": "String statement, TransferResultSet r,<br/>                 int iMaxRows"
        },
        {
          "total_lines": 2,
          "line_start": 435,
          "line_end": 436,
          "content": "TransferTable TTable,<br/>                             DataAccessPoint Dest"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/navigator/RowSetNavigator.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 321,
          "line_end": 322,
          "content": "RowOutputInterface out,<br/>                               ResultMetaData meta"
        },
        {
          "total_lines": 2,
          "line_start": 324,
          "line_end": 325,
          "content": "RowInputInterface in,<br/>                              ResultMetaData meta"
        },
        {
          "total_lines": 2,
          "line_start": 316,
          "line_end": 317,
          "content": "RowInputInterface in,<br/>                           ResultMetaData meta"
        },
        {
          "total_lines": 2,
          "line_start": 311,
          "line_end": 312,
          "content": "RowOutputInterface out,<br/>                            ResultMetaData meta"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestSchemaParse.java",
      "loc_duplicate": 34,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 668,
          "line_end": 671,
          "content": "execSQL(\"CREATE TABLE t1 (i \" + pref + \"INT, vc VARCHAR)\", expect);<br/>        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset<br/>        execSQL(\"CREATE TABLE t1 (i INT, vc \" + pref + \"VARCHAR)\", expect);<br/>        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset"
        },
        {
          "total_lines": 4,
          "line_start": 676,
          "line_end": 679,
          "content": "execSQL(\"CREATE TABLE t1 (i \" + pref + \"INT, vc VARCHAR)\", expect);<br/>        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset<br/>        execSQL(\"CREATE TABLE t1 (i INT, vc \" + pref + \"VARCHAR)\", expect);<br/>        execSQL(\"DROP TABLE t1 IF EXISTS\", 0);         // reset"
        },
        {
          "total_lines": 2,
          "line_start": 1016,
          "line_end": 1017,
          "content": "String name, String table, Object[] row1,<br/>                     Object[] row2"
        },
        {
          "total_lines": 1,
          "line_start": 789,
          "line_end": 789,
          "content": "\"ALTER TABLE constrainedtbl DROP CONSTRAINT ucons\", true"
        },
        {
          "total_lines": 1,
          "line_start": 174,
          "line_end": 174,
          "content": "\"ALTER TABLE \" + prefix + \"tsttbl ADD COLUMN vco1 VARCHAR(100)\", 0"
        },
        {
          "total_lines": 1,
          "line_start": 369,
          "line_end": 369,
          "content": "\"ALTER TABLE tsttbl ADD COLUMN vco1 VARCHAR(100)\", 0"
        },
        {
          "total_lines": 1,
          "line_start": 796,
          "line_end": 796,
          "content": "\"ALTER TABLE constrainedtbl DROP CONSTRAINT ucons\", true"
        },
        {
          "total_lines": 1,
          "line_start": 785,
          "line_end": 785,
          "content": "\"ALTER TABLE constrainedtbl DROP CONSTRAINT ucons\", true"
        },
        {
          "total_lines": 1,
          "line_start": 808,
          "line_end": 808,
          "content": "\"ALTER TABLE renamedtbl RENAME TO playtbl\", true"
        },
        {
          "total_lines": 1,
          "line_start": 838,
          "line_end": 838,
          "content": "\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", true"
        },
        {
          "total_lines": 1,
          "line_start": 834,
          "line_end": 834,
          "content": "\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", true"
        },
        {
          "total_lines": 1,
          "line_start": 841,
          "line_end": 841,
          "content": "\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", true"
        },
        {
          "total_lines": 1,
          "line_start": 337,
          "line_end": 337,
          "content": "2, queryRowCount(\"SELECT i FROM tstview\")"
        },
        {
          "total_lines": 1,
          "line_start": 130,
          "line_end": 130,
          "content": "\"Join\", 1"
        },
        {
          "total_lines": 1,
          "line_start": 387,
          "line_end": 387,
          "content": "\"ALTER TABLE tsttbl ADD COLUMN vco1 VARCHAR(100)\", 0"
        },
        {
          "total_lines": 1,
          "line_start": 822,
          "line_end": 822,
          "content": "\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", true"
        },
        {
          "total_lines": 1,
          "line_start": 805,
          "line_end": 805,
          "content": "\"ALTER TABLE renamedtbl RENAME TO playtbl\", true"
        },
        {
          "total_lines": 1,
          "line_start": 826,
          "line_end": 826,
          "content": "\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", true"
        },
        {
          "total_lines": 1,
          "line_start": 830,
          "line_end": 830,
          "content": "\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", true"
        },
        {
          "total_lines": 1,
          "line_start": 811,
          "line_end": 811,
          "content": "\"ALTER TABLE renamedtbl RENAME TO playtbl\", true"
        },
        {
          "total_lines": 1,
          "line_start": 152,
          "line_end": 152,
          "content": "\"Join\", 1"
        },
        {
          "total_lines": 1,
          "line_start": 172,
          "line_end": 172,
          "content": "\"ALTER TABLE \" + prefix + \"tsttbl ADD COLUMN vco1 VARCHAR(100)\", 0"
        },
        {
          "total_lines": 1,
          "line_start": 222,
          "line_end": 222,
          "content": "2, queryRowCount(\"SELECT i FROM tstview\")"
        },
        {
          "total_lines": 1,
          "line_start": 1016,
          "line_end": 1016,
          "content": "int i, String name, String table, Object[] row1"
        },
        {
          "total_lines": 1,
          "line_start": 793,
          "line_end": 793,
          "content": "\"ALTER TABLE constrainedtbl DROP CONSTRAINT ucons\", true"
        },
        {
          "total_lines": 1,
          "line_start": 799,
          "line_end": 799,
          "content": "\"ALTER TABLE constrainedtbl DROP CONSTRAINT ucons\", true"
        },
        {
          "total_lines": 1,
          "line_start": 844,
          "line_end": 844,
          "content": "\"ALTER TABLE foreigntbl DROP CONSTRAINT tstfk\", true"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementProcedure.java",
      "loc_duplicate": 13,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 378,
          "line_end": 386,
          "content": "for (int i = 0; i < subqueries.length; i++) {<br/>                if (subqueries[i].queryExpression != null) {<br/>                    subqueries[i].queryExpression.getBaseTableNames(set);<br/>                }<br/>            }<br/><br/>            for (int i = 0; i < routines.length; i++) {<br/>                set.addAll(routines[i].getTableNamesForRead());<br/>            }"
        },
        {
          "total_lines": 2,
          "line_start": 70,
          "line_end": 71,
          "content": "StatementTypes.X_SQL_DATA,<br/>              session.getCurrentSchemaHsqlName()"
        },
        {
          "total_lines": 2,
          "line_start": 102,
          "line_end": 103,
          "content": "StatementTypes.X_SQL_DATA,<br/>              session.getCurrentSchemaHsqlName()"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/index/NodeAVL.java",
      "loc_duplicate": 11,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 215,
          "line_end": 219,
          "content": "if (n != null) {<br/>                n = n.setParent(store, null);<br/>            }<br/><br/>            store.setAccessor(index, n);"
        },
        {
          "total_lines": 1,
          "line_start": 169,
          "line_end": 169,
          "content": "PersistentStore persistentStore, NodeAVL n"
        },
        {
          "total_lines": 1,
          "line_start": 239,
          "line_end": 239,
          "content": "RowOutputInterface out, LongLookup lookup"
        },
        {
          "total_lines": 1,
          "line_start": 212,
          "line_end": 212,
          "content": "PersistentStore store, Index index, NodeAVL n"
        },
        {
          "total_lines": 1,
          "line_start": 197,
          "line_end": 197,
          "content": "boolean isLeft, NodeAVL n"
        },
        {
          "total_lines": 1,
          "line_start": 131,
          "line_end": 131,
          "content": "PersistentStore persistentStore, NodeAVL n"
        },
        {
          "total_lines": 1,
          "line_start": 154,
          "line_end": 154,
          "content": "PersistentStore persistentStore, NodeAVL n"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/Trigger.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 126,
          "line_end": 127,
          "content": "String trigName, String tabName, Object[] oldRow,<br/>              Object[] newRow"
        },
        {
          "total_lines": 1,
          "line_start": 126,
          "line_end": 126,
          "content": "int type, String trigName"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rights/Right.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 794,
          "line_end": 795,
          "content": "sb.append(Tokens.T_REFERENCES);<br/>            sb.append(',');"
        },
        {
          "total_lines": 2,
          "line_start": 802,
          "line_end": 803,
          "content": "sb.append(Tokens.T_TRIGGER);<br/>            sb.append(',');"
        },
        {
          "total_lines": 2,
          "line_start": 791,
          "line_end": 792,
          "content": "sb.append(Tokens.T_REFERENCES);<br/>            sb.append(',');"
        },
        {
          "total_lines": 2,
          "line_start": 799,
          "line_end": 800,
          "content": "sb.append(Tokens.T_TRIGGER);<br/>            sb.append(',');"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rowio/RowInputTextLog.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 476,
          "line_end": 482,
          "content": "readNumberField(Type.SQL_BIGINT);<br/><br/>        if (value == null) {<br/>            return null;<br/>        }<br/><br/>        long id = ((Number) value).longValue();"
        },
        {
          "total_lines": 7,
          "line_start": 489,
          "line_end": 495,
          "content": "readNumberField(Type.SQL_BIGINT);<br/><br/>        if (value == null) {<br/>            return null;<br/>        }<br/><br/>        long id = ((Number) value).longValue();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/LobStoreMem.java",
      "loc_duplicate": 9,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 82,
          "line_end": 83,
          "content": "byte[] dataBytes, int blockAddress,<br/>                              int blockCount"
        },
        {
          "total_lines": 2,
          "line_start": 112,
          "line_end": 113,
          "content": "byte[] dataBytes, long position, int offset,<br/>                              int length"
        },
        {
          "total_lines": 1,
          "line_start": 71,
          "line_end": 71,
          "content": "dataBytes, dataBlockOffset * lobBlockSize"
        },
        {
          "total_lines": 1,
          "line_start": 102,
          "line_end": 102,
          "content": "dataBytes, dataBlockOffset * lobBlockSize"
        },
        {
          "total_lines": 1,
          "line_start": 112,
          "line_end": 112,
          "content": "long position, int offset"
        },
        {
          "total_lines": 1,
          "line_start": 70,
          "line_end": 70,
          "content": "largeBlock, blockOffset * lobBlockSize"
        },
        {
          "total_lines": 1,
          "line_start": 103,
          "line_end": 103,
          "content": "largeBlock, blockOffset * lobBlockSize"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rights/Grantee.java",
      "loc_duplicate": 112,
      "clones": [
          {
          "total_lines": 15,
          "line_start": 606,
          "line_end": 620,
          "content": "if (object instanceof Table) {<br/>            Table table = (Table) object;<br/><br/>            if (isFullyAccessibleByRole(table.getName())) {<br/>                return;<br/>            }<br/><br/>            Right right = (Right) fullRightsMap.get(table.getName());<br/><br/>            if (right != null && right.canReference(table, checkList)) {<br/>                return;<br/>            }<br/>        }<br/><br/>        throw Error.error(ErrorCode.X_42501, object.getName().name);"
        },
        {
          "total_lines": 15,
          "line_start": 587,
          "line_end": 601,
          "content": "if (object instanceof Table) {<br/>            Table table = (Table) object;<br/><br/>            if (isFullyAccessibleByRole(table.getName())) {<br/>                return;<br/>            }<br/><br/>            Right right = (Right) fullRightsMap.get(table.getName());<br/><br/>            if (right != null && right.canReference(table, checkList)) {<br/>                return;<br/>            }<br/>        }<br/><br/>        throw Error.error(ErrorCode.X_42501, object.getName().name);"
        },
        {
          "total_lines": 7,
          "line_start": 569,
          "line_end": 575,
          "content": "Table table = (Table) object;<br/><br/>            if (isFullyAccessibleByRole(table.getName())) {<br/>                return;<br/>            }<br/><br/>            Right right = (Right) fullRightsMap.get(table.getName());"
        },
        {
          "total_lines": 7,
          "line_start": 486,
          "line_end": 492,
          "content": "OrderedHashSet set = new OrderedHashSet();<br/><br/>            while (rights.hasNext()) {<br/>                set.add(rights.next());<br/>            }<br/><br/>            return set;"
        },
        {
          "total_lines": 7,
          "line_start": 531,
          "line_end": 537,
          "content": "Table table = (Table) object;<br/><br/>            if (isFullyAccessibleByRole(table.getName())) {<br/>                return;<br/>            }<br/><br/>            Right right = (Right) fullRightsMap.get(table.getName());"
        },
        {
          "total_lines": 7,
          "line_start": 550,
          "line_end": 556,
          "content": "Table table = (Table) object;<br/><br/>            if (isFullyAccessibleByRole(table.getName())) {<br/>                return;<br/>            }<br/><br/>            Right right = (Right) fullRightsMap.get(table.getName());"
        },
        {
          "total_lines": 7,
          "line_start": 509,
          "line_end": 515,
          "content": "OrderedHashSet set = new OrderedHashSet();<br/><br/>            while (rights.hasNext()) {<br/>                set.add(rights.next());<br/>            }<br/><br/>            return set;"
        },
        {
          "total_lines": 5,
          "line_start": 509,
          "line_end": 513,
          "content": "OrderedHashSet set = new OrderedHashSet();<br/><br/>            while (rights.hasNext()) {<br/>                set.add(rights.next());<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 486,
          "line_end": 490,
          "content": "OrderedHashSet set = new OrderedHashSet();<br/><br/>            while (rights.hasNext()) {<br/>                set.add(rights.next());<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 571,
          "line_end": 575,
          "content": "if (isFullyAccessibleByRole(table.getName())) {<br/>                return;<br/>            }<br/><br/>            Right right = (Right) fullRightsMap.get(table.getName());"
        },
        {
          "total_lines": 5,
          "line_start": 552,
          "line_end": 556,
          "content": "if (isFullyAccessibleByRole(table.getName())) {<br/>                return;<br/>            }<br/><br/>            Right right = (Right) fullRightsMap.get(table.getName());"
        },
        {
          "total_lines": 5,
          "line_start": 533,
          "line_end": 537,
          "content": "if (isFullyAccessibleByRole(table.getName())) {<br/>                return;<br/>            }<br/><br/>            Right right = (Right) fullRightsMap.get(table.getName());"
        },
        {
          "total_lines": 3,
          "line_start": 1167,
          "line_end": 1169,
          "content": "hsqlname.name,<br/>                                                  hsqlname.schema.name,<br/>                                                  SchemaObject.DOMAIN"
        },
        {
          "total_lines": 3,
          "line_start": 974,
          "line_end": 976,
          "content": "existing = add.duplicate();<br/><br/>                    fullRightsMap.put(key, existing);"
        },
        {
          "total_lines": 3,
          "line_start": 1150,
          "line_end": 1152,
          "content": "hsqlname.name,<br/>                                                  hsqlname.schema.name,<br/>                                                  SchemaObject.DOMAIN"
        },
        {
          "total_lines": 3,
          "line_start": 939,
          "line_end": 941,
          "content": "existing = add.duplicate();<br/><br/>                fullRightsMap.put(key, existing);"
        },
        {
          "total_lines": 2,
          "line_start": 1167,
          "line_end": 1168,
          "content": "hsqlname.name,<br/>                                                  hsqlname.schema.name"
        },
        {
          "total_lines": 2,
          "line_start": 1150,
          "line_end": 1151,
          "content": "hsqlname.name,<br/>                                                  hsqlname.schema.name"
        },
        {
          "total_lines": 1,
          "line_start": 166,
          "line_end": 166,
          "content": "Session session, SchemaObject parentObject"
        },
        {
          "total_lines": 1,
          "line_start": 660,
          "line_end": 660,
          "content": "ErrorCode.X_42501, object.getName().name"
        },
        {
          "total_lines": 1,
          "line_start": 544,
          "line_end": 544,
          "content": "ErrorCode.X_42501, object.getName().name"
        },
        {
          "total_lines": 1,
          "line_start": 563,
          "line_end": 563,
          "content": "ErrorCode.X_42501, object.getName().name"
        },
        {
          "total_lines": 1,
          "line_start": 582,
          "line_end": 582,
          "content": "ErrorCode.X_42501, object.getName().name"
        },
        {
          "total_lines": 1,
          "line_start": 639,
          "line_end": 639,
          "content": "ErrorCode.X_42501, object.getName().name"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/types/ClobInputStream.java",
      "loc_duplicate": 39,
      "clones": [
          {
          "total_lines": 13,
          "line_start": 119,
          "line_end": 131,
          "content": "checkClosed();<br/><br/>        if (n <= 0) {<br/>            return 0;<br/>        }<br/><br/>        if (currentPosition + n > availableLength) {<br/>            n = availableLength - currentPosition;<br/>        }<br/><br/>        currentPosition += n;<br/><br/>        return n;"
        },
        {
          "total_lines": 11,
          "line_start": 119,
          "line_end": 129,
          "content": "checkClosed();<br/><br/>        if (n <= 0) {<br/>            return 0;<br/>        }<br/><br/>        if (currentPosition + n > availableLength) {<br/>            n = availableLength - currentPosition;<br/>        }<br/><br/>        currentPosition += n;"
        },
        {
          "total_lines": 7,
          "line_start": 136,
          "line_end": 142,
          "content": "long avail = availableLength - currentPosition;<br/><br/>        if (avail > Integer.MAX_VALUE) {<br/>            return Integer.MAX_VALUE;<br/>        }<br/><br/>        return (int) avail;"
        },
        {
          "total_lines": 5,
          "line_start": 138,
          "line_end": 142,
          "content": "if (avail > Integer.MAX_VALUE) {<br/>            return Integer.MAX_VALUE;<br/>        }<br/><br/>        return (int) avail;"
        },
        {
          "total_lines": 2,
          "line_start": 69,
          "line_end": 70,
          "content": "this.currentPosition = offset;<br/>        this.streamBlockSize = session.getStreamBlockSize();"
        },
        {
          "total_lines": 1,
          "line_start": 62,
          "line_end": 62,
          "content": "long offset, long length"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestJDBCGeneratedColumns.java",
      "loc_duplicate": 46,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 253,
          "line_end": 258,
          "content": "ps.addBatch();<br/>            ps.addBatch();<br/>            ps.executeBatch();<br/><br/><br/>            rs = ps.getGeneratedKeys();"
        },
        {
          "total_lines": 5,
          "line_start": 215,
          "line_end": 219,
          "content": "ps.addBatch();<br/>            ps.addBatch();<br/>            ps.executeBatch();<br/><br/>            rs = ps.getGeneratedKeys();"
        },
        {
          "total_lines": 5,
          "line_start": 233,
          "line_end": 237,
          "content": "ps.addBatch();<br/>            ps.addBatch();<br/>            ps.executeBatch();<br/><br/>            rs = ps.getGeneratedKeys();"
        },
        {
          "total_lines": 5,
          "line_start": 198,
          "line_end": 202,
          "content": "ps.addBatch();<br/>            ps.addBatch();<br/>            ps.executeBatch();<br/><br/>            rs = ps.getGeneratedKeys();"
        },
        {
          "total_lines": 4,
          "line_start": 34,
          "line_end": 37,
          "content": "import java.sql.Connection;<br/>import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.Statement;"
        },
        {
          "total_lines": 3,
          "line_start": 104,
          "line_end": 106,
          "content": "ps.execute();<br/><br/>            rs = ps.getGeneratedKeys();"
        },
        {
          "total_lines": 3,
          "line_start": 180,
          "line_end": 182,
          "content": "ps.addBatch();<br/>            ps.addBatch();<br/>            ps.executeBatch();"
        },
        {
          "total_lines": 3,
          "line_start": 90,
          "line_end": 92,
          "content": "ps.execute();<br/><br/>            rs = ps.getGeneratedKeys();"
        },
        {
          "total_lines": 3,
          "line_start": 136,
          "line_end": 138,
          "content": "ps.execute();<br/><br/>            rs = ps.getGeneratedKeys();"
        },
        {
          "total_lines": 3,
          "line_start": 35,
          "line_end": 37,
          "content": "import java.sql.PreparedStatement;<br/>import java.sql.ResultSet;<br/>import java.sql.Statement;"
        },
        {
          "total_lines": 3,
          "line_start": 119,
          "line_end": 121,
          "content": "ps.execute();<br/><br/>            rs = ps.getGeneratedKeys();"
        },
        {
          "total_lines": 3,
          "line_start": 76,
          "line_end": 78,
          "content": "ps.execute();<br/><br/>            rs = ps.getGeneratedKeys();"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/Transfer.java",
      "loc_duplicate": 23,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 1155,
          "line_end": 1159,
          "content": "Label l = new Label(s);<br/><br/>        l.setBackground(SystemColor.control);<br/><br/>        return l;"
        },
        {
          "total_lines": 3,
          "line_start": 1157,
          "line_end": 1159,
          "content": "l.setBackground(SystemColor.control);<br/><br/>        return l;"
        },
        {
          "total_lines": 3,
          "line_start": 1155,
          "line_end": 1157,
          "content": "Label l = new Label(s);<br/><br/>        l.setBackground(SystemColor.control);"
        },
        {
          "total_lines": 2,
          "line_start": 533,
          "line_end": 534,
          "content": "trace(\"Exception reading source tables: \" + e);<br/>            e.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 648,
          "line_end": 649,
          "content": "trace(\"Exception reading source tables: \" + e);<br/>                e.printStackTrace();"
        },
        {
          "total_lines": 2,
          "line_start": 1085,
          "line_end": 1086,
          "content": "p.add(createLabel(\"\"));<br/>        p.add(createLabel(\"\"));"
        },
        {
          "total_lines": 2,
          "line_start": 419,
          "line_end": 420,
          "content": "fMain.setLocation(0, 0);<br/>            fMain.setSize(d);"
        },
        {
          "total_lines": 2,
          "line_start": 1089,
          "line_end": 1090,
          "content": "p.add(createLabel(\"\"));<br/>        p.add(createLabel(\"\"));"
        },
        {
          "total_lines": 2,
          "line_start": 416,
          "line_end": 417,
          "content": "(d.width - size.width) / 2,<br/>                              (d.height - size.height) / 2"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCSQLXML.java",
      "loc_duplicate": 45,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 1506,
          "line_end": 1514,
          "content": "catch (SecurityException ex) {<br/>            throw Exceptions.sourceInstantiation(ex);<br/>        } catch (InstantiationException ex) {<br/>            throw Exceptions.sourceInstantiation(ex);<br/>        } catch (IllegalAccessException ex) {<br/>            throw Exceptions.sourceInstantiation(ex);<br/>        } catch (ClassCastException ex) {<br/>            throw Exceptions.sourceInstantiation(ex);<br/>        }"
        },
        {
          "total_lines": 9,
          "line_start": 1764,
          "line_end": 1772,
          "content": "catch (SecurityException ex) {<br/>            throw Exceptions.resultInstantiation(ex);<br/>        } catch (InstantiationException ex) {<br/>            throw Exceptions.resultInstantiation(ex);<br/>        } catch (IllegalAccessException ex) {<br/>            throw Exceptions.resultInstantiation(ex);<br/>        } catch (ClassCastException ex) {<br/>            throw Exceptions.resultInstantiation(ex);<br/>        }"
        },
        {
          "total_lines": 9,
          "line_start": 1589,
          "line_end": 1597,
          "content": "catch (SecurityException ex) {<br/>            throw Exceptions.sourceInstantiation(ex);<br/>        } catch (InstantiationException ex) {<br/>            throw Exceptions.sourceInstantiation(ex);<br/>        } catch (IllegalAccessException ex) {<br/>            throw Exceptions.sourceInstantiation(ex);<br/>        } catch (ClassCastException ex) {<br/>            throw Exceptions.sourceInstantiation(ex);<br/>        }"
        },
        {
          "total_lines": 9,
          "line_start": 1793,
          "line_end": 1801,
          "content": "catch (SecurityException ex) {<br/>            throw Exceptions.resultInstantiation(ex);<br/>        } catch (InstantiationException ex) {<br/>            throw Exceptions.resultInstantiation(ex);<br/>        } catch (IllegalAccessException ex) {<br/>            throw Exceptions.resultInstantiation(ex);<br/>        } catch (ClassCastException ex) {<br/>            throw Exceptions.resultInstantiation(ex);<br/>        }"
        },
        {
          "total_lines": 9,
          "line_start": 1727,
          "line_end": 1735,
          "content": "catch (SecurityException ex) {<br/>            throw Exceptions.resultInstantiation(ex);<br/>        } catch (InstantiationException ex) {<br/>            throw Exceptions.resultInstantiation(ex);<br/>        } catch (IllegalAccessException ex) {<br/>            throw Exceptions.resultInstantiation(ex);<br/>        } catch (ClassCastException ex) {<br/>            throw Exceptions.resultInstantiation(ex);<br/>        }"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/tar/RB.java",
      "loc_duplicate": 6,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 125,
          "line_end": 128,
          "content": "vrb.setMissingPosValueBehavior(<br/>                ValidatingResourceBundle.NOOP_BEHAVIOR);<br/>        vrb.setMissingPropertyBehavior(<br/>                ValidatingResourceBundle.NOOP_BEHAVIOR);"
        },
        {
          "total_lines": 2,
          "line_start": 34,
          "line_end": 35,
          "content": "import org.hsqldb.lib.ValidatingResourceBundle;<br/>import org.hsqldb.lib.RefCapableRBInterface;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/RowAVLDiskData.java",
      "loc_duplicate": 12,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 148,
          "line_end": 154,
          "content": "NodeAVL backnode = getNode(index - 1);<br/>        NodeAVL newnode  = new NodeAVL(this);<br/><br/>        newnode.nNext  = backnode.nNext;<br/>        backnode.nNext = newnode;<br/><br/>        return newnode;"
        },
        {
          "total_lines": 4,
          "line_start": 148,
          "line_end": 151,
          "content": "NodeAVL backnode = getNode(index - 1);<br/>        NodeAVL newnode  = new NodeAVL(this);<br/><br/>        newnode.nNext  = backnode.nNext;"
        },
        {
          "total_lines": 1,
          "line_start": 63,
          "line_end": 63,
          "content": "TableBase t, Object[] o"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestDataStructures.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 143,
          "line_end": 144,
          "content": "compareLists(arrayList, deque, vector);<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 219,
          "line_end": 220,
          "content": "compareLists(arrayList, deque, vector);<br/>                    break;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/View.java",
      "loc_duplicate": 6,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 244,
          "line_end": 246,
          "content": "break;<br/><br/>            default :"
        },
        {
          "total_lines": 2,
          "line_start": 278,
          "line_end": 279,
          "content": "new Scanner(),<br/>                                    session.parser.compileContext"
        },
        {
          "total_lines": 1,
          "line_start": 98,
          "line_end": 98,
          "content": "Session session, SchemaObject parentObject"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestDatabaseMetaData.java",
      "loc_duplicate": 29,
      "clones": [
          {
          "total_lines": 8,
          "line_start": 117,
          "line_end": 124,
          "content": "for (i = 0; rs.next(); i++) {<br/>                String tempstr =<br/>                    rs.getString(\"TABLE_NAME\").trim().toLowerCase();<br/><br/>                tablesarr.add(tempstr);<br/>            }<br/><br/>            rs.close();"
        },
        {
          "total_lines": 8,
          "line_start": 160,
          "line_end": 167,
          "content": "for (i = 0; rs.next(); i++) {<br/>                String tempstr =<br/>                    rs.getString(\"TABLE_NAME\").trim().toLowerCase();<br/><br/>                tablesarr.add(tempstr);<br/>            }<br/><br/>            rs.close();"
        },
        {
          "total_lines": 3,
          "line_start": 154,
          "line_end": 156,
          "content": "updateCount = pstmt.executeUpdate();<br/><br/>            assertTrue(\"expected update count of zero\", updateCount == 0);"
        },
        {
          "total_lines": 3,
          "line_start": 68,
          "line_end": 70,
          "content": "updateCount = pstmt.executeUpdate();<br/><br/>            assertTrue(\"expected update count of zero\", updateCount == 0);"
        },
        {
          "total_lines": 2,
          "line_start": 148,
          "line_end": 149,
          "content": "pstmt.executeUpdate();<br/>            pstmt.close();"
        },
        {
          "total_lines": 2,
          "line_start": 62,
          "line_end": 63,
          "content": "pstmt.executeUpdate();<br/>            pstmt.close();"
        },
        {
          "total_lines": 2,
          "line_start": 179,
          "line_end": 180,
          "content": "pstmt.executeUpdate();<br/>            pstmt.close();"
        },
        {
          "total_lines": 1,
          "line_start": 226,
          "line_end": 226,
          "content": "null, null"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/DatabaseManager.java",
      "loc_duplicate": 217,
      "clones": [
          {
          "total_lines": 60,
          "line_start": 257,
          "line_end": 316,
          "content": "currentArg = arg[i];<br/>            lowerArg   = arg[i].toLowerCase();<br/><br/>            if (lowerArg.startsWith(\"--\")) {<br/>                lowerArg = lowerArg.substring(1);<br/>            }<br/><br/>            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {<br/><br/>                //<br/>            } else if (i == arg.length - 1) {<br/>                throw new IllegalArgumentException(\"No value for argument \"<br/>                                                   + currentArg);<br/>            }<br/><br/>            i++;<br/><br/>            if (lowerArg.equals(\"-driver\")) {<br/>                defDriver   = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-url\")) {<br/>                defURL      = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-user\")) {<br/>                defUser     = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-password\")) {<br/>                defPassword = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-urlid\")) {<br/>                urlid        = arg[i];<br/>                urlidConnect = true;<br/>            } else if (lowerArg.equals(\"-rcfile\")) {<br/>                rcFile       = arg[i];<br/>                urlidConnect = true;<br/>            } else if (lowerArg.equals(\"-dir\")) {<br/>                defDirectory = arg[i];<br/>            } else if (lowerArg.equals(\"-script\")) {<br/>                defScript = arg[i];<br/>            } else if (lowerArg.equals(\"-noexit\")) {<br/>                bMustExit = false;<br/><br/>                i--;<br/>            } else if (lowerArg.equals(\"-help\")) {<br/>                showUsage();<br/><br/>                return;<br/>            } else {<br/>                /* Syntax ERRORS should either throw or exit with non-0 status.<br/>                 * In our case, it may be unsafe to exit, so we throw.<br/>                 * (I.e. should provide easy way for caller to programmatically<br/>                 * determine that there was an invocation problem).<br/>                 */<br/>                throw new IllegalArgumentException(<br/>                    \"invalid argrument \" + currentArg + \" try:  java... \"<br/>                    + DatabaseManagerSwing.class.getName() + \" --help\");<br/><br/>                // No reason to localize, since the main syntax message is<br/>                // not localized.<br/>            }"
        },
        {
          "total_lines": 59,
          "line_start": 258,
          "line_end": 316,
          "content": "lowerArg   = arg[i].toLowerCase();<br/><br/>            if (lowerArg.startsWith(\"--\")) {<br/>                lowerArg = lowerArg.substring(1);<br/>            }<br/><br/>            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {<br/><br/>                //<br/>            } else if (i == arg.length - 1) {<br/>                throw new IllegalArgumentException(\"No value for argument \"<br/>                                                   + currentArg);<br/>            }<br/><br/>            i++;<br/><br/>            if (lowerArg.equals(\"-driver\")) {<br/>                defDriver   = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-url\")) {<br/>                defURL      = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-user\")) {<br/>                defUser     = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-password\")) {<br/>                defPassword = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-urlid\")) {<br/>                urlid        = arg[i];<br/>                urlidConnect = true;<br/>            } else if (lowerArg.equals(\"-rcfile\")) {<br/>                rcFile       = arg[i];<br/>                urlidConnect = true;<br/>            } else if (lowerArg.equals(\"-dir\")) {<br/>                defDirectory = arg[i];<br/>            } else if (lowerArg.equals(\"-script\")) {<br/>                defScript = arg[i];<br/>            } else if (lowerArg.equals(\"-noexit\")) {<br/>                bMustExit = false;<br/><br/>                i--;<br/>            } else if (lowerArg.equals(\"-help\")) {<br/>                showUsage();<br/><br/>                return;<br/>            } else {<br/>                /* Syntax ERRORS should either throw or exit with non-0 status.<br/>                 * In our case, it may be unsafe to exit, so we throw.<br/>                 * (I.e. should provide easy way for caller to programmatically<br/>                 * determine that there was an invocation problem).<br/>                 */<br/>                throw new IllegalArgumentException(<br/>                    \"invalid argrument \" + currentArg + \" try:  java... \"<br/>                    + DatabaseManagerSwing.class.getName() + \" --help\");<br/><br/>                // No reason to localize, since the main syntax message is<br/>                // not localized.<br/>            }"
        },
        {
          "total_lines": 15,
          "line_start": 857,
          "line_end": 871,
          "content": "ResultSet rs = sStatement.getResultSet();<br/><br/>                try {<br/>                    formatResultSet(rs);<br/>                } catch (Throwable t) {<br/>                    g[0] = \"Error displaying the ResultSet\";<br/><br/>                    gResult.setHead(g);<br/><br/>                    String s = t.getMessage();<br/><br/>                    g[0] = s;<br/><br/>                    gResult.addRow(g);<br/>                }"
        },
        {
          "total_lines": 11,
          "line_start": 928,
          "line_end": 938,
          "content": "String[] g = new String[1];<br/><br/>            g[0] = \"Result\";<br/><br/>            gResult.setHead(g);<br/><br/>            g[0] = \"(empty)\";<br/><br/>            gResult.addRow(g);<br/><br/>            return;"
        },
        {
          "total_lines": 9,
          "line_start": 930,
          "line_end": 938,
          "content": "g[0] = \"Result\";<br/><br/>            gResult.setHead(g);<br/><br/>            g[0] = \"(empty)\";<br/><br/>            gResult.addRow(g);<br/><br/>            return;"
        },
        {
          "total_lines": 9,
          "line_start": 928,
          "line_end": 936,
          "content": "String[] g = new String[1];<br/><br/>            g[0] = \"Result\";<br/><br/>            gResult.setHead(g);<br/><br/>            g[0] = \"(empty)\";<br/><br/>            gResult.addRow(g);"
        },
        {
          "total_lines": 7,
          "line_start": 928,
          "line_end": 934,
          "content": "String[] g = new String[1];<br/><br/>            g[0] = \"Result\";<br/><br/>            gResult.setHead(g);<br/><br/>            g[0] = \"(empty)\";"
        },
        {
          "total_lines": 7,
          "line_start": 932,
          "line_end": 938,
          "content": "gResult.setHead(g);<br/><br/>            g[0] = \"(empty)\";<br/><br/>            gResult.addRow(g);<br/><br/>            return;"
        },
        {
          "total_lines": 6,
          "line_start": 257,
          "line_end": 262,
          "content": "currentArg = arg[i];<br/>            lowerArg   = arg[i].toLowerCase();<br/><br/>            if (lowerArg.startsWith(\"--\")) {<br/>                lowerArg = lowerArg.substring(1);<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 258,
          "line_end": 262,
          "content": "lowerArg   = arg[i].toLowerCase();<br/><br/>            if (lowerArg.startsWith(\"--\")) {<br/>                lowerArg = lowerArg.substring(1);<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 979,
          "line_end": 983,
          "content": "char c = all.charAt(i);<br/><br/>            if (c != '\\n') {<br/>                b.append(c);<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 1128,
          "line_end": 1132,
          "content": "for (int l = 0; l < size[i]; l++) {<br/>                b.append('-');<br/>            }<br/><br/>            b.append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 587,
          "line_end": 589,
          "content": "int i = Integer.parseInt(s.substring(1));<br/><br/>            txtCommand.setText(sRecent[i]);"
        },
        {
          "total_lines": 3,
          "line_start": 1014,
          "line_end": 1016,
          "content": "max = Integer.parseInt(sql.substring(3));<br/><br/>                continue;"
        },
        {
          "total_lines": 3,
          "line_start": 936,
          "line_end": 938,
          "content": "gResult.addRow(g);<br/><br/>            return;"
        },
        {
          "total_lines": 2,
          "line_start": 257,
          "line_end": 258,
          "content": "currentArg = arg[i];<br/>            lowerArg   = arg[i].toLowerCase();"
        },
        {
          "total_lines": 2,
          "line_start": 481,
          "line_end": 482,
          "content": "(d.width - size.width) / 2,<br/>                              (d.height - size.height) / 2"
        },
        {
          "total_lines": 2,
          "line_start": 484,
          "line_end": 485,
          "content": "fMain.setLocation(0, 0);<br/>            fMain.setSize(d);"
        },
        {
          "total_lines": 2,
          "line_start": 1006,
          "line_end": 1007,
          "content": "sql = all.substring(0, i);<br/>                all = all.substring(i + 1);"
        },
        {
          "total_lines": 2,
          "line_start": 346,
          "line_end": 347,
          "content": "null,<br/>                               System.getProperty(\"javax.net.ssl.trustStore\")"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/scriptio/ScriptReaderText.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 88,
          "line_end": 89,
          "content": "inputStream,<br/>                                      ScriptWriterText.ISO_8859_1"
        },
        {
          "total_lines": 2,
          "line_start": 98,
          "line_end": 99,
          "content": "inputStream,<br/>                                      ScriptWriterText.ISO_8859_1"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/RangeVariable.java",
      "loc_duplicate": 62,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 935,
          "line_end": 939,
          "content": "temp = \"LEFT OUTER\";<br/><br/>            if (isRightJoin) {<br/>                temp = \"FULL\";<br/>            }"
        },
        {
          "total_lines": 4,
          "line_start": 155,
          "line_end": 158,
          "content": "Table table, SimpleName alias,<br/>                         OrderedHashSet columnList,<br/>                         SimpleName[] columnNameList,<br/>                         CompileContext compileContext"
        },
        {
          "total_lines": 3,
          "line_start": 773,
          "line_end": 775,
          "content": "session,<br/>                    RangeVariable.emptyArray, RangeGroup.emptyArray,<br/>                    unresolved"
        },
        {
          "total_lines": 3,
          "line_start": 1833,
          "line_end": 1835,
          "content": "opTypeEnd     = OpTypes.MAX;<br/>                    opTypesEnd[0] = OpTypes.MAX;<br/>                    break;"
        },
        {
          "total_lines": 3,
          "line_start": 759,
          "line_end": 761,
          "content": "session,<br/>                    RangeVariable.emptyArray, RangeGroup.emptyArray,<br/>                    unresolved"
        },
        {
          "total_lines": 3,
          "line_start": 148,
          "line_end": 150,
          "content": "break;<br/><br/>            default :"
        },
        {
          "total_lines": 3,
          "line_start": 1342,
          "line_end": 1344,
          "content": "break;<br/><br/>                            default :"
        },
        {
          "total_lines": 3,
          "line_start": 1847,
          "line_end": 1849,
          "content": "opTypeEnd     = OpTypes.MAX;<br/>                    opTypesEnd[0] = OpTypes.MAX;<br/>                    break;"
        },
        {
          "total_lines": 3,
          "line_start": 155,
          "line_end": 157,
          "content": "Table table, SimpleName alias,<br/>                         OrderedHashSet columnList,<br/>                         SimpleName[] columnNameList"
        },
        {
          "total_lines": 2,
          "line_start": 751,
          "line_end": 752,
          "content": "rangeGroups,<br/>                rangeGroup, rangeGroups.length"
        },
        {
          "total_lines": 2,
          "line_start": 681,
          "line_end": 682,
          "content": "OrderedHashSet set,<br/>            OrderedIntHashSet typeSet, OrderedIntHashSet stopAtTypeSet"
        },
        {
          "total_lines": 2,
          "line_start": 1258,
          "line_end": 1259,
          "content": "session,<br/>                            store"
        },
        {
          "total_lines": 2,
          "line_start": 741,
          "line_end": 742,
          "content": "Session session, RangeGroup rangeGroup,<br/>                                  RangeGroup[] rangeGroups"
        },
        {
          "total_lines": 2,
          "line_start": 756,
          "line_end": 757,
          "content": "session,<br/>                    RangeGroup.emptyGroup, rangeGroups"
        },
        {
          "total_lines": 2,
          "line_start": 1848,
          "line_end": 1849,
          "content": "opTypesEnd[0] = OpTypes.MAX;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 733,
          "line_end": 734,
          "content": "RangeVariable[] ranges,<br/>                                      RangeVariable[] newRanges"
        },
        {
          "total_lines": 2,
          "line_start": 1834,
          "line_end": 1835,
          "content": "opTypesEnd[0] = OpTypes.MAX;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 379,
          "line_end": 380,
          "content": "String tableName,<br/>                          String columnName"
        },
        {
          "total_lines": 2,
          "line_start": 1963,
          "line_end": 1964,
          "content": "RangeVariable range,<br/>                                            Expression[] list"
        },
        {
          "total_lines": 2,
          "line_start": 538,
          "line_end": 539,
          "content": "HsqlArrayList exprList, int position,<br/>                               HashSet exclude"
        },
        {
          "total_lines": 2,
          "line_start": 562,
          "line_end": 563,
          "content": "RangeVariable subRange, Expression expression,<br/>                                HashSet exclude"
        },
        {
          "total_lines": 2,
          "line_start": 1261,
          "line_end": 1262,
          "content": "session,<br/>                            store"
        },
        {
          "total_lines": 2,
          "line_start": 705,
          "line_end": 706,
          "content": "RangeVariable range,<br/>                                        Expression[] list"
        },
        {
          "total_lines": 1,
          "line_start": 785,
          "line_end": 785,
          "content": "Session session, RangeVariable[] ranges"
        },
        {
          "total_lines": 1,
          "line_start": 1171,
          "line_end": 1171,
          "content": "Session session, RangeVariable rangeVar"
        },
        {
          "total_lines": 1,
          "line_start": 682,
          "line_end": 682,
          "content": "OrderedIntHashSet typeSet, OrderedIntHashSet stopAtTypeSet"
        },
        {
          "total_lines": 1,
          "line_start": 805,
          "line_end": 805,
          "content": "Session session, RangeVariable[] ranges"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/rowio/RowOutputText.java",
      "loc_duplicate": 20,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 82,
          "line_end": 85,
          "content": "String fieldSep, String varSep,<br/>                                           String longvarSep,<br/>                                           boolean allQuoted,<br/>                                           String encoding"
        },
        {
          "total_lines": 3,
          "line_start": 247,
          "line_end": 249,
          "content": "break;<br/><br/>            default :"
        },
        {
          "total_lines": 2,
          "line_start": 73,
          "line_end": 74,
          "content": "String longvarSep,<br/>                         boolean allQuoted"
        },
        {
          "total_lines": 2,
          "line_start": 89,
          "line_end": 90,
          "content": "fieldSepEnd = true;<br/>            fieldSep    = fieldSep.substring(0, fieldSep.length() - 1);"
        },
        {
          "total_lines": 2,
          "line_start": 78,
          "line_end": 79,
          "content": "fieldSep, varSep, longvarSep, allQuoted,<br/>                                  encoding"
        },
        {
          "total_lines": 2,
          "line_start": 99,
          "line_end": 100,
          "content": "longvarSepEnd = true;<br/>            longvarSep    = longvarSep.substring(0, longvarSep.length() - 1);"
        },
        {
          "total_lines": 2,
          "line_start": 94,
          "line_end": 95,
          "content": "varSepEnd = true;<br/>            varSep    = varSep.substring(0, varSep.length() - 1);"
        },
        {
          "total_lines": 2,
          "line_start": 83,
          "line_end": 84,
          "content": "String longvarSep,<br/>                                           boolean allQuoted"
        },
        {
          "total_lines": 1,
          "line_start": 78,
          "line_end": 78,
          "content": "longvarSep, allQuoted"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/DatabaseManagerSwing.java",
      "loc_duplicate": 354,
      "clones": [
          {
          "total_lines": 60,
          "line_start": 479,
          "line_end": 538,
          "content": "currentArg = arg[i];<br/>            lowerArg = arg[i].toLowerCase();<br/><br/>            if (lowerArg.startsWith(\"--\")) {<br/>                lowerArg = lowerArg.substring(1);<br/>            }<br/><br/>            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {<br/><br/>                //<br/>            } else if (i == arg.length - 1) {<br/>                throw new IllegalArgumentException(\"No value for argument \"<br/>                                                   + currentArg);<br/>            }<br/><br/>            i++;<br/><br/>            if (lowerArg.equals(\"-driver\")) {<br/>                defDriver   = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-url\")) {<br/>                defURL      = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-user\")) {<br/>                defUser     = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-password\")) {<br/>                defPassword = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-urlid\")) {<br/>                urlid        = arg[i];<br/>                urlidConnect = true;<br/>            } else if (lowerArg.equals(\"-rcfile\")) {<br/>                rcFile       = arg[i];<br/>                urlidConnect = true;<br/>            } else if (lowerArg.equals(\"-dir\")) {<br/>                defDirectory = arg[i];<br/>            } else if (lowerArg.equals(\"-script\")) {<br/>                defScript = arg[i];<br/>            } else if (lowerArg.equals(\"-noexit\")) {<br/>                bMustExit = false;<br/><br/>                i--;<br/>            } else if (lowerArg.equals(\"-help\")) {<br/>                showUsage();<br/><br/>                return;<br/>            } else {<br/>                /* Syntax ERRORS should either throw or exit with non-0 status.<br/>                 * In our case, it may be unsafe to exit, so we throw.<br/>                 * (I.e. should provide easy way for caller to programmatically<br/>                 * determine that there was an invocation problem).<br/>                 */<br/>                throw new IllegalArgumentException(<br/>                    \"invalid argrument \" + currentArg + \" try:  java... \"<br/>                    + DatabaseManagerSwing.class.getName() + \" --help\");<br/><br/>                // No reason to localize, since the main syntax message is<br/>                // not localized.<br/>            }"
        },
        {
          "total_lines": 59,
          "line_start": 480,
          "line_end": 538,
          "content": "lowerArg = arg[i].toLowerCase();<br/><br/>            if (lowerArg.startsWith(\"--\")) {<br/>                lowerArg = lowerArg.substring(1);<br/>            }<br/><br/>            if (lowerArg.equals(\"-noexit\") || lowerArg.equals(\"-help\")) {<br/><br/>                //<br/>            } else if (i == arg.length - 1) {<br/>                throw new IllegalArgumentException(\"No value for argument \"<br/>                                                   + currentArg);<br/>            }<br/><br/>            i++;<br/><br/>            if (lowerArg.equals(\"-driver\")) {<br/>                defDriver   = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-url\")) {<br/>                defURL      = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-user\")) {<br/>                defUser     = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-password\")) {<br/>                defPassword = arg[i];<br/>                autoConnect = true;<br/>            } else if (lowerArg.equals(\"-urlid\")) {<br/>                urlid        = arg[i];<br/>                urlidConnect = true;<br/>            } else if (lowerArg.equals(\"-rcfile\")) {<br/>                rcFile       = arg[i];<br/>                urlidConnect = true;<br/>            } else if (lowerArg.equals(\"-dir\")) {<br/>                defDirectory = arg[i];<br/>            } else if (lowerArg.equals(\"-script\")) {<br/>                defScript = arg[i];<br/>            } else if (lowerArg.equals(\"-noexit\")) {<br/>                bMustExit = false;<br/><br/>                i--;<br/>            } else if (lowerArg.equals(\"-help\")) {<br/>                showUsage();<br/><br/>                return;<br/>            } else {<br/>                /* Syntax ERRORS should either throw or exit with non-0 status.<br/>                 * In our case, it may be unsafe to exit, so we throw.<br/>                 * (I.e. should provide easy way for caller to programmatically<br/>                 * determine that there was an invocation problem).<br/>                 */<br/>                throw new IllegalArgumentException(<br/>                    \"invalid argrument \" + currentArg + \" try:  java... \"<br/>                    + DatabaseManagerSwing.class.getName() + \" --help\");<br/><br/>                // No reason to localize, since the main syntax message is<br/>                // not localized.<br/>            }"
        },
        {
          "total_lines": 17,
          "line_start": 2176,
          "line_end": 2192,
          "content": "DefaultMutableTreeNode childNode =<br/>                        (DefaultMutableTreeNode) treePath<br/>                            .getLastPathComponent();<br/>                    String  childName = null;<br/>                    boolean isChar;<br/><br/>                    if (childNode.getChildCount() > 0) {<br/>                        childName = childNode.getFirstChild().toString();<br/>                        isChar    = childName.indexOf(\"CHAR\") >= 0;<br/>                        result    += \" WHERE \" + quoteObjectName(column);<br/><br/>                        if (isChar) {<br/>                            result += \" LIKE \\'%%\\'\";<br/>                        } else {<br/>                            result += \" = \";<br/>                        }<br/>                    }"
        },
        {
          "total_lines": 17,
          "line_start": 2138,
          "line_end": 2154,
          "content": "DefaultMutableTreeNode childNode =<br/>                        (DefaultMutableTreeNode) treePath<br/>                            .getLastPathComponent();<br/>                    String  childName = null;<br/>                    boolean isChar;<br/><br/>                    if (childNode.getChildCount() > 0) {<br/>                        childName = childNode.getFirstChild().toString();<br/>                        isChar    = childName.indexOf(\"CHAR\") >= 0;<br/>                        result    += \" WHERE \" + quoteObjectName(column);<br/><br/>                        if (isChar) {<br/>                            result += \" LIKE \\'%%\\'\";<br/>                        } else {<br/>                            result += \" = \";<br/>                        }<br/>                    }"
        },
        {
          "total_lines": 15,
          "line_start": 1637,
          "line_end": 1651,
          "content": "ResultSet rs = sStatement.getResultSet();<br/><br/>                try {<br/>                    formatResultSet(rs);<br/>                } catch (Throwable t) {<br/>                    g[0] = \"Error displaying the ResultSet\";<br/><br/>                    gResult.setHead(g);<br/><br/>                    String s = t.getMessage();<br/><br/>                    g[0] = s;<br/><br/>                    gResult.addRow(g);<br/>                }"
        },
        {
          "total_lines": 11,
          "line_start": 1745,
          "line_end": 1755,
          "content": "String[] g = new String[1];<br/><br/>            g[0] = \"Result\";<br/><br/>            gResult.setHead(g);<br/><br/>            g[0] = \"(empty)\";<br/><br/>            gResult.addRow(g);<br/><br/>            return;"
        },
        {
          "total_lines": 9,
          "line_start": 1747,
          "line_end": 1755,
          "content": "g[0] = \"Result\";<br/><br/>            gResult.setHead(g);<br/><br/>            g[0] = \"(empty)\";<br/><br/>            gResult.addRow(g);<br/><br/>            return;"
        },
        {
          "total_lines": 9,
          "line_start": 1745,
          "line_end": 1753,
          "content": "String[] g = new String[1];<br/><br/>            g[0] = \"Result\";<br/><br/>            gResult.setHead(g);<br/><br/>            g[0] = \"(empty)\";<br/><br/>            gResult.addRow(g);"
        },
        {
          "total_lines": 8,
          "line_start": 173,
          "line_end": 180,
          "content": "Class c = Class.forName(\"sun.security.action.GetPropertyAction\");<br/>            Constructor constructor = c.getConstructor(new Class[]{<br/>                String.class });<br/>            java.security.PrivilegedAction a =<br/>                (java.security.PrivilegedAction) constructor.newInstance(<br/>                    new Object[]{ \"user.home\" });<br/><br/>            homedir = (String) java.security.AccessController.doPrivileged(a);"
        },
        {
          "total_lines": 7,
          "line_start": 2007,
          "line_end": 2013,
          "content": "if (alreadyHandled == e) {<br/>            return;<br/>        }<br/><br/>        handlePopup(e);<br/><br/>        alreadyHandled = e;"
        },
        {
          "total_lines": 7,
          "line_start": 1749,
          "line_end": 1755,
          "content": "gResult.setHead(g);<br/><br/>            g[0] = \"(empty)\";<br/><br/>            gResult.addRow(g);<br/><br/>            return;"
        },
        {
          "total_lines": 7,
          "line_start": 1994,
          "line_end": 2000,
          "content": "if (alreadyHandled == e) {<br/>            return;<br/>        }<br/><br/>        handlePopup(e);<br/><br/>        alreadyHandled = e;"
        },
        {
          "total_lines": 7,
          "line_start": 174,
          "line_end": 180,
          "content": "Constructor constructor = c.getConstructor(new Class[]{<br/>                String.class });<br/>            java.security.PrivilegedAction a =<br/>                (java.security.PrivilegedAction) constructor.newInstance(<br/>                    new Object[]{ \"user.home\" });<br/><br/>            homedir = (String) java.security.AccessController.doPrivileged(a);"
        },
        {
          "total_lines": 7,
          "line_start": 1745,
          "line_end": 1751,
          "content": "String[] g = new String[1];<br/><br/>            g[0] = \"Result\";<br/><br/>            gResult.setHead(g);<br/><br/>            g[0] = \"(empty)\";"
        },
        {
          "total_lines": 6,
          "line_start": 479,
          "line_end": 484,
          "content": "currentArg = arg[i];<br/>            lowerArg = arg[i].toLowerCase();<br/><br/>            if (lowerArg.startsWith(\"--\")) {<br/>                lowerArg = lowerArg.substring(1);<br/>            }"
        },
        {
          "total_lines": 6,
          "line_start": 173,
          "line_end": 178,
          "content": "Class c = Class.forName(\"sun.security.action.GetPropertyAction\");<br/>            Constructor constructor = c.getConstructor(new Class[]{<br/>                String.class });<br/>            java.security.PrivilegedAction a =<br/>                (java.security.PrivilegedAction) constructor.newInstance(<br/>                    new Object[]{ \"user.home\" });"
        },
        {
          "total_lines": 5,
          "line_start": 973,
          "line_end": 977,
          "content": "txtCommand.setText(sqlScriptBuffer);<br/><br/>                sqlScriptBuffer = null;<br/><br/>                txtCommand.setEnabled(true);"
        },
        {
          "total_lines": 5,
          "line_start": 2138,
          "line_end": 2142,
          "content": "DefaultMutableTreeNode childNode =<br/>                        (DefaultMutableTreeNode) treePath<br/>                            .getLastPathComponent();<br/>                    String  childName = null;<br/>                    boolean isChar;"
        },
        {
          "total_lines": 5,
          "line_start": 1994,
          "line_end": 1998,
          "content": "if (alreadyHandled == e) {<br/>            return;<br/>        }<br/><br/>        handlePopup(e);"
        },
        {
          "total_lines": 5,
          "line_start": 2007,
          "line_end": 2011,
          "content": "if (alreadyHandled == e) {<br/>            return;<br/>        }<br/><br/>        handlePopup(e);"
        },
        {
          "total_lines": 5,
          "line_start": 2176,
          "line_end": 2180,
          "content": "DefaultMutableTreeNode childNode =<br/>                        (DefaultMutableTreeNode) treePath<br/>                            .getLastPathComponent();<br/>                    String  childName = null;<br/>                    boolean isChar;"
        },
        {
          "total_lines": 5,
          "line_start": 1802,
          "line_end": 1806,
          "content": "char c = all.charAt(i);<br/><br/>            if (c != '\\n') {<br/>                b.append(c);<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 763,
          "line_end": 767,
          "content": "mitem = jmenu.getItem(i);<br/><br/>            if (mitem != null) {<br/>                localActionList.add(mitem);<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 480,
          "line_end": 484,
          "content": "lowerArg = arg[i].toLowerCase();<br/><br/>            if (lowerArg.startsWith(\"--\")) {<br/>                lowerArg = lowerArg.substring(1);<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 174,
          "line_end": 178,
          "content": "Constructor constructor = c.getConstructor(new Class[]{<br/>                String.class });<br/>            java.security.PrivilegedAction a =<br/>                (java.security.PrivilegedAction) constructor.newInstance(<br/>                    new Object[]{ \"user.home\" });"
        },
        {
          "total_lines": 5,
          "line_start": 1915,
          "line_end": 1919,
          "content": "for (int l = 0; l < size[i]; l++) {<br/>                b.append('-');<br/>            }<br/><br/>            b.append(' ');"
        },
        {
          "total_lines": 5,
          "line_start": 1173,
          "line_end": 1177,
          "content": "txtCommand.setText(sqlScriptBuffer);<br/><br/>                        sqlScriptBuffer = null;<br/><br/>                        txtCommand.setEnabled(true);"
        },
        {
          "total_lines": 5,
          "line_start": 176,
          "line_end": 180,
          "content": "java.security.PrivilegedAction a =<br/>                (java.security.PrivilegedAction) constructor.newInstance(<br/>                    new Object[]{ \"user.home\" });<br/><br/>            homedir = (String) java.security.AccessController.doPrivileged(a);"
        },
        {
          "total_lines": 5,
          "line_start": 862,
          "line_end": 866,
          "content": "mitem = jmenu.getItem(i);<br/><br/>            if (mitem != null) {<br/>                localActionList.add(mitem);<br/>            }"
        },
        {
          "total_lines": 4,
          "line_start": 2413,
          "line_end": 2416,
          "content": "\"MDSYS\", \"ORDSYS\",<br/>        \"ORDPLUGINS\", \"CTXSYS\", \"DSSYS\", \"PERFSTAT\", \"WKPROXY\", \"WKSYS\",<br/>        \"WMSYS\", \"XDB\", \"ANONYMOUS\", \"ODM\", \"ODM_MTR\", \"OLAPSYS\", \"TRACESVR\",<br/>        \"REPADMIN\""
        },
        {
          "total_lines": 3,
          "line_start": 2413,
          "line_end": 2415,
          "content": "\"OUTLN\", \"DBSNMP\", \"OUTLN\", \"MDSYS\", \"ORDSYS\",<br/>        \"ORDPLUGINS\", \"CTXSYS\", \"DSSYS\", \"PERFSTAT\", \"WKPROXY\", \"WKSYS\",<br/>        \"WMSYS\", \"XDB\", \"ANONYMOUS\""
        },
        {
          "total_lines": 3,
          "line_start": 2659,
          "line_end": 2661,
          "content": "treeModel.nodeStructureChanged(rootNode);<br/>        treeModel.reload();<br/>        tScrollPane.repaint();"
        },
        {
          "total_lines": 3,
          "line_start": 2457,
          "line_end": 2459,
          "content": "treeModel.nodeStructureChanged(rootNode);<br/>        treeModel.reload();<br/>        tScrollPane.repaint();"
        },
        {
          "total_lines": 3,
          "line_start": 1753,
          "line_end": 1755,
          "content": "gResult.addRow(g);<br/><br/>            return;"
        },
        {
          "total_lines": 3,
          "line_start": 1103,
          "line_end": 1105,
          "content": "int i = Integer.parseInt(s.substring(1));<br/><br/>            txtCommand.setText(sRecent[i]);"
        },
        {
          "total_lines": 3,
          "line_start": 1837,
          "line_end": 1839,
          "content": "max = Integer.parseInt(sql.substring(3));<br/><br/>                continue;"
        },
        {
          "total_lines": 2,
          "line_start": 2413,
          "line_end": 2414,
          "content": "\"ORDSYS\",<br/>        \"ORDPLUGINS\", \"CTXSYS\", \"DSSYS\", \"PERFSTAT\", \"WKPROXY\", \"WKSYS\""
        },
        {
          "total_lines": 2,
          "line_start": 479,
          "line_end": 480,
          "content": "currentArg = arg[i];<br/>            lowerArg = arg[i].toLowerCase();"
        },
        {
          "total_lines": 2,
          "line_start": 2660,
          "line_end": 2661,
          "content": "treeModel.reload();<br/>        tScrollPane.repaint();"
        },
        {
          "total_lines": 2,
          "line_start": 2414,
          "line_end": 2415,
          "content": "\"PERFSTAT\", \"WKPROXY\", \"WKSYS\",<br/>        \"WMSYS\""
        },
        {
          "total_lines": 2,
          "line_start": 2458,
          "line_end": 2459,
          "content": "treeModel.reload();<br/>        tScrollPane.repaint();"
        },
        {
          "total_lines": 2,
          "line_start": 1829,
          "line_end": 1830,
          "content": "sql = all.substring(0, i);<br/>                all = all.substring(i + 1);"
        },
        {
          "total_lines": 2,
          "line_start": 2415,
          "line_end": 2416,
          "content": "\"OLAPSYS\", \"TRACESVR\",<br/>        \"REPADMIN\""
        },
        {
          "total_lines": 1,
          "line_start": 575,
          "line_end": 575,
          "content": "null, System.getProperty(\"javax.net.ssl.trustStore\")"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/LobStoreInJar.java",
      "loc_duplicate": 15,
      "clones": [
          {
          "total_lines": 10,
          "line_start": 126,
          "line_end": 135,
          "content": "fis = getClass().getResourceAsStream(fileName);<br/><br/>            if (fis == null) {<br/>                ClassLoader cl =<br/>                    Thread.currentThread().getContextClassLoader();<br/><br/>                if (cl != null) {<br/>                    fis = cl.getResourceAsStream(fileName);<br/>                }<br/>            }"
        },
        {
          "total_lines": 2,
          "line_start": 88,
          "line_end": 89,
          "content": "byte[] dataBytes, int blockAddress,<br/>                              int blockCount"
        },
        {
          "total_lines": 2,
          "line_start": 91,
          "line_end": 92,
          "content": "byte[] dataBytes, long position, int offset,<br/>                              int length"
        },
        {
          "total_lines": 1,
          "line_start": 91,
          "line_end": 91,
          "content": "long position, int offset"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCResultSetMetaData.java",
      "loc_duplicate": 37,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 953,
          "line_end": 961,
          "content": "if (this.translateTTIType) {<br/>            if (type.isIntervalType()) {<br/>                type = ((IntervalType) type).getCharacterType();<br/>            } else if (type.isDateTimeTypeWithZone()) {<br/>                type = ((DateTimeType) type).getDateTimeTypeWithoutZone();<br/>            }<br/>        }<br/><br/>        return type;"
        },
        {
          "total_lines": 5,
          "line_start": 843,
          "line_end": 847,
          "content": "if (isWrapperFor(iface)) {<br/>            return (T) this;<br/>        }<br/><br/>        throw JDBCUtil.invalidArgument(\"iface: \" + iface);"
        },
        {
          "total_lines": 4,
          "line_start": 745,
          "line_end": 748,
          "content": "checkColumn(column);<br/><br/>        return resultMetaData.colIndexes != null<br/>               && resultMetaData.colIndexes[--column] > -1;"
        },
        {
          "total_lines": 4,
          "line_start": 549,
          "line_end": 552,
          "content": "checkColumn(column);<br/><br/>        // type in columnTypes overrides column type<br/>        Type type      = translateType(resultMetaData.columnTypes[--column]);"
        },
        {
          "total_lines": 4,
          "line_start": 772,
          "line_end": 775,
          "content": "checkColumn(column);<br/><br/>        return resultMetaData.colIndexes != null<br/>               && resultMetaData.colIndexes[--column] > -1;"
        },
        {
          "total_lines": 3,
          "line_start": 812,
          "line_end": 814,
          "content": "checkColumn(column);<br/><br/>        Type type = translateType(resultMetaData.columnTypes[--column]);"
        },
        {
          "total_lines": 3,
          "line_start": 316,
          "line_end": 318,
          "content": "checkColumn(column);<br/><br/>        Type type = translateType(resultMetaData.columnTypes[--column]);"
        },
        {
          "total_lines": 3,
          "line_start": 581,
          "line_end": 583,
          "content": "checkColumn(column);<br/><br/>        Type type = translateType(resultMetaData.columnTypes[--column]);"
        },
        {
          "total_lines": 2,
          "line_start": 37,
          "line_end": 38,
          "content": "import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.persist.HsqlDatabaseProperties;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/jdbc/JDBCDatabaseMetaData.java",
      "loc_duplicate": 34,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 5804,
          "line_end": 5808,
          "content": "if (isWrapperFor(iface)) {<br/>            return (T) this;<br/>        }<br/><br/>        throw JDBCUtil.invalidArgument(\"iface: \" + iface);"
        },
        {
          "total_lines": 3,
          "line_start": 3402,
          "line_end": 3404,
          "content": "String catalog, String schemaPattern,<br/>                                String tableNamePattern,<br/>                                String columnNamePattern"
        },
        {
          "total_lines": 2,
          "line_start": 5059,
          "line_end": 5060,
          "content": "String catalog, String schemaPattern,<br/>            String tableNamePattern"
        },
        {
          "total_lines": 2,
          "line_start": 4071,
          "line_end": 4072,
          "content": "String catalog, String schema,<br/>                                     String table"
        },
        {
          "total_lines": 2,
          "line_start": 3955,
          "line_end": 3956,
          "content": "String catalog, String schema,<br/>                                     String table"
        },
        {
          "total_lines": 2,
          "line_start": 3839,
          "line_end": 3840,
          "content": "String catalog, String schema,<br/>                                    String table"
        },
        {
          "total_lines": 2,
          "line_start": 3566,
          "line_end": 3567,
          "content": "String catalog, String schemaPattern,<br/>            String tableNamePattern"
        },
        {
          "total_lines": 2,
          "line_start": 3770,
          "line_end": 3771,
          "content": "String catalog, String schema,<br/>                                       String table"
        },
        {
          "total_lines": 2,
          "line_start": 2870,
          "line_end": 2871,
          "content": "\"LIKE\",<br/>                        procedureNamePattern"
        },
        {
          "total_lines": 2,
          "line_start": 5629,
          "line_end": 5630,
          "content": "\"LIKE\",<br/>                          schemaPattern"
        },
        {
          "total_lines": 2,
          "line_start": 5900,
          "line_end": 5901,
          "content": "String catalog, String schemaPattern, String tableNamePattern,<br/>            String columnNamePattern"
        },
        {
          "total_lines": 2,
          "line_start": 3690,
          "line_end": 3691,
          "content": "break;<br/>            default :"
        },
        {
          "total_lines": 1,
          "line_start": 5631,
          "line_end": 5631,
          "content": "\"LIKE\", functionNamePattern"
        },
        {
          "total_lines": 1,
          "line_start": 5775,
          "line_end": 5775,
          "content": "\"LIKE\", functionNamePattern"
        },
        {
          "total_lines": 1,
          "line_start": 3046,
          "line_end": 3046,
          "content": "\"LIKE\", procedureNamePattern"
        },
        {
          "total_lines": 1,
          "line_start": 852,
          "line_end": 852,
          "content": "\",\", \"\""
        },
        {
          "total_lines": 1,
          "line_start": 865,
          "line_end": 865,
          "content": "\",\", \"\""
        },
        {
          "total_lines": 1,
          "line_start": 5774,
          "line_end": 5774,
          "content": "\"LIKE\", schemaPattern"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/test/TestCascade.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 70,
          "line_end": 71,
          "content": "e.printStackTrace();<br/>            System.out.println(this + \".setUp() error: \" + e.getMessage());"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/RAFile.java",
      "loc_duplicate": 24,
      "clones": [
          {
          "total_lines": 8,
          "line_start": 492,
          "line_end": 499,
          "content": "long mask    = 0xffffffffffffffffl << scale;<br/>        long newSize = value & mask;<br/><br/>        if (newSize != value) {<br/>            newSize += 1 << scale;<br/>        }<br/><br/>        return newSize;"
        },
        {
          "total_lines": 7,
          "line_start": 493,
          "line_end": 499,
          "content": "long newSize = value & mask;<br/><br/>        if (newSize != value) {<br/>            newSize += 1 << scale;<br/>        }<br/><br/>        return newSize;"
        },
        {
          "total_lines": 5,
          "line_start": 495,
          "line_end": 499,
          "content": "if (newSize != value) {<br/>            newSize += 1 << scale;<br/>        }<br/><br/>        return newSize;"
        },
        {
          "total_lines": 2,
          "line_start": 94,
          "line_end": 95,
          "content": "Database database,<br/>            String name"
        },
        {
          "total_lines": 2,
          "line_start": 42,
          "line_end": 43,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/TextCache.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 330,
          "line_end": 331,
          "content": "CachedObject object, PersistentStore store,<br/>                            boolean keep"
        },
        {
          "total_lines": 1,
          "line_start": 214,
          "line_end": 214,
          "content": "t, ErrorCode.FILE_IO_ERROR"
        },
        {
          "total_lines": 1,
          "line_start": 246,
          "line_end": 246,
          "content": "t, ErrorCode.FILE_IO_ERROR"
        },
        {
          "total_lines": 1,
          "line_start": 170,
          "line_end": 170,
          "content": "t, ErrorCode.FILE_IO_ERROR"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/TableSpaceManager.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 61,
          "line_end": 62,
          "content": "DoubleIntIndex lookup, long blockFreePos,<br/>                             long blockLimit"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/lib/LongDeque.java",
      "loc_duplicate": 54,
      "clones": [
          {
          "total_lines": 11,
          "line_start": 303,
          "line_end": 313,
          "content": "if (i < 0 || i >= elementCount) {<br/>            throw new IndexOutOfBoundsException();<br/>        }<br/><br/>        int index = firstindex + i;<br/><br/>        if (index >= list.length) {<br/>            index -= list.length;<br/>        }<br/><br/>        return index;"
        },
        {
          "total_lines": 5,
          "line_start": 163,
          "line_end": 167,
          "content": "firstindex = list.length - 1;<br/><br/>            if (endindex == 0) {<br/>                endindex = list.length;<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 77,
          "line_end": 81,
          "content": "if (elementCount == 0) {<br/>            throw new NoSuchElementException();<br/>        }<br/><br/>        return list[endindex - 1];"
        },
        {
          "total_lines": 5,
          "line_start": 210,
          "line_end": 214,
          "content": "int index = firstindex + i;<br/><br/>            if (index >= list.length) {<br/>                index -= list.length;<br/>            }"
        },
        {
          "total_lines": 5,
          "line_start": 68,
          "line_end": 72,
          "content": "if (elementCount == 0) {<br/>            throw new NoSuchElementException();<br/>        }<br/><br/>        return list[firstindex];"
        },
        {
          "total_lines": 5,
          "line_start": 303,
          "line_end": 307,
          "content": "if (i < 0 || i >= elementCount) {<br/>            throw new IndexOutOfBoundsException();<br/>        }<br/><br/>        int index = firstindex + i;"
        },
        {
          "total_lines": 5,
          "line_start": 273,
          "line_end": 277,
          "content": "int index = firstindex + i;<br/><br/>            if (index >= list.length) {<br/>                index -= list.length;<br/>            }"
        },
        {
          "total_lines": 3,
          "line_start": 86,
          "line_end": 88,
          "content": "int index = getInternalIndex(i);<br/><br/>        return list[index];"
        },
        {
          "total_lines": 3,
          "line_start": 328,
          "line_end": 330,
          "content": "System.arraycopy(list, 0, newList, list.length, endindex);<br/><br/>            endindex = list.length + endindex;"
        },
        {
          "total_lines": 2,
          "line_start": 324,
          "line_end": 325,
          "content": "firstindex, newList, firstindex,<br/>                         list.length - firstindex"
        },
        {
          "total_lines": 2,
          "line_start": 249,
          "line_end": 250,
          "content": "list, target + 1, list, target,<br/>                             endindex - target - 1"
        },
        {
          "total_lines": 2,
          "line_start": 238,
          "line_end": 239,
          "content": "list, firstindex + 1,<br/>                             target - firstindex"
        },
        {
          "total_lines": 1,
          "line_start": 238,
          "line_end": 238,
          "content": "firstindex, list, firstindex + 1"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/util/CommonSwing.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 157,
          "line_end": 158,
          "content": "(d.width - size.width) / 2,<br/>                                      (d.height - size.height) / 2"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/index/NodeAVLDiskLarge.java",
      "loc_duplicate": 114,
      "clones": [
          {
          "total_lines": 13,
          "line_start": 403,
          "line_end": 415,
          "content": "NodeAVL x;<br/><br/>        if (isLeft) {<br/>            x = setLeft(store, n);<br/>        } else {<br/>            x = setRight(store, n);<br/>        }<br/><br/>        if (n != null) {<br/>            n.setParent(store, this);<br/>        }<br/><br/>        return x;"
        },
        {
          "total_lines": 11,
          "line_start": 405,
          "line_end": 415,
          "content": "if (isLeft) {<br/>            x = setLeft(store, n);<br/>        } else {<br/>            x = setRight(store, n);<br/>        }<br/><br/>        if (n != null) {<br/>            n.setParent(store, this);<br/>        }<br/><br/>        return x;"
        },
        {
          "total_lines": 10,
          "line_start": 34,
          "line_end": 43,
          "content": "import java.io.IOException;<br/><br/>import org.hsqldb.RowAVL;<br/>import org.hsqldb.RowAVLDisk;<br/>import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.lib.LongLookup;<br/>import org.hsqldb.persist.PersistentStore;<br/>import org.hsqldb.rowio.RowInputInterface;<br/>import org.hsqldb.rowio.RowOutputInterface;"
        },
        {
          "total_lines": 9,
          "line_start": 101,
          "line_end": 109,
          "content": "iLeft    = NO_POS;<br/>        iRight   = NO_POS;<br/>        iParent  = NO_POS;<br/>        nLeft    = null;<br/>        nRight   = null;<br/>        nParent  = null;<br/>        iBalance = 0;<br/><br/>        row.setNodesChanged();"
        },
        {
          "total_lines": 8,
          "line_start": 36,
          "line_end": 43,
          "content": "import org.hsqldb.RowAVL;<br/>import org.hsqldb.RowAVLDisk;<br/>import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.lib.LongLookup;<br/>import org.hsqldb.persist.PersistentStore;<br/>import org.hsqldb.rowio.RowInputInterface;<br/>import org.hsqldb.rowio.RowOutputInterface;"
        },
        {
          "total_lines": 7,
          "line_start": 126,
          "line_end": 132,
          "content": "if (!row.isInMemory()) {<br/>            return (RowAVLDisk) store.get(this.row, false);<br/>        } else {<br/>            row.updateAccessCount(store.getAccessCount());<br/>        }<br/><br/>        return row;"
        },
        {
          "total_lines": 5,
          "line_start": 153,
          "line_end": 157,
          "content": "if (n == null) {<br/>            return iLeft == NO_POS;<br/>        }<br/><br/>        return iLeft == n.getPos();"
        },
        {
          "total_lines": 5,
          "line_start": 162,
          "line_end": 166,
          "content": "if (n == null) {<br/>            return iRight == NO_POS;<br/>        }<br/><br/>        return iRight == n.getPos();"
        },
        {
          "total_lines": 5,
          "line_start": 411,
          "line_end": 415,
          "content": "if (n != null) {<br/>            n.setParent(store, this);<br/>        }<br/><br/>        return x;"
        },
        {
          "total_lines": 5,
          "line_start": 429,
          "line_end": 433,
          "content": "if (n != null) {<br/>                n = n.setParent(store, null);<br/>            }<br/><br/>            store.setAccessor(index, n);"
        },
        {
          "total_lines": 3,
          "line_start": 297,
          "line_end": 299,
          "content": "row.keepInMemory(false);<br/><br/>            throw Error.runtimeError(ErrorCode.U_S0500, \"NodeAVLDisk\");"
        },
        {
          "total_lines": 2,
          "line_start": 266,
          "line_end": 267,
          "content": "row  = (RowAVLDisk) store.get(this.row, false);<br/>            node = (NodeAVLDiskLarge) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 377,
          "line_end": 378,
          "content": "row  = (RowAVLDisk) store.get(this.row, true);<br/>            node = (NodeAVLDiskLarge) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 104,
          "line_end": 105,
          "content": "nLeft    = null;<br/>        nRight   = null;"
        },
        {
          "total_lines": 2,
          "line_start": 240,
          "line_end": 241,
          "content": "row  = (RowAVLDisk) store.get(this.row, false);<br/>            node = (NodeAVLDiskLarge) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 197,
          "line_end": 198,
          "content": "row  = (RowAVLDisk) store.get(this.row, false);<br/>            node = (NodeAVLDiskLarge) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 424,
          "line_end": 425,
          "content": "row  = (RowAVLDisk) store.get(this.row, true);<br/>            node = (NodeAVLDiskLarge) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 324,
          "line_end": 325,
          "content": "row  = (RowAVLDisk) store.get(this.row, true);<br/>            node = (NodeAVLDiskLarge) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 175,
          "line_end": 176,
          "content": "row  = (RowAVLDisk) store.get(this.row, false);<br/>            node = (NodeAVLDiskLarge) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 253,
          "line_end": 254,
          "content": "row  = (RowAVLDisk) store.get(this.row, false);<br/>            node = (NodeAVLDiskLarge) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 347,
          "line_end": 348,
          "content": "row  = (RowAVLDisk) store.get(this.row, true);<br/>            node = (NodeAVLDiskLarge) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 62,
          "line_end": 63,
          "content": "RowInputInterface in,<br/>                       int id"
        },
        {
          "total_lines": 2,
          "line_start": 292,
          "line_end": 293,
          "content": "row  = (RowAVLDisk) store.get(this.row, true);<br/>            node = (NodeAVLDiskLarge) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 184,
          "line_end": 185,
          "content": "node.nLeft         = findNode(store, node.iLeft);<br/>            node.nLeft.nParent = node;"
        },
        {
          "total_lines": 2,
          "line_start": 219,
          "line_end": 220,
          "content": "row  = (RowAVLDisk) store.get(this.row, false);<br/>            node = (NodeAVLDiskLarge) row.getNode(iId);"
        },
        {
          "total_lines": 2,
          "line_start": 206,
          "line_end": 207,
          "content": "node.nRight         = findNode(store, node.iRight);<br/>            node.nRight.nParent = node;"
        },
        {
          "total_lines": 1,
          "line_start": 483,
          "line_end": 483,
          "content": "RowOutputInterface out, LongLookup lookup"
        },
        {
          "total_lines": 1,
          "line_start": 418,
          "line_end": 418,
          "content": "PersistentStore store, Index index, NodeAVL n"
        },
        {
          "total_lines": 1,
          "line_start": 401,
          "line_end": 401,
          "content": "boolean isLeft, NodeAVL n"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/persist/IntArrayCachedObject.java",
      "loc_duplicate": 16,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 34,
          "line_end": 40,
          "content": "import java.io.IOException;<br/><br/>import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.lib.LongLookup;<br/>import org.hsqldb.rowio.RowInputInterface;<br/>import org.hsqldb.rowio.RowOutputInterface;"
        },
        {
          "total_lines": 5,
          "line_start": 36,
          "line_end": 40,
          "content": "import org.hsqldb.error.Error;<br/>import org.hsqldb.error.ErrorCode;<br/>import org.hsqldb.lib.LongLookup;<br/>import org.hsqldb.rowio.RowInputInterface;<br/>import org.hsqldb.rowio.RowOutputInterface;"
        },
        {
          "total_lines": 3,
          "line_start": 34,
          "line_end": 36,
          "content": "import java.io.IOException;<br/><br/>import org.hsqldb.error.Error;"
        },
        {
          "total_lines": 1,
          "line_start": 101,
          "line_end": 101,
          "content": "RowOutputInterface out, LongLookup lookup"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/SetFunction.java",
      "loc_duplicate": 29,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 166,
          "line_end": 169,
          "content": "addLong(currentLong<br/>                                        / DTIType.nanoScaleFactors[0]);<br/><br/>                                currentLong %= DTIType.nanoScaleFactors[0];"
        },
        {
          "total_lines": 4,
          "line_start": 413,
          "line_end": 416,
          "content": "bi.longValue(),<br/>                                                          currentLong,<br/>                                                          (IntervalType) type,<br/>                                                          true"
        },
        {
          "total_lines": 4,
          "line_start": 357,
          "line_end": 360,
          "content": "bi.longValue(),<br/>                                                          currentLong,<br/>                                                          (IntervalType) type,<br/>                                                          true"
        },
        {
          "total_lines": 3,
          "line_start": 414,
          "line_end": 416,
          "content": "currentLong,<br/>                                                          (IntervalType) type,<br/>                                                          true"
        },
        {
          "total_lines": 3,
          "line_start": 186,
          "line_end": 188,
          "content": "addLong(currentLong / DTIType.nanoScaleFactors[0]);<br/><br/>                            currentLong %= DTIType.nanoScaleFactors[0];"
        },
        {
          "total_lines": 3,
          "line_start": 358,
          "line_end": 360,
          "content": "currentLong,<br/>                                                          (IntervalType) type,<br/>                                                          true"
        },
        {
          "total_lines": 2,
          "line_start": 359,
          "line_end": 360,
          "content": "(IntervalType) type,<br/>                                                          true"
        },
        {
          "total_lines": 2,
          "line_start": 415,
          "line_end": 416,
          "content": "(IntervalType) type,<br/>                                                          true"
        },
        {
          "total_lines": 2,
          "line_start": 358,
          "line_end": 359,
          "content": "currentLong,<br/>                                                          (IntervalType) type"
        },
        {
          "total_lines": 2,
          "line_start": 414,
          "line_end": 415,
          "content": "currentLong,<br/>                                                          (IntervalType) type"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/map/ValuePool.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 60,
          "line_end": 62,
          "content": "DEFAULT_VALUE_POOL_SIZE,<br/>        DEFAULT_VALUE_POOL_SIZE, DEFAULT_VALUE_POOL_SIZE,<br/>        DEFAULT_VALUE_POOL_SIZE"
        },
        {
          "total_lines": 2,
          "line_start": 60,
          "line_end": 61,
          "content": "DEFAULT_VALUE_POOL_SIZE, DEFAULT_VALUE_POOL_SIZE,<br/>        DEFAULT_VALUE_POOL_SIZE, DEFAULT_VALUE_POOL_SIZE"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/StatementCompound.java",
      "loc_duplicate": 81,
      "clones": [
          {
          "total_lines": 14,
          "line_start": 500,
          "line_end": 513,
          "content": "result = executeProtected(session, statements[i]);<br/>                result = handleCondition(session, result);<br/><br/>                if (result.isError()) {<br/>                    break;<br/>                }<br/><br/>                if (result.getType() == ResultConstants.VALUE) {<br/>                    break;<br/>                }<br/><br/>                if (result.getType() == ResultConstants.DATA) {<br/>                    break;<br/>                }"
        },
        {
          "total_lines": 14,
          "line_start": 376,
          "line_end": 389,
          "content": "result = executeProtected(session, statements[i]);<br/>            result = handleCondition(session, result);<br/><br/>            if (result.isError()) {<br/>                break;<br/>            }<br/><br/>            if (result.getType() == ResultConstants.VALUE) {<br/>                break;<br/>            }<br/><br/>            if (result.getType() == ResultConstants.DATA) {<br/>                break;<br/>            }"
        },
        {
          "total_lines": 11,
          "line_start": 203,
          "line_end": 213,
          "content": "StringBuffer sb = new StringBuffer();<br/><br/>        sb.append('\\n');<br/><br/>        for (int i = 0; i < blanks; i++) {<br/>            sb.append(' ');<br/>        }<br/><br/>        sb.append(Tokens.T_STATEMENT);<br/><br/>        return sb.toString();"
        },
        {
          "total_lines": 10,
          "line_start": 522,
          "line_end": 531,
          "content": "if (result.getMainString() == null) {<br/>                        continue;<br/>                    }<br/><br/>                    if (label != null<br/>                            && label.name.equals(result.getMainString())) {<br/>                        continue;<br/>                    }<br/><br/>                    break;"
        },
        {
          "total_lines": 10,
          "line_start": 590,
          "line_end": 599,
          "content": "if (result.getMainString() == null) {<br/>                        continue;<br/>                    }<br/><br/>                    if (label != null<br/>                            && label.name.equals(result.getMainString())) {<br/>                        continue;<br/>                    }<br/><br/>                    break;"
        },
        {
          "total_lines": 8,
          "line_start": 590,
          "line_end": 597,
          "content": "if (result.getMainString() == null) {<br/>                        continue;<br/>                    }<br/><br/>                    if (label != null<br/>                            && label.name.equals(result.getMainString())) {<br/>                        continue;<br/>                    }"
        },
        {
          "total_lines": 8,
          "line_start": 522,
          "line_end": 529,
          "content": "if (result.getMainString() == null) {<br/>                        continue;<br/>                    }<br/><br/>                    if (label != null<br/>                            && label.name.equals(result.getMainString())) {<br/>                        continue;<br/>                    }"
        },
        {
          "total_lines": 3,
          "line_start": 452,
          "line_end": 454,
          "content": "result = Result.newPSMResult(StatementTypes.LEAVE,<br/>                                                         labelString, null);<br/>                            break;"
        },
        {
          "total_lines": 3,
          "line_start": 447,
          "line_end": 449,
          "content": "result = Result.newPSMResult(StatementTypes.LEAVE,<br/>                                                         labelString, null);<br/>                            break;"
        }
        
      ]
    },
    {
      "path": "hsqldb/src/org/hsqldb/Row.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 168,
          "line_end": 168,
          "content": "RowOutputInterface out, LongLookup lookup"
        },
        {
          "total_lines": 1,
          "line_start": 72,
          "line_end": 72,
          "content": "Session session, PersistentStore store"
        }
        
      ]
    }
  ]
}