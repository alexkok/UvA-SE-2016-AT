{
  "time_start": "19:31:12",
  "time_end": "19:38:43",
  "total_duration": "0h 7m 30s",
  "loc_total": 0,
  "loc_duplicate": 2692,
  "total_clones": 1019,
  "clones": [
    {
      "path": "src/smallsql/database/StoreNull.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.sql.*;<br/>import smallsql.database.language.Language;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ForeignKeys.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 57,
          "line_end": 59,
          "content": "if (idx >= size)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return data[idx];"
        },
        {
          "total_lines": 2,
          "line_start": 73,
          "line_end": 74,
          "content": "System.arraycopy(data, 0, dataNew, 0, size);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = dataNew;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/LongList.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 61,
          "line_end": 63,
          "content": "if (idx >= size)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return data[idx];"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/IndexDescriptions.java",
      "loc_duplicate": 7,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 63,
          "line_end": 66,
          "content": "// SAVER: use SmallSQLException<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (idx >= size)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return data[idx];"
        },
        {
          "total_lines": 2,
          "line_start": 36,
          "line_end": 37,
          "content": "import java.sql.SQLException;<br/>import smallsql.database.language.Language;"
        },
        {
          "total_lines": 1,
          "line_start": 115,
          "line_end": 115,
          "content": "Database database, TableView tableView"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/BasicTestCase.java",
      "loc_duplicate": 36,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 103,
          "line_end": 108,
          "content": "StringBuffer buf = new StringBuffer(bytes.length << 1);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int i=0; i<bytes.length; i++){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( digits[ (bytes[i]     ) & 0x0F ] );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 130,
          "line_end": 134,
          "content": "int k=tmp.length-1;<br/>                for(; k>= 0; k--) if(tmp[k] != 0) break;<br/>                k++;<br/>                byte[] tmp2 = new byte[k];<br/>                System.arraycopy( tmp, 0, tmp2, 0, k);"
        },
        {
          "total_lines": 5,
          "line_start": 104,
          "line_end": 108,
          "content": "for(int i=0; i<bytes.length; i++){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( digits[ (bytes[i]     ) & 0x0F ] );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 143,
          "line_end": 147,
          "content": "int k=tmp.length-1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(; k>= 0; k--) if(tmp[k] != 0) break;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte[] tmp2 = new byte[k];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy( tmp, 0, tmp2, 0, k);"
        },
        {
          "total_lines": 4,
          "line_start": 192,
          "line_end": 195,
          "content": "try{<br/>            return Double.parseDouble( val ) != 0;<br/>        }catch(NumberFormatException e){/*ignore it if it not a number*/}<br/>        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );"
        },
        {
          "total_lines": 3,
          "line_start": 145,
          "line_end": 147,
          "content": "k++;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte[] tmp2 = new byte[k];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy( tmp, 0, tmp2, 0, k);"
        },
        {
          "total_lines": 3,
          "line_start": 132,
          "line_end": 134,
          "content": "k++;<br/>                byte[] tmp2 = new byte[k];<br/>                System.arraycopy( tmp, 0, tmp2, 0, k);"
        },
        {
          "total_lines": 1,
          "line_start": 324,
          "line_end": 324,
          "content": "message, expectedLen == Integer.MAX_VALUE"
        },
        {
          "total_lines": 1,
          "line_start": 316,
          "line_end": 316,
          "content": "message, expectedLen == Integer.MAX_VALUE"
        },
        {
          "total_lines": 1,
          "line_start": 101,
          "line_end": 101,
          "content": "'2','3','4','5','6','7','8','9','A','B','C'"
        },
        {
          "total_lines": 1,
          "line_start": 215,
          "line_end": 215,
          "content": "obj.toString(), rs.getString(name)"
        },
        {
          "total_lines": 1,
          "line_start": 223,
          "line_end": 223,
          "content": "obj.toString(), rs.getString(name)"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionTimestampAdd.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 45,
          "line_end": 45,
          "content": "int intervalType, Expression p1, Expression p2"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/DateTime.java",
      "loc_duplicate": 628,
      "clones": [
          {
          "total_lines": 12,
          "line_start": 601,
          "line_end": 612,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( details.hour < 12 ? \"AM\" : \"PM\" );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 12,
          "line_start": 475,
          "line_end": 486,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( details.hour < 12 ? \"AM\" : \"PM\" );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 11,
          "line_start": 553,
          "line_end": 563,
          "content": "formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);"
        },
        {
          "total_lines": 11,
          "line_start": 567,
          "line_end": 577,
          "content": "formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);"
        },
        {
          "total_lines": 9,
          "line_start": 619,
          "line_end": 627,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 9,
          "line_start": 351,
          "line_end": 359,
          "content": "buf.append( SHORT_MONTHS[ details.month ]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);"
        },
        {
          "total_lines": 9,
          "line_start": 472,
          "line_end": 480,
          "content": "buf.append( SHORT_MONTHS[ details.month ]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);"
        },
        {
          "total_lines": 9,
          "line_start": 532,
          "line_end": 540,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 8,
          "line_start": 352,
          "line_end": 359,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);"
        },
        {
          "total_lines": 8,
          "line_start": 589,
          "line_end": 596,
          "content": "formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 8,
          "line_start": 573,
          "line_end": 580,
          "content": "formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 8,
          "line_start": 473,
          "line_end": 480,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);"
        },
        {
          "total_lines": 8,
          "line_start": 543,
          "line_end": 550,
          "content": "formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 7,
          "line_start": 555,
          "line_end": 561,
          "content": "formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);"
        },
        {
          "total_lines": 7,
          "line_start": 567,
          "line_end": 573,
          "content": "formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);"
        },
        {
          "total_lines": 7,
          "line_start": 569,
          "line_end": 575,
          "content": "formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);"
        },
        {
          "total_lines": 7,
          "line_start": 554,
          "line_end": 560,
          "content": "buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 7,
          "line_start": 472,
          "line_end": 478,
          "content": "buf.append( SHORT_MONTHS[ details.month ]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );"
        },
        {
          "total_lines": 7,
          "line_start": 553,
          "line_end": 559,
          "content": "formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);"
        },
        {
          "total_lines": 7,
          "line_start": 568,
          "line_end": 574,
          "content": "buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 7,
          "line_start": 351,
          "line_end": 357,
          "content": "buf.append( SHORT_MONTHS[ details.month ]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );"
        },
        {
          "total_lines": 6,
          "line_start": 557,
          "line_end": 562,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 6,
          "line_start": 601,
          "line_end": 606,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);"
        },
        {
          "total_lines": 6,
          "line_start": 473,
          "line_end": 478,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );"
        },
        {
          "total_lines": 6,
          "line_start": 607,
          "line_end": 612,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( details.hour < 12 ? \"AM\" : \"PM\" );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 6,
          "line_start": 571,
          "line_end": 576,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 6,
          "line_start": 598,
          "line_end": 603,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( SHORT_MONTHS[ details.month ]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');"
        },
        {
          "total_lines": 6,
          "line_start": 354,
          "line_end": 359,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);"
        },
        {
          "total_lines": 6,
          "line_start": 464,
          "line_end": 469,
          "content": "formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 6,
          "line_start": 559,
          "line_end": 564,
          "content": "formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 6,
          "line_start": 352,
          "line_end": 357,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );"
        },
        {
          "total_lines": 6,
          "line_start": 602,
          "line_end": 607,
          "content": "formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 6,
          "line_start": 476,
          "line_end": 481,
          "content": "formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 6,
          "line_start": 527,
          "line_end": 532,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( SHORT_MONTHS[ details.month ]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');"
        },
        {
          "total_lines": 6,
          "line_start": 353,
          "line_end": 358,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 6,
          "line_start": 606,
          "line_end": 611,
          "content": "formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( details.hour < 12 ? \"AM\" : \"PM\" );"
        },
        {
          "total_lines": 6,
          "line_start": 475,
          "line_end": 480,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);"
        },
        {
          "total_lines": 6,
          "line_start": 570,
          "line_end": 575,
          "content": "buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);"
        },
        {
          "total_lines": 6,
          "line_start": 481,
          "line_end": 486,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( details.hour < 12 ? \"AM\" : \"PM\" );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 6,
          "line_start": 474,
          "line_end": 479,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatHour12( details.hour, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 6,
          "line_start": 556,
          "line_end": 561,
          "content": "buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);"
        },
        {
          "total_lines": 6,
          "line_start": 480,
          "line_end": 485,
          "content": "formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( details.hour < 12 ? \"AM\" : \"PM\" );"
        },
        {
          "total_lines": 5,
          "line_start": 573,
          "line_end": 577,
          "content": "formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);"
        },
        {
          "total_lines": 5,
          "line_start": 574,
          "line_end": 578,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');"
        },
        {
          "total_lines": 5,
          "line_start": 605,
          "line_end": 609,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 5,
          "line_start": 560,
          "line_end": 564,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 534,
          "line_end": 538,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 5,
          "line_start": 455,
          "line_end": 459,
          "content": "buf.append( SHORT_MONTHS[ details.month ]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(',');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');"
        },
        {
          "total_lines": 5,
          "line_start": 447,
          "line_end": 451,
          "content": "buf.append( SHORT_MONTHS[ details.month ]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(',');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');"
        },
        {
          "total_lines": 5,
          "line_start": 592,
          "line_end": 596,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 545,
          "line_end": 549,
          "content": "formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf );"
        },
        {
          "total_lines": 5,
          "line_start": 575,
          "line_end": 579,
          "content": "formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf );"
        },
        {
          "total_lines": 5,
          "line_start": 614,
          "line_end": 618,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year % 100, 2, buf);"
        },
        {
          "total_lines": 5,
          "line_start": 378,
          "line_end": 382,
          "content": "buf.append('.');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 621,
          "line_end": 625,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 5,
          "line_start": 464,
          "line_end": 468,
          "content": "formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);"
        },
        {
          "total_lines": 5,
          "line_start": 391,
          "line_end": 395,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year % 100, 2, buf);"
        },
        {
          "total_lines": 5,
          "line_start": 503,
          "line_end": 507,
          "content": "buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 546,
          "line_end": 550,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 590,
          "line_end": 594,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');"
        },
        {
          "total_lines": 5,
          "line_start": 622,
          "line_end": 626,
          "content": "formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf );"
        },
        {
          "total_lines": 5,
          "line_start": 619,
          "line_end": 623,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 5,
          "line_start": 589,
          "line_end": 593,
          "content": "formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);"
        },
        {
          "total_lines": 5,
          "line_start": 620,
          "line_end": 624,
          "content": "formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);"
        },
        {
          "total_lines": 5,
          "line_start": 543,
          "line_end": 547,
          "content": "formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);"
        },
        {
          "total_lines": 5,
          "line_start": 606,
          "line_end": 610,
          "content": "formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf);"
        },
        {
          "total_lines": 5,
          "line_start": 559,
          "line_end": 563,
          "content": "formatNumber( details.hour, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);"
        },
        {
          "total_lines": 5,
          "line_start": 535,
          "line_end": 539,
          "content": "formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf);"
        },
        {
          "total_lines": 5,
          "line_start": 385,
          "line_end": 389,
          "content": "buf.append('.');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 583,
          "line_end": 587,
          "content": "formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);"
        },
        {
          "total_lines": 5,
          "line_start": 536,
          "line_end": 540,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 532,
          "line_end": 536,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.hour, 2, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 5,
          "line_start": 510,
          "line_end": 514,
          "content": "buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 440,
          "line_end": 444,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( SHORT_MONTHS[ details.month ]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);"
        },
        {
          "total_lines": 5,
          "line_start": 623,
          "line_end": 627,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 544,
          "line_end": 548,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 5,
          "line_start": 576,
          "line_end": 580,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 479,
          "line_end": 483,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');"
        },
        {
          "total_lines": 5,
          "line_start": 465,
          "line_end": 469,
          "content": "buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 480,
          "line_end": 484,
          "content": "formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf);"
        },
        {
          "total_lines": 5,
          "line_start": 591,
          "line_end": 595,
          "content": "formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatMillis( details.millis, buf );"
        },
        {
          "total_lines": 5,
          "line_start": 533,
          "line_end": 537,
          "content": "formatNumber( details.hour, 2, buf );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.minute, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(':');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.second, 2, buf);"
        },
        {
          "total_lines": 4,
          "line_start": 419,
          "line_end": 422,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');"
        },
        {
          "total_lines": 4,
          "line_start": 412,
          "line_end": 415,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');"
        },
        {
          "total_lines": 4,
          "line_start": 398,
          "line_end": 401,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');"
        },
        {
          "total_lines": 4,
          "line_start": 391,
          "line_end": 394,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');"
        },
        {
          "total_lines": 4,
          "line_start": 448,
          "line_end": 451,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(',');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');"
        },
        {
          "total_lines": 4,
          "line_start": 370,
          "line_end": 373,
          "content": "formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');"
        },
        {
          "total_lines": 4,
          "line_start": 426,
          "line_end": 429,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');"
        },
        {
          "total_lines": 4,
          "line_start": 363,
          "line_end": 366,
          "content": "formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');"
        },
        {
          "total_lines": 4,
          "line_start": 488,
          "line_end": 491,
          "content": "formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');"
        },
        {
          "total_lines": 4,
          "line_start": 405,
          "line_end": 408,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('.');"
        },
        {
          "total_lines": 4,
          "line_start": 495,
          "line_end": 498,
          "content": "formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');"
        },
        {
          "total_lines": 4,
          "line_start": 614,
          "line_end": 617,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');"
        },
        {
          "total_lines": 4,
          "line_start": 433,
          "line_end": 436,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append( SHORT_MONTHS[ details.month ]);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');"
        },
        {
          "total_lines": 4,
          "line_start": 456,
          "line_end": 459,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(',');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(' ');"
        },
        {
          "total_lines": 3,
          "line_start": 496,
          "line_end": 498,
          "content": "buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');"
        },
        {
          "total_lines": 3,
          "line_start": 491,
          "line_end": 493,
          "content": "buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year % 100, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 3,
          "line_start": 451,
          "line_end": 453,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year % 100, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 3,
          "line_start": 498,
          "line_end": 500,
          "content": "buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 3,
          "line_start": 489,
          "line_end": 491,
          "content": "buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('-');"
        },
        {
          "total_lines": 3,
          "line_start": 364,
          "line_end": 366,
          "content": "buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');"
        },
        {
          "total_lines": 3,
          "line_start": 429,
          "line_end": 431,
          "content": "buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 3,
          "line_start": 436,
          "line_end": 438,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year % 100, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 3,
          "line_start": 517,
          "line_end": 519,
          "content": "formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 3,
          "line_start": 373,
          "line_end": 375,
          "content": "buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 3,
          "line_start": 371,
          "line_end": 373,
          "content": "buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append('/');"
        },
        {
          "total_lines": 3,
          "line_start": 522,
          "line_end": 524,
          "content": "formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 3,
          "line_start": 366,
          "line_end": 368,
          "content": "buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year % 100, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 3,
          "line_start": 394,
          "line_end": 396,
          "content": "buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year % 100, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 3,
          "line_start": 401,
          "line_end": 403,
          "content": "buf.append('/');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 3,
          "line_start": 459,
          "line_end": 461,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 3,
          "line_start": 422,
          "line_end": 424,
          "content": "buf.append('-');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year % 100, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 3,
          "line_start": 443,
          "line_end": 445,
          "content": "buf.append(' ');<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 2,
          "line_start": 416,
          "line_end": 417,
          "content": "formatNumber( details.year, 4, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 2,
          "line_start": 518,
          "line_end": 519,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 2,
          "line_start": 360,
          "line_end": 361,
          "content": "buf.append( details.hour < 12 ? \"AM\" : \"PM\" );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 2,
          "line_start": 523,
          "line_end": 524,
          "content": "formatNumber( details.day, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 2,
          "line_start": 522,
          "line_end": 523,
          "content": "formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);"
        },
        {
          "total_lines": 2,
          "line_start": 409,
          "line_end": 410,
          "content": "formatNumber( details.year % 100, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();"
        },
        {
          "total_lines": 2,
          "line_start": 517,
          "line_end": 518,
          "content": "formatNumber( details.month+1, 2, buf);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatNumber( details.day, 2, buf);"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/Database.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 239,
          "line_end": 239,
          "content": "Language.TABLE_CANT_RENAME, oldTable.name"
        },
        {
          "total_lines": 1,
          "line_start": 200,
          "line_end": 200,
          "content": "SSConnection con, String catalog, String tableName"
        },
        {
          "total_lines": 1,
          "line_start": 175,
          "line_end": 175,
          "content": "SSConnection con, String catalog, String tableName"
        },
        {
          "total_lines": 1,
          "line_start": 250,
          "line_end": 250,
          "content": "SSConnection con, String catalog, String tableName"
        },
        {
          "total_lines": 1,
          "line_start": 243,
          "line_end": 243,
          "content": "Language.TABLE_CANT_RENAME, oldTable.name"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/Command.java",
      "loc_duplicate": 6,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 35,
          "line_end": 37,
          "content": "import java.sql.*;<br/><br/>import smallsql.database.language.Language;"
        },
        {
          "total_lines": 2,
          "line_start": 139,
          "line_end": 140,
          "content": "con.rollback(savepoint);<br/>            throw SmallSQLException.createFromException(e);"
        },
        {
          "total_lines": 1,
          "line_start": 62,
          "line_end": 62,
          "content": "Logger log, Expressions columnExpressions"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestExceptions.java",
      "loc_duplicate": 9,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 95,
          "line_end": 95,
          "content": "testValue.sqlstate, testValue.errorCode"
        },
        {
          "total_lines": 1,
          "line_start": 109,
          "line_end": 109,
          "content": "testValue.sqlstate, testValue.errorCode"
        },
        {
          "total_lines": 1,
          "line_start": 60,
          "line_end": 60,
          "content": "\"01000\",    0, SYNTAX"
        },
        {
          "total_lines": 1,
          "line_start": 61,
          "line_end": 61,
          "content": "\"01000\",    0, SYNTAX"
        },
        {
          "total_lines": 1,
          "line_start": 62,
          "line_end": 62,
          "content": "\"01000\",    0, SYNTAX"
        },
        {
          "total_lines": 1,
          "line_start": 59,
          "line_end": 59,
          "content": "\"01000\",    0, SYNTAX"
        },
        {
          "total_lines": 1,
          "line_start": 57,
          "line_end": 57,
          "content": "\"01000\",    0"
        },
        {
          "total_lines": 1,
          "line_start": 63,
          "line_end": 63,
          "content": "\"01000\",    0, SYNTAX"
        },
        {
          "total_lines": 1,
          "line_start": 58,
          "line_end": 58,
          "content": "\"01000\",    0"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionTimestampDiff.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 155,
          "line_end": 156,
          "content": "if(isNull()) return null;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Utils.getInteger(getInt());"
        },
        {
          "total_lines": 1,
          "line_start": 70,
          "line_end": 70,
          "content": "int intervalType, Expression p1, Expression p2"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestResultSet.java",
      "loc_duplicate": 125,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 217,
          "line_end": 222,
          "content": "assertNotSame(\"getObject\", value, rs.getObject(\"c\"));<br/>        <br/>        //method last<br/>        assertTrue(\"start\", rs.first());<br/>        rs.updateObject(\"c\", value, Types.VARCHAR );<br/>        assertEquals(\"getObject\", value, rs.getObject(\"c\"));"
        },
        {
          "total_lines": 6,
          "line_start": 224,
          "line_end": 229,
          "content": "assertNotSame(\"getObject\", value, rs.getObject(\"c\"));<br/>        <br/>        //method refresh<br/>        assertTrue(\"start\", rs.first());<br/>        rs.updateObject(\"c\", value, Types.VARCHAR );<br/>        assertEquals(\"getObject\", value, rs.getObject(\"c\"));"
        },
        {
          "total_lines": 6,
          "line_start": 203,
          "line_end": 208,
          "content": "assertNotSame(\"getObject\", value, rs.getObject(\"c\"));<br/>        <br/>        //method next<br/>        assertTrue(\"start\", rs.first());<br/>        rs.updateObject(\"c\", value, Types.VARCHAR );<br/>        assertEquals(\"getObject\", value, rs.getObject(\"c\"));"
        },
        {
          "total_lines": 5,
          "line_start": 217,
          "line_end": 221,
          "content": "assertNotSame(\"getObject\", value, rs.getObject(\"c\"));<br/>        <br/>        //method last<br/>        assertTrue(\"start\", rs.first());<br/>        rs.updateObject(\"c\", value, Types.VARCHAR );"
        },
        {
          "total_lines": 5,
          "line_start": 224,
          "line_end": 228,
          "content": "assertNotSame(\"getObject\", value, rs.getObject(\"c\"));<br/>        <br/>        //method refresh<br/>        assertTrue(\"start\", rs.first());<br/>        rs.updateObject(\"c\", value, Types.VARCHAR );"
        },
        {
          "total_lines": 5,
          "line_start": 203,
          "line_end": 207,
          "content": "assertNotSame(\"getObject\", value, rs.getObject(\"c\"));<br/>        <br/>        //method next<br/>        assertTrue(\"start\", rs.first());<br/>        rs.updateObject(\"c\", value, Types.VARCHAR );"
        },
        {
          "total_lines": 4,
          "line_start": 226,
          "line_end": 229,
          "content": "//method refresh<br/>        assertTrue(\"start\", rs.first());<br/>        rs.updateObject(\"c\", value, Types.VARCHAR );<br/>        assertEquals(\"getObject\", value, rs.getObject(\"c\"));"
        },
        {
          "total_lines": 4,
          "line_start": 231,
          "line_end": 234,
          "content": "assertNotSame(\"getObject\", value, rs.getObject(\"c\"));<br/>        <br/>        //method moveToInsertRow and moveToCurrentRow<br/>        assertTrue(\"start\", rs.first());"
        },
        {
          "total_lines": 4,
          "line_start": 219,
          "line_end": 222,
          "content": "//method last<br/>        assertTrue(\"start\", rs.first());<br/>        rs.updateObject(\"c\", value, Types.VARCHAR );<br/>        assertEquals(\"getObject\", value, rs.getObject(\"c\"));"
        },
        {
          "total_lines": 4,
          "line_start": 205,
          "line_end": 208,
          "content": "//method next<br/>        assertTrue(\"start\", rs.first());<br/>        rs.updateObject(\"c\", value, Types.VARCHAR );<br/>        assertEquals(\"getObject\", value, rs.getObject(\"c\"));"
        },
        {
          "total_lines": 3,
          "line_start": 105,
          "line_end": 107,
          "content": "assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br/>        assertTrue(\"isAfterLast\", rs.isAfterLast() );<br/>        assertEquals(\"getRow\", 0, rs.getRow() );"
        },
        {
          "total_lines": 3,
          "line_start": 131,
          "line_end": 133,
          "content": "assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br/>        assertTrue(\"isAfterLast\", rs.isAfterLast() );<br/>        assertEquals(\"getRow\", 0, rs.getRow() );"
        },
        {
          "total_lines": 3,
          "line_start": 175,
          "line_end": 177,
          "content": "// second test with a reduce row size<br/>        rs = st.executeQuery(\"Select * From ResultSet\");<br/>        assertTrue(\"next\", rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 148,
          "line_end": 150,
          "content": "assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br/>        assertTrue(\"isAfterLast\", rs.isAfterLast() );<br/>        assertEquals(\"getRow\", 0, rs.getRow() );"
        },
        {
          "total_lines": 3,
          "line_start": 122,
          "line_end": 124,
          "content": "assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br/>        assertFalse(\"isAfterLast\", rs.isAfterLast() );<br/>        assertEquals(\"getRow\", 0, rs.getRow() );"
        },
        {
          "total_lines": 3,
          "line_start": 88,
          "line_end": 90,
          "content": "assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br/>        assertTrue(\"isAfterLast\", rs.isAfterLast() );<br/>        assertEquals(\"getRow\", 0, rs.getRow() );"
        },
        {
          "total_lines": 3,
          "line_start": 160,
          "line_end": 162,
          "content": "// first test with a enlarging row size<br/>        rs = st.executeQuery(\"Select * From ResultSet\");<br/>        assertTrue(\"next\", rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 117,
          "line_end": 119,
          "content": "assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br/>        assertFalse(\"isAfterLast\", rs.isAfterLast() );<br/>        assertEquals(\"getRow\", 0, rs.getRow() );"
        },
        {
          "total_lines": 2,
          "line_start": 263,
          "line_end": 264,
          "content": "Connection con = AllTests.getConnection();<br/>        Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 97,
          "line_end": 98,
          "content": "assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br/>        assertFalse(\"isAfterLast\", rs.isAfterLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 128,
          "line_end": 129,
          "content": "assertEquals(\"getRow\", 1, rs.getRow() );<br/>        assertTrue(\"isLast\", rs.isLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 72,
          "line_end": 73,
          "content": "assertTrue(\"isAfterLast\", rs.isAfterLast() );<br/>        assertEquals(\"getRow\", 0, rs.getRow() );"
        },
        {
          "total_lines": 2,
          "line_start": 60,
          "line_end": 61,
          "content": "rs.moveToInsertRow();<br/>        rs.insertRow();"
        },
        {
          "total_lines": 2,
          "line_start": 131,
          "line_end": 132,
          "content": "assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br/>        assertTrue(\"isAfterLast\", rs.isAfterLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 148,
          "line_end": 149,
          "content": "assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br/>        assertTrue(\"isAfterLast\", rs.isAfterLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 149,
          "line_end": 150,
          "content": "assertTrue(\"isAfterLast\", rs.isAfterLast() );<br/>        assertEquals(\"getRow\", 0, rs.getRow() );"
        },
        {
          "total_lines": 2,
          "line_start": 88,
          "line_end": 89,
          "content": "assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br/>        assertTrue(\"isAfterLast\", rs.isAfterLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 89,
          "line_end": 90,
          "content": "assertTrue(\"isAfterLast\", rs.isAfterLast() );<br/>        assertEquals(\"getRow\", 0, rs.getRow() );"
        },
        {
          "total_lines": 2,
          "line_start": 85,
          "line_end": 86,
          "content": "assertEquals(\"getRow\", 1, rs.getRow() );<br/>        assertTrue(\"isLast\", rs.isLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 132,
          "line_end": 133,
          "content": "assertTrue(\"isAfterLast\", rs.isAfterLast() );<br/>        assertEquals(\"getRow\", 0, rs.getRow() );"
        },
        {
          "total_lines": 2,
          "line_start": 214,
          "line_end": 215,
          "content": "rs.updateObject(\"c\", value );<br/>        assertEquals(\"getObject\", value, rs.getObject(\"c\"));"
        },
        {
          "total_lines": 2,
          "line_start": 106,
          "line_end": 107,
          "content": "assertTrue(\"isAfterLast\", rs.isAfterLast() );<br/>        assertEquals(\"getRow\", 0, rs.getRow() );"
        },
        {
          "total_lines": 2,
          "line_start": 242,
          "line_end": 243,
          "content": "rs.updateObject(\"c\", value);<br/>        assertEquals(\"getObject\", value, rs.getObject(\"c\"));"
        },
        {
          "total_lines": 2,
          "line_start": 79,
          "line_end": 80,
          "content": "assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br/>        assertFalse(\"isAfterLast\", rs.isAfterLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 101,
          "line_end": 102,
          "content": "assertEquals(\"getRow\", 1, rs.getRow() );<br/>        assertTrue(\"isLast\", rs.isLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 58,
          "line_end": 59,
          "content": "rs.moveToInsertRow();<br/>        rs.insertRow();"
        },
        {
          "total_lines": 2,
          "line_start": 237,
          "line_end": 238,
          "content": "rs.updateObject(\"c\", value);<br/>        assertEquals(\"getObject\", value, rs.getObject(\"c\"));"
        },
        {
          "total_lines": 2,
          "line_start": 140,
          "line_end": 141,
          "content": "assertTrue(\"isBeforeFirst\", rs.isBeforeFirst() );<br/>        assertFalse(\"isAfterLast\", rs.isAfterLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 144,
          "line_end": 145,
          "content": "assertEquals(\"getRow\", 1, rs.getRow() );<br/>        assertTrue(\"isLast\", rs.isLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 105,
          "line_end": 106,
          "content": "assertFalse(\"isBeforeFirst\", rs.isBeforeFirst() );<br/>        assertTrue(\"isAfterLast\", rs.isAfterLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 199,
          "line_end": 200,
          "content": "rs.updateObject(\"c\", value, Types.VARCHAR );<br/>        assertEquals(\"getObject\", value, rs.getObject(\"c\"));"
        },
        {
          "total_lines": 1,
          "line_start": 252,
          "line_end": 252,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 113,
          "line_end": 113,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 156,
          "line_end": 156,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 55,
          "line_end": 55,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 193,
          "line_end": 193,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 68,
          "line_end": 68,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/Identity.java",
      "loc_duplicate": 7,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 36,
          "line_end": 39,
          "content": "import java.io.*;<br/>import java.nio.ByteBuffer;<br/>import java.nio.channels.FileChannel;<br/>import java.sql.SQLException;"
        },
        {
          "total_lines": 3,
          "line_start": 37,
          "line_end": 39,
          "content": "import java.nio.ByteBuffer;<br/>import java.nio.channels.FileChannel;<br/>import java.sql.SQLException;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestOrderBy.java",
      "loc_duplicate": 284,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 799,
          "line_end": 804,
          "content": "assertTrue( rs.next() );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertNull(oldValue);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.next() );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"v\");"
        },
        {
          "total_lines": 6,
          "line_start": 803,
          "line_end": 808,
          "content": "assertTrue( rs.next() );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertNull(oldValue);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"v\");"
        },
        {
          "total_lines": 6,
          "line_start": 751,
          "line_end": 756,
          "content": "assertEquals( valueCount, count );<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(rs.next()) count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( valueCount, count );"
        },
        {
          "total_lines": 6,
          "line_start": 715,
          "line_end": 720,
          "content": "assertEquals( valueCount, count );<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(rs.next()) count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( valueCount, count );"
        },
        {
          "total_lines": 6,
          "line_start": 720,
          "line_end": 725,
          "content": "assertEquals( valueCount, count );<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(rs.next()) count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( valueCount, count );"
        },
        {
          "total_lines": 6,
          "line_start": 212,
          "line_end": 217,
          "content": "String newValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(newValue != null){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( oldValue.compareTo( newValue ) > 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = newValue;"
        },
        {
          "total_lines": 6,
          "line_start": 746,
          "line_end": 751,
          "content": "assertEquals( valueCount, count );<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(rs.next()) count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( valueCount, count );"
        },
        {
          "total_lines": 6,
          "line_start": 240,
          "line_end": 245,
          "content": "String newValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(newValue != null){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( oldValue.compareTo( newValue ) > 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = newValue;"
        },
        {
          "total_lines": 5,
          "line_start": 804,
          "line_end": 808,
          "content": "oldValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertNull(oldValue);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"v\");"
        },
        {
          "total_lines": 5,
          "line_start": 800,
          "line_end": 804,
          "content": "oldValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertNull(oldValue);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.next() );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"v\");"
        },
        {
          "total_lines": 5,
          "line_start": 212,
          "line_end": 216,
          "content": "String newValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(newValue != null){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( oldValue.compareTo( newValue ) > 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}"
        },
        {
          "total_lines": 5,
          "line_start": 799,
          "line_end": 803,
          "content": "assertTrue( rs.next() );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertNull(oldValue);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.next() );"
        },
        {
          "total_lines": 5,
          "line_start": 803,
          "line_end": 807,
          "content": "assertTrue( rs.next() );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertNull(oldValue);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.next() );"
        },
        {
          "total_lines": 5,
          "line_start": 240,
          "line_end": 244,
          "content": "String newValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(newValue != null){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( oldValue.compareTo( newValue ) > 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}"
        },
        {
          "total_lines": 4,
          "line_start": 748,
          "line_end": 751,
          "content": "rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(rs.next()) count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( valueCount, count );"
        },
        {
          "total_lines": 4,
          "line_start": 715,
          "line_end": 718,
          "content": "assertEquals( valueCount, count );<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;"
        },
        {
          "total_lines": 4,
          "line_start": 746,
          "line_end": 749,
          "content": "assertEquals( valueCount, count );<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;"
        },
        {
          "total_lines": 4,
          "line_start": 581,
          "line_end": 584,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getBoolean(\"b\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse(oldValue);"
        },
        {
          "total_lines": 4,
          "line_start": 722,
          "line_end": 725,
          "content": "rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(rs.next()) count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( valueCount, count );"
        },
        {
          "total_lines": 4,
          "line_start": 720,
          "line_end": 723,
          "content": "assertEquals( valueCount, count );<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;"
        },
        {
          "total_lines": 4,
          "line_start": 171,
          "line_end": 174,
          "content": "init();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet rs;"
        },
        {
          "total_lines": 4,
          "line_start": 751,
          "line_end": 754,
          "content": "assertEquals( valueCount, count );<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;"
        },
        {
          "total_lines": 4,
          "line_start": 717,
          "line_end": 720,
          "content": "rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(rs.next()) count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( valueCount, count );"
        },
        {
          "total_lines": 4,
          "line_start": 468,
          "line_end": 471,
          "content": "init();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet rs;"
        },
        {
          "total_lines": 4,
          "line_start": 188,
          "line_end": 191,
          "content": "String newValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( oldValue.compareTo( newValue ) < 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = newValue;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;"
        },
        {
          "total_lines": 4,
          "line_start": 520,
          "line_end": 523,
          "content": "init();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet rs;"
        },
        {
          "total_lines": 4,
          "line_start": 753,
          "line_end": 756,
          "content": "rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(rs.next()) count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( valueCount, count );"
        },
        {
          "total_lines": 4,
          "line_start": 494,
          "line_end": 497,
          "content": "init();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet rs;"
        },
        {
          "total_lines": 4,
          "line_start": 812,
          "line_end": 815,
          "content": "String newValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( oldValue.compareTo( newValue ) < 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = newValue;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;"
        },
        {
          "total_lines": 3,
          "line_start": 528,
          "line_end": 530,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Long)rs.getObject(\"bi\");"
        },
        {
          "total_lines": 3,
          "line_start": 199,
          "line_end": 201,
          "content": "init();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();"
        },
        {
          "total_lines": 3,
          "line_start": 124,
          "line_end": 126,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"c\");"
        },
        {
          "total_lines": 3,
          "line_start": 554,
          "line_end": 556,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Long)rs.getObject(\"bi_2\");"
        },
        {
          "total_lines": 3,
          "line_start": 162,
          "line_end": 164,
          "content": "assertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = newValue;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;"
        },
        {
          "total_lines": 3,
          "line_start": 423,
          "line_end": 425,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Integer)rs.getObject(\"i\");"
        },
        {
          "total_lines": 3,
          "line_start": 598,
          "line_end": 600,
          "content": "oldValue = rs.getBoolean(\"b\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse(rs.wasNull());<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;"
        },
        {
          "total_lines": 3,
          "line_start": 347,
          "line_end": 349,
          "content": "assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Integer)rs.getObject(\"i\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;"
        },
        {
          "total_lines": 3,
          "line_start": 586,
          "line_end": 588,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getBoolean(\"b\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse(oldValue);"
        },
        {
          "total_lines": 3,
          "line_start": 502,
          "line_end": 504,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Float)rs.getObject(\"r\");"
        },
        {
          "total_lines": 3,
          "line_start": 812,
          "line_end": 814,
          "content": "String newValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( oldValue.compareTo( newValue ) < 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = newValue;"
        },
        {
          "total_lines": 3,
          "line_start": 152,
          "line_end": 154,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"v\");"
        },
        {
          "total_lines": 3,
          "line_start": 179,
          "line_end": 181,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"v\");"
        },
        {
          "total_lines": 3,
          "line_start": 263,
          "line_end": 265,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"cc\");"
        },
        {
          "total_lines": 3,
          "line_start": 188,
          "line_end": 190,
          "content": "String newValue = rs.getString(\"v\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( oldValue.compareTo( newValue ) < 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = newValue;"
        },
        {
          "total_lines": 3,
          "line_start": 432,
          "line_end": 434,
          "content": "assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Integer)rs.getObject(\"i\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;"
        },
        {
          "total_lines": 3,
          "line_start": 338,
          "line_end": 340,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Integer)rs.getObject(\"i\");"
        },
        {
          "total_lines": 3,
          "line_start": 134,
          "line_end": 136,
          "content": "assertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = newValue;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;"
        },
        {
          "total_lines": 3,
          "line_start": 312,
          "line_end": 314,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"nv\");"
        },
        {
          "total_lines": 3,
          "line_start": 476,
          "line_end": 478,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Double)rs.getObject(\"d\");"
        },
        {
          "total_lines": 3,
          "line_start": 593,
          "line_end": 595,
          "content": "oldValue = rs.getBoolean(\"b\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse(rs.wasNull());<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;"
        },
        {
          "total_lines": 2,
          "line_start": 199,
          "line_end": 200,
          "content": "init();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection con = AllTests.getConnection();"
        },
        {
          "total_lines": 2,
          "line_start": 479,
          "line_end": 480,
          "content": "assertNull(oldValue);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 495,
          "line_end": 496,
          "content": "Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 558,
          "line_end": 559,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Long)rs.getObject(\"bi_2\");"
        },
        {
          "total_lines": 2,
          "line_start": 480,
          "line_end": 481,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Double)rs.getObject(\"d\");"
        },
        {
          "total_lines": 2,
          "line_start": 521,
          "line_end": 522,
          "content": "Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 532,
          "line_end": 533,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Long)rs.getObject(\"bi\");"
        },
        {
          "total_lines": 2,
          "line_start": 162,
          "line_end": 163,
          "content": "assertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = newValue;"
        },
        {
          "total_lines": 2,
          "line_start": 256,
          "line_end": 257,
          "content": "Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 593,
          "line_end": 594,
          "content": "oldValue = rs.getBoolean(\"b\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse(rs.wasNull());"
        },
        {
          "total_lines": 2,
          "line_start": 342,
          "line_end": 343,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Integer)rs.getObject(\"i\");"
        },
        {
          "total_lines": 2,
          "line_start": 722,
          "line_end": 723,
          "content": "rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;"
        },
        {
          "total_lines": 2,
          "line_start": 719,
          "line_end": 720,
          "content": "while(rs.next()) count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( valueCount, count );"
        },
        {
          "total_lines": 2,
          "line_start": 469,
          "line_end": 470,
          "content": "Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 505,
          "line_end": 506,
          "content": "assertNull(oldValue);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 200,
          "line_end": 201,
          "content": "Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 347,
          "line_end": 348,
          "content": "assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Integer)rs.getObject(\"i\");"
        },
        {
          "total_lines": 2,
          "line_start": 598,
          "line_end": 599,
          "content": "oldValue = rs.getBoolean(\"b\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse(rs.wasNull());"
        },
        {
          "total_lines": 2,
          "line_start": 753,
          "line_end": 754,
          "content": "rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;"
        },
        {
          "total_lines": 2,
          "line_start": 427,
          "line_end": 428,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Integer)rs.getObject(\"i\");"
        },
        {
          "total_lines": 2,
          "line_start": 156,
          "line_end": 157,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"v\");"
        },
        {
          "total_lines": 2,
          "line_start": 599,
          "line_end": 600,
          "content": "assertFalse(rs.wasNull());<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;"
        },
        {
          "total_lines": 2,
          "line_start": 748,
          "line_end": 749,
          "content": "rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;"
        },
        {
          "total_lines": 2,
          "line_start": 128,
          "line_end": 129,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"c\");"
        },
        {
          "total_lines": 2,
          "line_start": 717,
          "line_end": 718,
          "content": "rs.beforeFirst();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = -1;"
        },
        {
          "total_lines": 2,
          "line_start": 594,
          "line_end": 595,
          "content": "assertFalse(rs.wasNull());<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;"
        },
        {
          "total_lines": 2,
          "line_start": 182,
          "line_end": 183,
          "content": "assertNull(oldValue);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 630,
          "line_end": 631,
          "content": "Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 135,
          "line_end": 136,
          "content": "oldValue = newValue;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;"
        },
        {
          "total_lines": 2,
          "line_start": 724,
          "line_end": 725,
          "content": "while(rs.next()) count++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( valueCount, count );"
        },
        {
          "total_lines": 2,
          "line_start": 531,
          "line_end": 532,
          "content": "assertNull(oldValue);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 267,
          "line_end": 268,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"cc\");"
        },
        {
          "total_lines": 2,
          "line_start": 163,
          "line_end": 164,
          "content": "oldValue = newValue;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;"
        },
        {
          "total_lines": 2,
          "line_start": 456,
          "line_end": 457,
          "content": "assertTrue( oldValue.compareTo( newValue ) > 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;"
        },
        {
          "total_lines": 2,
          "line_start": 316,
          "line_end": 317,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"nv\");"
        },
        {
          "total_lines": 2,
          "line_start": 506,
          "line_end": 507,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Float)rs.getObject(\"r\");"
        },
        {
          "total_lines": 2,
          "line_start": 432,
          "line_end": 433,
          "content": "assertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = (Integer)rs.getObject(\"i\");"
        },
        {
          "total_lines": 2,
          "line_start": 134,
          "line_end": 135,
          "content": "assertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = newValue;"
        },
        {
          "total_lines": 2,
          "line_start": 183,
          "line_end": 184,
          "content": "assertTrue( rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldValue = rs.getString(\"v\");"
        },
        {
          "total_lines": 2,
          "line_start": 172,
          "line_end": 173,
          "content": "Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();"
        },
        {
          "total_lines": 1,
          "line_start": 732,
          "line_end": 732,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 701,
          "line_end": 701,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 763,
          "line_end": 763,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/SSConnection.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 363,
          "line_end": 363,
          "content": "String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability"
        },
        {
          "total_lines": 1,
          "line_start": 367,
          "line_end": 367,
          "content": "String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability"
        },
        {
          "total_lines": 1,
          "line_start": 297,
          "line_end": 297,
          "content": "String sql, int resultSetType, int resultSetConcurrency"
        },
        {
          "total_lines": 1,
          "line_start": 292,
          "line_end": 292,
          "content": "String sql, int resultSetType, int resultSetConcurrency"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionLCase.java",
      "loc_duplicate": 9,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 47,
          "line_end": 55,
          "content": "final boolean isNull() throws Exception {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return param1.isNull();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;final byte[] getBytes() throws Exception{<br/>        if(isNull()) return null;<br/>        return getString().getBytes();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestScrollable.java",
      "loc_duplicate": 173,
      "clones": [
          {
          "total_lines": 8,
          "line_start": 79,
          "line_end": 86,
          "content": "con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 0, \"Select * from Scrollable\");<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 1, \"Select * from Scrollable\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br/><br/>            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"
        },
        {
          "total_lines": 8,
          "line_start": 46,
          "line_end": 53,
          "content": "con.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 0, \"Select * from Scrollable\");<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 1, \"Select * from Scrollable\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"
        },
        {
          "total_lines": 5,
          "line_start": 249,
          "line_end": 253,
          "content": "assertEquals(0, rs.getRow());<br/>        assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertTrue(rs.isBeforeFirst());<br/>        assertFalse(rs.isAfterLast());"
        },
        {
          "total_lines": 5,
          "line_start": 263,
          "line_end": 267,
          "content": "assertEquals(0, rs.getRow());<br/>        assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertTrue(rs.isBeforeFirst());<br/>        assertFalse(rs.isAfterLast());"
        },
        {
          "total_lines": 5,
          "line_start": 237,
          "line_end": 241,
          "content": "assertEquals(0, rs.getRow());<br/>        assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertFalse(rs.isBeforeFirst());<br/>        assertTrue(rs.isAfterLast());"
        },
        {
          "total_lines": 5,
          "line_start": 256,
          "line_end": 260,
          "content": "assertEquals(0, rs.getRow());<br/>        assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertFalse(rs.isBeforeFirst());<br/>        assertTrue(rs.isAfterLast());"
        },
        {
          "total_lines": 5,
          "line_start": 82,
          "line_end": 86,
          "content": "con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 1, \"Select * from Scrollable\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br/><br/>            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"
        },
        {
          "total_lines": 5,
          "line_start": 49,
          "line_end": 53,
          "content": "con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 1, \"Select * from Scrollable\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"
        },
        {
          "total_lines": 4,
          "line_start": 237,
          "line_end": 240,
          "content": "assertEquals(0, rs.getRow());<br/>        assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertFalse(rs.isBeforeFirst());"
        },
        {
          "total_lines": 4,
          "line_start": 257,
          "line_end": 260,
          "content": "assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertFalse(rs.isBeforeFirst());<br/>        assertTrue(rs.isAfterLast());"
        },
        {
          "total_lines": 4,
          "line_start": 256,
          "line_end": 259,
          "content": "assertEquals(0, rs.getRow());<br/>        assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertFalse(rs.isBeforeFirst());"
        },
        {
          "total_lines": 4,
          "line_start": 225,
          "line_end": 228,
          "content": "assertEquals(\"qwert3\", rs.getString(\"v\"));<br/>        assertEquals(3, rs.getRow());<br/>        assertTrue(rs.isLast());<br/>        assertFalse(rs.isFirst());"
        },
        {
          "total_lines": 4,
          "line_start": 264,
          "line_end": 267,
          "content": "assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertTrue(rs.isBeforeFirst());<br/>        assertFalse(rs.isAfterLast());"
        },
        {
          "total_lines": 4,
          "line_start": 231,
          "line_end": 234,
          "content": "assertEquals(\"qwert3\", rs.getString(\"v\"));<br/>        assertEquals(3, rs.getRow());<br/>        assertTrue(rs.isLast());<br/>        assertFalse(rs.isFirst());"
        },
        {
          "total_lines": 4,
          "line_start": 249,
          "line_end": 252,
          "content": "assertEquals(0, rs.getRow());<br/>        assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertTrue(rs.isBeforeFirst());"
        },
        {
          "total_lines": 4,
          "line_start": 263,
          "line_end": 266,
          "content": "assertEquals(0, rs.getRow());<br/>        assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertTrue(rs.isBeforeFirst());"
        },
        {
          "total_lines": 4,
          "line_start": 83,
          "line_end": 86,
          "content": "assertRowCount( 1, \"Select * from Scrollable\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br/><br/>            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"
        },
        {
          "total_lines": 4,
          "line_start": 238,
          "line_end": 241,
          "content": "assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertFalse(rs.isBeforeFirst());<br/>        assertTrue(rs.isAfterLast());"
        },
        {
          "total_lines": 4,
          "line_start": 50,
          "line_end": 53,
          "content": "assertRowCount( 1, \"Select * from Scrollable\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"
        },
        {
          "total_lines": 4,
          "line_start": 250,
          "line_end": 253,
          "content": "assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertTrue(rs.isBeforeFirst());<br/>        assertFalse(rs.isAfterLast());"
        },
        {
          "total_lines": 3,
          "line_start": 244,
          "line_end": 246,
          "content": "assertEquals(3, rs.getRow());<br/>        assertTrue(rs.isLast());<br/>        assertFalse(rs.isFirst());"
        },
        {
          "total_lines": 3,
          "line_start": 51,
          "line_end": 53,
          "content": "assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"
        },
        {
          "total_lines": 3,
          "line_start": 226,
          "line_end": 228,
          "content": "assertEquals(3, rs.getRow());<br/>        assertTrue(rs.isLast());<br/>        assertFalse(rs.isFirst());"
        },
        {
          "total_lines": 3,
          "line_start": 232,
          "line_end": 234,
          "content": "assertEquals(3, rs.getRow());<br/>        assertTrue(rs.isLast());<br/>        assertFalse(rs.isFirst());"
        },
        {
          "total_lines": 3,
          "line_start": 84,
          "line_end": 86,
          "content": "assertRowCount( 0, \"Select * from Scrollable Where 1=0\");<br/><br/>            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);"
        },
        {
          "total_lines": 3,
          "line_start": 257,
          "line_end": 259,
          "content": "assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertFalse(rs.isBeforeFirst());"
        },
        {
          "total_lines": 3,
          "line_start": 238,
          "line_end": 240,
          "content": "assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertFalse(rs.isBeforeFirst());"
        },
        {
          "total_lines": 3,
          "line_start": 250,
          "line_end": 252,
          "content": "assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertTrue(rs.isBeforeFirst());"
        },
        {
          "total_lines": 3,
          "line_start": 264,
          "line_end": 266,
          "content": "assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());<br/>        assertTrue(rs.isBeforeFirst());"
        },
        {
          "total_lines": 2,
          "line_start": 245,
          "line_end": 246,
          "content": "assertTrue(rs.isLast());<br/>        assertFalse(rs.isFirst());"
        },
        {
          "total_lines": 2,
          "line_start": 259,
          "line_end": 260,
          "content": "assertFalse(rs.isBeforeFirst());<br/>        assertTrue(rs.isAfterLast());"
        },
        {
          "total_lines": 2,
          "line_start": 264,
          "line_end": 265,
          "content": "assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());"
        },
        {
          "total_lines": 2,
          "line_start": 174,
          "line_end": 175,
          "content": "rs.getString(\"v\");<br/>            fail(\"SQLException 'No current row' should be throw\");"
        },
        {
          "total_lines": 2,
          "line_start": 231,
          "line_end": 232,
          "content": "assertEquals(\"qwert3\", rs.getString(\"v\"));<br/>        assertEquals(3, rs.getRow());"
        },
        {
          "total_lines": 2,
          "line_start": 221,
          "line_end": 222,
          "content": "assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());"
        },
        {
          "total_lines": 2,
          "line_start": 133,
          "line_end": 134,
          "content": "assertFalse( \"isFirst\", rs.isFirst() );<br/>        assertTrue( rs.isBeforeFirst() );"
        },
        {
          "total_lines": 2,
          "line_start": 252,
          "line_end": 253,
          "content": "assertTrue(rs.isBeforeFirst());<br/>        assertFalse(rs.isAfterLast());"
        },
        {
          "total_lines": 2,
          "line_start": 250,
          "line_end": 251,
          "content": "assertFalse(rs.isLast());<br/>        assertFalse(rs.isFirst());"
        },
        {
          "total_lines": 2,
          "line_start": 219,
          "line_end": 220,
          "content": "assertEquals(\"qwert2\", rs.getString(\"v\"));<br/>        assertEquals(2, rs.getRow());"
        },
        {
          "total_lines": 2,
          "line_start": 130,
          "line_end": 131,
          "content": "assertFalse( \"isFirst\", rs.isFirst() );<br/>        assertTrue( rs.isBeforeFirst() );"
        },
        {
          "total_lines": 2,
          "line_start": 214,
          "line_end": 215,
          "content": "assertEquals(\"qwert1\", rs.getString(\"v\"));<br/>        assertEquals(1, rs.getRow());"
        },
        {
          "total_lines": 2,
          "line_start": 266,
          "line_end": 267,
          "content": "assertTrue(rs.isBeforeFirst());<br/>        assertFalse(rs.isAfterLast());"
        },
        {
          "total_lines": 2,
          "line_start": 227,
          "line_end": 228,
          "content": "assertTrue(rs.isLast());<br/>        assertFalse(rs.isFirst());"
        },
        {
          "total_lines": 2,
          "line_start": 240,
          "line_end": 241,
          "content": "assertFalse(rs.isBeforeFirst());<br/>        assertTrue(rs.isAfterLast());"
        },
        {
          "total_lines": 2,
          "line_start": 313,
          "line_end": 314,
          "content": "rs.beforeFirst();<br/>        assertRowCount( 3, rs );"
        },
        {
          "total_lines": 2,
          "line_start": 206,
          "line_end": 207,
          "content": "assertEquals(\"qwert2\", rs.getString(\"v\"));<br/>        assertEquals(2, rs.getRow());"
        },
        {
          "total_lines": 2,
          "line_start": 136,
          "line_end": 137,
          "content": "rs.getString(\"v\");<br/>            fail(\"SQLException 'No current row' should be throw\");"
        },
        {
          "total_lines": 2,
          "line_start": 210,
          "line_end": 211,
          "content": "assertEquals(\"qwert1\", rs.getString(\"v\"));<br/>        assertEquals(1, rs.getRow());"
        },
        {
          "total_lines": 2,
          "line_start": 68,
          "line_end": 69,
          "content": "rs.getString(\"v\");<br/>            fail(\"SQLException 'No current row' should be throw\");"
        },
        {
          "total_lines": 2,
          "line_start": 100,
          "line_end": 101,
          "content": "rs.getString(\"v\");<br/>            fail(\"SQLException 'No current row' should be throw\");"
        },
        {
          "total_lines": 2,
          "line_start": 225,
          "line_end": 226,
          "content": "assertEquals(\"qwert3\", rs.getString(\"v\"));<br/>        assertEquals(3, rs.getRow());"
        },
        {
          "total_lines": 2,
          "line_start": 233,
          "line_end": 234,
          "content": "assertTrue(rs.isLast());<br/>        assertFalse(rs.isFirst());"
        },
        {
          "total_lines": 2,
          "line_start": 300,
          "line_end": 301,
          "content": "rs.beforeFirst();<br/>        assertRowCount( 3, rs );"
        },
        {
          "total_lines": 1,
          "line_start": 275,
          "line_end": 275,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 154,
          "line_end": 154,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 192,
          "line_end": 192,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 118,
          "line_end": 118,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/Table.java",
      "loc_duplicate": 19,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 359,
          "line_end": 363,
          "content": "Iterator values = locks.values().iterator();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(values.hasNext()){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TableStorePage lock = (TableStorePage)values.next();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(lock.con != con) return null;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}"
        },
        {
          "total_lines": 5,
          "line_start": 389,
          "line_end": 393,
          "content": "Iterator values = locks.values().iterator();<br/>                        while(values.hasNext()){<br/>                            TableStorePage lock = (TableStorePage)values.next();<br/>                            if(lock.con != con) return null;<br/>                        }"
        },
        {
          "total_lines": 5,
          "line_start": 371,
          "line_end": 375,
          "content": "Iterator values = locks.values().iterator();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(values.hasNext()){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TableStorePage lock = (TableStorePage)values.next();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(lock.con != con) return null;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}"
        },
        {
          "total_lines": 1,
          "line_start": 320,
          "line_end": 320,
          "content": "int pageOperation, long page"
        },
        {
          "total_lines": 1,
          "line_start": 234,
          "line_end": 234,
          "content": "SSConnection con, long filePos, int pageOperation"
        },
        {
          "total_lines": 1,
          "line_start": 346,
          "line_end": 346,
          "content": "int pageOperation, long page"
        },
        {
          "total_lines": 1,
          "line_start": 269,
          "line_end": 269,
          "content": "SSConnection con, long filePos, int pageOperation"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/DataSources.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 49,
          "line_end": 51,
          "content": "if (idx >= size)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return data[idx];"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/SSStatement.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 271,
          "line_end": 275,
          "content": "if(failed == null){<br/>                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);<br/>                    failed.initCause(ex);<br/>                }<br/>                failed.setNextException(ex);"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/MemoryStream.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 35,
          "line_end": 37,
          "content": "import java.io.*;<br/>import java.nio.ByteBuffer;<br/>import java.nio.channels.FileChannel;"
        },
        {
          "total_lines": 2,
          "line_start": 36,
          "line_end": 37,
          "content": "import java.nio.ByteBuffer;<br/>import java.nio.channels.FileChannel;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionReturnInt.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 82,
          "line_end": 83,
          "content": "if(isNull()) return null;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Utils.getInteger(getInt());"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestThreads.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 61,
          "line_end": 62,
          "content": "Thread thread = (Thread)threadList.get(i);<br/>            thread.join(5000);"
        },
        {
          "total_lines": 2,
          "line_start": 108,
          "line_end": 109,
          "content": "Thread thread = (Thread)threadList.get(i);<br/>                thread.join(5000);"
        },
        {
          "total_lines": 2,
          "line_start": 162,
          "line_end": 163,
          "content": "Thread thread = (Thread)threadList.get(i);<br/>                thread.join(5000);"
        },
        {
          "total_lines": 1,
          "line_start": 117,
          "line_end": 117,
          "content": "new Integer(200), \"SELECT value FROM ConcurrentWrite\""
        },
        {
          "total_lines": 1,
          "line_start": 171,
          "line_end": 171,
          "content": "new Integer(200), \"SELECT value FROM ConcurrentWrite\""
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/StorePage.java",
      "loc_duplicate": 7,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 36,
          "line_end": 39,
          "content": "import java.io.*;<br/>import java.nio.ByteBuffer;<br/>import java.nio.channels.FileChannel;<br/>import java.sql.SQLException;"
        },
        {
          "total_lines": 3,
          "line_start": 37,
          "line_end": 39,
          "content": "import java.nio.ByteBuffer;<br/>import java.nio.channels.FileChannel;<br/>import java.sql.SQLException;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionArithmetic.java",
      "loc_duplicate": 20,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 603,
          "line_end": 605,
          "content": "case IN:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case EQUALS_NULL:<br/>                        case EQUALS:"
        },
        {
          "total_lines": 3,
          "line_start": 637,
          "line_end": 639,
          "content": "case IN:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case EQUALS_NULL:<br/>                        case EQUALS:"
        },
        {
          "total_lines": 2,
          "line_start": 309,
          "line_end": 310,
          "content": "if(isNull()) return 0;<br/>        int dataType = getDataType();"
        },
        {
          "total_lines": 2,
          "line_start": 604,
          "line_end": 605,
          "content": "case EQUALS_NULL:<br/>                        case EQUALS:"
        },
        {
          "total_lines": 2,
          "line_start": 603,
          "line_end": 604,
          "content": "case IN:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case EQUALS_NULL:"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.sql.*;<br/>import smallsql.database.language.Language;"
        },
        {
          "total_lines": 2,
          "line_start": 638,
          "line_end": 639,
          "content": "case EQUALS_NULL:<br/>                        case EQUALS:"
        },
        {
          "total_lines": 2,
          "line_start": 220,
          "line_end": 221,
          "content": "if(isNull()) return 0;<br/>        int dataType = getDataType();"
        },
        {
          "total_lines": 2,
          "line_start": 637,
          "line_end": 638,
          "content": "case IN:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case EQUALS_NULL:"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/TableViewResult.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 36,
          "line_end": 37,
          "content": "import java.sql.SQLException;<br/>import smallsql.database.language.Language;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ViewResult.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 61,
          "line_end": 61,
          "content": "SSConnection con, CommandSelect commandSelect"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestJoins.java",
      "loc_duplicate": 81,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 205,
          "line_end": 209,
          "content": "TestValue value = new TestValue();<br/>        value.dataType  = dataType;<br/>        value.small     = small;<br/>        value.large     = large;<br/>        return value;"
        },
        {
          "total_lines": 4,
          "line_start": 205,
          "line_end": 208,
          "content": "TestValue value = new TestValue();<br/>        value.dataType  = dataType;<br/>        value.small     = small;<br/>        value.large     = large;"
        },
        {
          "total_lines": 4,
          "line_start": 206,
          "line_end": 209,
          "content": "value.dataType  = dataType;<br/>        value.small     = small;<br/>        value.large     = large;<br/>        return value;"
        },
        {
          "total_lines": 3,
          "line_start": 135,
          "line_end": 137,
          "content": "pr.execute();<br/><br/>            pr.setObject( 1, testValue.large);"
        },
        {
          "total_lines": 3,
          "line_start": 147,
          "line_end": 149,
          "content": "pr.execute();<br/><br/>            pr.setObject( 1, testValue.small);"
        },
        {
          "total_lines": 3,
          "line_start": 207,
          "line_end": 209,
          "content": "value.small     = small;<br/>        value.large     = large;<br/>        return value;"
        },
        {
          "total_lines": 3,
          "line_start": 131,
          "line_end": 133,
          "content": "pr.execute();<br/><br/>            pr.setObject( 1, testValue.small);"
        },
        {
          "total_lines": 3,
          "line_start": 143,
          "line_end": 145,
          "content": "pr.execute();<br/><br/>            pr.setObject( 1, null);"
        },
        {
          "total_lines": 3,
          "line_start": 151,
          "line_end": 153,
          "content": "pr.execute();<br/><br/>            pr.setObject( 1, null);"
        },
        {
          "total_lines": 3,
          "line_start": 213,
          "line_end": 215,
          "content": "String dataType;<br/>        Object small;<br/>        Object large;"
        },
        {
          "total_lines": 3,
          "line_start": 139,
          "line_end": 141,
          "content": "pr.execute();<br/><br/>            pr.setObject( 1, testValue.large);"
        },
        {
          "total_lines": 2,
          "line_start": 134,
          "line_end": 135,
          "content": "pr.setObject( 2, testValue.small);<br/>            pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 92,
          "line_end": 93,
          "content": "super(testValue.dataType);<br/>        this.testValue = testValue;"
        },
        {
          "total_lines": 2,
          "line_start": 130,
          "line_end": 131,
          "content": "pr.setObject( 2, testValue.large);<br/>            pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 146,
          "line_end": 147,
          "content": "pr.setObject( 2, testValue.small);<br/>            pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 150,
          "line_end": 151,
          "content": "pr.setObject( 2, null);<br/>            pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 142,
          "line_end": 143,
          "content": "pr.setObject( 2, testValue.small);<br/>            pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 120,
          "line_end": 121,
          "content": "insertValues( pr );<br/>        pr.close();"
        },
        {
          "total_lines": 2,
          "line_start": 124,
          "line_end": 125,
          "content": "insertValues( pr );<br/>        pr.close();"
        },
        {
          "total_lines": 2,
          "line_start": 138,
          "line_end": 139,
          "content": "pr.setObject( 2, testValue.large);<br/>            pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 154,
          "line_end": 155,
          "content": "pr.setObject( 2, null);<br/>            pr.execute();"
        },
        {
          "total_lines": 1,
          "line_start": 71,
          "line_end": 71,
          "content": "\"text\"              , new String(\"abc\")"
        },
        {
          "total_lines": 1,
          "line_start": 61,
          "line_end": 61,
          "content": "new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")"
        },
        {
          "total_lines": 1,
          "line_start": 62,
          "line_end": 62,
          "content": "new BigDecimal(3.45),   new BigDecimal(4.56)"
        },
        {
          "total_lines": 1,
          "line_start": 80,
          "line_end": 80,
          "content": "\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}"
        },
        {
          "total_lines": 1,
          "line_start": 81,
          "line_end": 81,
          "content": "\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}"
        },
        {
          "total_lines": 1,
          "line_start": 65,
          "line_end": 65,
          "content": "\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")"
        },
        {
          "total_lines": 1,
          "line_start": 60,
          "line_end": 60,
          "content": "new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")"
        },
        {
          "total_lines": 1,
          "line_start": 64,
          "line_end": 64,
          "content": "\"varchar(100)\"      , new String(\"abc\"),      new String(\"qwert\")"
        },
        {
          "total_lines": 1,
          "line_start": 69,
          "line_end": 69,
          "content": "\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")"
        },
        {
          "total_lines": 1,
          "line_start": 72,
          "line_end": 72,
          "content": "\"ntext\"             , new String(\"abc\")"
        },
        {
          "total_lines": 1,
          "line_start": 78,
          "line_end": 78,
          "content": "\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}"
        },
        {
          "total_lines": 1,
          "line_start": 82,
          "line_end": 82,
          "content": "\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}"
        },
        {
          "total_lines": 1,
          "line_start": 76,
          "line_end": 76,
          "content": "new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)"
        },
        {
          "total_lines": 1,
          "line_start": 66,
          "line_end": 66,
          "content": "\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")"
        },
        {
          "total_lines": 1,
          "line_start": 77,
          "line_end": 77,
          "content": "\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)"
        },
        {
          "total_lines": 1,
          "line_start": 79,
          "line_end": 79,
          "content": "\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}"
        },
        {
          "total_lines": 1,
          "line_start": 204,
          "line_end": 204,
          "content": "String dataType, Object small, Object large"
        },
        {
          "total_lines": 1,
          "line_start": 63,
          "line_end": 63,
          "content": "new BigDecimal(3.45),   new BigDecimal(4.56)"
        },
        {
          "total_lines": 1,
          "line_start": 87,
          "line_end": 87,
          "content": "\"uniqueidentifier\"  , \"12345678-3445-3445-3445-1234567890ab\""
        },
        {
          "total_lines": 1,
          "line_start": 57,
          "line_end": 57,
          "content": "\"smallmoney\"        , new Float(3.45),        new Float(4.56)"
        },
        {
          "total_lines": 1,
          "line_start": 67,
          "line_end": 67,
          "content": "\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")"
        },
        {
          "total_lines": 1,
          "line_start": 75,
          "line_end": 75,
          "content": "\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)"
        },
        {
          "total_lines": 1,
          "line_start": 70,
          "line_end": 70,
          "content": "\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")"
        },
        {
          "total_lines": 1,
          "line_start": 68,
          "line_end": 68,
          "content": "\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/IndexScrollStatus.java",
      "loc_duplicate": 22,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 122,
          "line_end": 127,
          "content": "level++;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeStack.push(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new IndexNodeScrollStatus( &nbsp;&nbsp;&nbsp;&nbsp;(IndexNode)status.nodeValue, <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scroll, level));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;"
        },
        {
          "total_lines": 6,
          "line_start": 91,
          "line_end": 96,
          "content": "level++;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeStack.push(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new IndexNodeScrollStatus( &nbsp;&nbsp;&nbsp;&nbsp;(IndexNode)status.nodeValue, <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scroll, level));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;"
        },
        {
          "total_lines": 5,
          "line_start": 92,
          "line_end": 96,
          "content": "nodeStack.push(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new IndexNodeScrollStatus( &nbsp;&nbsp;&nbsp;&nbsp;(IndexNode)status.nodeValue, <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scroll, level));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;"
        },
        {
          "total_lines": 5,
          "line_start": 123,
          "line_end": 127,
          "content": "nodeStack.push(<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new IndexNodeScrollStatus( &nbsp;&nbsp;&nbsp;&nbsp;(IndexNode)status.nodeValue, <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scroll, level));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/CommandTable.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.sql.SQLException;<br/>import smallsql.database.language.Language;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/Utils.java",
      "loc_duplicate": 24,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 206,
          "line_end": 211,
          "content": "StringBuffer buf = new StringBuffer(bytes.length << 1);<br/>        for(int i=0; i<bytes.length; i++){<br/>            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );<br/>            buf.append( digits[ (bytes[i]     ) & 0x0F ] );<br/>        }<br/>        return buf.toString();"
        },
        {
          "total_lines": 5,
          "line_start": 207,
          "line_end": 211,
          "content": "for(int i=0; i<bytes.length; i++){<br/>            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );<br/>            buf.append( digits[ (bytes[i]     ) & 0x0F ] );<br/>        }<br/>        return buf.toString();"
        },
        {
          "total_lines": 4,
          "line_start": 163,
          "line_end": 166,
          "content": "for(int i=0; i<length; i++){<br/>            result = (result << 8) | (bytes[i] & 0xFF);<br/>        }<br/>        return result;"
        },
        {
          "total_lines": 4,
          "line_start": 318,
          "line_end": 321,
          "content": "try{<br/>            return Double.parseDouble( val ) != 0;<br/>        }catch(NumberFormatException e){/*ignore it if it not a number*/}<br/>        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );"
        },
        {
          "total_lines": 4,
          "line_start": 154,
          "line_end": 157,
          "content": "for(int i=0; i<length; i++){<br/>            result = (result << 8) | (bytes[i] & 0xFF);<br/>        }<br/>        return result;"
        },
        {
          "total_lines": 1,
          "line_start": 476,
          "line_end": 476,
          "content": "'2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C'"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/SSPreparedStatement.java",
      "loc_duplicate": 18,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 249,
          "line_end": 253,
          "content": "if(failed == null){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failed.initCause(ex);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failed.setNextException(ex);"
        },
        {
          "total_lines": 3,
          "line_start": 188,
          "line_end": 190,
          "content": "checkStatement();<br/>    &nbsp;&nbsp;&nbsp;&nbsp;//FIXME Scale to consider <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmd.setParamValue( parameterIndex, x, -1);"
        },
        {
          "total_lines": 2,
          "line_start": 201,
          "line_end": 202,
          "content": "checkStatement();<br/>        cmd.setParamValue( parameterIndex, x, -1);"
        },
        {
          "total_lines": 2,
          "line_start": 195,
          "line_end": 196,
          "content": "checkStatement();<br/>        cmd.setParamValue( parameterIndex, x, -1);"
        },
        {
          "total_lines": 1,
          "line_start": 146,
          "line_end": 146,
          "content": "parameterIndex, DateTime.valueOf(x)"
        },
        {
          "total_lines": 1,
          "line_start": 168,
          "line_end": 168,
          "content": "int parameterIndex, InputStream x, int length"
        },
        {
          "total_lines": 1,
          "line_start": 175,
          "line_end": 175,
          "content": "int parameterIndex, InputStream x, int length"
        },
        {
          "total_lines": 1,
          "line_start": 162,
          "line_end": 162,
          "content": "int parameterIndex, InputStream x, int length"
        },
        {
          "total_lines": 1,
          "line_start": 152,
          "line_end": 152,
          "content": "parameterIndex, DateTime.valueOf(x)"
        },
        {
          "total_lines": 1,
          "line_start": 52,
          "line_end": 52,
          "content": "int rsType, int rsConcurrency"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/Index.java",
      "loc_duplicate": 13,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 420,
          "line_end": 421,
          "content": "node.addRemainderKey( rowOffset, key, i );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;"
        },
        {
          "total_lines": 2,
          "line_start": 361,
          "line_end": 362,
          "content": "node.addRemainderKey( rowOffset, key, i );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;"
        },
        {
          "total_lines": 1,
          "line_start": 240,
          "line_end": 240,
          "content": "page, rowOffset"
        },
        {
          "total_lines": 1,
          "line_start": 123,
          "line_end": 123,
          "content": "boolean searchNullValues, ArrayList nodeList"
        },
        {
          "total_lines": 1,
          "line_start": 275,
          "line_end": 275,
          "content": "page, rowOffset"
        },
        {
          "total_lines": 1,
          "line_start": 283,
          "line_end": 283,
          "content": "page, rowOffset"
        },
        {
          "total_lines": 1,
          "line_start": 268,
          "line_end": 268,
          "content": "page, rowOffset"
        },
        {
          "total_lines": 1,
          "line_start": 264,
          "line_end": 264,
          "content": "page, rowOffset"
        },
        {
          "total_lines": 1,
          "line_start": 258,
          "line_end": 258,
          "content": "page, rowOffset"
        },
        {
          "total_lines": 1,
          "line_start": 96,
          "line_end": 96,
          "content": "boolean searchNullValues, ArrayList nodeList"
        },
        {
          "total_lines": 1,
          "line_start": 246,
          "line_end": 246,
          "content": "page, rowOffset"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/TableView.java",
      "loc_duplicate": 7,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 106,
          "line_end": 112,
          "content": "if(raFile != null)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raFile.close();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch(Exception e2){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DriverManager.println(e2.toString());<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw SmallSQLException.createFromException(e);"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/View.java",
      "loc_duplicate": 1,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 90,
          "line_end": 90,
          "content": "SSConnection con, CommandSelect commandSelect"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestDBMetaData.java",
      "loc_duplicate": 88,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 193,
          "line_end": 197,
          "content": "assertRSMetaData( rs, colNames, colTypes);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"No row\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"a\", rs.getObject(\"COLUMN_NAME\") ); <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"INT\", rs.getObject(\"TYPE_NAME\") ); <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"5\", rs.getObject(\"COLUMN_Def\") );"
        },
        {
          "total_lines": 5,
          "line_start": 184,
          "line_end": 188,
          "content": "assertRSMetaData( rs, colNames, colTypes);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"No row\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"a\", rs.getObject(\"COLUMN_NAME\") ); <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"INT\", rs.getObject(\"TYPE_NAME\") ); <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"5\", rs.getObject(\"COLUMN_Def\") );"
        },
        {
          "total_lines": 4,
          "line_start": 185,
          "line_end": 188,
          "content": "assertTrue( \"No row\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"a\", rs.getObject(\"COLUMN_NAME\") ); <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"INT\", rs.getObject(\"TYPE_NAME\") ); <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"5\", rs.getObject(\"COLUMN_Def\") );"
        },
        {
          "total_lines": 4,
          "line_start": 194,
          "line_end": 197,
          "content": "assertTrue( \"No row\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"a\", rs.getObject(\"COLUMN_NAME\") ); <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"INT\", rs.getObject(\"TYPE_NAME\") ); <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"5\", rs.getObject(\"COLUMN_Def\") );"
        },
        {
          "total_lines": 3,
          "line_start": 243,
          "line_end": 245,
          "content": "assertRSMetaData(rs, colNames, colTypes);<br/>        assertTrue(rs.next());<br/>        assertFalse(rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 195,
          "line_end": 197,
          "content": "assertEquals( \"a\", rs.getObject(\"COLUMN_NAME\") ); <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"INT\", rs.getObject(\"TYPE_NAME\") ); <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"5\", rs.getObject(\"COLUMN_Def\") );"
        },
        {
          "total_lines": 3,
          "line_start": 268,
          "line_end": 270,
          "content": "assertTrue(rs.next());<br/>        assertEquals(\"Columnname:\", \"id1\", rs.getString(\"COLUMN_NAME\"));<br/>        assertFalse(rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 248,
          "line_end": 250,
          "content": "assertRSMetaData(rs, colNames, colTypes);<br/>        assertTrue(rs.next());<br/>        assertFalse(rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 238,
          "line_end": 240,
          "content": "assertRSMetaData(rs, colNames, colTypes);<br/>        assertTrue(rs.next());<br/>        assertFalse(rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 186,
          "line_end": 188,
          "content": "assertEquals( \"a\", rs.getObject(\"COLUMN_NAME\") ); <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"INT\", rs.getObject(\"TYPE_NAME\") ); <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( \"5\", rs.getObject(\"COLUMN_Def\") );"
        },
        {
          "total_lines": 3,
          "line_start": 284,
          "line_end": 286,
          "content": "assertTrue(rs.next());<br/>        assertEquals(\"Columnname:\", \"id1\", rs.getString(\"COLUMN_NAME\"));<br/>        assertFalse(rs.next());"
        },
        {
          "total_lines": 3,
          "line_start": 276,
          "line_end": 278,
          "content": "assertTrue(rs.next());<br/>        assertEquals(\"Columnname:\", \"id1\", rs.getString(\"COLUMN_NAME\"));<br/>        assertFalse(rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 239,
          "line_end": 240,
          "content": "assertTrue(rs.next());<br/>        assertFalse(rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 193,
          "line_end": 194,
          "content": "assertRSMetaData( rs, colNames, colTypes);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"No row\", rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 184,
          "line_end": 185,
          "content": "assertRSMetaData( rs, colNames, colTypes);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"No row\", rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 252,
          "line_end": 253,
          "content": "dropTable(con,\"tblCross1\");<br/>        dropTable(con,\"tblCross2\");"
        },
        {
          "total_lines": 2,
          "line_start": 226,
          "line_end": 227,
          "content": "dropTable(con,\"tblCross1\");<br/>        dropTable(con,\"tblCross2\");"
        },
        {
          "total_lines": 2,
          "line_start": 244,
          "line_end": 245,
          "content": "assertTrue(rs.next());<br/>        assertFalse(rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 248,
          "line_end": 249,
          "content": "assertRSMetaData(rs, colNames, colTypes);<br/>        assertTrue(rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 249,
          "line_end": 250,
          "content": "assertTrue(rs.next());<br/>        assertFalse(rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 238,
          "line_end": 239,
          "content": "assertRSMetaData(rs, colNames, colTypes);<br/>        assertTrue(rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 243,
          "line_end": 244,
          "content": "assertRSMetaData(rs, colNames, colTypes);<br/>        assertTrue(rs.next());"
        },
        {
          "total_lines": 1,
          "line_start": 104,
          "line_end": 104,
          "content": "Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL"
        },
        {
          "total_lines": 1,
          "line_start": 183,
          "line_end": 183,
          "content": "Types.NULL, Types.INTEGER, Types.INTEGER"
        },
        {
          "total_lines": 1,
          "line_start": 235,
          "line_end": 235,
          "content": "Types.VARCHAR, Types.VARCHAR, Types.SMALLINT"
        },
        {
          "total_lines": 1,
          "line_start": 281,
          "line_end": 281,
          "content": "Types.VARCHAR, Types.NULL"
        },
        {
          "total_lines": 1,
          "line_start": 111,
          "line_end": 111,
          "content": "Types.VARCHAR, Types.NULL"
        },
        {
          "total_lines": 1,
          "line_start": 110,
          "line_end": 110,
          "content": "\"REMARKS\",\"TYPE_CAT\""
        },
        {
          "total_lines": 1,
          "line_start": 264,
          "line_end": 264,
          "content": "Types.VARCHAR, Types.INTEGER"
        },
        {
          "total_lines": 1,
          "line_start": 94,
          "line_end": 94,
          "content": "Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL"
        },
        {
          "total_lines": 1,
          "line_start": 235,
          "line_end": 235,
          "content": "Types.VARCHAR, Types.VARCHAR, Types.SMALLINT"
        },
        {
          "total_lines": 1,
          "line_start": 211,
          "line_end": 211,
          "content": "Types.VARCHAR, Types.SMALLINT"
        },
        {
          "total_lines": 1,
          "line_start": 94,
          "line_end": 94,
          "content": "Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL"
        },
        {
          "total_lines": 1,
          "line_start": 182,
          "line_end": 182,
          "content": "\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\""
        },
        {
          "total_lines": 1,
          "line_start": 93,
          "line_end": 93,
          "content": "\"\", \"\", \"REMARKS\""
        },
        {
          "total_lines": 1,
          "line_start": 296,
          "line_end": 296,
          "content": "\"TYPE_SCHEM\", \"TYPE_NAME\", \"CLASS_NAME\", \"DATA_TYPE\""
        },
        {
          "total_lines": 1,
          "line_start": 103,
          "line_end": 103,
          "content": "\"SCALE\", \"RADIX\", \"NULLABLE\", \"REMARKS\""
        },
        {
          "total_lines": 1,
          "line_start": 264,
          "line_end": 264,
          "content": "Types.VARCHAR, Types.INTEGER"
        },
        {
          "total_lines": 1,
          "line_start": 210,
          "line_end": 210,
          "content": "\"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\""
        },
        {
          "total_lines": 1,
          "line_start": 263,
          "line_end": 263,
          "content": "\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\""
        },
        {
          "total_lines": 1,
          "line_start": 234,
          "line_end": 234,
          "content": "\"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\""
        },
        {
          "total_lines": 1,
          "line_start": 272,
          "line_end": 272,
          "content": "\"KEY_SEQ\", \"PK_NAME\""
        },
        {
          "total_lines": 1,
          "line_start": 104,
          "line_end": 104,
          "content": "Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL"
        },
        {
          "total_lines": 1,
          "line_start": 280,
          "line_end": 280,
          "content": "\"INDEX_QUALIFIER\", \"INDEX_NAME\", \"TYPE\", \"ORDINAL_POSITION\", \"COLUMN_NAME\", \"ASC_OR_DESC\", \"CARDINALITY\""
        },
        {
          "total_lines": 1,
          "line_start": 281,
          "line_end": 281,
          "content": "Types.VARCHAR, Types.NULL"
        },
        {
          "total_lines": 1,
          "line_start": 211,
          "line_end": 211,
          "content": "Types.VARCHAR, Types.SMALLINT"
        },
        {
          "total_lines": 1,
          "line_start": 111,
          "line_end": 111,
          "content": "Types.VARCHAR, Types.NULL"
        },
        {
          "total_lines": 1,
          "line_start": 183,
          "line_end": 183,
          "content": "Types.NULL, Types.INTEGER, Types.INTEGER"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/SSResultSetMetaData.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 35,
          "line_end": 37,
          "content": "import java.sql.*;<br/><br/>import smallsql.database.language.Language;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/IndexNode.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.sql.*;<br/>import smallsql.database.language.Language;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestOperatoren.java",
      "loc_duplicate": 214,
      "clones": [
          {
          "total_lines": 10,
          "line_start": 209,
          "line_end": 218,
          "content": "pr.setObject( 1, testValue.small);<br/>        pr.setObject( 2, testValue.large);<br/>        rs = pr.executeQuery();<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertFalse( \"To many rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.close();"
        },
        {
          "total_lines": 10,
          "line_start": 230,
          "line_end": 239,
          "content": "pr.setObject( 1, testValue.small);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.setObject( 2, testValue.large);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs = pr.executeQuery();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( \"To many rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.close();"
        },
        {
          "total_lines": 8,
          "line_start": 230,
          "line_end": 237,
          "content": "pr.setObject( 1, testValue.small);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.setObject( 2, testValue.large);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs = pr.executeQuery();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next() );"
        },
        {
          "total_lines": 8,
          "line_start": 209,
          "line_end": 216,
          "content": "pr.setObject( 1, testValue.small);<br/>        pr.setObject( 2, testValue.large);<br/>        rs = pr.executeQuery();<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );"
        },
        {
          "total_lines": 7,
          "line_start": 221,
          "line_end": 227,
          "content": "pr.setObject( 1, testValue.small);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.setObject( 2, testValue.large);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs = pr.executeQuery();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( \"To many rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.close();"
        },
        {
          "total_lines": 7,
          "line_start": 242,
          "line_end": 248,
          "content": "pr.setObject( 1, testValue.small);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.setObject( 2, testValue.large);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs = pr.executeQuery();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next());<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next());<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( \"To many rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.close();"
        },
        {
          "total_lines": 5,
          "line_start": 165,
          "line_end": 169,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);<br/>        assertFalse( \"To many rows\", rs.next() );"
        },
        {
          "total_lines": 5,
          "line_start": 182,
          "line_end": 186,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertFalse( \"To many rows\", rs.next() );"
        },
        {
          "total_lines": 5,
          "line_start": 242,
          "line_end": 246,
          "content": "pr.setObject( 1, testValue.small);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.setObject( 2, testValue.large);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs = pr.executeQuery();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next());<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next());"
        },
        {
          "total_lines": 5,
          "line_start": 158,
          "line_end": 162,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);<br/>        assertFalse( \"To many rows\", rs.next() );"
        },
        {
          "total_lines": 5,
          "line_start": 268,
          "line_end": 272,
          "content": "TestValue value = new TestValue();<br/>        value.dataType  = dataType;<br/>        value.small     = small;<br/>        value.large     = large;<br/>        return value;"
        },
        {
          "total_lines": 5,
          "line_start": 221,
          "line_end": 225,
          "content": "pr.setObject( 1, testValue.small);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.setObject( 2, testValue.large);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rs = pr.executeQuery();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( \"To few rows\", rs.next() );"
        },
        {
          "total_lines": 4,
          "line_start": 97,
          "line_end": 100,
          "content": "Connection con = AllTests.getConnection();<br/>            Statement st = con.createStatement();<br/>            st.execute(\"drop table \" + table);<br/>            st.close();"
        },
        {
          "total_lines": 4,
          "line_start": 269,
          "line_end": 272,
          "content": "value.dataType  = dataType;<br/>        value.small     = small;<br/>        value.large     = large;<br/>        return value;"
        },
        {
          "total_lines": 4,
          "line_start": 165,
          "line_end": 168,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);"
        },
        {
          "total_lines": 4,
          "line_start": 268,
          "line_end": 271,
          "content": "TestValue value = new TestValue();<br/>        value.dataType  = dataType;<br/>        value.small     = small;<br/>        value.large     = large;"
        },
        {
          "total_lines": 4,
          "line_start": 158,
          "line_end": 161,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);"
        },
        {
          "total_lines": 4,
          "line_start": 176,
          "line_end": 179,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertFalse( \"To many rows\", rs.next() );"
        },
        {
          "total_lines": 4,
          "line_start": 198,
          "line_end": 201,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertFalse( \"To many rows\", rs.next() );"
        },
        {
          "total_lines": 4,
          "line_start": 182,
          "line_end": 185,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );"
        },
        {
          "total_lines": 3,
          "line_start": 276,
          "line_end": 278,
          "content": "String dataType;<br/>        Object small;<br/>        Object large;"
        },
        {
          "total_lines": 3,
          "line_start": 129,
          "line_end": 131,
          "content": "pr.execute();<br/><br/>            pr.setObject( 1, null);"
        },
        {
          "total_lines": 3,
          "line_start": 198,
          "line_end": 200,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );"
        },
        {
          "total_lines": 3,
          "line_start": 193,
          "line_end": 195,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertFalse( \"To many rows\", rs.next() );"
        },
        {
          "total_lines": 3,
          "line_start": 125,
          "line_end": 127,
          "content": "pr.execute();<br/><br/>            pr.setObject( 1, testValue.large);"
        },
        {
          "total_lines": 3,
          "line_start": 117,
          "line_end": 119,
          "content": "pr.execute();<br/><br/>            pr.setObject( 1, testValue.small);"
        },
        {
          "total_lines": 3,
          "line_start": 137,
          "line_end": 139,
          "content": "pr.execute();<br/><br/>            pr.setObject( 1, null);"
        },
        {
          "total_lines": 3,
          "line_start": 270,
          "line_end": 272,
          "content": "value.small     = small;<br/>        value.large     = large;<br/>        return value;"
        },
        {
          "total_lines": 3,
          "line_start": 121,
          "line_end": 123,
          "content": "pr.execute();<br/><br/>            pr.setObject( 1, testValue.large);"
        },
        {
          "total_lines": 3,
          "line_start": 133,
          "line_end": 135,
          "content": "pr.execute();<br/><br/>            pr.setObject( 1, testValue.small);"
        },
        {
          "total_lines": 3,
          "line_start": 204,
          "line_end": 206,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertFalse( \"To many rows\", rs.next() );"
        },
        {
          "total_lines": 3,
          "line_start": 176,
          "line_end": 178,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 98,
          "line_end": 99,
          "content": "Statement st = con.createStatement();<br/>            st.execute(\"drop table \" + table);"
        },
        {
          "total_lines": 2,
          "line_start": 168,
          "line_end": 169,
          "content": "assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);<br/>        assertFalse( \"To many rows\", rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 238,
          "line_end": 239,
          "content": "assertFalse( \"To many rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.close();"
        },
        {
          "total_lines": 2,
          "line_start": 161,
          "line_end": 162,
          "content": "assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);<br/>        assertFalse( \"To many rows\", rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 99,
          "line_end": 100,
          "content": "st.execute(\"drop table \" + table);<br/>            st.close();"
        },
        {
          "total_lines": 2,
          "line_start": 247,
          "line_end": 248,
          "content": "assertFalse( \"To many rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.close();"
        },
        {
          "total_lines": 2,
          "line_start": 97,
          "line_end": 98,
          "content": "Connection con = AllTests.getConnection();<br/>            Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 172,
          "line_end": 173,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertFalse( \"To many rows\", rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 120,
          "line_end": 121,
          "content": "pr.setObject( 2, testValue.small);<br/>            pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 132,
          "line_end": 133,
          "content": "pr.setObject( 2, testValue.small);<br/>            pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 204,
          "line_end": 205,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 140,
          "line_end": 141,
          "content": "pr.setObject( 2, null);<br/>            pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 124,
          "line_end": 125,
          "content": "pr.setObject( 2, testValue.large);<br/>            pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 116,
          "line_end": 117,
          "content": "pr.setObject( 2, testValue.large);<br/>            pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 136,
          "line_end": 137,
          "content": "pr.setObject( 2, null);<br/>            pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 217,
          "line_end": 218,
          "content": "assertFalse( \"To many rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.close();"
        },
        {
          "total_lines": 2,
          "line_start": 128,
          "line_end": 129,
          "content": "pr.setObject( 2, testValue.small);<br/>            pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 193,
          "line_end": 194,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertTrue( \"To few rows\", rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 226,
          "line_end": 227,
          "content": "assertFalse( \"To many rows\", rs.next() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.close();"
        },
        {
          "total_lines": 2,
          "line_start": 189,
          "line_end": 190,
          "content": "assertTrue( \"To few rows\", rs.next() );<br/>        assertFalse( \"To many rows\", rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 91,
          "line_end": 92,
          "content": "super(testValue.dataType);<br/>        this.testValue = testValue;"
        },
        {
          "total_lines": 1,
          "line_start": 61,
          "line_end": 61,
          "content": "\"varchar(100)\"      , new String(\"abc\"),      new String(\"qwert\")"
        },
        {
          "total_lines": 1,
          "line_start": 86,
          "line_end": 86,
          "content": "\"uniqueidentifier\"  , \"12345678-3445-3445-3445-1234567890ab\""
        },
        {
          "total_lines": 1,
          "line_start": 63,
          "line_end": 63,
          "content": "\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")"
        },
        {
          "total_lines": 1,
          "line_start": 65,
          "line_end": 65,
          "content": "\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")"
        },
        {
          "total_lines": 1,
          "line_start": 74,
          "line_end": 74,
          "content": "new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)"
        },
        {
          "total_lines": 1,
          "line_start": 79,
          "line_end": 79,
          "content": "\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}"
        },
        {
          "total_lines": 1,
          "line_start": 66,
          "line_end": 66,
          "content": "\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")"
        },
        {
          "total_lines": 1,
          "line_start": 67,
          "line_end": 67,
          "content": "\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")"
        },
        {
          "total_lines": 1,
          "line_start": 59,
          "line_end": 59,
          "content": "new BigDecimal(\"2.34\"), new BigDecimal(\"3.45\")"
        },
        {
          "total_lines": 1,
          "line_start": 54,
          "line_end": 54,
          "content": "\"smallmoney\"        , new Float(3.45),        new Float(4.56)"
        },
        {
          "total_lines": 1,
          "line_start": 68,
          "line_end": 68,
          "content": "\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")"
        },
        {
          "total_lines": 1,
          "line_start": 73,
          "line_end": 73,
          "content": "\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)"
        },
        {
          "total_lines": 1,
          "line_start": 81,
          "line_end": 81,
          "content": "\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}"
        },
        {
          "total_lines": 1,
          "line_start": 58,
          "line_end": 58,
          "content": "new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")"
        },
        {
          "total_lines": 1,
          "line_start": 75,
          "line_end": 75,
          "content": "\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)"
        },
        {
          "total_lines": 1,
          "line_start": 57,
          "line_end": 57,
          "content": "new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")"
        },
        {
          "total_lines": 1,
          "line_start": 70,
          "line_end": 70,
          "content": "\"ntext\"             , new String(\"abc\")"
        },
        {
          "total_lines": 1,
          "line_start": 64,
          "line_end": 64,
          "content": "\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")"
        },
        {
          "total_lines": 1,
          "line_start": 80,
          "line_end": 80,
          "content": "\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}"
        },
        {
          "total_lines": 1,
          "line_start": 69,
          "line_end": 69,
          "content": "\"text\"              , new String(\"abc\")"
        },
        {
          "total_lines": 1,
          "line_start": 267,
          "line_end": 267,
          "content": "String dataType, Object small, Object large"
        },
        {
          "total_lines": 1,
          "line_start": 60,
          "line_end": 60,
          "content": "new BigDecimal(\"2.34\"), new BigDecimal(\"3.45\")"
        },
        {
          "total_lines": 1,
          "line_start": 76,
          "line_end": 76,
          "content": "\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}"
        },
        {
          "total_lines": 1,
          "line_start": 77,
          "line_end": 77,
          "content": "\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionUCase.java",
      "loc_duplicate": 9,
      "clones": [
          {
          "total_lines": 9,
          "line_start": 47,
          "line_end": 55,
          "content": "final boolean isNull() throws Exception {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return param1.isNull();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;final byte[] getBytes() throws Exception{<br/>        if(isNull()) return null;<br/>        return getString().getBytes();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/MutableNumeric.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 593,
          "line_end": 593,
          "content": "100000, 1000000, 10000000"
        },
        {
          "total_lines": 1,
          "line_start": 592,
          "line_end": 592,
          "content": "100000, 1000000, 10000000"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/Scrollable.java",
      "loc_duplicate": 6,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 164,
          "line_end": 165,
          "content": "rowSource.setRowPosition( rowList.get(rowIdx) );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;"
        },
        {
          "total_lines": 2,
          "line_start": 93,
          "line_end": 94,
          "content": "rowSource.setRowPosition( rowList.get(rowIdx) );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;"
        },
        {
          "total_lines": 2,
          "line_start": 104,
          "line_end": 105,
          "content": "rowSource.setRowPosition( rowList.get(rowIdx) );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/RowSource.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.sql.*;<br/>import smallsql.database.language.Language;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/FileIndex.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 36,
          "line_end": 38,
          "content": "import java.io.*;<br/>import java.nio.ByteBuffer;<br/>import java.nio.channels.FileChannel;"
        },
        {
          "total_lines": 2,
          "line_start": 37,
          "line_end": 38,
          "content": "import java.nio.ByteBuffer;<br/>import java.nio.channels.FileChannel;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestStatement.java",
      "loc_duplicate": 88,
      "clones": [
          {
          "total_lines": 6,
          "line_start": 283,
          "line_end": 288,
          "content": "assertEquals(1,pr.executeUpdate());<br/>        rs = pr.getGeneratedKeys();<br/>        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br/>        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br/>        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br/>        assertRowCount(1,rs);"
        },
        {
          "total_lines": 6,
          "line_start": 268,
          "line_end": 273,
          "content": "assertEquals(1,pr.executeUpdate());<br/>        rs = pr.getGeneratedKeys();<br/>        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br/>        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br/>        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br/>        assertRowCount(1,rs);"
        },
        {
          "total_lines": 6,
          "line_start": 298,
          "line_end": 303,
          "content": "assertEquals(1,pr.executeUpdate());<br/>        rs = pr.getGeneratedKeys();<br/>        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br/>        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br/>        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br/>        assertRowCount(1,rs);"
        },
        {
          "total_lines": 5,
          "line_start": 276,
          "line_end": 280,
          "content": "pr.execute();<br/>        rs = pr.getGeneratedKeys();<br/>        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br/>        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br/>        assertRowCount(1,rs);"
        },
        {
          "total_lines": 5,
          "line_start": 291,
          "line_end": 295,
          "content": "pr.execute();<br/>        rs = pr.getGeneratedKeys();<br/>        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br/>        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br/>        assertRowCount(1,rs);"
        },
        {
          "total_lines": 5,
          "line_start": 235,
          "line_end": 239,
          "content": "rs = st.getGeneratedKeys();<br/>        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br/>        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br/>        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br/>        assertRowCount(1,rs);"
        },
        {
          "total_lines": 5,
          "line_start": 222,
          "line_end": 226,
          "content": "rs = st.getGeneratedKeys();<br/>        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br/>        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br/>        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br/>        assertRowCount(1,rs);"
        },
        {
          "total_lines": 5,
          "line_start": 209,
          "line_end": 213,
          "content": "rs = st.getGeneratedKeys();<br/>        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br/>        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br/>        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br/>        assertRowCount(1,rs);"
        },
        {
          "total_lines": 5,
          "line_start": 261,
          "line_end": 265,
          "content": "rs = pr.getGeneratedKeys();<br/>        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br/>        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br/>        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));<br/>        assertRowCount(1,rs);"
        },
        {
          "total_lines": 4,
          "line_start": 199,
          "line_end": 202,
          "content": "rs = st.getGeneratedKeys();<br/>        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br/>        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());<br/>        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));"
        },
        {
          "total_lines": 4,
          "line_start": 216,
          "line_end": 219,
          "content": "rs = st.getGeneratedKeys();<br/>        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br/>        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br/>        assertRowCount(1,rs);"
        },
        {
          "total_lines": 4,
          "line_start": 229,
          "line_end": 232,
          "content": "rs = st.getGeneratedKeys();<br/>        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);<br/>        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());<br/>        assertRowCount(1,rs);"
        },
        {
          "total_lines": 3,
          "line_start": 260,
          "line_end": 262,
          "content": "pr.execute();<br/>        rs = pr.getGeneratedKeys();<br/>        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);"
        },
        {
          "total_lines": 2,
          "line_start": 142,
          "line_end": 143,
          "content": "assertEquals( \"getResultSet()\", rs, st.getResultSet() );<br/>        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );"
        },
        {
          "total_lines": 2,
          "line_start": 155,
          "line_end": 156,
          "content": "assertNull( \"getResultSet()\", st.getResultSet() );<br/>        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );"
        },
        {
          "total_lines": 2,
          "line_start": 146,
          "line_end": 147,
          "content": "assertNull( \"getResultSet()\", st.getResultSet() );<br/>        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );"
        },
        {
          "total_lines": 2,
          "line_start": 128,
          "line_end": 129,
          "content": "assertEquals( \"getResultSet()\", rs, st.getResultSet() );<br/>        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );"
        },
        {
          "total_lines": 2,
          "line_start": 137,
          "line_end": 138,
          "content": "assertNull( \"getResultSet()\", st.getResultSet() );<br/>        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );"
        },
        {
          "total_lines": 1,
          "line_start": 297,
          "line_end": 297,
          "content": "\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"}"
        },
        {
          "total_lines": 1,
          "line_start": 259,
          "line_end": 259,
          "content": "\"Insert Into statement(c) Values('key2')\", Statement.RETURN_GENERATED_KEYS"
        },
        {
          "total_lines": 1,
          "line_start": 267,
          "line_end": 267,
          "content": "\"Insert Into statement(c) Values('key3')\", Statement.RETURN_GENERATED_KEYS"
        },
        {
          "total_lines": 1,
          "line_start": 215,
          "line_end": 215,
          "content": "\"Insert Into statement(c) Values('key4')\", new int[]{2,1}"
        },
        {
          "total_lines": 1,
          "line_start": 309,
          "line_end": 309,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 221,
          "line_end": 221,
          "content": "\"Insert Into statement(c) Values('key5')\", new int[]{2}"
        },
        {
          "total_lines": 1,
          "line_start": 282,
          "line_end": 282,
          "content": "\"Insert Into statement(c) Values('key5')\", new int[]{2}"
        },
        {
          "total_lines": 1,
          "line_start": 208,
          "line_end": 208,
          "content": "\"Insert Into statement(c) Values('key3')\", Statement.RETURN_GENERATED_KEYS"
        },
        {
          "total_lines": 1,
          "line_start": 247,
          "line_end": 247,
          "content": "\"Insert Into statement(c) Values('key1')\", Statement.NO_GENERATED_KEYS"
        },
        {
          "total_lines": 1,
          "line_start": 275,
          "line_end": 275,
          "content": "\"Insert Into statement(c) Values('key4')\", new int[]{2,1}"
        },
        {
          "total_lines": 1,
          "line_start": 234,
          "line_end": 234,
          "content": "\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"}"
        },
        {
          "total_lines": 1,
          "line_start": 228,
          "line_end": 228,
          "content": "\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"}"
        },
        {
          "total_lines": 1,
          "line_start": 290,
          "line_end": 290,
          "content": "\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"}"
        },
        {
          "total_lines": 1,
          "line_start": 188,
          "line_end": 188,
          "content": "\"Insert Into statement(c) Values('key1')\", Statement.NO_GENERATED_KEYS"
        },
        {
          "total_lines": 1,
          "line_start": 198,
          "line_end": 198,
          "content": "\"Insert Into statement(c) Values('key2')\", Statement.RETURN_GENERATED_KEYS"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestDataTypes.java",
      "loc_duplicate": 33,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 256,
          "line_end": 260,
          "content": "cal.close();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkValues( st, values, needTrim);<br/><br/>        <br/>        st.execute(\"Delete From \"+ table);"
        },
        {
          "total_lines": 4,
          "line_start": 205,
          "line_end": 208,
          "content": "cal.close();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkValues( st, values, needTrim);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;st.execute(\"Delete From \"+ table);"
        },
        {
          "total_lines": 4,
          "line_start": 70,
          "line_end": 73,
          "content": "Connection con = AllTests.getConnection();<br/>            Statement st = con.createStatement();<br/>            st.execute(\"drop table \" + table);<br/>            st.close();"
        },
        {
          "total_lines": 3,
          "line_start": 196,
          "line_end": 198,
          "content": "checkValues( st, values, needTrim);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;st.execute(\"Delete From \"+ table);"
        },
        {
          "total_lines": 2,
          "line_start": 72,
          "line_end": 73,
          "content": "st.execute(\"drop table \" + table);<br/>            st.close();"
        },
        {
          "total_lines": 2,
          "line_start": 70,
          "line_end": 71,
          "content": "Connection con = AllTests.getConnection();<br/>            Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 148,
          "line_end": 149,
          "content": "escape2 = \"'}\";<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;"
        },
        {
          "total_lines": 2,
          "line_start": 143,
          "line_end": 144,
          "content": "escape2 = \"'}\";<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 170,
          "line_end": 171,
          "content": "quote  = \"\\'\";<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 156,
          "line_end": 157,
          "content": "escape2 = \"'}\";<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;"
        },
        {
          "total_lines": 2,
          "line_start": 104,
          "line_end": 105,
          "content": "quote  = \"\\'\";<br/>                break;"
        },
        {
          "total_lines": 2,
          "line_start": 71,
          "line_end": 72,
          "content": "Statement st = con.createStatement();<br/>            st.execute(\"drop table \" + table);"
        },
        {
          "total_lines": 1,
          "line_start": 261,
          "line_end": 261,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionInsert.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 63,
          "line_end": 63,
          "content": "Language.INSERT_INVALID_LEN, new Integer(length)"
        },
        {
          "total_lines": 1,
          "line_start": 78,
          "line_end": 78,
          "content": "Language.INSERT_INVALID_LEN, new Integer(length)"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/SSCallableStatement.java",
      "loc_duplicate": 23,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 175,
          "line_end": 177,
          "content": "Expression expr = getValue(i);<br/>            wasNull = expr.isNull();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(wasNull) return null;"
        },
        {
          "total_lines": 3,
          "line_start": 119,
          "line_end": 121,
          "content": "Expression expr = getValue(i);<br/>            wasNull = expr.isNull();<br/>            return expr.getLong();"
        },
        {
          "total_lines": 3,
          "line_start": 165,
          "line_end": 167,
          "content": "Expression expr = getValue(i);<br/>            wasNull = expr.isNull();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(wasNull) return null;"
        },
        {
          "total_lines": 3,
          "line_start": 137,
          "line_end": 139,
          "content": "Expression expr = getValue(i);<br/>            wasNull = expr.isNull();<br/>            return expr.getLong();"
        },
        {
          "total_lines": 2,
          "line_start": 196,
          "line_end": 197,
          "content": "wasNull = obj == null;<br/>            return obj;"
        },
        {
          "total_lines": 2,
          "line_start": 87,
          "line_end": 88,
          "content": "wasNull = obj == null;<br/>            return obj;"
        },
        {
          "total_lines": 1,
          "line_start": 51,
          "line_end": 51,
          "content": "int rsType, int rsConcurrency"
        },
        {
          "total_lines": 1,
          "line_start": 306,
          "line_end": 306,
          "content": "InputStream x, int length"
        },
        {
          "total_lines": 1,
          "line_start": 334,
          "line_end": 334,
          "content": "findParameter( parameterName ), sqlType, typeName"
        },
        {
          "total_lines": 1,
          "line_start": 254,
          "line_end": 254,
          "content": "String parameterName, int sqlType, String typeName"
        },
        {
          "total_lines": 1,
          "line_start": 255,
          "line_end": 255,
          "content": "findParameter( parameterName ), sqlType, typeName"
        },
        {
          "total_lines": 1,
          "line_start": 309,
          "line_end": 309,
          "content": "InputStream x, int length"
        },
        {
          "total_lines": 1,
          "line_start": 333,
          "line_end": 333,
          "content": "String parameterName, int sqlType, String typeName"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestOther.java",
      "loc_duplicate": 65,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 116,
          "line_end": 119,
          "content": "assertFalse( rs.isBeforeFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isLast() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isAfterLast() );"
        },
        {
          "total_lines": 4,
          "line_start": 98,
          "line_end": 101,
          "content": "assertTrue( rs.isBeforeFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isLast() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isAfterLast() );"
        },
        {
          "total_lines": 4,
          "line_start": 104,
          "line_end": 107,
          "content": "assertFalse( rs.isBeforeFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isLast() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isAfterLast() );"
        },
        {
          "total_lines": 4,
          "line_start": 134,
          "line_end": 137,
          "content": "assertFalse( rs.isBeforeFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isLast() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isAfterLast() );"
        },
        {
          "total_lines": 4,
          "line_start": 122,
          "line_end": 125,
          "content": "assertTrue( rs.isBeforeFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isLast() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isAfterLast() );"
        },
        {
          "total_lines": 4,
          "line_start": 128,
          "line_end": 131,
          "content": "assertFalse( rs.isBeforeFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isLast() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isAfterLast() );"
        },
        {
          "total_lines": 3,
          "line_start": 128,
          "line_end": 130,
          "content": "assertFalse( rs.isBeforeFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isLast() );"
        },
        {
          "total_lines": 3,
          "line_start": 104,
          "line_end": 106,
          "content": "assertFalse( rs.isBeforeFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isLast() );"
        },
        {
          "total_lines": 3,
          "line_start": 116,
          "line_end": 118,
          "content": "assertFalse( rs.isBeforeFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isLast() );"
        },
        {
          "total_lines": 3,
          "line_start": 122,
          "line_end": 124,
          "content": "assertTrue( rs.isBeforeFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isLast() );"
        },
        {
          "total_lines": 3,
          "line_start": 98,
          "line_end": 100,
          "content": "assertTrue( rs.isBeforeFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isLast() );"
        },
        {
          "total_lines": 3,
          "line_start": 134,
          "line_end": 136,
          "content": "assertFalse( rs.isBeforeFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue( rs.isLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 314,
          "line_end": 315,
          "content": "assertEquals( AllTests.CATALOG, con.getCatalog() ); <br/>        con.close();"
        },
        {
          "total_lines": 2,
          "line_start": 324,
          "line_end": 325,
          "content": "assertEquals( AllTests.CATALOG, con.getCatalog() ); <br/>        con.close();"
        },
        {
          "total_lines": 2,
          "line_start": 71,
          "line_end": 72,
          "content": "con.createStatement().execute(\"Insert Into TestDistinct(v,b) Values('qwert1',true)\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Insert Into TestDistinct(v,b) Values('qwert2',true)\");"
        },
        {
          "total_lines": 2,
          "line_start": 200,
          "line_end": 201,
          "content": "Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 300,
          "line_end": 301,
          "content": "rs = st.executeQuery(\"Select * From Binary\");<br/>            rs.next();"
        },
        {
          "total_lines": 2,
          "line_start": 111,
          "line_end": 112,
          "content": "assertFalse( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 320,
          "line_end": 321,
          "content": "assertEquals( AllTests.CATALOG, con.getCatalog() ); <br/>        con.close();"
        },
        {
          "total_lines": 2,
          "line_start": 294,
          "line_end": 295,
          "content": "rs = st.executeQuery(\"Select * From Binary\");<br/>            rs.next();"
        },
        {
          "total_lines": 2,
          "line_start": 69,
          "line_end": 70,
          "content": "con.createStatement().execute(\"Insert Into TestDistinct(v,b) Values('qwert1',true)\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Insert Into TestDistinct(v,b) Values('qwert2',true)\");"
        },
        {
          "total_lines": 2,
          "line_start": 123,
          "line_end": 124,
          "content": "assertFalse( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isLast() );"
        },
        {
          "total_lines": 2,
          "line_start": 99,
          "line_end": 100,
          "content": "assertFalse( rs.isFirst() );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.isLast() );"
        },
        {
          "total_lines": 1,
          "line_start": 93,
          "line_end": 93,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/SQLTokenizer.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 174,
          "line_end": 175,
          "content": "tokens.add( new SQLToken( value, tokenStart, i) );<br/>                                   value = 0;"
        },
        {
          "total_lines": 2,
          "line_start": 113,
          "line_end": 114,
          "content": "tokens.add( new SQLToken( value, tokenStart, i) );<br/>&nbsp;&nbsp;&nbsp;&nbsp;                                value = 0;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/SSDatabaseMetaData.java",
      "loc_duplicate": 75,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 951,
          "line_end": 951,
          "content": "\"TYPE_SCHEM\", \"TYPE_NAME\", \"CLASS_NAME\", \"DATA_TYPE\""
        },
        {
          "total_lines": 1,
          "line_start": 863,
          "line_end": 863,
          "content": "null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 800,
          "line_end": 800,
          "content": "\"KEY_SEQ\", \"PK_NAME\""
        },
        {
          "total_lines": 1,
          "line_start": 831,
          "line_end": 831,
          "content": "\"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\""
        },
        {
          "total_lines": 1,
          "line_start": 856,
          "line_end": 856,
          "content": "null, null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null"
        },
        {
          "total_lines": 1,
          "line_start": 787,
          "line_end": 787,
          "content": "String catalog, String schema, String table"
        },
        {
          "total_lines": 1,
          "line_start": 874,
          "line_end": 874,
          "content": "st, Utils.createMemoryCommandSelect( con, colNames, data)"
        },
        {
          "total_lines": 1,
          "line_start": 814,
          "line_end": 814,
          "content": "String catalog, String schema, String table"
        },
        {
          "total_lines": 1,
          "line_start": 861,
          "line_end": 861,
          "content": "null, null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null"
        },
        {
          "total_lines": 1,
          "line_start": 852,
          "line_end": 852,
          "content": "null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 798,
          "line_end": 798,
          "content": "String catalog, String schema, String table"
        },
        {
          "total_lines": 1,
          "line_start": 846,
          "line_end": 846,
          "content": "null, null, null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE"
        },
        {
          "total_lines": 1,
          "line_start": 844,
          "line_end": 844,
          "content": "Utils.getInteger(0), Utils.getInteger(38),null, null"
        },
        {
          "total_lines": 1,
          "line_start": 753,
          "line_end": 753,
          "content": "\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\""
        },
        {
          "total_lines": 1,
          "line_start": 862,
          "line_end": 862,
          "content": "null, null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null"
        },
        {
          "total_lines": 1,
          "line_start": 834,
          "line_end": 834,
          "content": "null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 678,
          "line_end": 678,
          "content": "\"REMARKS\",\"TYPE_CAT\""
        },
        {
          "total_lines": 1,
          "line_start": 836,
          "line_end": 836,
          "content": "null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 848,
          "line_end": 848,
          "content": "null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 863,
          "line_end": 863,
          "content": "null, null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null"
        },
        {
          "total_lines": 1,
          "line_start": 823,
          "line_end": 823,
          "content": "st, Utils.createMemoryCommandSelect( con, colNames, data)"
        },
        {
          "total_lines": 1,
          "line_start": 851,
          "line_end": 851,
          "content": "null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 872,
          "line_end": 872,
          "content": "\"INDEX_QUALIFIER\", \"INDEX_NAME\", \"TYPE\", \"ORDINAL_POSITION\", \"COLUMN_NAME\", \"ASC_OR_DESC\", \"CARDINALITY\""
        },
        {
          "total_lines": 1,
          "line_start": 859,
          "line_end": 859,
          "content": "null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null"
        },
        {
          "total_lines": 1,
          "line_start": 855,
          "line_end": 855,
          "content": "null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 857,
          "line_end": 857,
          "content": "null, null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null"
        },
        {
          "total_lines": 1,
          "line_start": 850,
          "line_end": 850,
          "content": "null, null, null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE"
        },
        {
          "total_lines": 1,
          "line_start": 860,
          "line_end": 860,
          "content": "Boolean.FALSE, Utils.getShort(typeSearchable), null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Boolean.FALSE, Boolean.FALSE, null"
        },
        {
          "total_lines": 1,
          "line_start": 778,
          "line_end": 778,
          "content": "\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\""
        },
        {
          "total_lines": 1,
          "line_start": 733,
          "line_end": 733,
          "content": "st, Utils.createMemoryCommandSelect( con, colNames, data)"
        },
        {
          "total_lines": 1,
          "line_start": 791,
          "line_end": 791,
          "content": "st, Utils.createMemoryCommandSelect( con, colNames, data)"
        },
        {
          "total_lines": 1,
          "line_start": 671,
          "line_end": 671,
          "content": "\"SCALE\", \"RADIX\", \"NULLABLE\", \"REMARKS\""
        },
        {
          "total_lines": 1,
          "line_start": 862,
          "line_end": 862,
          "content": "null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 835,
          "line_end": 835,
          "content": "Utils.getInteger(0), null, null"
        },
        {
          "total_lines": 1,
          "line_start": 854,
          "line_end": 854,
          "content": "\"max length\", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utils.getShort(typeNullable)"
        },
        {
          "total_lines": 1,
          "line_start": 802,
          "line_end": 802,
          "content": "st, Utils.createMemoryCommandSelect( con, colNames, data)"
        },
        {
          "total_lines": 1,
          "line_start": 858,
          "line_end": 858,
          "content": "null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utils.getShort(typeNullable), Boolean.FALSE"
        },
        {
          "total_lines": 1,
          "line_start": 855,
          "line_end": 855,
          "content": "null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 840,
          "line_end": 840,
          "content": "null, null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null"
        },
        {
          "total_lines": 1,
          "line_start": 853,
          "line_end": 853,
          "content": "null, null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null"
        },
        {
          "total_lines": 1,
          "line_start": 849,
          "line_end": 849,
          "content": "null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 953,
          "line_end": 953,
          "content": "st, Utils.createMemoryCommandSelect( con, colNames, data)"
        },
        {
          "total_lines": 1,
          "line_start": 664,
          "line_end": 664,
          "content": "\"\", \"\", \"REMARKS\""
        },
        {
          "total_lines": 1,
          "line_start": 853,
          "line_end": 853,
          "content": "null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 839,
          "line_end": 839,
          "content": "\"length\", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Boolean.FALSE"
        },
        {
          "total_lines": 1,
          "line_start": 986,
          "line_end": 986,
          "content": "String catalog, String schemaPattern, String tableNamePattern"
        },
        {
          "total_lines": 1,
          "line_start": 847,
          "line_end": 847,
          "content": "null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 859,
          "line_end": 859,
          "content": "null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null"
        },
        {
          "total_lines": 1,
          "line_start": 845,
          "line_end": 845,
          "content": "Utils.getInteger(0), Utils.getInteger(38),null, null"
        },
        {
          "total_lines": 1,
          "line_start": 838,
          "line_end": 838,
          "content": "\"max length\", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utils.getShort(typeNullable)"
        },
        {
          "total_lines": 1,
          "line_start": 837,
          "line_end": 837,
          "content": "Boolean.FALSE, Utils.getShort(typeSearchable), null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Boolean.FALSE, Boolean.FALSE, null"
        },
        {
          "total_lines": 1,
          "line_start": 857,
          "line_end": 857,
          "content": "null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 851,
          "line_end": 851,
          "content": "null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 841,
          "line_end": 841,
          "content": "\"'\",  null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utils.getShort(typeNullable), Boolean.FALSE"
        },
        {
          "total_lines": 1,
          "line_start": 856,
          "line_end": 856,
          "content": "null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null"
        },
        {
          "total_lines": 1,
          "line_start": 848,
          "line_end": 848,
          "content": "null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 849,
          "line_end": 849,
          "content": "null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 833,
          "line_end": 833,
          "content": "\"'\",  null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utils.getShort(typeNullable), Boolean.FALSE"
        },
        {
          "total_lines": 1,
          "line_start": 843,
          "line_end": 843,
          "content": "\"length\", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Boolean.FALSE"
        },
        {
          "total_lines": 1,
          "line_start": 861,
          "line_end": 861,
          "content": "null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 755,
          "line_end": 755,
          "content": "st, Utils.createMemoryCommandSelect( con, colNames, data)"
        },
        {
          "total_lines": 1,
          "line_start": 769,
          "line_end": 769,
          "content": "String catalog, String schemaPattern, String tableNamePattern"
        },
        {
          "total_lines": 1,
          "line_start": 809,
          "line_end": 809,
          "content": "String catalog, String schema, String table"
        },
        {
          "total_lines": 1,
          "line_start": 747,
          "line_end": 747,
          "content": "st, Utils.createMemoryCommandSelect( con, colNames, data)"
        },
        {
          "total_lines": 1,
          "line_start": 821,
          "line_end": 821,
          "content": "\"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\""
        },
        {
          "total_lines": 1,
          "line_start": 740,
          "line_end": 740,
          "content": "st, Utils.createMemoryCommandSelect( con, colNames, data)"
        },
        {
          "total_lines": 1,
          "line_start": 780,
          "line_end": 780,
          "content": "st, Utils.createMemoryCommandSelect( con, colNames, data)"
        },
        {
          "total_lines": 1,
          "line_start": 842,
          "line_end": 842,
          "content": "Boolean.FALSE, Utils.getShort(typeSearchable), null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Boolean.FALSE, Boolean.FALSE, null"
        },
        {
          "total_lines": 1,
          "line_start": 789,
          "line_end": 789,
          "content": "\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\""
        },
        {
          "total_lines": 1,
          "line_start": 834,
          "line_end": 834,
          "content": "null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 666,
          "line_end": 666,
          "content": "st, Utils.createMemoryCommandSelect( con, colNames, data)"
        },
        {
          "total_lines": 1,
          "line_start": 866,
          "line_end": 866,
          "content": "st, Utils.createMemoryCommandSelect( con, colNames, data)"
        },
        {
          "total_lines": 1,
          "line_start": 840,
          "line_end": 840,
          "content": "null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 847,
          "line_end": 847,
          "content": "null, null, null"
        },
        {
          "total_lines": 1,
          "line_start": 673,
          "line_end": 673,
          "content": "st, Utils.createMemoryCommandSelect( con, colNames, data)"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/Join.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 211,
          "line_end": 211,
          "content": "rightEx, operation"
        },
        {
          "total_lines": 1,
          "line_start": 215,
          "line_end": 215,
          "content": "rightEx, operation"
        },
        {
          "total_lines": 1,
          "line_start": 52,
          "line_end": 52,
          "content": "RowSource left, RowSource right, Expression condition"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/IndexDescription.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 187,
          "line_end": 193,
          "content": "if(raFile != null)<br/>                try{<br/>                    raFile.close();<br/>                }catch(Exception e2){<br/>                    DriverManager.println(e2.toString());<br/>                }<br/>            throw SmallSQLException.createFromException(e);"
        },
        {
          "total_lines": 1,
          "line_start": 143,
          "line_end": 143,
          "content": "Database database, TableView tableView"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/FileIndexNode.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 83,
          "line_end": 83,
          "content": "SQLTokenizer.INSERT, fileOffset"
        },
        {
          "total_lines": 1,
          "line_start": 67,
          "line_end": 67,
          "content": "SQLTokenizer.INSERT, fileOffset"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/BenchTest.java",
      "loc_duplicate": 57,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 324,
          "line_end": 327,
          "content": "createTestDataWithClassicInsert( con );<br/>                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br/>                    rs.next();<br/>                    count = rs.getInt(1);"
        },
        {
          "total_lines": 4,
          "line_start": 293,
          "line_end": 296,
          "content": "// reset for the next test<br/>                Statement st = con.createStatement();<br/>                st.execute(\"DELETE FROM \" + tableName);<br/>                st.close();"
        },
        {
          "total_lines": 4,
          "line_start": 210,
          "line_end": 213,
          "content": "createTestDataWithClassicInsert( con );<br/>                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br/>                    rs.next();<br/>                    count = rs.getInt(1);"
        },
        {
          "total_lines": 3,
          "line_start": 325,
          "line_end": 327,
          "content": "rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br/>                    rs.next();<br/>                    count = rs.getInt(1);"
        },
        {
          "total_lines": 3,
          "line_start": 211,
          "line_end": 213,
          "content": "rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br/>                    rs.next();<br/>                    count = rs.getInt(1);"
        },
        {
          "total_lines": 3,
          "line_start": 727,
          "line_end": 729,
          "content": "Statement st = con.createStatement();<br/>            st.execute(\"DELETE FROM \" + tableName);<br/>            st.close();"
        },
        {
          "total_lines": 2,
          "line_start": 128,
          "line_end": 129,
          "content": "System.out.println();<br/>            System.out.println(\"===================================================================\");"
        },
        {
          "total_lines": 2,
          "line_start": 489,
          "line_end": 490,
          "content": "System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br/>                    return;"
        },
        {
          "total_lines": 2,
          "line_start": 638,
          "line_end": 639,
          "content": "System.out.println();<br/>            System.out.println(\"===================================================================\");"
        },
        {
          "total_lines": 2,
          "line_start": 679,
          "line_end": 680,
          "content": "System.out.println();<br/>            System.out.println(\"===================================================================\");"
        },
        {
          "total_lines": 2,
          "line_start": 436,
          "line_end": 437,
          "content": "System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br/>                    return;"
        },
        {
          "total_lines": 2,
          "line_start": 501,
          "line_end": 502,
          "content": "System.out.println();<br/>            System.out.println(\"===================================================================\");"
        },
        {
          "total_lines": 2,
          "line_start": 300,
          "line_end": 301,
          "content": "System.out.println();<br/>            System.out.println(\"===================================================================\");"
        },
        {
          "total_lines": 2,
          "line_start": 361,
          "line_end": 362,
          "content": "System.out.println();<br/>            System.out.println(\"===================================================================\");"
        },
        {
          "total_lines": 2,
          "line_start": 603,
          "line_end": 604,
          "content": "System.out.println();<br/>            System.out.println(\"===================================================================\");"
        },
        {
          "total_lines": 2,
          "line_start": 397,
          "line_end": 398,
          "content": "System.out.println();<br/>            System.out.println(\"===================================================================\");"
        },
        {
          "total_lines": 2,
          "line_start": 240,
          "line_end": 241,
          "content": "System.out.println();<br/>            System.out.println(\"===================================================================\");"
        },
        {
          "total_lines": 2,
          "line_start": 153,
          "line_end": 154,
          "content": "System.out.println();<br/>            System.out.println(\"===================================================================\");"
        },
        {
          "total_lines": 2,
          "line_start": 187,
          "line_end": 188,
          "content": "System.out.println();<br/>            System.out.println(\"===================================================================\");"
        },
        {
          "total_lines": 2,
          "line_start": 446,
          "line_end": 447,
          "content": "System.out.println();<br/>            System.out.println(\"===================================================================\");"
        },
        {
          "total_lines": 2,
          "line_start": 556,
          "line_end": 557,
          "content": "System.out.println();<br/>            System.out.println(\"===================================================================\");"
        },
        {
          "total_lines": 1,
          "line_start": 337,
          "line_end": 337,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY"
        },
        {
          "total_lines": 1,
          "line_start": 377,
          "line_end": 377,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 112,
          "line_end": 112,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 222,
          "line_end": 222,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 256,
          "line_end": 256,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 169,
          "line_end": 169,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestMoneyRounding.java",
      "loc_duplicate": 10,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 55,
          "line_end": 58,
          "content": "Connection con = AllTests.getConnection();<br/>            Statement st = con.createStatement();<br/>            st.execute(\"drop table \" + table);<br/>            st.close();"
        },
        {
          "total_lines": 2,
          "line_start": 55,
          "line_end": 56,
          "content": "Connection con = AllTests.getConnection();<br/>            Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 56,
          "line_end": 57,
          "content": "Statement st = con.createStatement();<br/>            st.execute(\"drop table \" + table);"
        },
        {
          "total_lines": 2,
          "line_start": 57,
          "line_end": 58,
          "content": "st.execute(\"drop table \" + table);<br/>            st.close();"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestDeleteUpdate.java",
      "loc_duplicate": 12,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 133,
          "line_end": 134,
          "content": "assertEqualsRsValue( \"13\", \"Select value1 from testUpdate Where id=3\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 10, \"Select * from testUpdate\");"
        },
        {
          "total_lines": 2,
          "line_start": 159,
          "line_end": 160,
          "content": "dropTable(con,\"testUpdate1\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dropTable(con,\"testUpdate2\");"
        },
        {
          "total_lines": 2,
          "line_start": 92,
          "line_end": 93,
          "content": "assertRowCount( 10, \"Select value from testUpdate\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( 1, updateCount);"
        },
        {
          "total_lines": 2,
          "line_start": 121,
          "line_end": 122,
          "content": "assertEqualsRsValue( \"13\", \"Select value1 from testUpdate Where id=3\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 10, \"Select * from testUpdate\");"
        },
        {
          "total_lines": 2,
          "line_start": 145,
          "line_end": 146,
          "content": "dropTable(con,\"testUpdate1\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dropTable(con,\"testUpdate2\");"
        },
        {
          "total_lines": 2,
          "line_start": 97,
          "line_end": 98,
          "content": "assertRowCount( 10, \"Select value from testUpdate\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals( 1, updateCount);"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionYear.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 49,
          "line_end": 50,
          "content": "if(param1.isNull()) return 0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DateTime.Details details = new DateTime.Details(param1.getLong());"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionSign.java",
      "loc_duplicate": 10,
      "clones": [
          {
          "total_lines": 5,
          "line_start": 67,
          "line_end": 71,
          "content": "if(longValue < 0)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(longValue > 0)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;"
        },
        {
          "total_lines": 5,
          "line_start": 60,
          "line_end": 64,
          "content": "if(longValue < 0)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(longValue > 0)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/Expressions.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 65,
          "line_end": 67,
          "content": "if (idx >= size)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new IndexOutOfBoundsException(\"Index: \"+idx+\", Size: \"+size);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return data[idx];"
        },
        {
          "total_lines": 2,
          "line_start": 132,
          "line_end": 133,
          "content": "System.arraycopy(data, 0, dataNew, 0, size);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = dataNew;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/GroupResult.java",
      "loc_duplicate": 24,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 90,
          "line_end": 93,
          "content": "int idx = internalExpressions.indexOf(expr);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(idx >= 0) return idx;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internalExpressions.add(expr);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return internalExpressions.size()-1;"
        },
        {
          "total_lines": 4,
          "line_start": 112,
          "line_end": 115,
          "content": "int idx = internalExpressions.indexOf(expr);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(idx >= 0) return idx;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internalExpressions.add(expr);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return internalExpressions.size()-1;"
        },
        {
          "total_lines": 3,
          "line_start": 90,
          "line_end": 92,
          "content": "int idx = internalExpressions.indexOf(expr);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(idx >= 0) return idx;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internalExpressions.add(expr);"
        },
        {
          "total_lines": 3,
          "line_start": 112,
          "line_end": 114,
          "content": "int idx = internalExpressions.indexOf(expr);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(idx >= 0) return idx;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internalExpressions.add(expr);"
        },
        {
          "total_lines": 2,
          "line_start": 91,
          "line_end": 92,
          "content": "if(idx >= 0) return idx;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internalExpressions.add(expr);"
        },
        {
          "total_lines": 2,
          "line_start": 112,
          "line_end": 113,
          "content": "int idx = internalExpressions.indexOf(expr);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(idx >= 0) return idx;"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.sql.*;<br/>import smallsql.database.language.Language;"
        },
        {
          "total_lines": 2,
          "line_start": 113,
          "line_end": 114,
          "content": "if(idx >= 0) return idx;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internalExpressions.add(expr);"
        },
        {
          "total_lines": 2,
          "line_start": 90,
          "line_end": 91,
          "content": "int idx = internalExpressions.indexOf(expr);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(idx >= 0) return idx;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestTransactions.java",
      "loc_duplicate": 85,
      "clones": [
          {
          "total_lines": 7,
          "line_start": 179,
          "line_end": 185,
          "content": "con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 2, \"Select * from transactions\");<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 4, \"Select * from transactions\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.rollback();"
        },
        {
          "total_lines": 7,
          "line_start": 148,
          "line_end": 154,
          "content": "con.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 2, \"Select * from transactions\");<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 4, \"Select * from transactions\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.rollback();"
        },
        {
          "total_lines": 4,
          "line_start": 99,
          "line_end": 102,
          "content": "try{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Drop Table transactions\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch(Throwable e){e.printStackTrace();}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.setAutoCommit(true);"
        },
        {
          "total_lines": 4,
          "line_start": 173,
          "line_end": 176,
          "content": "assertRowCount( 0, \"Select * from transactions\");<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 1, \"Select * from transactions\");"
        },
        {
          "total_lines": 4,
          "line_start": 143,
          "line_end": 146,
          "content": "assertRowCount( 0, \"Select * from transactions\");<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertRowCount( 1, \"Select * from transactions\");"
        },
        {
          "total_lines": 4,
          "line_start": 366,
          "line_end": 369,
          "content": "try{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Drop Table transactions\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch(Throwable e){e.printStackTrace();}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.setAutoCommit(true);"
        },
        {
          "total_lines": 4,
          "line_start": 130,
          "line_end": 133,
          "content": "try{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Drop Table transactions\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch(Throwable e){e.printStackTrace();}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.setAutoCommit(true);"
        },
        {
          "total_lines": 4,
          "line_start": 158,
          "line_end": 161,
          "content": "try{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Drop Table transactions\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch(Throwable e){e.printStackTrace();}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.setAutoCommit(true);"
        },
        {
          "total_lines": 4,
          "line_start": 189,
          "line_end": 192,
          "content": "try{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Drop Table transactions\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch(Throwable e){e.printStackTrace();}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.setAutoCommit(true);"
        },
        {
          "total_lines": 4,
          "line_start": 282,
          "line_end": 285,
          "content": "try{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.createStatement().execute(\"Drop Table transactions\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch(Throwable e){e.printStackTrace();}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con.setAutoCommit(true);"
        },
        {
          "total_lines": 3,
          "line_start": 420,
          "line_end": 422,
          "content": "dropTable(con1, \"transactions\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con1.setAutoCommit(true);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con2.close();"
        },
        {
          "total_lines": 3,
          "line_start": 442,
          "line_end": 444,
          "content": "dropTable(con1, \"transactions\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con1.setAutoCommit(true);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con2.close();"
        },
        {
          "total_lines": 2,
          "line_start": 267,
          "line_end": 268,
          "content": "assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br/>            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");"
        },
        {
          "total_lines": 2,
          "line_start": 478,
          "line_end": 479,
          "content": "dropTable(con1, \"transactions\");<br/>            con1.setAutoCommit(true);"
        },
        {
          "total_lines": 2,
          "line_start": 220,
          "line_end": 221,
          "content": "assertEquals(\"qwert2\", rs.getString(\"v\"));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 310,
          "line_end": 311,
          "content": "assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br/>            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");"
        },
        {
          "total_lines": 2,
          "line_start": 213,
          "line_end": 214,
          "content": "assertEquals(\"qwert2\", rs.getString(\"v\"));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertFalse( rs.next() );"
        },
        {
          "total_lines": 2,
          "line_start": 279,
          "line_end": 280,
          "content": "assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");"
        },
        {
          "total_lines": 2,
          "line_start": 330,
          "line_end": 331,
          "content": "assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br/>            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");"
        },
        {
          "total_lines": 1,
          "line_start": 262,
          "line_end": 262,
          "content": "1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\")"
        },
        {
          "total_lines": 1,
          "line_start": 386,
          "line_end": 386,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 301,
          "line_end": 301,
          "content": "new Integer(1), \"Select count(*) from transactions\""
        },
        {
          "total_lines": 1,
          "line_start": 317,
          "line_end": 317,
          "content": "new Integer(1), \"Select count(*) from transactions\""
        },
        {
          "total_lines": 1,
          "line_start": 204,
          "line_end": 204,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 354,
          "line_end": 354,
          "content": "ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE"
        },
        {
          "total_lines": 1,
          "line_start": 307,
          "line_end": 307,
          "content": "new Integer(1), \"Select count(*) from transactions\""
        },
        {
          "total_lines": 1,
          "line_start": 305,
          "line_end": 305,
          "content": "1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\")"
        },
        {
          "total_lines": 1,
          "line_start": 315,
          "line_end": 315,
          "content": "1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\")"
        },
        {
          "total_lines": 1,
          "line_start": 272,
          "line_end": 272,
          "content": "1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\")"
        },
        {
          "total_lines": 1,
          "line_start": 260,
          "line_end": 260,
          "content": "new Integer(1), \"Select count(*) from transactions\""
        },
        {
          "total_lines": 1,
          "line_start": 274,
          "line_end": 274,
          "content": "new Integer(1), \"Select count(*) from transactions\""
        },
        {
          "total_lines": 1,
          "line_start": 309,
          "line_end": 309,
          "content": "1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\")"
        },
        {
          "total_lines": 1,
          "line_start": 264,
          "line_end": 264,
          "content": "new Integer(1), \"Select count(*) from transactions\""
        },
        {
          "total_lines": 1,
          "line_start": 321,
          "line_end": 321,
          "content": "new Integer(1), \"Select count(*) from transactions\""
        },
        {
          "total_lines": 1,
          "line_start": 266,
          "line_end": 266,
          "content": "1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\")"
        },
        {
          "total_lines": 1,
          "line_start": 325,
          "line_end": 325,
          "content": "new Integer(1), \"Select count(*) from transactions\""
        },
        {
          "total_lines": 1,
          "line_start": 258,
          "line_end": 258,
          "content": "1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\")"
        },
        {
          "total_lines": 1,
          "line_start": 299,
          "line_end": 299,
          "content": "1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\")"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionFloor.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 47,
          "line_end": 49,
          "content": "Object obj = getObject();<br/>        if(obj == null) return null;<br/>        return obj.toString();"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionReturnFloat.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 77,
          "line_end": 79,
          "content": "Object obj = getObject();<br/>        if(obj == null) return null;<br/>        return obj.toString();"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/Columns.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 59,
          "line_end": 61,
          "content": "if (idx >= size)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return data[idx];"
        },
        {
          "total_lines": 2,
          "line_start": 158,
          "line_end": 159,
          "content": "System.arraycopy(data, 0, dataNew, 0, size);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = dataNew;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestGroupBy.java",
      "loc_duplicate": 19,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 351,
          "line_end": 353,
          "content": "init();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 75,
          "line_end": 76,
          "content": "pr.execute();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.setString( 1, STR_VALUE1);"
        },
        {
          "total_lines": 2,
          "line_start": 72,
          "line_end": 73,
          "content": "pr.execute();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.setString( 1, STR_VALUE1);"
        },
        {
          "total_lines": 2,
          "line_start": 352,
          "line_end": 353,
          "content": "Connection con = AllTests.getConnection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 351,
          "line_end": 352,
          "content": "init();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection con = AllTests.getConnection();"
        },
        {
          "total_lines": 2,
          "line_start": 146,
          "line_end": 147,
          "content": "ResultSet rs = pr.executeQuery( );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue  ( \"loop:\"+i, rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 80,
          "line_end": 81,
          "content": "pr.setInt( 2, 1 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.execute();"
        },
        {
          "total_lines": 2,
          "line_start": 173,
          "line_end": 174,
          "content": "ResultSet rs = pr.executeQuery( );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue  ( \"loop:\"+i, rs.next());"
        },
        {
          "total_lines": 2,
          "line_start": 71,
          "line_end": 72,
          "content": "pr.setInt( 2, 1 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pr.execute();"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestTokenizer.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 144,
          "line_end": 145,
          "content": "stat.executeQuery(sql);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fail(failureMessage);"
        },
        {
          "total_lines": 2,
          "line_start": 155,
          "line_end": 156,
          "content": "stat.executeQuery(sql);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fail(failureMessage);"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunction.java",
      "loc_duplicate": 6,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.sql.*;<br/>import smallsql.database.language.Language;"
        },
        {
          "total_lines": 2,
          "line_start": 119,
          "line_end": 120,
          "content": "SQLTokenizer.getKeyWord(dataType),<br/>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SQLTokenizer.getKeyWord(getFunction())"
        },
        {
          "total_lines": 2,
          "line_start": 107,
          "line_end": 108,
          "content": "SQLTokenizer.getKeyWord(dataType),<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SQLTokenizer.getKeyWord(getFunction())"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionRound.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 56,
          "line_end": 59,
          "content": "for(int i=0; i>places; i--){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factor *= 10;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value /= factor;"
        },
        {
          "total_lines": 4,
          "line_start": 51,
          "line_end": 54,
          "content": "for(int i=0; i<places; i++){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factor *= 10;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value *= factor;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionReturnString.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 67,
          "line_end": 68,
          "content": "if(isNull()) return 0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Float.parseFloat(getString().trim());"
        },
        {
          "total_lines": 2,
          "line_start": 79,
          "line_end": 80,
          "content": "if(isNull()) return 0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Money.parseMoney(getString().trim());"
        },
        {
          "total_lines": 2,
          "line_start": 73,
          "line_end": 74,
          "content": "if(isNull()) return 0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Double.parseDouble(getString().trim());"
        },
        {
          "total_lines": 2,
          "line_start": 85,
          "line_end": 86,
          "content": "if(isNull()) return null;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new MutableNumeric(getString().trim());"
        },
        {
          "total_lines": 2,
          "line_start": 49,
          "line_end": 50,
          "content": "if(isNull()) return false;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Utils.string2boolean(getString().trim());"
        },
        {
          "total_lines": 2,
          "line_start": 61,
          "line_end": 62,
          "content": "if(isNull()) return 0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Long.parseLong(getString().trim());"
        },
        {
          "total_lines": 2,
          "line_start": 55,
          "line_end": 56,
          "content": "if(isNull()) return 0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Integer.parseInt(getString().trim());"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestAlterTable.java",
      "loc_duplicate": 4,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 112,
          "line_end": 113,
          "content": "con.setTransactionIsolation(isolation);<br/>            con.setAutoCommit(true);"
        },
        {
          "total_lines": 2,
          "line_start": 89,
          "line_end": 90,
          "content": "con.setTransactionIsolation(isolation);<br/>            con.setAutoCommit(true);"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestLanguage.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 105,
          "line_end": 108,
          "content": "recreateTestTab(stat);<br/>&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fail();"
        },
        {
          "total_lines": 4,
          "line_start": 85,
          "line_end": 88,
          "content": "recreateTestTab(stat);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fail();"
        },
        {
          "total_lines": 2,
          "line_start": 256,
          "line_end": 257,
          "content": "msgBuf.append(itr.next());<br/>                    if (itr.hasNext()) msgBuf.append(',');"
        },
        {
          "total_lines": 2,
          "line_start": 242,
          "line_end": 243,
          "content": "msgBuf.append(itr.next());<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (itr.hasNext()) msgBuf.append(',');"
        },
        {
          "total_lines": 1,
          "line_start": 91,
          "line_end": 91,
          "content": "e, \"La tabella/vista '\" + TABLE_NAME + \"' Ã¨ giÃ  esistente.\""
        },
        {
          "total_lines": 1,
          "line_start": 111,
          "line_end": 111,
          "content": "e, \"La tabella/vista '\" + TABLE_NAME + \"' Ã¨ giÃ  esistente.\""
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestAlterTable2.java",
      "loc_duplicate": 6,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 42,
          "line_end": 43,
          "content": "Connection con = AllTests.getConnection();<br/>        Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 54,
          "line_end": 55,
          "content": "Connection con = AllTests.getConnection();<br/>        Statement st = con.createStatement();"
        },
        {
          "total_lines": 1,
          "line_start": 77,
          "line_end": 77,
          "content": "rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR}"
        },
        {
          "total_lines": 1,
          "line_start": 47,
          "line_end": 47,
          "content": "rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR}"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionSubstring.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 82,
          "line_end": 82,
          "content": "Language.SUBSTR_INVALID_LEN, new Integer(length)"
        },
        {
          "total_lines": 1,
          "line_start": 61,
          "line_end": 61,
          "content": "Language.SUBSTR_INVALID_LEN, new Integer(length)"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/StoreImpl.java",
      "loc_duplicate": 22,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 1460,
          "line_end": 1461,
          "content": "System.arraycopy( page, valueOffset, bytes, 0, bytes.length);<br/>                    return bytes;"
        },
        {
          "total_lines": 2,
          "line_start": 1418,
          "line_end": 1419,
          "content": "System.arraycopy( page, valueOffset, bytes, 0, bytes.length);<br/>                    return bytes;"
        },
        {
          "total_lines": 2,
          "line_start": 1431,
          "line_end": 1432,
          "content": "System.arraycopy( page, valueOffset, bytes, 0, bytes.length);<br/>                    return bytes;"
        },
        {
          "total_lines": 2,
          "line_start": 1422,
          "line_end": 1423,
          "content": "System.arraycopy( page, valueOffset, bytes, 0, bytes.length);<br/>                    return bytes;"
        },
        {
          "total_lines": 2,
          "line_start": 1439,
          "line_end": 1440,
          "content": "System.arraycopy( page, valueOffset, bytes, 0, bytes.length);<br/>                    return bytes;"
        },
        {
          "total_lines": 1,
          "line_start": 85,
          "line_end": 85,
          "content": "StorePage storePage, int type"
        },
        {
          "total_lines": 1,
          "line_start": 1395,
          "line_end": 1395,
          "content": "readSmallDateTime(), SQLTokenizer.TIMESTAMP"
        },
        {
          "total_lines": 1,
          "line_start": 565,
          "line_end": 565,
          "content": "((TableStorePage)storePage).con, lobFilePos, SQLTokenizer.SELECT"
        },
        {
          "total_lines": 1,
          "line_start": 598,
          "line_end": 598,
          "content": "((TableStorePage)storePage).con, lobFilePos, SQLTokenizer.SELECT"
        },
        {
          "total_lines": 1,
          "line_start": 767,
          "line_end": 767,
          "content": "expr.getString(), column.getDisplaySize()"
        },
        {
          "total_lines": 1,
          "line_start": 1328,
          "line_end": 1328,
          "content": "readSmallDateTime(), SQLTokenizer.TIMESTAMP"
        },
        {
          "total_lines": 1,
          "line_start": 1263,
          "line_end": 1263,
          "content": "Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" }"
        },
        {
          "total_lines": 1,
          "line_start": 763,
          "line_end": 763,
          "content": "expr.getString(), column.getDisplaySize()"
        },
        {
          "total_lines": 1,
          "line_start": 1002,
          "line_end": 1002,
          "content": "ois.readObject().toString(), SQLTokenizer.VARCHAR"
        },
        {
          "total_lines": 1,
          "line_start": 937,
          "line_end": 937,
          "content": "ois.readObject().toString(), SQLTokenizer.VARCHAR"
        },
        {
          "total_lines": 1,
          "line_start": 101,
          "line_end": 101,
          "content": "StorePage storePage, int type"
        },
        {
          "total_lines": 1,
          "line_start": 1145,
          "line_end": 1145,
          "content": "Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" }"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/Strings.java",
      "loc_duplicate": 5,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 57,
          "line_end": 59,
          "content": "if (idx >= size)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return data[idx];"
        },
        {
          "total_lines": 2,
          "line_start": 73,
          "line_end": 74,
          "content": "System.arraycopy(data, 0, dataNew, 0, size);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = dataNew;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/CommandCreateDatabase.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.io.*;<br/>import smallsql.database.language.Language;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionAbs.java",
      "loc_duplicate": 3,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 105,
          "line_end": 107,
          "content": "Object obj = getObject();<br/>        if(obj == null) return null;<br/>        return obj.toString();"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionHour.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 49,
          "line_end": 50,
          "content": "if(param1.isNull()) return 0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DateTime.Details details = new DateTime.Details(param1.getLong());"
        }
        
      ]
    },
    {
      "path": "src/smallsql/junit/TestFunctions.java",
      "loc_duplicate": 12,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 376,
          "line_end": 379,
          "content": "Connection con = AllTests.getConnection();<br/>            Statement st = con.createStatement();<br/>            st.execute(\"drop table \" + table);<br/>            st.close();"
        },
        {
          "total_lines": 2,
          "line_start": 376,
          "line_end": 377,
          "content": "Connection con = AllTests.getConnection();<br/>            Statement st = con.createStatement();"
        },
        {
          "total_lines": 2,
          "line_start": 377,
          "line_end": 378,
          "content": "Statement st = con.createStatement();<br/>            st.execute(\"drop table \" + table);"
        },
        {
          "total_lines": 2,
          "line_start": 378,
          "line_end": 379,
          "content": "st.execute(\"drop table \" + table);<br/>            st.close();"
        },
        {
          "total_lines": 1,
          "line_start": 176,
          "line_end": 176,
          "content": "0x12,0x34,0x56,0x78,(byte)0x90"
        },
        {
          "total_lines": 1,
          "line_start": 176,
          "line_end": 176,
          "content": "0x12,0x34,0x56,0x78,(byte)0x90"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/StoreNoCurrentRow.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.sql.*;<br/>import smallsql.database.language.Language;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionConvert.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 143,
          "line_end": 145,
          "content": "byte[] buffer = new byte[length];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buffer;"
        },
        {
          "total_lines": 3,
          "line_start": 154,
          "line_end": 156,
          "content": "byte[] buffer = new byte[length];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buffer;"
        },
        {
          "total_lines": 2,
          "line_start": 154,
          "line_end": 155,
          "content": "byte[] buffer = new byte[length];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );"
        },
        {
          "total_lines": 2,
          "line_start": 144,
          "line_end": 145,
          "content": "System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buffer;"
        },
        {
          "total_lines": 2,
          "line_start": 143,
          "line_end": 144,
          "content": "byte[] buffer = new byte[length];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );"
        },
        {
          "total_lines": 2,
          "line_start": 155,
          "line_end": 156,
          "content": "System.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buffer;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/CommandInsert.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 167,
          "line_end": 169,
          "content": "keyColumnNames.add(column.getName());<br/>                            keys.add(valueExpress.getObject());<br/>                            break;"
        },
        {
          "total_lines": 3,
          "line_start": 157,
          "line_end": 159,
          "content": "keyColumnNames.add(column.getName());<br/>                            keys.add(valueExpress.getObject());<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 168,
          "line_end": 169,
          "content": "keys.add(valueExpress.getObject());<br/>                            break;"
        },
        {
          "total_lines": 2,
          "line_start": 157,
          "line_end": 158,
          "content": "keyColumnNames.add(column.getName());<br/>                            keys.add(valueExpress.getObject());"
        },
        {
          "total_lines": 2,
          "line_start": 167,
          "line_end": 168,
          "content": "keyColumnNames.add(column.getName());<br/>                            keys.add(valueExpress.getObject());"
        },
        {
          "total_lines": 2,
          "line_start": 158,
          "line_end": 159,
          "content": "keys.add(valueExpress.getObject());<br/>                            break;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionTruncate.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 56,
          "line_end": 59,
          "content": "for(int i=0; i>places; i--){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factor *= 10;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value /= factor;"
        },
        {
          "total_lines": 4,
          "line_start": 51,
          "line_end": 54,
          "content": "for(int i=0; i<places; i++){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factor *= 10;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value *= factor;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/SSResultSet.java",
      "loc_duplicate": 26,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 182,
          "line_end": 184,
          "content": "Expression expr = getValue(columnIndex);<br/>            wasNull = expr.isNull();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(wasNull) return null;"
        },
        {
          "total_lines": 3,
          "line_start": 170,
          "line_end": 172,
          "content": "Expression expr = getValue(columnIndex);<br/>            wasNull = expr.isNull();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(wasNull) return null;"
        },
        {
          "total_lines": 3,
          "line_start": 763,
          "line_end": 765,
          "content": "Expression expr = getValue(columnIndex);<br/>            wasNull = expr.isNull();<br/>            if(wasNull) return null;"
        },
        {
          "total_lines": 3,
          "line_start": 783,
          "line_end": 785,
          "content": "Expression expr = getValue(columnIndex);<br/>            wasNull = expr.isNull();<br/>            if(wasNull) return null;"
        },
        {
          "total_lines": 2,
          "line_start": 764,
          "line_end": 765,
          "content": "wasNull = expr.isNull();<br/>            if(wasNull) return null;"
        },
        {
          "total_lines": 2,
          "line_start": 784,
          "line_end": 785,
          "content": "wasNull = expr.isNull();<br/>            if(wasNull) return null;"
        },
        {
          "total_lines": 2,
          "line_start": 183,
          "line_end": 184,
          "content": "wasNull = expr.isNull();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(wasNull) return null;"
        },
        {
          "total_lines": 2,
          "line_start": 171,
          "line_end": 172,
          "content": "wasNull = expr.isNull();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(wasNull) return null;"
        },
        {
          "total_lines": 2,
          "line_start": 821,
          "line_end": 822,
          "content": "wasNull = expr.isNull();<br/>            if(wasNull) return null;"
        },
        {
          "total_lines": 1,
          "line_start": 606,
          "line_end": 606,
          "content": "String columnName, InputStream x, int length"
        },
        {
          "total_lines": 1,
          "line_start": 530,
          "line_end": 530,
          "content": "columnIndex, DateTime.valueOf(x)"
        },
        {
          "total_lines": 1,
          "line_start": 603,
          "line_end": 603,
          "content": "String columnName, InputStream x, int length"
        },
        {
          "total_lines": 1,
          "line_start": 533,
          "line_end": 533,
          "content": "columnIndex, DateTime.valueOf(x)"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/JoinScroll.java",
      "loc_duplicate": 9,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 84,
          "line_end": 87,
          "content": "if(fullReturnCounter >= fullRowCount){<br/>                    return false; <br/>                }<br/>                right.next();"
        },
        {
          "total_lines": 4,
          "line_start": 165,
          "line_end": 168,
          "content": "if(fullReturnCounter >= fullRowCount){<br/>                       return false; <br/>                    }<br/>                    right.next();"
        },
        {
          "total_lines": 1,
          "line_start": 58,
          "line_end": 58,
          "content": "RowSource left, RowSource right, Expression condition"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/LongTreeList.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 334,
          "line_end": 335,
          "content": "listEnum.offsetStack[listEnum.stack] = offset;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;"
        },
        {
          "total_lines": 2,
          "line_start": 214,
          "line_end": 215,
          "content": "writePointer ( offset+pointerSize+2 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeShort( 0 );"
        },
        {
          "total_lines": 2,
          "line_start": 211,
          "line_end": 212,
          "content": "writePointer ( offset+pointerSize+2 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeShort( 0 );"
        },
        {
          "total_lines": 2,
          "line_start": 208,
          "line_end": 209,
          "content": "writePointer ( offset+pointerSize+2 );<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeShort( 0 );"
        },
        {
          "total_lines": 2,
          "line_start": 379,
          "line_end": 380,
          "content": "listEnum.offsetStack[listEnum.stack] = offset;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.sql.*;<br/>import smallsql.database.language.Language;"
        },
        {
          "total_lines": 1,
          "line_start": 502,
          "line_end": 502,
          "content": "data, oldOffset + 2+pointerSize"
        },
        {
          "total_lines": 1,
          "line_start": 457,
          "line_end": 457,
          "content": "data, oldOffset + 2+pointerSize"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java",
      "loc_duplicate": 14,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 69,
          "line_end": 70,
          "content": "if(isNull()) return 0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Double.parseDouble(getString().trim());"
        },
        {
          "total_lines": 2,
          "line_start": 57,
          "line_end": 58,
          "content": "if(isNull()) return 0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Long.parseLong(getString().trim());"
        },
        {
          "total_lines": 2,
          "line_start": 81,
          "line_end": 82,
          "content": "if(isNull()) return null;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new MutableNumeric(getString().trim());"
        },
        {
          "total_lines": 2,
          "line_start": 63,
          "line_end": 64,
          "content": "if(isNull()) return 0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Float.parseFloat(getString().trim());"
        },
        {
          "total_lines": 2,
          "line_start": 45,
          "line_end": 46,
          "content": "if(isNull()) return false;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Utils.string2boolean(getString().trim());"
        },
        {
          "total_lines": 2,
          "line_start": 75,
          "line_end": 76,
          "content": "if(isNull()) return 0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Money.parseMoney(getString().trim());"
        },
        {
          "total_lines": 2,
          "line_start": 51,
          "line_end": 52,
          "content": "if(isNull()) return 0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Integer.parseInt(getString().trim());"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/SQLParser.java",
      "loc_duplicate": 40,
      "clones": [
          {
          "total_lines": 4,
          "line_start": 1421,
          "line_end": 1424,
          "content": "token = nextToken(MISSING_INTERVALS);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextToken(MISSING_COMMA);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expr = expression( cmd, 0);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextToken(MISSING_COMMA);"
        },
        {
          "total_lines": 4,
          "line_start": 1429,
          "line_end": 1432,
          "content": "token = nextToken(MISSING_INTERVALS);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextToken(MISSING_COMMA);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expr = expression( cmd, 0);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextToken(MISSING_COMMA);"
        },
        {
          "total_lines": 3,
          "line_start": 1874,
          "line_end": 1876,
          "content": "token = nextToken(MISSING_OUTER_JOIN);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(token.value == SQLTokenizer.OUTER)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;token = nextToken(MISSING_JOIN);"
        },
        {
          "total_lines": 3,
          "line_start": 687,
          "line_end": 689,
          "content": "//col.setNullable(true); is already default<br/>                    nullableWasSet = true;<br/>                    break;"
        },
        {
          "total_lines": 3,
          "line_start": 1868,
          "line_end": 1870,
          "content": "token = nextToken(MISSING_OUTER_JOIN);<br/>                &nbsp;&nbsp;&nbsp;&nbsp;if(token.value == SQLTokenizer.OUTER)<br/>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;token = nextToken(MISSING_JOIN);"
        },
        {
          "total_lines": 3,
          "line_start": 1862,
          "line_end": 1864,
          "content": "token = nextToken(MISSING_OUTER_JOIN);<br/>                &nbsp;&nbsp;&nbsp;&nbsp;if(token.value == SQLTokenizer.OUTER)<br/>                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;token = nextToken(MISSING_JOIN);"
        },
        {
          "total_lines": 2,
          "line_start": 393,
          "line_end": 394,
          "content": "if(column == null) throw createSyntaxError( token, MISSING_EXPRESSION );<br/>                        column = null;"
        },
        {
          "total_lines": 2,
          "line_start": 397,
          "line_end": 398,
          "content": "if(column == null) throw createSyntaxError( token, MISSING_EXPRESSION );<br/>                        column = null;"
        },
        {
          "total_lines": 2,
          "line_start": 694,
          "line_end": 695,
          "content": "nullableWasSet = true;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 678,
          "line_end": 679,
          "content": "defaultWasSet = true;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 1426,
          "line_end": 1427,
          "content": "nextToken(MISSING_PARENTHESIS_R);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return expr;"
        },
        {
          "total_lines": 2,
          "line_start": 683,
          "line_end": 684,
          "content": "defaultWasSet = true;<br/>                    break;"
        },
        {
          "total_lines": 2,
          "line_start": 1434,
          "line_end": 1435,
          "content": "nextToken(MISSING_PARENTHESIS_R);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return expr;"
        },
        {
          "total_lines": 2,
          "line_start": 1933,
          "line_end": 1934,
          "content": "int maxRows = Integer.parseInt(token.getName(sql));<br/>            selCmd.setMaxRows(maxRows);"
        },
        {
          "total_lines": 2,
          "line_start": 353,
          "line_end": 354,
          "content": "int maxRows = Integer.parseInt(token.getName(sql));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selCmd.setMaxRows(maxRows);"
        },
        {
          "total_lines": 1,
          "line_start": 1936,
          "line_end": 1936,
          "content": "token, Language.STXADD_NOT_NUMBER, token.getName(sql)"
        },
        {
          "total_lines": 1,
          "line_start": 356,
          "line_end": 356,
          "content": "token, Language.STXADD_NOT_NUMBER, token.getName(sql)"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/ExpressionValue.java",
      "loc_duplicate": 8,
      "clones": [
          {
          "total_lines": 1,
          "line_start": 174,
          "line_end": 174,
          "content": "((MutableDouble)value).value, expr.getDouble()"
        },
        {
          "total_lines": 1,
          "line_start": 231,
          "line_end": 231,
          "content": "((MutableDouble)value).value, expr.getDouble()"
        },
        {
          "total_lines": 1,
          "line_start": 167,
          "line_end": 167,
          "content": "((MutableLong)value).value, expr.getLong()"
        },
        {
          "total_lines": 1,
          "line_start": 170,
          "line_end": 170,
          "content": "((MutableFloat)value).value, expr.getFloat()"
        },
        {
          "total_lines": 1,
          "line_start": 164,
          "line_end": 164,
          "content": "((MutableInteger)value).value, expr.getInt()"
        },
        {
          "total_lines": 1,
          "line_start": 224,
          "line_end": 224,
          "content": "((MutableLong)value).value, expr.getLong()"
        },
        {
          "total_lines": 1,
          "line_start": 221,
          "line_end": 221,
          "content": "((MutableInteger)value).value, expr.getInt()"
        },
        {
          "total_lines": 1,
          "line_start": 227,
          "line_end": 227,
          "content": "((MutableFloat)value).value, expr.getFloat()"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/CommandDrop.java",
      "loc_duplicate": 2,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.io.*;<br/>import smallsql.database.language.Language;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/Money.java",
      "loc_duplicate": 10,
      "clones": [
          {
          "total_lines": 3,
          "line_start": 68,
          "line_end": 70,
          "content": "Money money = new Money();<br/>        money.value = value;<br/>        return money;"
        },
        {
          "total_lines": 3,
          "line_start": 62,
          "line_end": 64,
          "content": "Money money = new Money();<br/>        money.value = value;<br/>        return money;"
        },
        {
          "total_lines": 2,
          "line_start": 63,
          "line_end": 64,
          "content": "money.value = value;<br/>        return money;"
        },
        {
          "total_lines": 2,
          "line_start": 69,
          "line_end": 70,
          "content": "money.value = value;<br/>        return money;"
        }
        
      ]
    },
    {
      "path": "src/smallsql/database/CommandSelect.java",
      "loc_duplicate": 11,
      "clones": [
          {
          "total_lines": 2,
          "line_start": 437,
          "line_end": 438,
          "content": "con.rollback(savepoint);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw SmallSQLException.createFromException(e);"
        },
        {
          "total_lines": 2,
          "line_start": 495,
          "line_end": 496,
          "content": "con.rollback(savepoint);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw SmallSQLException.createFromException(e);"
        },
        {
          "total_lines": 2,
          "line_start": 35,
          "line_end": 36,
          "content": "import java.sql.*;<br/>import smallsql.database.language.Language;"
        },
        {
          "total_lines": 2,
          "line_start": 479,
          "line_end": 480,
          "content": "con.rollback(savepoint);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw SmallSQLException.createFromException(e);"
        },
        {
          "total_lines": 1,
          "line_start": 55,
          "line_end": 55,
          "content": "Logger log, Expressions columnExpressions"
        },
        {
          "total_lines": 1,
          "line_start": 444,
          "line_end": 444,
          "content": "SSConnection con, Expression[] newRowSources"
        },
        {
          "total_lines": 1,
          "line_start": 403,
          "line_end": 403,
          "content": "SSConnection con, Expression[] newRowSources"
        }
        
      ]
    }
  ]
}